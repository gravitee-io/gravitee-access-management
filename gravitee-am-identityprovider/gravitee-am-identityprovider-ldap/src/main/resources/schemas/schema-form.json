{
  "type" : "object",
  "id" : "urn:jsonschema:io:gravitee:am:identityprovider:ldap:LdapIdentityProviderConfiguration",
  "properties" : {
    "contextSourceUrl" : {
      "type" : "string",
      "title": "LDAP URL",
      "description": "The URL of the LDAP server to use. The URL should be in the format ldap://myserver.example.com:389. For SSL access, use the ldaps protocol and the appropriate port, e.g. ldaps://myserver.example.com:636. If fail-over functionality is desired, more than one URL can be specified, separated using comma (,).",
      "default": "ldap://myserver.example.com:389"
    },
    "useStartTLS": {
      "type": "boolean",
      "title": "Use StartTLS ?"
    },
    "contextSourceBase" : {
      "type" : "string",
      "title": "Base DN",
      "description": "The base DN. When this attribute has been configured, all Distinguished Names supplied to and received from LDAP operations will be relative to the specified LDAP path."
    },
    "contextSourceUsername" : {
      "type" : "string",
      "title": "Username",
      "description": "The username (principal) to use when authenticating with the LDAP server. This will usually be the distinguished name of an admin user (e.g.cn=Administrator), but may differ depending on server and authentication method.",
      "sensitive": true
    },
    "contextSourcePassword" : {
      "type" : "string",
      "title": "Password",
      "description": "The password (credentials) to use when authenticating with the LDAP server.",
      "widget": "password",
      "sensitive": true
    },
    "userSearchFilter" : {
      "type" : "string",
      "title": "User search filter",
      "default": "uid={0}"
    },
    "userSearchBase" : {
      "type" : "string",
      "default": "ou=users",
      "title": "User search base",
      "description": "If user-search-base isn't supplied, the search will be performed from the root."
    },
    "fetchGroups": {
      "type": "boolean",
      "default": true,
      "title": "Fetch user groups ?"
    },
    "recursiveGroupFetch": {
      "type": "boolean",
      "default": false,
      "title": "Search nested groups ?"
    },
    "groupSearchBase" : {
      "type" : "string",
      "default": "ou=applications",
      "title": "Group search base"
    },
    "groupSearchFilter" : {
      "type" : "string",
      "default": "(uniqueMember={0})",
      "title": "Group search filter"
    },
    "groupRoleAttribute" : {
      "type" : "string",
      "default": "cn",
      "title": "Group role attribute"
    },
    "connectTimeout" : {
      "type" : "integer",
      "default": 5000,
      "minimum": 0,
      "title": "Connect timeout",
      "description": "Duration of time in milliseconds that connects will block. (default 5000 ms)"
    },
    "responseTimeout" : {
      "type" : "integer",
      "default": 5000,
      "minimum": 0,
      "title": "Response timeout",
      "description": "Duration of time in milliseconds to wait for responses. (default 5000 ms)"
    },
    "minPoolSize" : {
      "type" : "integer",
      "default": 5,
      "minimum": 0,
      "title": "Min pool size",
      "description": "Minimum pool of connections to be initialized"
    },
    "maxPoolSize" : {
      "type" : "integer",
      "default": 15,
      "minimum": 0,
      "title": "Max pool size",
      "description": "Maximum pool of connections can grow to"
    },
    "maxPoolRetries" : {
      "type" : "integer",
      "default": 3,
      "minimum": 0,
      "title": "Max retries on pool initialization",
      "description": "The maximum number of retries each pool initialization should attempt"
    },
    "passwordAlgorithm" : {
      "type" : "string",
      "title": "Password encoder algorithm",
      "description": "If your LDAP does not support Bind authentication or third party encode passwords before storing them in the server",
      "enum" : ["SHA", "SHA-1", "SHA-256", "SHA-384", "SHA-512", "MD5", "SHA-256+MD5"]
    },
    "passwordEncoding" : {
      "type": "string",
      "title": "Password binary-to-text encoding",
      "description": "This property will cause the encoded pass to be returned as encoding text representation",
      "enum" : ["Base64", "Hex"]
    },
    "hashEncodedByThirdParty" : {
      "type": "boolean",
      "title": "Are the passwords encrypted before storing them in the server ?"
    }
  },
  "required": [
    "contextSourceUrl",
    "contextSourceBase",
    "contextSourceUsername",
    "contextSourcePassword",
    "userSearchFilter"
  ]
}
