#
# Copyright (C) 2015 The Gravitee team (http://gravitee.io)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

openapi: 3.0.0
info:
  title: Gravitee.io - Access Management - UMA 2.0 API
  description: |
    Gravitee.io - Access Management - User Managed Access (UMA) 2.0 API
    Defines an extension OAuth 2.0 grant type to allow resource owner to
    manage fine grained permissions to their resources.
  version: 2.10.x
  contact:
    email: contact@graviteesource.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://auth.gravitee.io/{domain}/oauth
    variables:
      domain:
        default: unknown

paths:
  #Protection API - Resource registration
  "/uma/protection/resource_set":
    get:
      tags:
        - Protection API - Resource registration
      summary: List resource set belonging to current resource owner and client.
      responses:
        200:
          description: Ok
          content:
            "application/json":
              schema:
                type: array
                items:
                  type: string
                example:
                  - "9ca2a1d0-a310-4011-a0d2-eed7df99e1b6"
                  - "90344694-0479-4ad8-b338-020d840b2cd3"
                  - "027f039d-e213-4004-9f13-1eba0e25146f"
                  - "a972436a-2ab2-4f31-a435-beae54b84b74"
                  - "77256629-4ede-4083-a0a3-b4b94cf0949b"
                  - "1a1c5230-a5a3-4752-96ce-03e9f26cc37d"
        204:
          description: No content
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
    post:
      tags:
        - Protection API - Resource registration
      summary: Adds a new resource description to the authorization server.
      requestBody:
        $ref: "#/components/requestBodies/Resource"
      responses:
        201:
          description: Created
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Resource"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
  "/uma/protection/resource_set/{resource_id}":
    get:
      tags:
        - Protection API - Resource registration
      summary: Get resource description
      parameters:
        - in: path
          name: resource_id
          description: resource identifier
          required: true
          schema:
            type: string
          example: "9ca2a1d0-a310-4011-a0d2-eed7df99e1b6"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
    put:
      tags:
        - Protection API - Resource registration
      summary: Update resource description
      parameters:
        - in: path
          name: resource_id
          description: resource identifier
          required: true
          schema:
            type: string
          example: "9ca2a1d0-a310-4011-a0d2-eed7df99e1b6"
      requestBody:
        $ref: "#/components/requestBodies/Resource"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
    delete:
      tags:
        - Protection API - Resource registration
      summary: Delete resource description
      parameters:
        - in: path
          name: resource_id
          description: resource identifier
          required: true
          schema:
            type: string
          example: "9ca2a1d0-a310-4011-a0d2-eed7df99e1b6"
      responses:
        204:
          description: No content
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
  #Protection API - Access Policies
  "/uma/protection/resource_set/{resource_id}/policies":
    get:
      tags:
        - Protection API - Resource access policies
      summary: List resource's access policies
      parameters:
        - in: path
          name: resource_id
          description: resource identifier
          required: true
          schema:
            type: string
          example: "9ca2a1d0-a310-4011-a0d2-eed7df99e1b6"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccessPolicy"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
    post:
      tags:
        - Protection API - Resource access policies
      summary: Create access policy
      parameters:
        - in: path
          name: resource_id
          description: resource identifier
          required: true
          schema:
            type: string
          example: "9ca2a1d0-a310-4011-a0d2-eed7df99e1b6"
      requestBody:
        $ref: "#/components/requestBodies/AccessPolicy"
      responses:
        201:
          description: Created
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/AccessPolicy"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
  "/uma/protection/resource_set/{resource_id}/policies/{policy_id}":
    get:
      tags:
        - Protection API - Resource access policies
      summary: Get access policy description
      parameters:
        - in: path
          name: resource_id
          description: resource identifier
          required: true
          schema:
            type: string
          example: "9ca2a1d0-a310-4011-a0d2-eed7df99e1b6"
        - in: path
          name: policy_id
          description: access policy identifier
          required: true
          schema:
            type: string
          example: "8de2b2d0-a580-6017-b0d2-eed7df99e1b6"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessPolicy"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
    put:
      tags:
        - Protection API - Resource access policies
      summary: Update access policy
      parameters:
        - in: path
          name: resource_id
          description: resource identifier
          required: true
          schema:
            type: string
          example: "9ca2a1d0-a310-4011-a0d2-eed7df99e1b6"
        - in: path
          name: policy_id
          description: access policy identifier
          required: true
          schema:
            type: string
          example: "8de2b2d0-a580-6017-b0d2-eed7df99e1b6"
      requestBody:
        $ref: "#/components/requestBodies/AccessPolicy"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessPolicy"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
    delete:
      tags:
        - Protection API - Resource access policies
      summary: Delete access policy
      parameters:
        - in: path
          name: resource_id
          description: resource identifier
          required: true
          schema:
            type: string
          example: "9ca2a1d0-a310-4011-a0d2-eed7df99e1b6"
        - in: path
          name: policy_id
          description: access policy identifier
          required: true
          schema:
            type: string
          example: "8de2b2d0-a580-6017-b0d2-eed7df99e1b6"
      responses:
        204:
          description: No content
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
  #Protection API - Permissions
  "/uma/protection/permission":
    post:
      tags:
        - Protection API - Permission Request
      summary: Request permission to access to one or more registered resources.
      requestBody:
        $ref: "#/components/requestBodies/Permission"
      responses:
        201:
          description: Created
          content:
            "application/json":
              schema:
                type: object
                properties:
                  ticket:
                    type: string
                example:
                  ticket: "d2d04c4e-e7ff-4817-9820-198bf7c859dc"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

security:
  - PAT:
      - uma_protection

components:
  # security: scheme definition
  securitySchemes:
    PAT:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://${host}/${basePath}/oauth/authorize
          tokenUrl: https://${host}/${basePath}/oauth/token
          scopes:
            uma_protection: UMA Protection Api Token (PAT) scope
  # Request bodies definition
  requestBodies:
    # Request for resource registration
    Resource:
      description: |
        If the request is successful, the resource is thereby registered and the authorization server will respond with an HTTP 2xx status
        and include a Location header of the associated resource, as well as and an _id parameter into the response body.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Resource_body"
    # Request for resource access policies
    AccessPolicy:
      description: |
        If the request is successful, the access policy is thereby registered and the authorization server will respond with an HTTP 2xx status
        and include a Location header of the associated access policy.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AccessPolicy_body"
    Permission:
      description: |
        Request one or more permissions, _(resource identifiers and corresponding scopes)_ with the authorization server on the client's behalf.
        If the request is successful, the authorization server will respond with an HTTP 200 and include a permission ticket in return.
        This permission ticket will later be used to consume the oauth 2.0 token endpoint.
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/Permission_single_resource"
              - $ref: "#/components/schemas/Permission_multiple_resource"
  # Responses bodies definition
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/Oauth2Error"
    Forbidden:
      description: Forbidden
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/Oauth2Error"
    InvalidRequest:
      description: Invalid Request
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/Oauth2Error"
  # Other object format definition
  schemas:
    # Schema for error response body
    Oauth2Error:
      type: object
      properties:
        error:
          type: string
        error_description:
          type: string
        error_uri:
          type: string
      required:
        - error
    # Schema with body resource input fields
    Resource_body:
      type: object
      properties:
        resource_scopes:
          type: array
          items:
            type: string
        description:
          type: string
        icon_uri:
          type: string
        name:
          type: string
        type:
          type: string
      example:
        name: "2020 summer holidays album"
        type: "album"
        icon_uri: "https://resource_server.domain.com/icon/album"
        description: "Give access to Alice's album content"
        resource_scopes: ["view","edit","resize","print"]
    # Schema with body resource response fields
    Resource:
      type: object
      properties:
        _id:
          type: string
        user_access_policy_uri:
          type: string
      allOf:
        - $ref: "#/components/schemas/Resource_body"
      example:
        _id: "9ca2a1d0-a310-4011-a0d2-eed7df99e1b6"
        user_access_policy_uri: "https://authorization_server.domain.com/policies"
        name: "2020 summer holidays album"
        type: "album"
        icon_uri: "https://resource_server.domain.com/icon/album"
        description: "Give access to Alice's album content"
        resource_scopes: ["view","edit","resize","print"]
      required:
        - _id
    # Schema with body access policy input fields
    AccessPolicy_body:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: ["groovy"]
        condition:
          type: string
      example:
        name: "Resource access policy name"
        description: "Give access to Alice's album content"
        type: "groovy"
        condition: "{ \"script\": \"my script\" }"
    # Schema with body access response fields
    AccessPolicy:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: ["groovy"]
        condition:
          type: string
      allOf:
        - $ref: "#/components/schemas/AccessPolicy_body"
      example:
        id: "9ca2a1d0-a310-4011-a0d2-eed7df99e1b6"
        name: "Resource access policy name"
        description: "Give access to Alice's album content"
        type: "groovy"
        condition: "{ \"script\": \"my script\" }"
      required:
        - id
        - name
        - description
        - type
        - condition
    # Single resource permission request
    Permission_single_resource:
      type: object
      properties:
        resource_id:
          type: string
        resource_scopes:
          type: array
          items:
            type: string
      required:
        - resource_id
        - resource_scopes
      example:
        resource_id: "9ca2a1d0-a310-4011-a0d2-eed7df99e1b6"
        resource_scopes: ["view","edit","resize"]
    # Multiple resource permission request
    Permission_multiple_resource:
      type: array
      items:
        $ref: "#/components/schemas/Permission_single_resource"
      example:
        - resource_id: "9ca2a1d0-a310-4011-a0d2-eed7df99e1b6"
          resource_scopes:  ["view","edit","resize"]
        - resource_id: "90344694-0479-4ad8-b338-020d840b2cd3"
          resource_scopes:  ["upload","download"]
