/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import { IdentityProviderFromJSON, NewPasswordPolicy, NewPasswordPolicyToJSON, PasswordPolicy, PasswordPolicyFromJSON } from '../models';
import { UpdatePasswordPolicy, UpdatePasswordPolicyToJSON } from '../models/UpdatePasswordPolicy';

interface PasswordPolicyRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
}

export interface CreatePasswordPolicyRequest extends PasswordPolicyRequest {
  newPasswordPolicy: NewPasswordPolicy;
}

export interface UpdatePasswordPolicyRequest extends PasswordPolicyRequest {
  policy: string;
  updatePasswordPolicy: UpdatePasswordPolicy;
}

export interface SetPasswordPolicyDefault extends PasswordPolicyRequest {
  policy: string;
}

export interface DeletePasswordPolicy extends PasswordPolicyRequest {
  policy: string;
}

export interface GetPasswordPolicy extends PasswordPolicyRequest {
  policy: string;
}

export interface ListPasswordPoliciesRequest extends PasswordPolicyRequest {}

export interface ResetUserPassword extends PasswordPolicyRequest {
  user: string;
  password: string;
}

/**
 *
 */
export class PasswordPolicyApi extends runtime.BaseAPI {
  /**
   * User must have the DOMAIN_SETTINGS[UPDATE] permission on the specified domain or DOMAIN_SETTINGS[UPDATE] permission on the specified environment or DOMAIN_SETTINGS[UPDATE] permission on the specified organization
   * Create a password policy
   */
  async createPasswordPolicyRaw(
    requestParameters: CreatePasswordPolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<PasswordPolicy>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling createPasswordPolicy.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling createPasswordPolicy.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling createPasswordPolicy.',
      );
    }

    if (requestParameters.newPasswordPolicy === null || requestParameters.newPasswordPolicy === undefined) {
      throw new runtime.RequiredError(
        'newPasswordPolicy',
        'Required parameter requestParameters.newPasswordPolicy was null or undefined when calling createPasswordPolicy.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration?.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/password-policies`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewPasswordPolicyToJSON(requestParameters.newPasswordPolicy),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PasswordPolicyFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_SETTINGS[UPDATE] permission on the specified domain or DOMAIN_SETTINGS[UPDATE] permission on the specified environment or DOMAIN_SETTINGS[UPDATE] permission on the specified organization
   * Create a password policy
   */
  async createPasswordPolicy(
    requestParameters: CreatePasswordPolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<PasswordPolicy> {
    const response = await this.createPasswordPolicyRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_SETTINGS[UPDATE] permission on the specified domain or DOMAIN_SETTINGS[UPDATE] permission on the specified environment or DOMAIN_SETTINGS[UPDATE] permission on the specified organization
   * Update a password policy
   */
  async updatePasswordPolicyRaw(
    requestParameters: UpdatePasswordPolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<PasswordPolicy>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling updatePasswordPolicyRaw.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling updatePasswordPolicyRaw.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling updatePasswordPolicyRaw.',
      );
    }

    if (requestParameters.policy === null || requestParameters.policy === undefined) {
      throw new runtime.RequiredError(
        'policy',
        'Required parameter requestParameters.policy was null or undefined when calling updatePasswordPolicy.',
      );
    }

    if (requestParameters.updatePasswordPolicy === null || requestParameters.updatePasswordPolicy === undefined) {
      throw new runtime.RequiredError(
        'newPasswordPolicy',
        'Required parameter requestParameters.updatePasswordPolicy was null or undefined when calling updatePasswordPolicy.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration?.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/password-policies/{policy}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'policy'}}`, encodeURIComponent(String(requestParameters.policy))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdatePasswordPolicyToJSON(requestParameters.updatePasswordPolicy),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PasswordPolicyFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_SETTINGS[UPDATE] permission on the specified domain or DOMAIN_SETTINGS[UPDATE] permission on the specified environment or DOMAIN_SETTINGS[UPDATE] permission on the specified organization
   * Create a password policy
   */
  async updatePasswordPolicy(
    requestParameters: UpdatePasswordPolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<PasswordPolicy> {
    const response = await this.updatePasswordPolicyRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_SETTINGS[READ] permission on the specified domain or DOMAIN_SETTINGS[READ] permission on the specified environment or DOMAIN_SETTINGS[READ] permission on the specified organization.
   * List registered password policies for a security domain
   */
  async listPasswordPoliciesRaw(
    requestParameters: ListPasswordPoliciesRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Array<PasswordPolicy>>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling listPasswordPolicies.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling listPasswordPolicies.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling listPasswordPolicies.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration?.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/password-policies`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PasswordPolicyFromJSON));
  }

  /**
   * User must have the DOMAIN_SETTINGS[READ] permission on the specified domain or DOMAIN_SETTINGS[READ] permission on the specified environment or DOMAIN_SETTINGS[READ] permission on the specified organization.
   * List registered password policies for a security domain
   */
  async listPasswordPolicies(
    requestParameters: ListPasswordPoliciesRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Array<PasswordPolicy>> {
    const response = await this.listPasswordPoliciesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_SETTINGS[UPDATE] permission on the specified domain or DOMAIN_SETTINGS[UPDATE] permission on the specified environment or DOMAIN_SETTINGS[UPDATE] permission on the specified organization  * Delete password policy for a security domain
   */
  async deletePasswordPolicy(
    requestParameters: DeletePasswordPolicy,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.VoidApiResponse> {
    {
      if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
        throw new runtime.RequiredError(
          'organizationId',
          'Required parameter requestParameters.organizationId was null or undefined when calling deletePasswordPolicy.',
        );
      }

      if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
        throw new runtime.RequiredError(
          'environmentId',
          'Required parameter requestParameters.environmentId was null or undefined when calling deletePasswordPolicy.',
        );
      }

      if (requestParameters.domain === null || requestParameters.domain === undefined) {
        throw new runtime.RequiredError(
          'domain',
          'Required parameter requestParameters.domain was null or undefined when calling deletePasswordPolicy.',
        );
      }

      if (requestParameters.policy === null || requestParameters.policy === undefined) {
        throw new runtime.RequiredError(
          'policy',
          'Required parameter requestParameters.policy was null or undefined when calling deletePasswordPolicy.',
        );
      }

      const queryParameters: any = {};

      const headerParameters: runtime.HTTPHeaders = {};

      if (this.configuration?.apiKey) {
        headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
      }
      const response = await this.request(
        {
          path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/password-policies/{policy}`
            .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
            .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
            .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
            .replace(`{${'policy'}}`, encodeURIComponent(String(requestParameters.policy))),
          method: 'DELETE',
          headers: headerParameters,
          query: queryParameters,
        },
        initOverrides,
      );
      return new runtime.VoidApiResponse(response);
    }
  }

  /**
   * User must have the DOMAIN_SETTINGS[UPDATE] permission on the specified domain or DOMAIN_SETTINGS[UPDATE] permission on the specified environment or DOMAIN_SETTINGS[UPDATE] permission on the specified organization  * Delete password policy for a security domain
   */
  async setPasswordPolicyDefault(
    requestParameters: SetPasswordPolicyDefault,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.VoidApiResponse> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling setPasswordPolicyDefault.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling setPasswordPolicyDefault.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling setPasswordPolicyDefault.',
      );
    }

    if (requestParameters.policy === null || requestParameters.policy === undefined) {
      throw new runtime.RequiredError(
        'policy',
        'Required parameter requestParameters.policy was null or undefined when calling setPasswordPolicyDefault.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration?.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/password-policies/{policy}/default`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'policy'}}`, encodeURIComponent(String(requestParameters.policy))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the DOMAIN_SETTINGS[READ] permission on the specified domain or DOMAIN_SETTINGS[READ] permission on the specified environment or DOMAIN_SETTINGS[READ] permission on the specified organization.
   * Get registered password policies for a security domain
   */
  async getPasswordPoliciesRaw(
    requestParameters: GetPasswordPolicy,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<PasswordPolicy>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling getPasswordPolicies.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling getPasswordPolicies.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling getPasswordPolicies.',
      );
    }

    if (requestParameters.policy === null || requestParameters.policy === undefined) {
      throw new runtime.RequiredError(
        'policy',
        'Required parameter requestParameters.policy was null or undefined when calling getPasswordPolicies.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration?.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/password-policies/{policy}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'policy'}}`, encodeURIComponent(String(requestParameters.policy))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PasswordPolicyFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_SETTINGS[READ] permission on the specified domain or DOMAIN_SETTINGS[READ] permission on the specified environment or DOMAIN_SETTINGS[READ] permission on the specified organization.
   * Get registered password policies for a security domain
   */
  async getPasswordPolicies(
    requestParameters: GetPasswordPolicy,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<PasswordPolicy> {
    const response = await this.getPasswordPoliciesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  async resetUserPassword(
    requestParameters: ResetUserPassword,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling resetUserPassword.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling resetUserPassword.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling resetUserPassword.',
      );
    }

    if (requestParameters.user === null || requestParameters.user === undefined) {
      throw new runtime.RequiredError(
        'user',
        'Required parameter requestParameters.user was null or undefined when calling resetUserPassword.',
      );
    }

    if (requestParameters.password === null || requestParameters.password === undefined) {
      throw new runtime.RequiredError(
        'password',
        'Required parameter requestParameters.password was null or undefined when calling resetUserPassword.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration?.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/users/{user}/resetPassword`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'user'}}`, encodeURIComponent(String(requestParameters.user))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: {
          password: requestParameters.password,
        },
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }
}
