/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */

import * as runtime from '../runtime';
import {
  NewReporter,
  NewReporterFromJSON,
  NewReporterToJSON,
  Reporter,
  ReporterFromJSON,
  ReporterToJSON,
  UpdateReporter,
  UpdateReporterFromJSON,
  UpdateReporterToJSON,
} from '../models';

export interface Create6Request {
  organizationId: string;
  environmentId: string;
  domain: string;
  newReporter?: NewReporter;
}

export interface CreateOrgReporterRequest {
  organizationId: string;
  newReporter?: NewReporter;
}

export interface Delete6Request {
  organizationId: string;
  environmentId: string;
  domain: string;
  reporter: string;
}

export interface DeleteOrgReporterRequest {
  organizationId: string;
  reporterId: string;
}

export interface Get13Request {
  organizationId: string;
  environmentId: string;
  domain: string;
  reporter: string;
}

export interface Get33Request {
  reporter: string;
}

export interface GetOrgReporterRequest {
  organizationId: string;
  reporterId: string;
}

export interface GetOrgReportersRequest {
  organizationId: string;
}

export interface GetSchema8Request {
  reporter: string;
}

export interface List9Request {
  organizationId: string;
  environmentId: string;
  domain: string;
  userProvider?: boolean;
}

export interface Update6Request {
  organizationId: string;
  environmentId: string;
  domain: string;
  reporter: string;
  updateReporter: UpdateReporter;
}

export interface UpdateOrgReporterRequest {
  organizationId: string;
  reporterId: string;
  updateReporter: UpdateReporter;
}

/**
 *
 */
export class ReporterApi extends runtime.BaseAPI {
  /**
   * User must have the DOMAIN_REPORTER[CREATE] permission on the specified domain or DOMAIN_REPORTER[CREATE] permission on the specified environment or DOMAIN_REPORTER[CREATE] permission on the specified organization.
   * Create a reporter for a security domain
   */
  async create6Raw(
    requestParameters: Create6Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Reporter>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling create6.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling create6.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling create6.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/reporters`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewReporterToJSON(requestParameters.newReporter),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ReporterFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_REPORTER[CREATE] permission on the specified domain or DOMAIN_REPORTER[CREATE] permission on the specified environment or DOMAIN_REPORTER[CREATE] permission on the specified organization.
   * Create a reporter for a security domain
   */
  async create6(requestParameters: Create6Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Reporter> {
    const response = await this.create6Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_REPORTER[CREATE] permission on the specified organization
   * Create a reporter for an organization
   */
  async createOrgReporterRaw(
    requestParameters: CreateOrgReporterRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Reporter>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling createOrgReporter.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/reporters`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewReporterToJSON(requestParameters.newReporter),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ReporterFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_REPORTER[CREATE] permission on the specified organization
   * Create a reporter for an organization
   */
  async createOrgReporter(
    requestParameters: CreateOrgReporterRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Reporter> {
    const response = await this.createOrgReporterRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_REPORTER[DELETE] permission on the specified domain or DOMAIN_REPORTER[DELETE] permission on the specified environment or DOMAIN_REPORTER[DELETE] permission on the specified organization
   * Delete a reporter
   */
  async delete6Raw(
    requestParameters: Delete6Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling delete6.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling delete6.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling delete6.');
    }

    if (requestParameters.reporter === null || requestParameters.reporter === undefined) {
      throw new runtime.RequiredError(
        'reporter',
        'Required parameter requestParameters.reporter was null or undefined when calling delete6.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/reporters/{reporter}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'reporter'}}`, encodeURIComponent(String(requestParameters.reporter))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the DOMAIN_REPORTER[DELETE] permission on the specified domain or DOMAIN_REPORTER[DELETE] permission on the specified environment or DOMAIN_REPORTER[DELETE] permission on the specified organization
   * Delete a reporter
   */
  async delete6(requestParameters: Delete6Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.delete6Raw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_REPORTER[DELETE] permission on the specified organization
   * Delete a reporter
   */
  async deleteOrgReporterRaw(
    requestParameters: DeleteOrgReporterRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling deleteOrgReporter.',
      );
    }

    if (requestParameters.reporterId === null || requestParameters.reporterId === undefined) {
      throw new runtime.RequiredError(
        'reporterId',
        'Required parameter requestParameters.reporterId was null or undefined when calling deleteOrgReporter.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/reporters/{reporterId}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'reporterId'}}`, encodeURIComponent(String(requestParameters.reporterId))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_REPORTER[DELETE] permission on the specified organization
   * Delete a reporter
   */
  async deleteOrgReporter(
    requestParameters: DeleteOrgReporterRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.deleteOrgReporterRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_REPORTER[READ] permission on the specified domain or DOMAIN_REPORTER[READ] permission on the specified environment or DOMAIN_REPORTER[READ] permission on the specified organization
   * Get a reporter
   */
  async get13Raw(
    requestParameters: Get13Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Reporter>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling get13.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling get13.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling get13.');
    }

    if (requestParameters.reporter === null || requestParameters.reporter === undefined) {
      throw new runtime.RequiredError(
        'reporter',
        'Required parameter requestParameters.reporter was null or undefined when calling get13.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/reporters/{reporter}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'reporter'}}`, encodeURIComponent(String(requestParameters.reporter))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ReporterFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_REPORTER[READ] permission on the specified domain or DOMAIN_REPORTER[READ] permission on the specified environment or DOMAIN_REPORTER[READ] permission on the specified organization
   * Get a reporter
   */
  async get13(requestParameters: Get13Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Reporter> {
    const response = await this.get13Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a reporter plugin
   */
  async get33Raw(
    requestParameters: Get33Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.reporter === null || requestParameters.reporter === undefined) {
      throw new runtime.RequiredError(
        'reporter',
        'Required parameter requestParameters.reporter was null or undefined when calling get33.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/reporters/{reporter}`.replace(`{${'reporter'}}`, encodeURIComponent(String(requestParameters.reporter))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a reporter plugin
   */
  async get33(requestParameters: Get33Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.get33Raw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_REPORTER[READ] permission on the organization
   * Get a reporter
   */
  async getOrgReporterRaw(
    requestParameters: GetOrgReporterRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Reporter>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling getOrgReporter.',
      );
    }

    if (requestParameters.reporterId === null || requestParameters.reporterId === undefined) {
      throw new runtime.RequiredError(
        'reporterId',
        'Required parameter requestParameters.reporterId was null or undefined when calling getOrgReporter.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/reporters/{reporterId}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'reporterId'}}`, encodeURIComponent(String(requestParameters.reporterId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ReporterFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_REPORTER[READ] permission on the organization
   * Get a reporter
   */
  async getOrgReporter(
    requestParameters: GetOrgReporterRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Reporter> {
    const response = await this.getOrgReporterRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_REPORTER[LIST] permission on the specified organization. Except if user has ORGANIZATION_REPORTER[READ] permission on the organization, each returned reporter is filtered and contains only basic information such as id and name and type.
   * List registered reporters for a security domain
   */
  async getOrgReportersRaw(
    requestParameters: GetOrgReportersRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Array<Reporter>>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling getOrgReporters.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/reporters`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReporterFromJSON));
  }

  /**
   * User must have the ORGANIZATION_REPORTER[LIST] permission on the specified organization. Except if user has ORGANIZATION_REPORTER[READ] permission on the organization, each returned reporter is filtered and contains only basic information such as id and name and type.
   * List registered reporters for a security domain
   */
  async getOrgReporters(
    requestParameters: GetOrgReportersRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Array<Reporter>> {
    const response = await this.getOrgReportersRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get a reporter plugin\'s schema
   */
  async getSchema8Raw(
    requestParameters: GetSchema8Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.reporter === null || requestParameters.reporter === undefined) {
      throw new runtime.RequiredError(
        'reporter',
        'Required parameter requestParameters.reporter was null or undefined when calling getSchema8.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/reporters/{reporter}/schema`.replace(
          `{${'reporter'}}`,
          encodeURIComponent(String(requestParameters.reporter)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Get a reporter plugin\'s schema
   */
  async getSchema8(requestParameters: GetSchema8Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.getSchema8Raw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List reporter plugins
   */
  async list32Raw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/reporters`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List reporter plugins
   */
  async list32(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.list32Raw(initOverrides);
  }

  /**
   * User must have the DOMAIN_REPORTER[LIST] permission on the specified domain or DOMAIN_REPORTER[LIST] permission on the specified environment or DOMAIN_REPORTER[LIST] permission on the specified organization. Except if user has DOMAIN_REPORTER[READ] permission on the domain, environment or organization, each returned reporter is filtered and contains only basic information such as id and name and type.
   * List registered reporters for a security domain
   */
  async list9Raw(
    requestParameters: List9Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Array<Reporter>>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling list9.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling list9.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling list9.');
    }

    const queryParameters: any = {};

    if (requestParameters.userProvider !== undefined) {
      queryParameters['userProvider'] = requestParameters.userProvider;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/reporters`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReporterFromJSON));
  }

  /**
   * User must have the DOMAIN_REPORTER[LIST] permission on the specified domain or DOMAIN_REPORTER[LIST] permission on the specified environment or DOMAIN_REPORTER[LIST] permission on the specified organization. Except if user has DOMAIN_REPORTER[READ] permission on the domain, environment or organization, each returned reporter is filtered and contains only basic information such as id and name and type.
   * List registered reporters for a security domain
   */
  async list9(requestParameters: List9Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Reporter>> {
    const response = await this.list9Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_REPORTER[UPDATE] permission on the specified domain or DOMAIN_REPORTER[UPDATE] permission on the specified environment or DOMAIN_REPORTER[UPDATE] permission on the specified organization
   * Update a reporter
   */
  async update6Raw(
    requestParameters: Update6Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Reporter>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling update6.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling update6.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling update6.');
    }

    if (requestParameters.reporter === null || requestParameters.reporter === undefined) {
      throw new runtime.RequiredError(
        'reporter',
        'Required parameter requestParameters.reporter was null or undefined when calling update6.',
      );
    }

    if (requestParameters.updateReporter === null || requestParameters.updateReporter === undefined) {
      throw new runtime.RequiredError(
        'updateReporter',
        'Required parameter requestParameters.updateReporter was null or undefined when calling update6.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/reporters/{reporter}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'reporter'}}`, encodeURIComponent(String(requestParameters.reporter))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateReporterToJSON(requestParameters.updateReporter),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ReporterFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_REPORTER[UPDATE] permission on the specified domain or DOMAIN_REPORTER[UPDATE] permission on the specified environment or DOMAIN_REPORTER[UPDATE] permission on the specified organization
   * Update a reporter
   */
  async update6(requestParameters: Update6Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Reporter> {
    const response = await this.update6Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_REPORTER[UPDATE] permission on the specified organization
   * Update a reporter
   */
  async updateOrgReporterRaw(
    requestParameters: UpdateOrgReporterRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Reporter>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling updateOrgReporter.',
      );
    }

    if (requestParameters.reporterId === null || requestParameters.reporterId === undefined) {
      throw new runtime.RequiredError(
        'reporterId',
        'Required parameter requestParameters.reporterId was null or undefined when calling updateOrgReporter.',
      );
    }

    if (requestParameters.updateReporter === null || requestParameters.updateReporter === undefined) {
      throw new runtime.RequiredError(
        'updateReporter',
        'Required parameter requestParameters.updateReporter was null or undefined when calling updateOrgReporter.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/reporters/{reporterId}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'reporterId'}}`, encodeURIComponent(String(requestParameters.reporterId))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateReporterToJSON(requestParameters.updateReporter),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ReporterFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_REPORTER[UPDATE] permission on the specified organization
   * Update a reporter
   */
  async updateOrgReporter(
    requestParameters: UpdateOrgReporterRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Reporter> {
    const response = await this.updateOrgReporterRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
