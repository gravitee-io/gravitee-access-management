/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AlertNotifier,
    AlertNotifierFromJSON,
    AlertNotifierToJSON,
    AlertTrigger,
    AlertTriggerFromJSON,
    AlertTriggerToJSON,
    NewAlertNotifier,
    NewAlertNotifierFromJSON,
    NewAlertNotifierToJSON,
    PatchAlertNotifier,
    PatchAlertNotifierFromJSON,
    PatchAlertNotifierToJSON,
    PatchAlertTrigger,
    PatchAlertTriggerFromJSON,
    PatchAlertTriggerToJSON,
} from '../models';

export interface CreateAlertNotifierRequest {
    organizationId: string;
    environmentId: string;
    domain: string;
    alertNotifier: NewAlertNotifier;
}

export interface DeleteAlertNotifierRequest {
    organizationId: string;
    environmentId: string;
    domain: string;
    notifierId: string;
}

export interface GetAlertNotifierRequest {
    organizationId: string;
    environmentId: string;
    domain: string;
    notifierId: string;
}

export interface List16Request {
    organizationId: string;
    environmentId: string;
    domain: string;
    alertTriggers: Array<PatchAlertTrigger>;
}

export interface List17Request {
    organizationId: string;
    environmentId: string;
    domain: string;
}

export interface ListAlertNotifiersRequest {
    organizationId: string;
    environmentId: string;
    domain: string;
}

export interface PatchAlertNotifierRequest {
    organizationId: string;
    environmentId: string;
    domain: string;
    notifierId: string;
    alertNotifier: PatchAlertNotifier;
}

/**
 * 
 */
export class AlertsApi extends runtime.BaseAPI {

    /**
     * Create a new alert notifierUser must have DOMAIN_ALERT_NOTIFIER[CREATE] permission on the specified domain, environment or organization.
     * Create an alert notifier
     */
    async createAlertNotifierRaw(requestParameters: CreateAlertNotifierRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AlertNotifier>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling createAlertNotifier.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling createAlertNotifier.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling createAlertNotifier.');
        }

        if (requestParameters.alertNotifier === null || requestParameters.alertNotifier === undefined) {
            throw new runtime.RequiredError('alertNotifier','Required parameter requestParameters.alertNotifier was null or undefined when calling createAlertNotifier.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/alerts/notifiers`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewAlertNotifierToJSON(requestParameters.alertNotifier),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertNotifierFromJSON(jsonValue));
    }

    /**
     * Create a new alert notifierUser must have DOMAIN_ALERT_NOTIFIER[CREATE] permission on the specified domain, environment or organization.
     * Create an alert notifier
     */
    async createAlertNotifier(requestParameters: CreateAlertNotifierRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AlertNotifier> {
        const response = await this.createAlertNotifierRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an alert notifier by its id. User must have DOMAIN_ALERT_NOTIFIER[DELETE] permission on the specified domain, environment or organization.
     * Delete an alert notifier
     */
    async deleteAlertNotifierRaw(requestParameters: DeleteAlertNotifierRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling deleteAlertNotifier.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling deleteAlertNotifier.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling deleteAlertNotifier.');
        }

        if (requestParameters.notifierId === null || requestParameters.notifierId === undefined) {
            throw new runtime.RequiredError('notifierId','Required parameter requestParameters.notifierId was null or undefined when calling deleteAlertNotifier.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/alerts/notifiers/{notifierId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"notifierId"}}`, encodeURIComponent(String(requestParameters.notifierId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an alert notifier by its id. User must have DOMAIN_ALERT_NOTIFIER[DELETE] permission on the specified domain, environment or organization.
     * Delete an alert notifier
     */
    async deleteAlertNotifier(requestParameters: DeleteAlertNotifierRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteAlertNotifierRaw(requestParameters, initOverrides);
    }

    /**
     * Get an alert notifier by its id. User must have DOMAIN_ALERT_NOTIFIER[LIST] permission on the specified domain, environment or organization.
     * Get an alert notifier
     */
    async getAlertNotifierRaw(requestParameters: GetAlertNotifierRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AlertNotifier>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling getAlertNotifier.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling getAlertNotifier.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling getAlertNotifier.');
        }

        if (requestParameters.notifierId === null || requestParameters.notifierId === undefined) {
            throw new runtime.RequiredError('notifierId','Required parameter requestParameters.notifierId was null or undefined when calling getAlertNotifier.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/alerts/notifiers/{notifierId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"notifierId"}}`, encodeURIComponent(String(requestParameters.notifierId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertNotifierFromJSON(jsonValue));
    }

    /**
     * Get an alert notifier by its id. User must have DOMAIN_ALERT_NOTIFIER[LIST] permission on the specified domain, environment or organization.
     * Get an alert notifier
     */
    async getAlertNotifier(requestParameters: GetAlertNotifierRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AlertNotifier> {
        const response = await this.getAlertNotifierRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple alert triggers in the same timeUser must have DOMAIN_ALERT[UPDATE] permission on the specified domain, environment or organization.
     * Update multiple alert triggers
     */
    async list16Raw(requestParameters: List16Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<AlertTrigger>>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling list16.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling list16.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling list16.');
        }

        if (requestParameters.alertTriggers === null || requestParameters.alertTriggers === undefined) {
            throw new runtime.RequiredError('alertTriggers','Required parameter requestParameters.alertTriggers was null or undefined when calling list16.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/alerts/triggers`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.alertTriggers.map(PatchAlertTriggerToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlertTriggerFromJSON));
    }

    /**
     * Update multiple alert triggers in the same timeUser must have DOMAIN_ALERT[UPDATE] permission on the specified domain, environment or organization.
     * Update multiple alert triggers
     */
    async list16(requestParameters: List16Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<AlertTrigger>> {
        const response = await this.list16Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the alert triggers of the domain accessible to the current user. User must have DOMAIN_ALERT[LIST] permission on the specified domain, environment or organization.
     * List alert alert triggers
     */
    async list17Raw(requestParameters: List17Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<AlertTrigger>>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling list17.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling list17.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling list17.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/alerts/triggers`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlertTriggerFromJSON));
    }

    /**
     * List all the alert triggers of the domain accessible to the current user. User must have DOMAIN_ALERT[LIST] permission on the specified domain, environment or organization.
     * List alert alert triggers
     */
    async list17(requestParameters: List17Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<AlertTrigger>> {
        const response = await this.list17Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the alert notifiers of the domain. User must have DOMAIN_ALERT_NOTIFIER[LIST] permission on the specified domain, environment or organization.
     * List alert notifiers
     */
    async listAlertNotifiersRaw(requestParameters: ListAlertNotifiersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<AlertNotifier>>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling listAlertNotifiers.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling listAlertNotifiers.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling listAlertNotifiers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/alerts/notifiers`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlertNotifierFromJSON));
    }

    /**
     * List all the alert notifiers of the domain. User must have DOMAIN_ALERT_NOTIFIER[LIST] permission on the specified domain, environment or organization.
     * List alert notifiers
     */
    async listAlertNotifiers(requestParameters: ListAlertNotifiersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<AlertNotifier>> {
        const response = await this.listAlertNotifiersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an alert notifierUser must have DOMAIN_ALERT_NOTIFIER[UPDATE] permission on the specified domain, environment or organization.
     * Update an alert notifier
     */
    async patchAlertNotifierRaw(requestParameters: PatchAlertNotifierRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AlertNotifier>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling patchAlertNotifier.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling patchAlertNotifier.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling patchAlertNotifier.');
        }

        if (requestParameters.notifierId === null || requestParameters.notifierId === undefined) {
            throw new runtime.RequiredError('notifierId','Required parameter requestParameters.notifierId was null or undefined when calling patchAlertNotifier.');
        }

        if (requestParameters.alertNotifier === null || requestParameters.alertNotifier === undefined) {
            throw new runtime.RequiredError('alertNotifier','Required parameter requestParameters.alertNotifier was null or undefined when calling patchAlertNotifier.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/alerts/notifiers/{notifierId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"notifierId"}}`, encodeURIComponent(String(requestParameters.notifierId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchAlertNotifierToJSON(requestParameters.alertNotifier),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertNotifierFromJSON(jsonValue));
    }

    /**
     * Update an alert notifierUser must have DOMAIN_ALERT_NOTIFIER[UPDATE] permission on the specified domain, environment or organization.
     * Update an alert notifier
     */
    async patchAlertNotifier(requestParameters: PatchAlertNotifierRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AlertNotifier> {
        const response = await this.patchAlertNotifierRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
