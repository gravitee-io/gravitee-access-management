/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */

import * as runtime from '../runtime';
import {
  AssignPasswordPolicy,
  AssignPasswordPolicyFromJSON,
  AssignPasswordPolicyToJSON,
  FilteredIdentityProviderInfo,
  FilteredIdentityProviderInfoFromJSON,
  FilteredIdentityProviderInfoToJSON,
  IdentityProvider,
  IdentityProviderFromJSON,
  IdentityProviderToJSON,
  NewIdentityProvider,
  NewIdentityProviderFromJSON,
  NewIdentityProviderToJSON,
  UpdateIdentityProvider,
  UpdateIdentityProviderFromJSON,
  UpdateIdentityProviderToJSON,
} from '../models';

export interface AssignPasswordPolicyToIdpRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  identity: string;
  assignPasswordPolicy: AssignPasswordPolicy;
}

export interface Create9Request {
  organizationId: string;
  newIdentityProvider: NewIdentityProvider;
}

export interface CreateIdentityProviderRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  newIdentityProvider: NewIdentityProvider;
}

export interface Delete12Request {
  organizationId: string;
  identity: string;
}

export interface DeleteIdentityProviderRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  identity: string;
}

export interface FindIdentityProviderRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  identity: string;
}

export interface Get18Request {
  organizationId: string;
  identity: string;
}

export interface Get30Request {
  identity: string;
}

export interface GetSchema5Request {
  identity: string;
}

export interface List20Request {
  organizationId: string;
  userProvider?: boolean;
}

export interface List29Request {
  external?: boolean;
  organization?: boolean;
  expand?: Array<string>;
}

export interface ListIdentityProvidersRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  userProvider?: boolean;
}

export interface Update8Request {
  organizationId: string;
  identity: string;
  updateIdentityProvider: UpdateIdentityProvider;
}

export interface UpdateIdentityProviderRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  identity: string;
  updateIdentityProvider: UpdateIdentityProvider;
}

/**
 *
 */
export class IdentityProviderApi extends runtime.BaseAPI {
  /**
   * User must have the DOMAIN_IDENTITY_PROVIDER[UPDATE] permission on the specified domain or DOMAIN_IDENTITY_PROVIDER[UPDATE] permission on the specified environment or DOMAIN_IDENTITY_PROVIDER[UPDATE] permission on the specified organization
   * Assign password policy to identity provider
   */
  async assignPasswordPolicyToIdpRaw(
    requestParameters: AssignPasswordPolicyToIdpRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<AssignPasswordPolicy>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling assignPasswordPolicyToIdp.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling assignPasswordPolicyToIdp.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling assignPasswordPolicyToIdp.',
      );
    }

    if (requestParameters.identity === null || requestParameters.identity === undefined) {
      throw new runtime.RequiredError(
        'identity',
        'Required parameter requestParameters.identity was null or undefined when calling assignPasswordPolicyToIdp.',
      );
    }

    if (requestParameters.assignPasswordPolicy === null || requestParameters.assignPasswordPolicy === undefined) {
      throw new runtime.RequiredError(
        'assignPasswordPolicy',
        'Required parameter requestParameters.assignPasswordPolicy was null or undefined when calling assignPasswordPolicyToIdp.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/identities/{identity}/password-policy`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'identity'}}`, encodeURIComponent(String(requestParameters.identity))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: AssignPasswordPolicyToJSON(requestParameters.assignPasswordPolicy),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AssignPasswordPolicyFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_IDENTITY_PROVIDER[UPDATE] permission on the specified domain or DOMAIN_IDENTITY_PROVIDER[UPDATE] permission on the specified environment or DOMAIN_IDENTITY_PROVIDER[UPDATE] permission on the specified organization
   * Assign password policy to identity provider
   */
  async assignPasswordPolicyToIdp(
    requestParameters: AssignPasswordPolicyToIdpRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<AssignPasswordPolicy> {
    const response = await this.assignPasswordPolicyToIdpRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_IDENTITY_PROVIDER[CREATE] permission on the specified organization
   * Create an identity provider for the organization
   */
  async create9Raw(
    requestParameters: Create9Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling create9.',
      );
    }

    if (requestParameters.newIdentityProvider === null || requestParameters.newIdentityProvider === undefined) {
      throw new runtime.RequiredError(
        'newIdentityProvider',
        'Required parameter requestParameters.newIdentityProvider was null or undefined when calling create9.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/identities`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewIdentityProviderToJSON(requestParameters.newIdentityProvider),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_IDENTITY_PROVIDER[CREATE] permission on the specified organization
   * Create an identity provider for the organization
   */
  async create9(requestParameters: Create9Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.create9Raw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_IDENTITY_PROVIDER[CREATE] permission on the specified domain or DOMAIN_IDENTITY_PROVIDER[CREATE] permission on the specified environment or DOMAIN_IDENTITY_PROVIDER[CREATE] permission on the specified organization
   * Create an identity provider
   */
  async createIdentityProviderRaw(
    requestParameters: CreateIdentityProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<IdentityProvider>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling createIdentityProvider.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling createIdentityProvider.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling createIdentityProvider.',
      );
    }

    if (requestParameters.newIdentityProvider === null || requestParameters.newIdentityProvider === undefined) {
      throw new runtime.RequiredError(
        'newIdentityProvider',
        'Required parameter requestParameters.newIdentityProvider was null or undefined when calling createIdentityProvider.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/identities`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewIdentityProviderToJSON(requestParameters.newIdentityProvider),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_IDENTITY_PROVIDER[CREATE] permission on the specified domain or DOMAIN_IDENTITY_PROVIDER[CREATE] permission on the specified environment or DOMAIN_IDENTITY_PROVIDER[CREATE] permission on the specified organization
   * Create an identity provider
   */
  async createIdentityProvider(
    requestParameters: CreateIdentityProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<IdentityProvider> {
    const response = await this.createIdentityProviderRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_IDENTITY_PROVIDER[DELETE] permission on the specified organization
   * Delete an identity provider
   */
  async delete12Raw(
    requestParameters: Delete12Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling delete12.',
      );
    }

    if (requestParameters.identity === null || requestParameters.identity === undefined) {
      throw new runtime.RequiredError(
        'identity',
        'Required parameter requestParameters.identity was null or undefined when calling delete12.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/identities/{identity}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'identity'}}`, encodeURIComponent(String(requestParameters.identity))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_IDENTITY_PROVIDER[DELETE] permission on the specified organization
   * Delete an identity provider
   */
  async delete12(requestParameters: Delete12Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.delete12Raw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_IDENTITY_PROVIDER[DELETE] permission on the specified domain or DOMAIN_IDENTITY_PROVIDER[DELETE] permission on the specified environment or DOMAIN_IDENTITY_PROVIDER[DELETE] permission on the specified organization
   * Delete an identity provider
   */
  async deleteIdentityProviderRaw(
    requestParameters: DeleteIdentityProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling deleteIdentityProvider.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling deleteIdentityProvider.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling deleteIdentityProvider.',
      );
    }

    if (requestParameters.identity === null || requestParameters.identity === undefined) {
      throw new runtime.RequiredError(
        'identity',
        'Required parameter requestParameters.identity was null or undefined when calling deleteIdentityProvider.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/identities/{identity}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'identity'}}`, encodeURIComponent(String(requestParameters.identity))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the DOMAIN_IDENTITY_PROVIDER[DELETE] permission on the specified domain or DOMAIN_IDENTITY_PROVIDER[DELETE] permission on the specified environment or DOMAIN_IDENTITY_PROVIDER[DELETE] permission on the specified organization
   * Delete an identity provider
   */
  async deleteIdentityProvider(
    requestParameters: DeleteIdentityProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.deleteIdentityProviderRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_IDENTITY_PROVIDER[READ] permission on the specified domain or DOMAIN_IDENTITY_PROVIDER[READ] permission on the specified environment or DOMAIN_IDENTITY_PROVIDER[READ] permission on the specified organization
   * Get an identity provider
   */
  async findIdentityProviderRaw(
    requestParameters: FindIdentityProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<IdentityProvider>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling findIdentityProvider.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling findIdentityProvider.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling findIdentityProvider.',
      );
    }

    if (requestParameters.identity === null || requestParameters.identity === undefined) {
      throw new runtime.RequiredError(
        'identity',
        'Required parameter requestParameters.identity was null or undefined when calling findIdentityProvider.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/identities/{identity}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'identity'}}`, encodeURIComponent(String(requestParameters.identity))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_IDENTITY_PROVIDER[READ] permission on the specified domain or DOMAIN_IDENTITY_PROVIDER[READ] permission on the specified environment or DOMAIN_IDENTITY_PROVIDER[READ] permission on the specified organization
   * Get an identity provider
   */
  async findIdentityProvider(
    requestParameters: FindIdentityProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<IdentityProvider> {
    const response = await this.findIdentityProviderRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission on the specified organization
   * Get an identity provider
   */
  async get18Raw(
    requestParameters: Get18Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<IdentityProvider>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling get18.',
      );
    }

    if (requestParameters.identity === null || requestParameters.identity === undefined) {
      throw new runtime.RequiredError(
        'identity',
        'Required parameter requestParameters.identity was null or undefined when calling get18.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/identities/{identity}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'identity'}}`, encodeURIComponent(String(requestParameters.identity))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_IDENTITY_PROVIDER[READ] permission on the specified organization
   * Get an identity provider
   */
  async get18(requestParameters: Get18Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<IdentityProvider> {
    const response = await this.get18Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an identity provider
   */
  async get30Raw(
    requestParameters: Get30Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.identity === null || requestParameters.identity === undefined) {
      throw new runtime.RequiredError(
        'identity',
        'Required parameter requestParameters.identity was null or undefined when calling get30.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/identities/{identity}`.replace(`{${'identity'}}`, encodeURIComponent(String(requestParameters.identity))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an identity provider
   */
  async get30(requestParameters: Get30Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.get30Raw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an identity provider plugin\'s schema
   */
  async getSchema5Raw(
    requestParameters: GetSchema5Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.identity === null || requestParameters.identity === undefined) {
      throw new runtime.RequiredError(
        'identity',
        'Required parameter requestParameters.identity was null or undefined when calling getSchema5.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/identities/{identity}/schema`.replace(
          `{${'identity'}}`,
          encodeURIComponent(String(requestParameters.identity)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an identity provider plugin\'s schema
   */
  async getSchema5(requestParameters: GetSchema5Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.getSchema5Raw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_IDENTITY_PROVIDER[LIST] permission on the specified organization. Each returned identity provider is filtered and contains only basic information such as id, name, type and isExternal.
   * List registered identity providers of the organization
   */
  async list20Raw(
    requestParameters: List20Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Array<FilteredIdentityProviderInfo>>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling list20.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.userProvider !== undefined) {
      queryParameters['userProvider'] = requestParameters.userProvider;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/identities`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FilteredIdentityProviderInfoFromJSON));
  }

  /**
   * User must have the ORGANIZATION_IDENTITY_PROVIDER[LIST] permission on the specified organization. Each returned identity provider is filtered and contains only basic information such as id, name, type and isExternal.
   * List registered identity providers of the organization
   */
  async list20(
    requestParameters: List20Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Array<FilteredIdentityProviderInfo>> {
    const response = await this.list20Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List identity provider plugins
   */
  async list29Raw(
    requestParameters: List29Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.external !== undefined) {
      queryParameters['external'] = requestParameters.external;
    }

    if (requestParameters.organization !== undefined) {
      queryParameters['organization'] = requestParameters.organization;
    }

    if (requestParameters.expand) {
      queryParameters['expand'] = requestParameters.expand;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/identities`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List identity provider plugins
   */
  async list29(requestParameters: List29Request = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.list29Raw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_IDENTITY_PROVIDER[LIST] permission on the specified domain or DOMAIN_IDENTITY_PROVIDER[LIST] permission on the specified environment or DOMAIN_IDENTITY_PROVIDER[LIST] permission on the specified organization. Each returned identity provider is filtered and contains only basic information such as id, name and type.
   * List registered identity providers for a security domain
   */
  async listIdentityProvidersRaw(
    requestParameters: ListIdentityProvidersRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Array<FilteredIdentityProviderInfo>>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling listIdentityProviders.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling listIdentityProviders.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling listIdentityProviders.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.userProvider !== undefined) {
      queryParameters['userProvider'] = requestParameters.userProvider;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/identities`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FilteredIdentityProviderInfoFromJSON));
  }

  /**
   * User must have the DOMAIN_IDENTITY_PROVIDER[LIST] permission on the specified domain or DOMAIN_IDENTITY_PROVIDER[LIST] permission on the specified environment or DOMAIN_IDENTITY_PROVIDER[LIST] permission on the specified organization. Each returned identity provider is filtered and contains only basic information such as id, name and type.
   * List registered identity providers for a security domain
   */
  async listIdentityProviders(
    requestParameters: ListIdentityProvidersRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Array<FilteredIdentityProviderInfo>> {
    const response = await this.listIdentityProvidersRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_IDENTITY_PROVIDER[UPDATE] permission on the specified organization
   * Update an identity provider
   */
  async update8Raw(
    requestParameters: Update8Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<IdentityProvider>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling update8.',
      );
    }

    if (requestParameters.identity === null || requestParameters.identity === undefined) {
      throw new runtime.RequiredError(
        'identity',
        'Required parameter requestParameters.identity was null or undefined when calling update8.',
      );
    }

    if (requestParameters.updateIdentityProvider === null || requestParameters.updateIdentityProvider === undefined) {
      throw new runtime.RequiredError(
        'updateIdentityProvider',
        'Required parameter requestParameters.updateIdentityProvider was null or undefined when calling update8.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/identities/{identity}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'identity'}}`, encodeURIComponent(String(requestParameters.identity))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateIdentityProviderToJSON(requestParameters.updateIdentityProvider),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_IDENTITY_PROVIDER[UPDATE] permission on the specified organization
   * Update an identity provider
   */
  async update8(requestParameters: Update8Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<IdentityProvider> {
    const response = await this.update8Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_IDENTITY_PROVIDER[UPDATE] permission on the specified domain or DOMAIN_IDENTITY_PROVIDER[UPDATE] permission on the specified environment or DOMAIN_IDENTITY_PROVIDER[UPDATE] permission on the specified organization
   * Update an identity provider
   */
  async updateIdentityProviderRaw(
    requestParameters: UpdateIdentityProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<IdentityProvider>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling updateIdentityProvider.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling updateIdentityProvider.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling updateIdentityProvider.',
      );
    }

    if (requestParameters.identity === null || requestParameters.identity === undefined) {
      throw new runtime.RequiredError(
        'identity',
        'Required parameter requestParameters.identity was null or undefined when calling updateIdentityProvider.',
      );
    }

    if (requestParameters.updateIdentityProvider === null || requestParameters.updateIdentityProvider === undefined) {
      throw new runtime.RequiredError(
        'updateIdentityProvider',
        'Required parameter requestParameters.updateIdentityProvider was null or undefined when calling updateIdentityProvider.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/identities/{identity}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'identity'}}`, encodeURIComponent(String(requestParameters.identity))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateIdentityProviderToJSON(requestParameters.updateIdentityProvider),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => IdentityProviderFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_IDENTITY_PROVIDER[UPDATE] permission on the specified domain or DOMAIN_IDENTITY_PROVIDER[UPDATE] permission on the specified environment or DOMAIN_IDENTITY_PROVIDER[UPDATE] permission on the specified organization
   * Update an identity provider
   */
  async updateIdentityProvider(
    requestParameters: UpdateIdentityProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<IdentityProvider> {
    const response = await this.updateIdentityProviderRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
