/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */

import * as runtime from '../runtime';
import {
  Group,
  GroupFromJSON,
  GroupToJSON,
  GroupPage,
  GroupPageFromJSON,
  GroupPageToJSON,
  NewGroup,
  NewGroupFromJSON,
  NewGroupToJSON,
  Role,
  RoleFromJSON,
  RoleToJSON,
  UpdateGroup,
  UpdateGroupFromJSON,
  UpdateGroupToJSON,
  User,
  UserFromJSON,
  UserToJSON,
} from '../models';

export interface AddGroupMemberRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  group: string;
  member: string;
}

export interface AddGroupMember1Request {
  organizationId: string;
  group: string;
  member: string;
}

export interface AssignRolesRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  group: string;
  requestBody: Array<string>;
}

export interface CreateGroupRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  newGroup: NewGroup;
}

export interface CreatePlatformGroupRequest {
  organizationId: string;
  newGroup: NewGroup;
}

export interface DeleteGroupRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  group: string;
}

export interface DeleteOrganizationGroupRequest {
  organizationId: string;
  group: string;
}

export interface FindGroupRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  group: string;
}

export interface FindGroupRolesRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  group: string;
}

export interface GetGroupMembersRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  group: string;
  page?: number;
  size?: number;
}

export interface GetOrganizationGroupRequest {
  organizationId: string;
  group: string;
}

export interface ListDomainGroupsRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  page?: number;
  size?: number;
}

export interface ListGroupMembersRequest {
  organizationId: string;
  group: string;
  page?: number;
  size?: number;
}

export interface ListGroupsRequest {
  organizationId: string;
  page?: number;
  size?: number;
}

export interface RemoveGroupMemberRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  group: string;
  member: string;
}

export interface RemoveGroupMember1Request {
  organizationId: string;
  group: string;
  member: string;
}

export interface RevokeRoleRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  group: string;
  role: string;
}

export interface UpdateGroupRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  group: string;
  updateGroup: UpdateGroup;
}

export interface UpdateOrganizationGroupRequest {
  organizationId: string;
  group: string;
  updateGroup: UpdateGroup;
}

/**
 *
 */
export class GroupApi extends runtime.BaseAPI {
  /**
   * User must have the DOMAIN_GROUP[UPDATE] permission on the specified domain or DOMAIN_GROUP[UPDATE] permission on the specified environment or DOMAIN_GROUP[UPDATE] permission on the specified organization
   * Add a group member
   */
  async addGroupMemberRaw(
    requestParameters: AddGroupMemberRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling addGroupMember.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling addGroupMember.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling addGroupMember.',
      );
    }

    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new runtime.RequiredError(
        'group',
        'Required parameter requestParameters.group was null or undefined when calling addGroupMember.',
      );
    }

    if (requestParameters.member === null || requestParameters.member === undefined) {
      throw new runtime.RequiredError(
        'member',
        'Required parameter requestParameters.member was null or undefined when calling addGroupMember.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/groups/{group}/members/{member}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
          .replace(`{${'member'}}`, encodeURIComponent(String(requestParameters.member))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the DOMAIN_GROUP[UPDATE] permission on the specified domain or DOMAIN_GROUP[UPDATE] permission on the specified environment or DOMAIN_GROUP[UPDATE] permission on the specified organization
   * Add a group member
   */
  async addGroupMember(requestParameters: AddGroupMemberRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.addGroupMemberRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_GROUP[UPDATE] permission on the specified organization
   * Add a group member
   */
  async addGroupMember1Raw(
    requestParameters: AddGroupMember1Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling addGroupMember1.',
      );
    }

    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new runtime.RequiredError(
        'group',
        'Required parameter requestParameters.group was null or undefined when calling addGroupMember1.',
      );
    }

    if (requestParameters.member === null || requestParameters.member === undefined) {
      throw new runtime.RequiredError(
        'member',
        'Required parameter requestParameters.member was null or undefined when calling addGroupMember1.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/groups/{group}/members/{member}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
          .replace(`{${'member'}}`, encodeURIComponent(String(requestParameters.member))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_GROUP[UPDATE] permission on the specified organization
   * Add a group member
   */
  async addGroupMember1(
    requestParameters: AddGroupMember1Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.addGroupMember1Raw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_GROUP[UPDATE] permission on the specified domain or DOMAIN_GROUP[UPDATE] permission on the specified environment or DOMAIN_GROUP[UPDATE] permission on the specified organization
   * Assign roles to a group
   */
  async assignRolesRaw(
    requestParameters: AssignRolesRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Group>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling assignRoles.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling assignRoles.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling assignRoles.',
      );
    }

    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new runtime.RequiredError(
        'group',
        'Required parameter requestParameters.group was null or undefined when calling assignRoles.',
      );
    }

    if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
      throw new runtime.RequiredError(
        'requestBody',
        'Required parameter requestParameters.requestBody was null or undefined when calling assignRoles.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/groups/{group}/roles`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.requestBody,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_GROUP[UPDATE] permission on the specified domain or DOMAIN_GROUP[UPDATE] permission on the specified environment or DOMAIN_GROUP[UPDATE] permission on the specified organization
   * Assign roles to a group
   */
  async assignRoles(requestParameters: AssignRolesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Group> {
    const response = await this.assignRolesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_GROUP[CREATE] permission on the specified domain or DOMAIN_GROUP[CREATE] permission on the specified environment or DOMAIN_GROUP[CREATE] permission on the specified organization
   * Create a group
   */
  async createGroupRaw(
    requestParameters: CreateGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Group>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling createGroup.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling createGroup.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling createGroup.',
      );
    }

    if (requestParameters.newGroup === null || requestParameters.newGroup === undefined) {
      throw new runtime.RequiredError(
        'newGroup',
        'Required parameter requestParameters.newGroup was null or undefined when calling createGroup.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/groups`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewGroupToJSON(requestParameters.newGroup),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_GROUP[CREATE] permission on the specified domain or DOMAIN_GROUP[CREATE] permission on the specified environment or DOMAIN_GROUP[CREATE] permission on the specified organization
   * Create a group
   */
  async createGroup(requestParameters: CreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Group> {
    const response = await this.createGroupRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_GROUP[CREATE] permission on the specified organization
   * Create a platform group
   */
  async createPlatformGroupRaw(
    requestParameters: CreatePlatformGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling createPlatformGroup.',
      );
    }

    if (requestParameters.newGroup === null || requestParameters.newGroup === undefined) {
      throw new runtime.RequiredError(
        'newGroup',
        'Required parameter requestParameters.newGroup was null or undefined when calling createPlatformGroup.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/groups`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewGroupToJSON(requestParameters.newGroup),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_GROUP[CREATE] permission on the specified organization
   * Create a platform group
   */
  async createPlatformGroup(
    requestParameters: CreatePlatformGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.createPlatformGroupRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_GROUP[DELETE] permission on the specified domain or DOMAIN_GROUP[DELETE] permission on the specified environment or DOMAIN_GROUP[DELETE] permission on the specified organization
   * Delete a group
   */
  async deleteGroupRaw(
    requestParameters: DeleteGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling deleteGroup.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling deleteGroup.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling deleteGroup.',
      );
    }

    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new runtime.RequiredError(
        'group',
        'Required parameter requestParameters.group was null or undefined when calling deleteGroup.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/groups/{group}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the DOMAIN_GROUP[DELETE] permission on the specified domain or DOMAIN_GROUP[DELETE] permission on the specified environment or DOMAIN_GROUP[DELETE] permission on the specified organization
   * Delete a group
   */
  async deleteGroup(requestParameters: DeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.deleteGroupRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_GROUP[READ] permission on the specified organization
   * Delete a platform group
   */
  async deleteOrganizationGroupRaw(
    requestParameters: DeleteOrganizationGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling deleteOrganizationGroup.',
      );
    }

    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new runtime.RequiredError(
        'group',
        'Required parameter requestParameters.group was null or undefined when calling deleteOrganizationGroup.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/groups/{group}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_GROUP[READ] permission on the specified organization
   * Delete a platform group
   */
  async deleteOrganizationGroup(
    requestParameters: DeleteOrganizationGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.deleteOrganizationGroupRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_GROUP[READ] permission on the specified domain or DOMAIN_GROUP[READ] permission on the specified environment or DOMAIN_GROUP[READ] permission on the specified organization
   * Get a group
   */
  async findGroupRaw(
    requestParameters: FindGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Group>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling findGroup.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling findGroup.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling findGroup.',
      );
    }

    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new runtime.RequiredError('group', 'Required parameter requestParameters.group was null or undefined when calling findGroup.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/groups/{group}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_GROUP[READ] permission on the specified domain or DOMAIN_GROUP[READ] permission on the specified environment or DOMAIN_GROUP[READ] permission on the specified organization
   * Get a group
   */
  async findGroup(requestParameters: FindGroupRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Group> {
    const response = await this.findGroupRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_GROUP[READ] permission on the specified domain or DOMAIN_GROUP[READ] permission on the specified environment or DOMAIN_GROUP[READ] permission on the specified organization
   * Get a group roles
   */
  async findGroupRolesRaw(
    requestParameters: FindGroupRolesRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Array<Role>>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling findGroupRoles.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling findGroupRoles.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling findGroupRoles.',
      );
    }

    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new runtime.RequiredError(
        'group',
        'Required parameter requestParameters.group was null or undefined when calling findGroupRoles.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/groups/{group}/roles`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleFromJSON));
  }

  /**
   * User must have the DOMAIN_GROUP[READ] permission on the specified domain or DOMAIN_GROUP[READ] permission on the specified environment or DOMAIN_GROUP[READ] permission on the specified organization
   * Get a group roles
   */
  async findGroupRoles(
    requestParameters: FindGroupRolesRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Array<Role>> {
    const response = await this.findGroupRolesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_GROUP[READ] permission on the specified domain or DOMAIN_GROUP[READ] permission on the specified environment or DOMAIN_GROUP[READ] permission on the specified organization
   * List group members
   */
  async getGroupMembersRaw(
    requestParameters: GetGroupMembersRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling getGroupMembers.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling getGroupMembers.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling getGroupMembers.',
      );
    }

    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new runtime.RequiredError(
        'group',
        'Required parameter requestParameters.group was null or undefined when calling getGroupMembers.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/groups/{group}/members`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_GROUP[READ] permission on the specified domain or DOMAIN_GROUP[READ] permission on the specified environment or DOMAIN_GROUP[READ] permission on the specified organization
   * List group members
   */
  async getGroupMembers(
    requestParameters: GetGroupMembersRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<User> {
    const response = await this.getGroupMembersRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_GROUP[READ] permission on the specified organization
   * Get a platform group
   */
  async getOrganizationGroupRaw(
    requestParameters: GetOrganizationGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Group>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling getOrganizationGroup.',
      );
    }

    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new runtime.RequiredError(
        'group',
        'Required parameter requestParameters.group was null or undefined when calling getOrganizationGroup.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/groups/{group}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_GROUP[READ] permission on the specified organization
   * Get a platform group
   */
  async getOrganizationGroup(
    requestParameters: GetOrganizationGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Group> {
    const response = await this.getOrganizationGroupRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_GROUP[LIST] permission on the specified domain or DOMAIN_GROUP[LIST] permission on the specified environment or DOMAIN_GROUP[LIST] permission on the specified organization. Each returned group is filtered and contains only basic information such as id and name.
   * List groups for a security domain
   */
  async listDomainGroupsRaw(
    requestParameters: ListDomainGroupsRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<GroupPage>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling listDomainGroups.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling listDomainGroups.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling listDomainGroups.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/groups`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GroupPageFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_GROUP[LIST] permission on the specified domain or DOMAIN_GROUP[LIST] permission on the specified environment or DOMAIN_GROUP[LIST] permission on the specified organization. Each returned group is filtered and contains only basic information such as id and name.
   * List groups for a security domain
   */
  async listDomainGroups(
    requestParameters: ListDomainGroupsRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<GroupPage> {
    const response = await this.listDomainGroupsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_GROUP[READ] permission on the specified organization
   * List group members
   */
  async listGroupMembersRaw(
    requestParameters: ListGroupMembersRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling listGroupMembers.',
      );
    }

    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new runtime.RequiredError(
        'group',
        'Required parameter requestParameters.group was null or undefined when calling listGroupMembers.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/groups/{group}/members`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_GROUP[READ] permission on the specified organization
   * List group members
   */
  async listGroupMembers(
    requestParameters: ListGroupMembersRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<User> {
    const response = await this.listGroupMembersRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION[LIST] permission on the specified organization. Each returned group is filtered and contains only basic information such as id and name.
   * List groups of the organization
   */
  async listGroupsRaw(
    requestParameters: ListGroupsRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Array<Group>>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling listGroups.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/groups`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupFromJSON));
  }

  /**
   * User must have the ORGANIZATION[LIST] permission on the specified organization. Each returned group is filtered and contains only basic information such as id and name.
   * List groups of the organization
   */
  async listGroups(requestParameters: ListGroupsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Group>> {
    const response = await this.listGroupsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_GROUP[UPDATE] permission on the specified domain or DOMAIN_GROUP[UPDATE] permission on the specified environment or DOMAIN_GROUP[UPDATE] permission on the specified organization
   * Remove a group member
   */
  async removeGroupMemberRaw(
    requestParameters: RemoveGroupMemberRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling removeGroupMember.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling removeGroupMember.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling removeGroupMember.',
      );
    }

    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new runtime.RequiredError(
        'group',
        'Required parameter requestParameters.group was null or undefined when calling removeGroupMember.',
      );
    }

    if (requestParameters.member === null || requestParameters.member === undefined) {
      throw new runtime.RequiredError(
        'member',
        'Required parameter requestParameters.member was null or undefined when calling removeGroupMember.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/groups/{group}/members/{member}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
          .replace(`{${'member'}}`, encodeURIComponent(String(requestParameters.member))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the DOMAIN_GROUP[UPDATE] permission on the specified domain or DOMAIN_GROUP[UPDATE] permission on the specified environment or DOMAIN_GROUP[UPDATE] permission on the specified organization
   * Remove a group member
   */
  async removeGroupMember(
    requestParameters: RemoveGroupMemberRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.removeGroupMemberRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_GROUP[UPDATE] permission on the specified organization
   * Remove a group member
   */
  async removeGroupMember1Raw(
    requestParameters: RemoveGroupMember1Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling removeGroupMember1.',
      );
    }

    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new runtime.RequiredError(
        'group',
        'Required parameter requestParameters.group was null or undefined when calling removeGroupMember1.',
      );
    }

    if (requestParameters.member === null || requestParameters.member === undefined) {
      throw new runtime.RequiredError(
        'member',
        'Required parameter requestParameters.member was null or undefined when calling removeGroupMember1.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/groups/{group}/members/{member}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
          .replace(`{${'member'}}`, encodeURIComponent(String(requestParameters.member))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_GROUP[UPDATE] permission on the specified organization
   * Remove a group member
   */
  async removeGroupMember1(
    requestParameters: RemoveGroupMember1Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.removeGroupMember1Raw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_GROUP[UPDATE] permission on the specified domain or DOMAIN_GROUP[UPDATE] permission on the specified environment or DOMAIN_GROUP[UPDATE] permission on the specified organization
   * Revoke role to a group
   */
  async revokeRoleRaw(
    requestParameters: RevokeRoleRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Group>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling revokeRole.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling revokeRole.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling revokeRole.',
      );
    }

    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new runtime.RequiredError('group', 'Required parameter requestParameters.group was null or undefined when calling revokeRole.');
    }

    if (requestParameters.role === null || requestParameters.role === undefined) {
      throw new runtime.RequiredError('role', 'Required parameter requestParameters.role was null or undefined when calling revokeRole.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/groups/{group}/roles/{role}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group)))
          .replace(`{${'role'}}`, encodeURIComponent(String(requestParameters.role))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_GROUP[UPDATE] permission on the specified domain or DOMAIN_GROUP[UPDATE] permission on the specified environment or DOMAIN_GROUP[UPDATE] permission on the specified organization
   * Revoke role to a group
   */
  async revokeRole(requestParameters: RevokeRoleRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Group> {
    const response = await this.revokeRoleRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_GROUP[UPDATE] permission on the specified domain or DOMAIN_GROUP[UPDATE] permission on the specified environment or DOMAIN_GROUP[UPDATE] permission on the specified organization
   * Update a group
   */
  async updateGroupRaw(
    requestParameters: UpdateGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Group>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling updateGroup.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling updateGroup.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling updateGroup.',
      );
    }

    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new runtime.RequiredError(
        'group',
        'Required parameter requestParameters.group was null or undefined when calling updateGroup.',
      );
    }

    if (requestParameters.updateGroup === null || requestParameters.updateGroup === undefined) {
      throw new runtime.RequiredError(
        'updateGroup',
        'Required parameter requestParameters.updateGroup was null or undefined when calling updateGroup.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/groups/{group}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateGroupToJSON(requestParameters.updateGroup),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_GROUP[UPDATE] permission on the specified domain or DOMAIN_GROUP[UPDATE] permission on the specified environment or DOMAIN_GROUP[UPDATE] permission on the specified organization
   * Update a group
   */
  async updateGroup(requestParameters: UpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Group> {
    const response = await this.updateGroupRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_GROUP[READ] permission on the specified organization
   * Update a platform group
   */
  async updateOrganizationGroupRaw(
    requestParameters: UpdateOrganizationGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling updateOrganizationGroup.',
      );
    }

    if (requestParameters.group === null || requestParameters.group === undefined) {
      throw new runtime.RequiredError(
        'group',
        'Required parameter requestParameters.group was null or undefined when calling updateOrganizationGroup.',
      );
    }

    if (requestParameters.updateGroup === null || requestParameters.updateGroup === undefined) {
      throw new runtime.RequiredError(
        'updateGroup',
        'Required parameter requestParameters.updateGroup was null or undefined when calling updateOrganizationGroup.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/groups/{group}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'group'}}`, encodeURIComponent(String(requestParameters.group))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateGroupToJSON(requestParameters.updateGroup),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_GROUP[READ] permission on the specified organization
   * Update a platform group
   */
  async updateOrganizationGroup(
    requestParameters: UpdateOrganizationGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<User> {
    const response = await this.updateOrganizationGroupRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
