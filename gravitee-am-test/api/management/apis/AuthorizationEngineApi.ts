/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */

import * as runtime from '../runtime';
import {
  AuthorizationEngine,
  AuthorizationEngineFromJSON,
  AuthorizationEngineToJSON,
  NewAuthorizationEngine,
  NewAuthorizationEngineFromJSON,
  NewAuthorizationEngineToJSON,
  UpdateAuthorizationEngine,
  UpdateAuthorizationEngineFromJSON,
  UpdateAuthorizationEngineToJSON,
} from '../models';

export interface CreateAuthorizationEngineRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  newAuthorizationEngine: NewAuthorizationEngine;
}

export interface DeleteAuthorizationEngineRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  engineId: string;
}

export interface FindAuthorizationEngineRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  engineId: string;
}

export interface GetAuthorizationEnginePluginRequest {
  authorizationEngine: string;
}

export interface GetAuthorizationEnginePluginSchemaRequest {
  authorizationEngine: string;
}

export interface ListAuthorizationEnginePluginsRequest {
  expand?: Array<string>;
}

export interface ListAuthorizationEnginesRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
}

export interface UpdateAuthorizationEngineRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  engineId: string;
  updateAuthorizationEngine: UpdateAuthorizationEngine;
}

/**
 *
 */
export class AuthorizationEngineApi extends runtime.BaseAPI {
  /**
   * User must have the DOMAIN_AUTHORIZATION_ENGINE[CREATE] permission on the specified domain or DOMAIN_AUTHORIZATION_ENGINE[CREATE] permission on the specified environment or DOMAIN_AUTHORIZATION_ENGINE[CREATE] permission on the specified organization
   * Create an authorization engine
   */
  async createAuthorizationEngineRaw(
    requestParameters: CreateAuthorizationEngineRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<AuthorizationEngine>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling createAuthorizationEngine.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling createAuthorizationEngine.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling createAuthorizationEngine.',
      );
    }

    if (requestParameters.newAuthorizationEngine === null || requestParameters.newAuthorizationEngine === undefined) {
      throw new runtime.RequiredError(
        'newAuthorizationEngine',
        'Required parameter requestParameters.newAuthorizationEngine was null or undefined when calling createAuthorizationEngine.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/authorization-engines`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewAuthorizationEngineToJSON(requestParameters.newAuthorizationEngine),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizationEngineFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_AUTHORIZATION_ENGINE[CREATE] permission on the specified domain or DOMAIN_AUTHORIZATION_ENGINE[CREATE] permission on the specified environment or DOMAIN_AUTHORIZATION_ENGINE[CREATE] permission on the specified organization
   * Create an authorization engine
   */
  async createAuthorizationEngine(
    requestParameters: CreateAuthorizationEngineRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<AuthorizationEngine> {
    const response = await this.createAuthorizationEngineRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_AUTHORIZATION_ENGINE[DELETE] permission on the specified domain or DOMAIN_AUTHORIZATION_ENGINE[DELETE] permission on the specified environment or DOMAIN_AUTHORIZATION_ENGINE[DELETE] permission on the specified organization
   * Delete an authorization engine
   */
  async deleteAuthorizationEngineRaw(
    requestParameters: DeleteAuthorizationEngineRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling deleteAuthorizationEngine.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling deleteAuthorizationEngine.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling deleteAuthorizationEngine.',
      );
    }

    if (requestParameters.engineId === null || requestParameters.engineId === undefined) {
      throw new runtime.RequiredError(
        'engineId',
        'Required parameter requestParameters.engineId was null or undefined when calling deleteAuthorizationEngine.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/authorization-engines/{engineId}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'engineId'}}`, encodeURIComponent(String(requestParameters.engineId))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the DOMAIN_AUTHORIZATION_ENGINE[DELETE] permission on the specified domain or DOMAIN_AUTHORIZATION_ENGINE[DELETE] permission on the specified environment or DOMAIN_AUTHORIZATION_ENGINE[DELETE] permission on the specified organization
   * Delete an authorization engine
   */
  async deleteAuthorizationEngine(
    requestParameters: DeleteAuthorizationEngineRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.deleteAuthorizationEngineRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_AUTHORIZATION_ENGINE[READ] permission on the specified domain or DOMAIN_AUTHORIZATION_ENGINE[READ] permission on the specified environment or DOMAIN_AUTHORIZATION_ENGINE[READ] permission on the specified organization
   * Get an authorization engine
   */
  async findAuthorizationEngineRaw(
    requestParameters: FindAuthorizationEngineRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<AuthorizationEngine>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling findAuthorizationEngine.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling findAuthorizationEngine.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling findAuthorizationEngine.',
      );
    }

    if (requestParameters.engineId === null || requestParameters.engineId === undefined) {
      throw new runtime.RequiredError(
        'engineId',
        'Required parameter requestParameters.engineId was null or undefined when calling findAuthorizationEngine.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/authorization-engines/{engineId}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'engineId'}}`, encodeURIComponent(String(requestParameters.engineId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizationEngineFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_AUTHORIZATION_ENGINE[READ] permission on the specified domain or DOMAIN_AUTHORIZATION_ENGINE[READ] permission on the specified environment or DOMAIN_AUTHORIZATION_ENGINE[READ] permission on the specified organization
   * Get an authorization engine
   */
  async findAuthorizationEngine(
    requestParameters: FindAuthorizationEngineRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<AuthorizationEngine> {
    const response = await this.findAuthorizationEngineRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an authorization engine plugin
   */
  async getAuthorizationEnginePluginRaw(
    requestParameters: GetAuthorizationEnginePluginRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.authorizationEngine === null || requestParameters.authorizationEngine === undefined) {
      throw new runtime.RequiredError(
        'authorizationEngine',
        'Required parameter requestParameters.authorizationEngine was null or undefined when calling getAuthorizationEnginePlugin.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/authorization-engines/{authorizationEngine}`.replace(
          `{${'authorizationEngine'}}`,
          encodeURIComponent(String(requestParameters.authorizationEngine)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an authorization engine plugin
   */
  async getAuthorizationEnginePlugin(
    requestParameters: GetAuthorizationEnginePluginRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getAuthorizationEnginePluginRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an authorization engine plugin\'s schema
   */
  async getAuthorizationEnginePluginSchemaRaw(
    requestParameters: GetAuthorizationEnginePluginSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.authorizationEngine === null || requestParameters.authorizationEngine === undefined) {
      throw new runtime.RequiredError(
        'authorizationEngine',
        'Required parameter requestParameters.authorizationEngine was null or undefined when calling getAuthorizationEnginePluginSchema.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/authorization-engines/{authorizationEngine}/schema`.replace(
          `{${'authorizationEngine'}}`,
          encodeURIComponent(String(requestParameters.authorizationEngine)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an authorization engine plugin\'s schema
   */
  async getAuthorizationEnginePluginSchema(
    requestParameters: GetAuthorizationEnginePluginSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getAuthorizationEnginePluginSchemaRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List authorization engine plugins
   */
  async listAuthorizationEnginePluginsRaw(
    requestParameters: ListAuthorizationEnginePluginsRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.expand) {
      queryParameters['expand'] = requestParameters.expand;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/authorization-engines`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List authorization engine plugins
   */
  async listAuthorizationEnginePlugins(
    requestParameters: ListAuthorizationEnginePluginsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.listAuthorizationEnginePluginsRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_AUTHORIZATION_ENGINE[LIST] permission on the specified domain or DOMAIN_AUTHORIZATION_ENGINE[LIST] permission on the specified environment or DOMAIN_AUTHORIZATION_ENGINE[LIST] permission on the specified organization.
   * List registered authorization engines for a security domain
   */
  async listAuthorizationEnginesRaw(
    requestParameters: ListAuthorizationEnginesRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Array<AuthorizationEngine>>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling listAuthorizationEngines.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling listAuthorizationEngines.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling listAuthorizationEngines.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/authorization-engines`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => Array.from(jsonValue).map(AuthorizationEngineFromJSON));
  }

  /**
   * User must have the DOMAIN_AUTHORIZATION_ENGINE[LIST] permission on the specified domain or DOMAIN_AUTHORIZATION_ENGINE[LIST] permission on the specified environment or DOMAIN_AUTHORIZATION_ENGINE[LIST] permission on the specified organization.
   * List registered authorization engines for a security domain
   */
  async listAuthorizationEngines(
    requestParameters: ListAuthorizationEnginesRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Array<AuthorizationEngine>> {
    const response = await this.listAuthorizationEnginesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_AUTHORIZATION_ENGINE[UPDATE] permission on the specified domain or DOMAIN_AUTHORIZATION_ENGINE[UPDATE] permission on the specified environment or DOMAIN_AUTHORIZATION_ENGINE[UPDATE] permission on the specified organization
   * Update an authorization engine
   */
  async updateAuthorizationEngineRaw(
    requestParameters: UpdateAuthorizationEngineRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<AuthorizationEngine>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling updateAuthorizationEngine.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling updateAuthorizationEngine.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling updateAuthorizationEngine.',
      );
    }

    if (requestParameters.engineId === null || requestParameters.engineId === undefined) {
      throw new runtime.RequiredError(
        'engineId',
        'Required parameter requestParameters.engineId was null or undefined when calling updateAuthorizationEngine.',
      );
    }

    if (requestParameters.updateAuthorizationEngine === null || requestParameters.updateAuthorizationEngine === undefined) {
      throw new runtime.RequiredError(
        'updateAuthorizationEngine',
        'Required parameter requestParameters.updateAuthorizationEngine was null or undefined when calling updateAuthorizationEngine.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/authorization-engines/{engineId}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'engineId'}}`, encodeURIComponent(String(requestParameters.engineId))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateAuthorizationEngineToJSON(requestParameters.updateAuthorizationEngine),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizationEngineFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_AUTHORIZATION_ENGINE[UPDATE] permission on the specified domain or DOMAIN_AUTHORIZATION_ENGINE[UPDATE] permission on the specified environment or DOMAIN_AUTHORIZATION_ENGINE[UPDATE] permission on the specified organization
   * Update an authorization engine
   */
  async updateAuthorizationEngine(
    requestParameters: UpdateAuthorizationEngineRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<AuthorizationEngine> {
    const response = await this.updateAuthorizationEngineRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
