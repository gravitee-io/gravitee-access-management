/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */

import * as runtime from '../runtime';
import {
  ErrorEntity,
  ErrorEntityFromJSON,
  ErrorEntityToJSON,
  NotifierPlugin,
  NotifierPluginFromJSON,
  NotifierPluginToJSON,
} from '../models';

export interface GetAuthenticationDeviceNotifierPluginRequest {
  authDeviceNotifierId: string;
}

export interface GetAuthenticationDeviceNotifierPluginSchemaRequest {
  authDeviceNotifierId: string;
}

export interface GetAuthorizationEnginePluginRequest {
  authorizationEngine: string;
}

export interface GetAuthorizationEnginePluginSchemaRequest {
  authorizationEngine: string;
}

export interface GetBotDetectionPluginRequest {
  botDetection: string;
}

export interface GetBotDetectionPluginSchemaRequest {
  botDetection: string;
}

export interface GetCertificatePluginRequest {
  certificate: string;
}

export interface GetCertificatePluginSchemaRequest {
  certificate: string;
}

export interface GetDeviceIdentifierPluginRequest {
  deviceIdentifier: string;
}

export interface GetDeviceIdentifierPluginSchemaRequest {
  deviceIdentifier: string;
}

export interface GetExtensionGrant1Request {
  extensionGrant: string;
}

export interface GetExtensionGrantSchemaRequest {
  extensionGrant: string;
}

export interface GetFactorPluginRequest {
  factor: string;
}

export interface GetFactorPluginSchemaRequest {
  factor: string;
}

export interface GetIdentityProviderPluginRequest {
  identity: string;
}

export interface GetIdentityProviderPluginSchemaRequest {
  identity: string;
}

export interface GetNotifierRequest {
  notifierId: string;
}

export interface GetNotifierSchemaRequest {
  notifierId: string;
}

export interface GetPolicyRequest {
  policy: string;
}

export interface GetPolicyDocumentationRequest {
  policy: string;
}

export interface GetPolicySchemaRequest {
  policy: string;
}

export interface GetReporterRequest {
  reporter: string;
}

export interface GetReporterSchemaRequest {
  reporter: string;
}

export interface GetResource1Request {
  resource: string;
}

export interface GetResourceSchemaRequest {
  resource: string;
}

export interface ListAuthenticationDeviceNotifierPluginsRequest {
  expand?: Array<string>;
}

export interface ListAuthorizationEnginePluginsRequest {
  expand?: Array<string>;
}

export interface ListIdentityProviders2Request {
  external?: boolean;
  organization?: boolean;
  expand?: Array<string>;
}

export interface ListNotifiersRequest {
  expand?: Array<string>;
}

export interface ListPoliciesRequest {
  expand?: Array<string>;
}

export interface ListResourcePluginsRequest {
  expand?: Array<string>;
}

/**
 *
 */
export class PluginApi extends runtime.BaseAPI {
  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a Authentication Device Notifier plugin
   */
  async getAuthenticationDeviceNotifierPluginRaw(
    requestParameters: GetAuthenticationDeviceNotifierPluginRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.authDeviceNotifierId === null || requestParameters.authDeviceNotifierId === undefined) {
      throw new runtime.RequiredError(
        'authDeviceNotifierId',
        'Required parameter requestParameters.authDeviceNotifierId was null or undefined when calling getAuthenticationDeviceNotifierPlugin.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/auth-device-notifiers/{authDeviceNotifierId}`.replace(
          `{${'authDeviceNotifierId'}}`,
          encodeURIComponent(String(requestParameters.authDeviceNotifierId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a Authentication Device Notifier plugin
   */
  async getAuthenticationDeviceNotifierPlugin(
    requestParameters: GetAuthenticationDeviceNotifierPluginRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getAuthenticationDeviceNotifierPluginRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an Authentication Device Notifier plugin\'s schema
   */
  async getAuthenticationDeviceNotifierPluginSchemaRaw(
    requestParameters: GetAuthenticationDeviceNotifierPluginSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.authDeviceNotifierId === null || requestParameters.authDeviceNotifierId === undefined) {
      throw new runtime.RequiredError(
        'authDeviceNotifierId',
        'Required parameter requestParameters.authDeviceNotifierId was null or undefined when calling getAuthenticationDeviceNotifierPluginSchema.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/auth-device-notifiers/{authDeviceNotifierId}/schema`.replace(
          `{${'authDeviceNotifierId'}}`,
          encodeURIComponent(String(requestParameters.authDeviceNotifierId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an Authentication Device Notifier plugin\'s schema
   */
  async getAuthenticationDeviceNotifierPluginSchema(
    requestParameters: GetAuthenticationDeviceNotifierPluginSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getAuthenticationDeviceNotifierPluginSchemaRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an authorization engine plugin
   */
  async getAuthorizationEnginePluginRaw(
    requestParameters: GetAuthorizationEnginePluginRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.authorizationEngine === null || requestParameters.authorizationEngine === undefined) {
      throw new runtime.RequiredError(
        'authorizationEngine',
        'Required parameter requestParameters.authorizationEngine was null or undefined when calling getAuthorizationEnginePlugin.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/authorization-engines/{authorizationEngine}`.replace(
          `{${'authorizationEngine'}}`,
          encodeURIComponent(String(requestParameters.authorizationEngine)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an authorization engine plugin
   */
  async getAuthorizationEnginePlugin(
    requestParameters: GetAuthorizationEnginePluginRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getAuthorizationEnginePluginRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an authorization engine plugin\'s schema
   */
  async getAuthorizationEnginePluginSchemaRaw(
    requestParameters: GetAuthorizationEnginePluginSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.authorizationEngine === null || requestParameters.authorizationEngine === undefined) {
      throw new runtime.RequiredError(
        'authorizationEngine',
        'Required parameter requestParameters.authorizationEngine was null or undefined when calling getAuthorizationEnginePluginSchema.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/authorization-engines/{authorizationEngine}/schema`.replace(
          `{${'authorizationEngine'}}`,
          encodeURIComponent(String(requestParameters.authorizationEngine)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an authorization engine plugin\'s schema
   */
  async getAuthorizationEnginePluginSchema(
    requestParameters: GetAuthorizationEnginePluginSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getAuthorizationEnginePluginSchemaRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a Bot Detection plugin
   */
  async getBotDetectionPluginRaw(
    requestParameters: GetBotDetectionPluginRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.botDetection === null || requestParameters.botDetection === undefined) {
      throw new runtime.RequiredError(
        'botDetection',
        'Required parameter requestParameters.botDetection was null or undefined when calling getBotDetectionPlugin.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/bot-detections/{botDetection}`.replace(
          `{${'botDetection'}}`,
          encodeURIComponent(String(requestParameters.botDetection)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a Bot Detection plugin
   */
  async getBotDetectionPlugin(
    requestParameters: GetBotDetectionPluginRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getBotDetectionPluginRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a Bot Detection plugin\'s schema
   */
  async getBotDetectionPluginSchemaRaw(
    requestParameters: GetBotDetectionPluginSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.botDetection === null || requestParameters.botDetection === undefined) {
      throw new runtime.RequiredError(
        'botDetection',
        'Required parameter requestParameters.botDetection was null or undefined when calling getBotDetectionPluginSchema.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/bot-detections/{botDetection}/schema`.replace(
          `{${'botDetection'}}`,
          encodeURIComponent(String(requestParameters.botDetection)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a Bot Detection plugin\'s schema
   */
  async getBotDetectionPluginSchema(
    requestParameters: GetBotDetectionPluginSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getBotDetectionPluginSchemaRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an certificate plugin
   */
  async getCertificatePluginRaw(
    requestParameters: GetCertificatePluginRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.certificate === null || requestParameters.certificate === undefined) {
      throw new runtime.RequiredError(
        'certificate',
        'Required parameter requestParameters.certificate was null or undefined when calling getCertificatePlugin.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/certificates/{certificate}`.replace(
          `{${'certificate'}}`,
          encodeURIComponent(String(requestParameters.certificate)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an certificate plugin
   */
  async getCertificatePlugin(
    requestParameters: GetCertificatePluginRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getCertificatePluginRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an certificate\'s schema
   */
  async getCertificatePluginSchemaRaw(
    requestParameters: GetCertificatePluginSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.certificate === null || requestParameters.certificate === undefined) {
      throw new runtime.RequiredError(
        'certificate',
        'Required parameter requestParameters.certificate was null or undefined when calling getCertificatePluginSchema.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/certificates/{certificate}/schema`.replace(
          `{${'certificate'}}`,
          encodeURIComponent(String(requestParameters.certificate)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an certificate\'s schema
   */
  async getCertificatePluginSchema(
    requestParameters: GetCertificatePluginSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getCertificatePluginSchemaRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a device identifier plugin
   */
  async getDeviceIdentifierPluginRaw(
    requestParameters: GetDeviceIdentifierPluginRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.deviceIdentifier === null || requestParameters.deviceIdentifier === undefined) {
      throw new runtime.RequiredError(
        'deviceIdentifier',
        'Required parameter requestParameters.deviceIdentifier was null or undefined when calling getDeviceIdentifierPlugin.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/device-identifiers/{deviceIdentifier}`.replace(
          `{${'deviceIdentifier'}}`,
          encodeURIComponent(String(requestParameters.deviceIdentifier)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a device identifier plugin
   */
  async getDeviceIdentifierPlugin(
    requestParameters: GetDeviceIdentifierPluginRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getDeviceIdentifierPluginRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a device identifier plugin\'s schema
   */
  async getDeviceIdentifierPluginSchemaRaw(
    requestParameters: GetDeviceIdentifierPluginSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.deviceIdentifier === null || requestParameters.deviceIdentifier === undefined) {
      throw new runtime.RequiredError(
        'deviceIdentifier',
        'Required parameter requestParameters.deviceIdentifier was null or undefined when calling getDeviceIdentifierPluginSchema.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/device-identifiers/{deviceIdentifier}/schema`.replace(
          `{${'deviceIdentifier'}}`,
          encodeURIComponent(String(requestParameters.deviceIdentifier)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a device identifier plugin\'s schema
   */
  async getDeviceIdentifierPluginSchema(
    requestParameters: GetDeviceIdentifierPluginSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getDeviceIdentifierPluginSchemaRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an extension grant plugin
   */
  async getExtensionGrant1Raw(
    requestParameters: GetExtensionGrant1Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.extensionGrant === null || requestParameters.extensionGrant === undefined) {
      throw new runtime.RequiredError(
        'extensionGrant',
        'Required parameter requestParameters.extensionGrant was null or undefined when calling getExtensionGrant1.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/extensionGrants/{extensionGrant}`.replace(
          `{${'extensionGrant'}}`,
          encodeURIComponent(String(requestParameters.extensionGrant)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an extension grant plugin
   */
  async getExtensionGrant1(
    requestParameters: GetExtensionGrant1Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getExtensionGrant1Raw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an extension grant plugin\'s schema
   */
  async getExtensionGrantSchemaRaw(
    requestParameters: GetExtensionGrantSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.extensionGrant === null || requestParameters.extensionGrant === undefined) {
      throw new runtime.RequiredError(
        'extensionGrant',
        'Required parameter requestParameters.extensionGrant was null or undefined when calling getExtensionGrantSchema.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/extensionGrants/{extensionGrant}/schema`.replace(
          `{${'extensionGrant'}}`,
          encodeURIComponent(String(requestParameters.extensionGrant)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an extension grant plugin\'s schema
   */
  async getExtensionGrantSchema(
    requestParameters: GetExtensionGrantSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getExtensionGrantSchemaRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a factor plugin
   */
  async getFactorPluginRaw(
    requestParameters: GetFactorPluginRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.factor === null || requestParameters.factor === undefined) {
      throw new runtime.RequiredError(
        'factor',
        'Required parameter requestParameters.factor was null or undefined when calling getFactorPlugin.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/factors/{factor}`.replace(`{${'factor'}}`, encodeURIComponent(String(requestParameters.factor))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a factor plugin
   */
  async getFactorPlugin(
    requestParameters: GetFactorPluginRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getFactorPluginRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a factor plugin\'s schema
   */
  async getFactorPluginSchemaRaw(
    requestParameters: GetFactorPluginSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.factor === null || requestParameters.factor === undefined) {
      throw new runtime.RequiredError(
        'factor',
        'Required parameter requestParameters.factor was null or undefined when calling getFactorPluginSchema.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/factors/{factor}/schema`.replace(`{${'factor'}}`, encodeURIComponent(String(requestParameters.factor))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a factor plugin\'s schema
   */
  async getFactorPluginSchema(
    requestParameters: GetFactorPluginSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getFactorPluginSchemaRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an identity provider
   */
  async getIdentityProviderPluginRaw(
    requestParameters: GetIdentityProviderPluginRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.identity === null || requestParameters.identity === undefined) {
      throw new runtime.RequiredError(
        'identity',
        'Required parameter requestParameters.identity was null or undefined when calling getIdentityProviderPlugin.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/identities/{identity}`.replace(`{${'identity'}}`, encodeURIComponent(String(requestParameters.identity))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an identity provider
   */
  async getIdentityProviderPlugin(
    requestParameters: GetIdentityProviderPluginRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getIdentityProviderPluginRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an identity provider plugin\'s schema
   */
  async getIdentityProviderPluginSchemaRaw(
    requestParameters: GetIdentityProviderPluginSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.identity === null || requestParameters.identity === undefined) {
      throw new runtime.RequiredError(
        'identity',
        'Required parameter requestParameters.identity was null or undefined when calling getIdentityProviderPluginSchema.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/identities/{identity}/schema`.replace(
          `{${'identity'}}`,
          encodeURIComponent(String(requestParameters.identity)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get an identity provider plugin\'s schema
   */
  async getIdentityProviderPluginSchema(
    requestParameters: GetIdentityProviderPluginSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getIdentityProviderPluginSchemaRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a notifier
   */
  async getNotifierRaw(
    requestParameters: GetNotifierRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<NotifierPlugin>> {
    if (requestParameters.notifierId === null || requestParameters.notifierId === undefined) {
      throw new runtime.RequiredError(
        'notifierId',
        'Required parameter requestParameters.notifierId was null or undefined when calling getNotifier.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/notifiers/{notifierId}`.replace(
          `{${'notifierId'}}`,
          encodeURIComponent(String(requestParameters.notifierId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => NotifierPluginFromJSON(jsonValue));
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a notifier
   */
  async getNotifier(
    requestParameters: GetNotifierRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<NotifierPlugin> {
    const response = await this.getNotifierRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a notifier plugin\'s schema
   */
  async getNotifierSchemaRaw(
    requestParameters: GetNotifierSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters.notifierId === null || requestParameters.notifierId === undefined) {
      throw new runtime.RequiredError(
        'notifierId',
        'Required parameter requestParameters.notifierId was null or undefined when calling getNotifierSchema.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/notifiers/{notifierId}/schema`.replace(
          `{${'notifierId'}}`,
          encodeURIComponent(String(requestParameters.notifierId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a notifier plugin\'s schema
   */
  async getNotifierSchema(
    requestParameters: GetNotifierSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<string> {
    const response = await this.getNotifierSchemaRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a policy plugin
   */
  async getPolicyRaw(
    requestParameters: GetPolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.policy === null || requestParameters.policy === undefined) {
      throw new runtime.RequiredError(
        'policy',
        'Required parameter requestParameters.policy was null or undefined when calling getPolicy.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/policies/{policy}`.replace(`{${'policy'}}`, encodeURIComponent(String(requestParameters.policy))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a policy plugin
   */
  async getPolicy(requestParameters: GetPolicyRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.getPolicyRaw(requestParameters, initOverrides);
  }

  /**
   * Get a policy plugin\'s documentation
   */
  async getPolicyDocumentationRaw(
    requestParameters: GetPolicyDocumentationRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.policy === null || requestParameters.policy === undefined) {
      throw new runtime.RequiredError(
        'policy',
        'Required parameter requestParameters.policy was null or undefined when calling getPolicyDocumentation.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/policies/{policy}/documentation`.replace(
          `{${'policy'}}`,
          encodeURIComponent(String(requestParameters.policy)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Get a policy plugin\'s documentation
   */
  async getPolicyDocumentation(
    requestParameters: GetPolicyDocumentationRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getPolicyDocumentationRaw(requestParameters, initOverrides);
  }

  /**
   * Get a policy plugin\'s schema
   */
  async getPolicySchemaRaw(
    requestParameters: GetPolicySchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.policy === null || requestParameters.policy === undefined) {
      throw new runtime.RequiredError(
        'policy',
        'Required parameter requestParameters.policy was null or undefined when calling getPolicySchema.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/policies/{policy}/schema`.replace(`{${'policy'}}`, encodeURIComponent(String(requestParameters.policy))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Get a policy plugin\'s schema
   */
  async getPolicySchema(
    requestParameters: GetPolicySchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getPolicySchemaRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a reporter plugin
   */
  async getReporterRaw(
    requestParameters: GetReporterRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.reporter === null || requestParameters.reporter === undefined) {
      throw new runtime.RequiredError(
        'reporter',
        'Required parameter requestParameters.reporter was null or undefined when calling getReporter.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/reporters/{reporter}`.replace(`{${'reporter'}}`, encodeURIComponent(String(requestParameters.reporter))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a reporter plugin
   */
  async getReporter(requestParameters: GetReporterRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.getReporterRaw(requestParameters, initOverrides);
  }

  /**
   * Get a reporter plugin\'s schema
   */
  async getReporterSchemaRaw(
    requestParameters: GetReporterSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.reporter === null || requestParameters.reporter === undefined) {
      throw new runtime.RequiredError(
        'reporter',
        'Required parameter requestParameters.reporter was null or undefined when calling getReporterSchema.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/reporters/{reporter}/schema`.replace(
          `{${'reporter'}}`,
          encodeURIComponent(String(requestParameters.reporter)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Get a reporter plugin\'s schema
   */
  async getReporterSchema(
    requestParameters: GetReporterSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getReporterSchemaRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a resource plugin
   */
  async getResource1Raw(
    requestParameters: GetResource1Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.resource === null || requestParameters.resource === undefined) {
      throw new runtime.RequiredError(
        'resource',
        'Required parameter requestParameters.resource was null or undefined when calling getResource1.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/resources/{resource}`.replace(`{${'resource'}}`, encodeURIComponent(String(requestParameters.resource))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a resource plugin
   */
  async getResource1(requestParameters: GetResource1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.getResource1Raw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a resource plugin\'s schema
   */
  async getResourceSchemaRaw(
    requestParameters: GetResourceSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.resource === null || requestParameters.resource === undefined) {
      throw new runtime.RequiredError(
        'resource',
        'Required parameter requestParameters.resource was null or undefined when calling getResourceSchema.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/resources/{resource}/schema`.replace(
          `{${'resource'}}`,
          encodeURIComponent(String(requestParameters.resource)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * Get a resource plugin\'s schema
   */
  async getResourceSchema(
    requestParameters: GetResourceSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getResourceSchemaRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List authentication device notifier plugins
   */
  async listAuthenticationDeviceNotifierPluginsRaw(
    requestParameters: ListAuthenticationDeviceNotifierPluginsRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.expand) {
      queryParameters['expand'] = requestParameters.expand;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/auth-device-notifiers`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List authentication device notifier plugins
   */
  async listAuthenticationDeviceNotifierPlugins(
    requestParameters: ListAuthenticationDeviceNotifierPluginsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.listAuthenticationDeviceNotifierPluginsRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List authorization engine plugins
   */
  async listAuthorizationEnginePluginsRaw(
    requestParameters: ListAuthorizationEnginePluginsRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.expand) {
      queryParameters['expand'] = requestParameters.expand;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/authorization-engines`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List authorization engine plugins
   */
  async listAuthorizationEnginePlugins(
    requestParameters: ListAuthorizationEnginePluginsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.listAuthorizationEnginePluginsRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List bot detection plugins
   */
  async listBotDetectionsPluginsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/bot-detections`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List bot detection plugins
   */
  async listBotDetectionsPlugins(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.listBotDetectionsPluginsRaw(initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List certificate plugins
   */
  async listCertificatesPluginsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/certificates`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List certificate plugins
   */
  async listCertificatesPlugins(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.listCertificatesPluginsRaw(initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List device identifier plugins
   */
  async listDeviceIdentifierPluginsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/device-identifiers`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List device identifier plugins
   */
  async listDeviceIdentifierPlugins(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.listDeviceIdentifierPluginsRaw(initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List extension grant plugins
   */
  async listExtensionGrants1Raw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/extensionGrants`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List extension grant plugins
   */
  async listExtensionGrants1(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.listExtensionGrants1Raw(initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List factor plugins
   */
  async listFactorPluginsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/factors`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List factor plugins
   */
  async listFactorPlugins(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.listFactorPluginsRaw(initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List identity provider plugins
   */
  async listIdentityProviders2Raw(
    requestParameters: ListIdentityProviders2Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.external !== undefined) {
      queryParameters['external'] = requestParameters.external;
    }

    if (requestParameters.organization !== undefined) {
      queryParameters['organization'] = requestParameters.organization;
    }

    if (requestParameters.expand) {
      queryParameters['expand'] = requestParameters.expand;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/identities`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List identity provider plugins
   */
  async listIdentityProviders2(
    requestParameters: ListIdentityProviders2Request = {},
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.listIdentityProviders2Raw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List all available notifier plugins
   */
  async listNotifiersRaw(
    requestParameters: ListNotifiersRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Array<NotifierPlugin>>> {
    const queryParameters: any = {};

    if (requestParameters.expand) {
      queryParameters['expand'] = requestParameters.expand;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/notifiers`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotifierPluginFromJSON));
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List all available notifier plugins
   */
  async listNotifiers(
    requestParameters: ListNotifiersRequest = {},
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Array<NotifierPlugin>> {
    const response = await this.listNotifiersRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List policy plugins
   */
  async listPoliciesRaw(
    requestParameters: ListPoliciesRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.expand) {
      queryParameters['expand'] = requestParameters.expand;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/policies`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List policy plugins
   */
  async listPolicies(
    requestParameters: ListPoliciesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.listPoliciesRaw(requestParameters, initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List reporter plugins
   */
  async listReporterPluginsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/reporters`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List reporter plugins
   */
  async listReporterPlugins(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.listReporterPluginsRaw(initOverrides);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List resource plugins
   */
  async listResourcePluginsRaw(
    requestParameters: ListResourcePluginsRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.expand) {
      queryParameters['expand'] = requestParameters.expand;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/platform/plugins/resources`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * There is no particular permission needed. User must be authenticated.
   * List resource plugins
   */
  async listResourcePlugins(
    requestParameters: ListResourcePluginsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.listResourcePluginsRaw(requestParameters, initOverrides);
  }
}
