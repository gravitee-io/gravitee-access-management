/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */

import * as runtime from '../runtime';
import {
  Entrypoint,
  EntrypointFromJSON,
  EntrypointToJSON,
  NewEntrypoint,
  NewEntrypointFromJSON,
  NewEntrypointToJSON,
  UpdateEntrypoint,
  UpdateEntrypointFromJSON,
  UpdateEntrypointToJSON,
} from '../models';

export interface DeleteRequest {
  organizationId: string;
  entrypointId: string;
}

export interface CreateRequest {
  organizationId: string;
  newEntrypoint: NewEntrypoint;
}

export interface Get2Request {
  organizationId: string;
  entrypointId: string;
}

export interface List1Request {
  organizationId: string;
}

export interface UpdateRequest {
  organizationId: string;
  entrypointId: string;
  updateEntrypoint: UpdateEntrypoint;
}

/**
 *
 */
export class EntrypointsApi extends runtime.BaseAPI {
  /**
   * User must have the ORGANIZATION_ENTRYPOINT[DELETE] permission on the specified organization
   * Delete the sharding entrypoint
   */
  async _deleteRaw(
    requestParameters: DeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling _delete.',
      );
    }

    if (requestParameters.entrypointId === null || requestParameters.entrypointId === undefined) {
      throw new runtime.RequiredError(
        'entrypointId',
        'Required parameter requestParameters.entrypointId was null or undefined when calling _delete.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/entrypoints/{entrypointId}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'entrypointId'}}`, encodeURIComponent(String(requestParameters.entrypointId))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_ENTRYPOINT[DELETE] permission on the specified organization
   * Delete the sharding entrypoint
   */
  async _delete(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this._deleteRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_ENTRYPOINT[CREATE] permission on the specified organization
   * Create a entrypoint
   */
  async createRaw(
    requestParameters: CreateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling create.',
      );
    }

    if (requestParameters.newEntrypoint === null || requestParameters.newEntrypoint === undefined) {
      throw new runtime.RequiredError(
        'newEntrypoint',
        'Required parameter requestParameters.newEntrypoint was null or undefined when calling create.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/entrypoints`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewEntrypointToJSON(requestParameters.newEntrypoint),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_ENTRYPOINT[CREATE] permission on the specified organization
   * Create a entrypoint
   */
  async create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.createRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_ENTRYPOINT[READ] permission on the specified organization
   * Get a sharding entrypoint
   */
  async get2Raw(
    requestParameters: Get2Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Entrypoint>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling get2.',
      );
    }

    if (requestParameters.entrypointId === null || requestParameters.entrypointId === undefined) {
      throw new runtime.RequiredError(
        'entrypointId',
        'Required parameter requestParameters.entrypointId was null or undefined when calling get2.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/entrypoints/{entrypointId}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'entrypointId'}}`, encodeURIComponent(String(requestParameters.entrypointId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntrypointFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_ENTRYPOINT[READ] permission on the specified organization
   * Get a sharding entrypoint
   */
  async get2(requestParameters: Get2Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Entrypoint> {
    const response = await this.get2Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION[LIST] permission on the specified organization. Each returned entrypoint is filtered and contains only basic information such as id and name.
   * List entrypoints
   */
  async list1Raw(
    requestParameters: List1Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Array<Entrypoint>>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling list1.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/entrypoints`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => Array.from(jsonValue).map(EntrypointFromJSON));
  }

  /**
   * User must have the ORGANIZATION[LIST] permission on the specified organization. Each returned entrypoint is filtered and contains only basic information such as id and name.
   * List entrypoints
   */
  async list1(requestParameters: List1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Entrypoint>> {
    const response = await this.list1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_ENTRYPOINT[UPDATE] permission on the specified organization
   * Update the sharding entrypoint
   */
  async updateRaw(
    requestParameters: UpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Entrypoint>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling update.',
      );
    }

    if (requestParameters.entrypointId === null || requestParameters.entrypointId === undefined) {
      throw new runtime.RequiredError(
        'entrypointId',
        'Required parameter requestParameters.entrypointId was null or undefined when calling update.',
      );
    }

    if (requestParameters.updateEntrypoint === null || requestParameters.updateEntrypoint === undefined) {
      throw new runtime.RequiredError(
        'updateEntrypoint',
        'Required parameter requestParameters.updateEntrypoint was null or undefined when calling update.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/entrypoints/{entrypointId}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'entrypointId'}}`, encodeURIComponent(String(requestParameters.entrypointId))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateEntrypointToJSON(requestParameters.updateEntrypoint),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EntrypointFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_ENTRYPOINT[UPDATE] permission on the specified organization
   * Update the sharding entrypoint
   */
  async update(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Entrypoint> {
    const response = await this.updateRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
