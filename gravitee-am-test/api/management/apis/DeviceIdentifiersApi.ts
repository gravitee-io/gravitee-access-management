/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  BotDetection,
  BotDetectionFromJSON,
  DeviceIdentifier,
  DeviceIdentifiersResourceFromJSON,
  NewDeviceIdentifier,
  NewDeviceIdentifierFromJSON,
  NewDeviceIdentifierToJSON,
  UpdateDeviceIdentifier,
  UpdateDeviceIdentifierToJSON,
} from '../models';

export interface CreateDeviceIdentifierRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  deviceIdentifier: NewDeviceIdentifier;
}

export interface DeleteDeviceIdentifierRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  deviceIdentifier: string;
}

export interface GetDeviceIdentifierRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  deviceIdentifier: string;
}

export interface ListDeviceIdentifierRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
}

export interface UpdateDeviceIdentifierRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  deviceIdentifier: string;
  deviceIdentifier2: UpdateDeviceIdentifier;
}

/**
 *
 */
export class DeviceIdentifiersApi extends runtime.BaseAPI {
  /**
   * User must have the DOMAIN_DEVICE_IDENTIFIER[CREATE] permission on the specified domain or DOMAIN_DEVICE_IDENTIFIER[CREATE] permission on the specified environment or DOMAIN_DEVICE_IDENTIFIER[CREATE] permission on the specified organization
   * Create a device identifier
   */
  async createDeviceIdentifierRaw(
    requestParameters: CreateDeviceIdentifierRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<NewDeviceIdentifier>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling createDeviceIdentifierRaw.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling createDeviceIdentifierRaw.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling createDeviceIdentifierRaw.',
      );
    }

    if (requestParameters.deviceIdentifier === null || requestParameters.deviceIdentifier === undefined) {
      throw new runtime.RequiredError(
        'deviceIdentifier',
        'Required parameter requestParameters.deviceIdentifier was null or undefined when calling createDeviceIdentifierRaw.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/device-identifiers`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewDeviceIdentifierToJSON(requestParameters.deviceIdentifier),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => NewDeviceIdentifierFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_DEVICE_IDENTIFIER[CREATE] permission on the specified domain or DOMAIN_DEVICE_IDENTIFIER[CREATE] permission on the specified environment or DOMAIN_DEVICE_IDENTIFIER[CREATE] permission on the specified organization
   * Create a device identifier
   */
  async createDeviceIdentifier(
    requestParameters: CreateDeviceIdentifierRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<NewDeviceIdentifier> {
    const device = await this.createDeviceIdentifierRaw(requestParameters, initOverrides);
    return await device.value();
  }

  /**
   * User must have the DOMAIN_DEVICE_IDENTIFIER[DELETE] permission on the specified domain or DOMAIN_DEVICE_IDENTIFIER[DELETE] permission on the specified environment or DOMAIN_DEVICE_IDENTIFIER[DELETE] permission on the specified organization
   * Delete a Device identifier
   */
  async deleteDeviceIdentifierRaw(
    requestParameters: DeleteDeviceIdentifierRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling deleteDeviceIdentifierRaw.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling deleteDeviceIdentifierRaw.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling deleteDeviceIdentifierRaw.',
      );
    }

    if (requestParameters.deviceIdentifier === null || requestParameters.deviceIdentifier === undefined) {
      throw new runtime.RequiredError(
        'deviceIdentifier',
        'Required parameter requestParameters.deviceIdentifier was null or undefined when calling deleteDeviceIdentifierRaw.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/device-identifiers/{deviceIdentifier}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'deviceIdentifier'}}`, encodeURIComponent(String(requestParameters.deviceIdentifier))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the DOMAIN_DEVICE_IDENTIFIER[DELETE] permission on the specified domain or DOMAIN_DEVICE_IDENTIFIER[DELETE] permission on the specified environment or DOMAIN_DEVICE_IDENTIFIER[DELETE] permission on the specified organization
   * Delete a Device identifier
   */
  async deleteDeviceIdentifier(
    requestParameters: DeleteDeviceIdentifierRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    const apiResponse = await this.deleteDeviceIdentifierRaw(requestParameters, initOverrides);
    return await apiResponse.value();
  }

  /**
   * User must have the DOMAIN_DEVICE_IDENTIFIER[READ] permission on the specified domain or DOMAIN_DEVICE_IDENTIFIER[READ] permission on the specified environment or DOMAIN_DEVICE_IDENTIFIER[READ] permission on the specified organization
   * Get a Device identifier
   */
  async getDeviceIdentifierRaw(
    requestParameters: GetDeviceIdentifierRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<DeviceIdentifier>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling get16.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling get16.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling get16.');
    }

    if (requestParameters.deviceIdentifier === null || requestParameters.deviceIdentifier === undefined) {
      throw new runtime.RequiredError(
        'deviceIdentifier',
        'Required parameter requestParameters.deviceIdentifier was null or undefined when calling get16.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/device-identifiers/{deviceIdentifier}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'deviceIdentifier'}}`, encodeURIComponent(String(requestParameters.deviceIdentifier))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => DeviceIdentifiersResourceFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_DEVICE_IDENTIFIER[READ] permission on the specified domain or DOMAIN_DEVICE_IDENTIFIER[READ] permission on the specified environment or DOMAIN_DEVICE_IDENTIFIER[READ] permission on the specified organization
   * Get a Device identifier
   */
  async getDeviceIdentifier(
    requestParameters: GetDeviceIdentifierRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<DeviceIdentifier> {
    const response = await this.getDeviceIdentifierRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_DEVICE_IDENTIFIERS[LIST] permission on the specified domain or DOMAIN_DEVICE_IDENTIFIERS[LIST] permission on the specified environment or DOMAIN_DEVICE_IDENTIFIERS[LIST] permission on the specified organization Each returned bot detections is filtered and contains only basic information such as id, name.
   * List registered device identifiers for a security domain
   */
  async listDeviceIdentifiersRaw(
    requestParameters: ListDeviceIdentifierRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Array<BotDetection>>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling list16.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling list16.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling list16.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/device-identifiers`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BotDetectionFromJSON));
  }

  /**
   * User must have the DOMAIN_DEVICE_IDENTIFIERS[LIST] permission on the specified domain or DOMAIN_DEVICE_IDENTIFIERS[LIST] permission on the specified environment or DOMAIN_DEVICE_IDENTIFIERS[LIST] permission on the specified organization Each returned bot detections is filtered and contains only basic information such as id, name.
   * List registered device identifiers for a security domain
   */
  async listDeviceIdentifiers(
    requestParameters: ListDeviceIdentifierRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Array<BotDetection>> {
    const response = await this.listDeviceIdentifiersRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_DEVICE_IDENTIFIER[UPDATE] permission on the specified domain or DOMAIN_DEVICE_IDENTIFIER[UPDATE] permission on the specified environment or DOMAIN_DEVICE_IDENTIFIER[UPDATE] permission on the specified organization
   * Update a Device identifier
   */
  async updateDeviceIdentifierRaw(
    requestParameters: UpdateDeviceIdentifierRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<BotDetection>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling update7.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling update7.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling update7.');
    }

    if (requestParameters.deviceIdentifier === null || requestParameters.deviceIdentifier === undefined) {
      throw new runtime.RequiredError(
        'deviceIdentifier',
        'Required parameter requestParameters.deviceIdentifier was null or undefined when calling update7.',
      );
    }

    if (requestParameters.deviceIdentifier2 === null || requestParameters.deviceIdentifier2 === undefined) {
      throw new runtime.RequiredError(
        'deviceIdentifier2',
        'Required parameter requestParameters.deviceIdentifier2 was null or undefined when calling update7.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/device-identifiers/{deviceIdentifier}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'deviceIdentifier'}}`, encodeURIComponent(String(requestParameters.deviceIdentifier))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateDeviceIdentifierToJSON(requestParameters.deviceIdentifier2),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => BotDetectionFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_DEVICE_IDENTIFIER[UPDATE] permission on the specified domain or DOMAIN_DEVICE_IDENTIFIER[UPDATE] permission on the specified environment or DOMAIN_DEVICE_IDENTIFIER[UPDATE] permission on the specified organization
   * Update a Device identifier
   */
  async updateDeviceIdentifier(
    requestParameters: UpdateDeviceIdentifierRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<BotDetection> {
    const response = await this.updateDeviceIdentifierRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
