/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */

import * as runtime from '../runtime';
import {
  Form,
  FormFromJSON,
  FormToJSON,
  NewForm,
  NewFormFromJSON,
  NewFormToJSON,
  PreviewRequest,
  PreviewRequestFromJSON,
  PreviewRequestToJSON,
  PreviewResponse,
  PreviewResponseFromJSON,
  PreviewResponseToJSON,
  UpdateForm,
  UpdateFormFromJSON,
  UpdateFormToJSON,
} from '../models';

export interface CreateApplicationFormRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  application: string;
  newForm: NewForm;
}

export interface CreateFormRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  newForm: NewForm;
}

export interface CreateOrganizationFormRequest {
  organizationId: string;
  newForm: NewForm;
}

export interface DeleteApplicationFormRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  application: string;
  form: string;
}

export interface DeleteDomainFormRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  form: string;
}

export interface DeleteFormRequest {
  organizationId: string;
  form: string;
}

export interface FindApplicationFormRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  application: string;
  template: FindApplicationFormTemplateEnum;
}

export interface FindFormRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  template: FindFormTemplateEnum;
}

export interface FindOrganizationFormTemplateRequest {
  organizationId: string;
  template: FindOrganizationFormTemplateTemplateEnum;
}

export interface RenderDomainTemplateRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  previewRequest: PreviewRequest;
}

export interface UpdateApplicationFormRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  application: string;
  form: string;
  updateForm: UpdateForm;
}

export interface UpdateDomainFormRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  form: string;
  updateForm: UpdateForm;
}

export interface UpdateFormRequest {
  organizationId: string;
  form: string;
  updateForm: UpdateForm;
}

/**
 *
 */
export class FormApi extends runtime.BaseAPI {
  /**
   * User must have APPLICATION_FORM[CREATE] permission on the specified application or APPLICATION_FORM[CREATE] permission on the specified domain or APPLICATION_FORM[CREATE] permission on the specified environment or APPLICATION_FORM[CREATE] permission on the specified organization
   * Create a form for an application
   */
  async createApplicationFormRaw(
    requestParameters: CreateApplicationFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling createApplicationForm.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling createApplicationForm.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling createApplicationForm.',
      );
    }

    if (requestParameters.application === null || requestParameters.application === undefined) {
      throw new runtime.RequiredError(
        'application',
        'Required parameter requestParameters.application was null or undefined when calling createApplicationForm.',
      );
    }

    if (requestParameters.newForm === null || requestParameters.newForm === undefined) {
      throw new runtime.RequiredError(
        'newForm',
        'Required parameter requestParameters.newForm was null or undefined when calling createApplicationForm.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/applications/{application}/forms`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'application'}}`, encodeURIComponent(String(requestParameters.application))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewFormToJSON(requestParameters.newForm),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have APPLICATION_FORM[CREATE] permission on the specified application or APPLICATION_FORM[CREATE] permission on the specified domain or APPLICATION_FORM[CREATE] permission on the specified environment or APPLICATION_FORM[CREATE] permission on the specified organization
   * Create a form for an application
   */
  async createApplicationForm(
    requestParameters: CreateApplicationFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.createApplicationFormRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_FORM[CREATE] permission on the specified domain or DOMAIN_FORM[CREATE] permission on the specified environment or DOMAIN_FORM[CREATE] permission on the specified organization
   * Create a form
   */
  async createFormRaw(
    requestParameters: CreateFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling createForm.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling createForm.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling createForm.',
      );
    }

    if (requestParameters.newForm === null || requestParameters.newForm === undefined) {
      throw new runtime.RequiredError(
        'newForm',
        'Required parameter requestParameters.newForm was null or undefined when calling createForm.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/forms`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewFormToJSON(requestParameters.newForm),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the DOMAIN_FORM[CREATE] permission on the specified domain or DOMAIN_FORM[CREATE] permission on the specified environment or DOMAIN_FORM[CREATE] permission on the specified organization
   * Create a form
   */
  async createForm(requestParameters: CreateFormRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.createFormRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_FORM[CREATE] permission on the specified organization
   * Create a form
   */
  async createOrganizationFormRaw(
    requestParameters: CreateOrganizationFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling createOrganizationForm.',
      );
    }

    if (requestParameters.newForm === null || requestParameters.newForm === undefined) {
      throw new runtime.RequiredError(
        'newForm',
        'Required parameter requestParameters.newForm was null or undefined when calling createOrganizationForm.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/forms`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewFormToJSON(requestParameters.newForm),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_FORM[CREATE] permission on the specified organization
   * Create a form
   */
  async createOrganizationForm(
    requestParameters: CreateOrganizationFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.createOrganizationFormRaw(requestParameters, initOverrides);
  }

  /**
   * User must have APPLICATION_FORM[DELETE] permission on the specified application or APPLICATION_FORM[DELETE] permission on the specified domain or APPLICATION_FORM[DELETE] permission on the specified environment or APPLICATION_FORM[DELETE] permission on the specified organization
   * Delete a form for an application
   */
  async deleteApplicationFormRaw(
    requestParameters: DeleteApplicationFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling deleteApplicationForm.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling deleteApplicationForm.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling deleteApplicationForm.',
      );
    }

    if (requestParameters.application === null || requestParameters.application === undefined) {
      throw new runtime.RequiredError(
        'application',
        'Required parameter requestParameters.application was null or undefined when calling deleteApplicationForm.',
      );
    }

    if (requestParameters.form === null || requestParameters.form === undefined) {
      throw new runtime.RequiredError(
        'form',
        'Required parameter requestParameters.form was null or undefined when calling deleteApplicationForm.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/applications/{application}/forms/{form}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'application'}}`, encodeURIComponent(String(requestParameters.application)))
          .replace(`{${'form'}}`, encodeURIComponent(String(requestParameters.form))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have APPLICATION_FORM[DELETE] permission on the specified application or APPLICATION_FORM[DELETE] permission on the specified domain or APPLICATION_FORM[DELETE] permission on the specified environment or APPLICATION_FORM[DELETE] permission on the specified organization
   * Delete a form for an application
   */
  async deleteApplicationForm(
    requestParameters: DeleteApplicationFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.deleteApplicationFormRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_FORM[DELETE] permission on the specified domain or DOMAIN_FORM[DELETE] permission on the specified environment or DOMAIN_FORM[DELETE] permission on the specified organization
   * Delete a form
   */
  async deleteDomainFormRaw(
    requestParameters: DeleteDomainFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling deleteDomainForm.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling deleteDomainForm.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling deleteDomainForm.',
      );
    }

    if (requestParameters.form === null || requestParameters.form === undefined) {
      throw new runtime.RequiredError(
        'form',
        'Required parameter requestParameters.form was null or undefined when calling deleteDomainForm.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/forms/{form}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'form'}}`, encodeURIComponent(String(requestParameters.form))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the DOMAIN_FORM[DELETE] permission on the specified domain or DOMAIN_FORM[DELETE] permission on the specified environment or DOMAIN_FORM[DELETE] permission on the specified organization
   * Delete a form
   */
  async deleteDomainForm(
    requestParameters: DeleteDomainFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.deleteDomainFormRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_FORM[DELETE] permission on the specified organization
   * Delete a form
   */
  async deleteFormRaw(
    requestParameters: DeleteFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling deleteForm.',
      );
    }

    if (requestParameters.form === null || requestParameters.form === undefined) {
      throw new runtime.RequiredError('form', 'Required parameter requestParameters.form was null or undefined when calling deleteForm.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/forms/{form}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'form'}}`, encodeURIComponent(String(requestParameters.form))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_FORM[DELETE] permission on the specified organization
   * Delete a form
   */
  async deleteForm(requestParameters: DeleteFormRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.deleteFormRaw(requestParameters, initOverrides);
  }

  /**
   * User must have APPLICATION_FORM[READ] permission on the specified application or APPLICATION_FORM[READ] permission on the specified domain or APPLICATION_FORM[READ] permission on the specified environment or APPLICATION_FORM[READ] permission on the specified organization
   * Find a form for an application
   */
  async findApplicationFormRaw(
    requestParameters: FindApplicationFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling findApplicationForm.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling findApplicationForm.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling findApplicationForm.',
      );
    }

    if (requestParameters.application === null || requestParameters.application === undefined) {
      throw new runtime.RequiredError(
        'application',
        'Required parameter requestParameters.application was null or undefined when calling findApplicationForm.',
      );
    }

    if (requestParameters.template === null || requestParameters.template === undefined) {
      throw new runtime.RequiredError(
        'template',
        'Required parameter requestParameters.template was null or undefined when calling findApplicationForm.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.template !== undefined) {
      queryParameters['template'] = requestParameters.template;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/applications/{application}/forms`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'application'}}`, encodeURIComponent(String(requestParameters.application))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have APPLICATION_FORM[READ] permission on the specified application or APPLICATION_FORM[READ] permission on the specified domain or APPLICATION_FORM[READ] permission on the specified environment or APPLICATION_FORM[READ] permission on the specified organization
   * Find a form for an application
   */
  async findApplicationForm(
    requestParameters: FindApplicationFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.findApplicationFormRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_FORM[READ] permission on the specified domain or DOMAIN_FORM[READ] permission on the specified environment or DOMAIN_FORM[READ] permission on the specified organization
   * Find a form
   */
  async findFormRaw(
    requestParameters: FindFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling findForm.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling findForm.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling findForm.');
    }

    if (requestParameters.template === null || requestParameters.template === undefined) {
      throw new runtime.RequiredError(
        'template',
        'Required parameter requestParameters.template was null or undefined when calling findForm.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.template !== undefined) {
      queryParameters['template'] = requestParameters.template;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/forms`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the DOMAIN_FORM[READ] permission on the specified domain or DOMAIN_FORM[READ] permission on the specified environment or DOMAIN_FORM[READ] permission on the specified organization
   * Find a form
   */
  async findForm(requestParameters: FindFormRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.findFormRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_FORM[READ] permission on the specified organization
   * Find an organization form template
   */
  async findOrganizationFormTemplateRaw(
    requestParameters: FindOrganizationFormTemplateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling findOrganizationFormTemplate.',
      );
    }

    if (requestParameters.template === null || requestParameters.template === undefined) {
      throw new runtime.RequiredError(
        'template',
        'Required parameter requestParameters.template was null or undefined when calling findOrganizationFormTemplate.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.template !== undefined) {
      queryParameters['template'] = requestParameters.template;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/forms`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_FORM[READ] permission on the specified organization
   * Find an organization form template
   */
  async findOrganizationFormTemplate(
    requestParameters: FindOrganizationFormTemplateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.findOrganizationFormTemplateRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_THEME[READ] permission on the specified domain or DOMAIN_THEME[READ] permission on the specified environment or DOMAIN_THEME[READ] permission on the specified organization
   * Render the provided template
   */
  async renderDomainTemplateRaw(
    requestParameters: RenderDomainTemplateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<PreviewResponse>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling renderDomainTemplate.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling renderDomainTemplate.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling renderDomainTemplate.',
      );
    }

    if (requestParameters.previewRequest === null || requestParameters.previewRequest === undefined) {
      throw new runtime.RequiredError(
        'previewRequest',
        'Required parameter requestParameters.previewRequest was null or undefined when calling renderDomainTemplate.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/forms/preview`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: PreviewRequestToJSON(requestParameters.previewRequest),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PreviewResponseFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_THEME[READ] permission on the specified domain or DOMAIN_THEME[READ] permission on the specified environment or DOMAIN_THEME[READ] permission on the specified organization
   * Render the provided template
   */
  async renderDomainTemplate(
    requestParameters: RenderDomainTemplateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<PreviewResponse> {
    const response = await this.renderDomainTemplateRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have APPLICATION_FORM[UPDATE] permission on the specified application or APPLICATION_FORM[UPDATE] permission on the specified domain or APPLICATION_FORM[UPDATE] permission on the specified environment or APPLICATION_FORM[UPDATE] permission on the specified organization
   * Update a form for an application
   */
  async updateApplicationFormRaw(
    requestParameters: UpdateApplicationFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Form>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling updateApplicationForm.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling updateApplicationForm.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling updateApplicationForm.',
      );
    }

    if (requestParameters.application === null || requestParameters.application === undefined) {
      throw new runtime.RequiredError(
        'application',
        'Required parameter requestParameters.application was null or undefined when calling updateApplicationForm.',
      );
    }

    if (requestParameters.form === null || requestParameters.form === undefined) {
      throw new runtime.RequiredError(
        'form',
        'Required parameter requestParameters.form was null or undefined when calling updateApplicationForm.',
      );
    }

    if (requestParameters.updateForm === null || requestParameters.updateForm === undefined) {
      throw new runtime.RequiredError(
        'updateForm',
        'Required parameter requestParameters.updateForm was null or undefined when calling updateApplicationForm.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/applications/{application}/forms/{form}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'application'}}`, encodeURIComponent(String(requestParameters.application)))
          .replace(`{${'form'}}`, encodeURIComponent(String(requestParameters.form))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateFormToJSON(requestParameters.updateForm),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
  }

  /**
   * User must have APPLICATION_FORM[UPDATE] permission on the specified application or APPLICATION_FORM[UPDATE] permission on the specified domain or APPLICATION_FORM[UPDATE] permission on the specified environment or APPLICATION_FORM[UPDATE] permission on the specified organization
   * Update a form for an application
   */
  async updateApplicationForm(
    requestParameters: UpdateApplicationFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Form> {
    const response = await this.updateApplicationFormRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_FORM[UPDATE] permission on the specified domain or DOMAIN_FORM[UPDATE] permission on the specified environment or DOMAIN_FORM[UPDATE] permission on the specified organization
   * Update a form
   */
  async updateDomainFormRaw(
    requestParameters: UpdateDomainFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Form>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling updateDomainForm.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling updateDomainForm.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling updateDomainForm.',
      );
    }

    if (requestParameters.form === null || requestParameters.form === undefined) {
      throw new runtime.RequiredError(
        'form',
        'Required parameter requestParameters.form was null or undefined when calling updateDomainForm.',
      );
    }

    if (requestParameters.updateForm === null || requestParameters.updateForm === undefined) {
      throw new runtime.RequiredError(
        'updateForm',
        'Required parameter requestParameters.updateForm was null or undefined when calling updateDomainForm.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/forms/{form}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'form'}}`, encodeURIComponent(String(requestParameters.form))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateFormToJSON(requestParameters.updateForm),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_FORM[UPDATE] permission on the specified domain or DOMAIN_FORM[UPDATE] permission on the specified environment or DOMAIN_FORM[UPDATE] permission on the specified organization
   * Update a form
   */
  async updateDomainForm(
    requestParameters: UpdateDomainFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Form> {
    const response = await this.updateDomainFormRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_FORM[UPDATE] permission on the specified organization
   * Update a form
   */
  async updateFormRaw(
    requestParameters: UpdateFormRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Form>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling updateForm.',
      );
    }

    if (requestParameters.form === null || requestParameters.form === undefined) {
      throw new runtime.RequiredError('form', 'Required parameter requestParameters.form was null or undefined when calling updateForm.');
    }

    if (requestParameters.updateForm === null || requestParameters.updateForm === undefined) {
      throw new runtime.RequiredError(
        'updateForm',
        'Required parameter requestParameters.updateForm was null or undefined when calling updateForm.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/forms/{form}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'form'}}`, encodeURIComponent(String(requestParameters.form))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateFormToJSON(requestParameters.updateForm),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_FORM[UPDATE] permission on the specified organization
   * Update a form
   */
  async updateForm(requestParameters: UpdateFormRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Form> {
    const response = await this.updateFormRaw(requestParameters, initOverrides);
    return await response.value();
  }
}

/**
 * @export
 */
export const FindApplicationFormTemplateEnum = {
  Login: 'LOGIN',
  Registration: 'REGISTRATION',
  RegistrationConfirmation: 'REGISTRATION_CONFIRMATION',
  RegistrationVerify: 'REGISTRATION_VERIFY',
  ForgotPassword: 'FORGOT_PASSWORD',
  ResetPassword: 'RESET_PASSWORD',
  Oauth2UserConsent: 'OAUTH2_USER_CONSENT',
  MfaEnroll: 'MFA_ENROLL',
  MfaChallenge: 'MFA_CHALLENGE',
  MfaChallengeAlternatives: 'MFA_CHALLENGE_ALTERNATIVES',
  MfaRecoveryCode: 'MFA_RECOVERY_CODE',
  BlockedAccount: 'BLOCKED_ACCOUNT',
  CompleteProfile: 'COMPLETE_PROFILE',
  WebauthnRegister: 'WEBAUTHN_REGISTER',
  WebauthnRegisterSuccess: 'WEBAUTHN_REGISTER_SUCCESS',
  WebauthnLogin: 'WEBAUTHN_LOGIN',
  IdentifierFirstLogin: 'IDENTIFIER_FIRST_LOGIN',
  Error: 'ERROR',
  CertificateExpiration: 'CERTIFICATE_EXPIRATION',
  ClientSecretExpiration: 'CLIENT_SECRET_EXPIRATION',
  VerifyAttempt: 'VERIFY_ATTEMPT',
} as const;
export type FindApplicationFormTemplateEnum = typeof FindApplicationFormTemplateEnum[keyof typeof FindApplicationFormTemplateEnum];
/**
 * @export
 */
export const FindFormTemplateEnum = {
  Login: 'LOGIN',
  Registration: 'REGISTRATION',
  RegistrationConfirmation: 'REGISTRATION_CONFIRMATION',
  RegistrationVerify: 'REGISTRATION_VERIFY',
  ForgotPassword: 'FORGOT_PASSWORD',
  ResetPassword: 'RESET_PASSWORD',
  Oauth2UserConsent: 'OAUTH2_USER_CONSENT',
  MfaEnroll: 'MFA_ENROLL',
  MfaChallenge: 'MFA_CHALLENGE',
  MfaChallengeAlternatives: 'MFA_CHALLENGE_ALTERNATIVES',
  MfaRecoveryCode: 'MFA_RECOVERY_CODE',
  BlockedAccount: 'BLOCKED_ACCOUNT',
  CompleteProfile: 'COMPLETE_PROFILE',
  WebauthnRegister: 'WEBAUTHN_REGISTER',
  WebauthnRegisterSuccess: 'WEBAUTHN_REGISTER_SUCCESS',
  WebauthnLogin: 'WEBAUTHN_LOGIN',
  IdentifierFirstLogin: 'IDENTIFIER_FIRST_LOGIN',
  Error: 'ERROR',
  CertificateExpiration: 'CERTIFICATE_EXPIRATION',
  ClientSecretExpiration: 'CLIENT_SECRET_EXPIRATION',
  VerifyAttempt: 'VERIFY_ATTEMPT',
} as const;
export type FindFormTemplateEnum = typeof FindFormTemplateEnum[keyof typeof FindFormTemplateEnum];
/**
 * @export
 */
export const FindOrganizationFormTemplateTemplateEnum = {
  Login: 'LOGIN',
  Registration: 'REGISTRATION',
  RegistrationConfirmation: 'REGISTRATION_CONFIRMATION',
  RegistrationVerify: 'REGISTRATION_VERIFY',
  ForgotPassword: 'FORGOT_PASSWORD',
  ResetPassword: 'RESET_PASSWORD',
  Oauth2UserConsent: 'OAUTH2_USER_CONSENT',
  MfaEnroll: 'MFA_ENROLL',
  MfaChallenge: 'MFA_CHALLENGE',
  MfaChallengeAlternatives: 'MFA_CHALLENGE_ALTERNATIVES',
  MfaRecoveryCode: 'MFA_RECOVERY_CODE',
  BlockedAccount: 'BLOCKED_ACCOUNT',
  CompleteProfile: 'COMPLETE_PROFILE',
  WebauthnRegister: 'WEBAUTHN_REGISTER',
  WebauthnRegisterSuccess: 'WEBAUTHN_REGISTER_SUCCESS',
  WebauthnLogin: 'WEBAUTHN_LOGIN',
  IdentifierFirstLogin: 'IDENTIFIER_FIRST_LOGIN',
  Error: 'ERROR',
  CertificateExpiration: 'CERTIFICATE_EXPIRATION',
  ClientSecretExpiration: 'CLIENT_SECRET_EXPIRATION',
  VerifyAttempt: 'VERIFY_ATTEMPT',
} as const;
export type FindOrganizationFormTemplateTemplateEnum =
  typeof FindOrganizationFormTemplateTemplateEnum[keyof typeof FindOrganizationFormTemplateTemplateEnum];
