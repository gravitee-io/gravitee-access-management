/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  Form,
  FormFromJSON,
  FormToJSON,
  NewForm,
  NewFormFromJSON,
  NewFormToJSON,
  PreviewRequest,
  PreviewRequestFromJSON,
  PreviewRequestToJSON,
  PreviewResponse,
  PreviewResponseFromJSON,
  PreviewResponseToJSON,
  UpdateForm,
  UpdateFormFromJSON,
  UpdateFormToJSON,
} from '../models';

export interface CreateRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  application: string;
  email: NewForm;
}

export interface Create14Request {
  organizationId: string;
  form: NewForm;
}

export interface Create3Request {
  organizationId: string;
  environmentId: string;
  domain: string;
  form: NewForm;
}

export interface Delete16Request {
  organizationId: string;
  form: string;
}

export interface Delete3Request {
  organizationId: string;
  environmentId: string;
  domain: string;
  application: string;
  form: string;
}

export interface Delete6Request {
  organizationId: string;
  environmentId: string;
  domain: string;
  form: string;
}

export interface Get11Request {
  organizationId: string;
  environmentId: string;
  domain: string;
  template: Get11TemplateEnum;
}

export interface Get25Request {
  organizationId: string;
  template: Get25TemplateEnum;
}

export interface Get7Request {
  organizationId: string;
  environmentId: string;
  domain: string;
  application: string;
  template: Get7TemplateEnum;
}

export interface RenderDomainTemplateRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  body?: PreviewRequest;
}

export interface UpdateRequest {
  organizationId: string;
  environmentId: string;
  domain: string;
  application: string;
  form: string;
  form2: UpdateForm;
}

export interface Update13Request {
  organizationId: string;
  form: string;
  form2: UpdateForm;
}

export interface Update3Request {
  organizationId: string;
  environmentId: string;
  domain: string;
  form: string;
  form2: UpdateForm;
}

/**
 *
 */
export class FormApi extends runtime.BaseAPI {
  /**
   * User must have APPLICATION_FORM[CREATE] permission on the specified application or APPLICATION_FORM[CREATE] permission on the specified domain or APPLICATION_FORM[CREATE] permission on the specified environment or APPLICATION_FORM[CREATE] permission on the specified organization
   * Create a form for an application
   */
  async createRaw(
    requestParameters: CreateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling create.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling create.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling create.');
    }

    if (requestParameters.application === null || requestParameters.application === undefined) {
      throw new runtime.RequiredError(
        'application',
        'Required parameter requestParameters.application was null or undefined when calling create.',
      );
    }

    if (requestParameters.email === null || requestParameters.email === undefined) {
      throw new runtime.RequiredError('email', 'Required parameter requestParameters.email was null or undefined when calling create.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/applications/{application}/forms`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'application'}}`, encodeURIComponent(String(requestParameters.application))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewFormToJSON(requestParameters.email),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have APPLICATION_FORM[CREATE] permission on the specified application or APPLICATION_FORM[CREATE] permission on the specified domain or APPLICATION_FORM[CREATE] permission on the specified environment or APPLICATION_FORM[CREATE] permission on the specified organization
   * Create a form for an application
   */
  async create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.createRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_FORM[CREATE] permission on the specified organization
   * Create a form
   */
  async create14Raw(
    requestParameters: Create14Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling create14.',
      );
    }

    if (requestParameters.form === null || requestParameters.form === undefined) {
      throw new runtime.RequiredError('form', 'Required parameter requestParameters.form was null or undefined when calling create14.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/forms`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewFormToJSON(requestParameters.form),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_FORM[CREATE] permission on the specified organization
   * Create a form
   */
  async create14(requestParameters: Create14Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.create14Raw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_FORM[CREATE] permission on the specified domain or DOMAIN_FORM[CREATE] permission on the specified environment or DOMAIN_FORM[CREATE] permission on the specified organization
   * Create a form
   */
  async create3Raw(
    requestParameters: Create3Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling create3.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling create3.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling create3.');
    }

    if (requestParameters.form === null || requestParameters.form === undefined) {
      throw new runtime.RequiredError('form', 'Required parameter requestParameters.form was null or undefined when calling create3.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/forms`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewFormToJSON(requestParameters.form),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the DOMAIN_FORM[CREATE] permission on the specified domain or DOMAIN_FORM[CREATE] permission on the specified environment or DOMAIN_FORM[CREATE] permission on the specified organization
   * Create a form
   */
  async create3(requestParameters: Create3Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.create3Raw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_FORM[DELETE] permission on the specified organization
   * Delete a form
   */
  async delete16Raw(
    requestParameters: Delete16Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling delete16.',
      );
    }

    if (requestParameters.form === null || requestParameters.form === undefined) {
      throw new runtime.RequiredError('form', 'Required parameter requestParameters.form was null or undefined when calling delete16.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/forms/{form}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'form'}}`, encodeURIComponent(String(requestParameters.form))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_FORM[DELETE] permission on the specified organization
   * Delete a form
   */
  async delete16(requestParameters: Delete16Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.delete16Raw(requestParameters, initOverrides);
  }

  /**
   * User must have APPLICATION_FORM[DELETE] permission on the specified application or APPLICATION_FORM[DELETE] permission on the specified domain or APPLICATION_FORM[DELETE] permission on the specified environment or APPLICATION_FORM[DELETE] permission on the specified organization
   * Delete a form for an application
   */
  async delete3Raw(
    requestParameters: Delete3Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling delete3.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling delete3.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling delete3.');
    }

    if (requestParameters.application === null || requestParameters.application === undefined) {
      throw new runtime.RequiredError(
        'application',
        'Required parameter requestParameters.application was null or undefined when calling delete3.',
      );
    }

    if (requestParameters.form === null || requestParameters.form === undefined) {
      throw new runtime.RequiredError('form', 'Required parameter requestParameters.form was null or undefined when calling delete3.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/applications/{application}/forms/{form}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'application'}}`, encodeURIComponent(String(requestParameters.application)))
          .replace(`{${'form'}}`, encodeURIComponent(String(requestParameters.form))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have APPLICATION_FORM[DELETE] permission on the specified application or APPLICATION_FORM[DELETE] permission on the specified domain or APPLICATION_FORM[DELETE] permission on the specified environment or APPLICATION_FORM[DELETE] permission on the specified organization
   * Delete a form for an application
   */
  async delete3(requestParameters: Delete3Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.delete3Raw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_FORM[DELETE] permission on the specified domain or DOMAIN_FORM[DELETE] permission on the specified environment or DOMAIN_FORM[DELETE] permission on the specified organization
   * Delete a form
   */
  async delete6Raw(
    requestParameters: Delete6Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling delete6.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling delete6.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling delete6.');
    }

    if (requestParameters.form === null || requestParameters.form === undefined) {
      throw new runtime.RequiredError('form', 'Required parameter requestParameters.form was null or undefined when calling delete6.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/forms/{form}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'form'}}`, encodeURIComponent(String(requestParameters.form))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the DOMAIN_FORM[DELETE] permission on the specified domain or DOMAIN_FORM[DELETE] permission on the specified environment or DOMAIN_FORM[DELETE] permission on the specified organization
   * Delete a form
   */
  async delete6(requestParameters: Delete6Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.delete6Raw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_FORM[READ] permission on the specified domain or DOMAIN_FORM[READ] permission on the specified environment or DOMAIN_FORM[READ] permission on the specified organization
   * Find a form
   */
  async get11Raw(
    requestParameters: Get11Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling get11.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling get11.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling get11.');
    }

    if (requestParameters.template === null || requestParameters.template === undefined) {
      throw new runtime.RequiredError(
        'template',
        'Required parameter requestParameters.template was null or undefined when calling get11.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.template !== undefined) {
      queryParameters['template'] = requestParameters.template;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/forms`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the DOMAIN_FORM[READ] permission on the specified domain or DOMAIN_FORM[READ] permission on the specified environment or DOMAIN_FORM[READ] permission on the specified organization
   * Find a form
   */
  async get11(requestParameters: Get11Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.get11Raw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_FORM[READ] permission on the specified organization
   * Find an organization form template
   */
  async get25Raw(
    requestParameters: Get25Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling get25.',
      );
    }

    if (requestParameters.template === null || requestParameters.template === undefined) {
      throw new runtime.RequiredError(
        'template',
        'Required parameter requestParameters.template was null or undefined when calling get25.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.template !== undefined) {
      queryParameters['template'] = requestParameters.template;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/forms`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_FORM[READ] permission on the specified organization
   * Find an organization form template
   */
  async get25(requestParameters: Get25Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.get25Raw(requestParameters, initOverrides);
  }

  /**
   * User must have APPLICATION_FORM[READ] permission on the specified application or APPLICATION_FORM[READ] permission on the specified domain or APPLICATION_FORM[READ] permission on the specified environment or APPLICATION_FORM[READ] permission on the specified organization
   * Find a form for an application
   */
  async get7Raw(
    requestParameters: Get7Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling get7.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling get7.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling get7.');
    }

    if (requestParameters.application === null || requestParameters.application === undefined) {
      throw new runtime.RequiredError(
        'application',
        'Required parameter requestParameters.application was null or undefined when calling get7.',
      );
    }

    if (requestParameters.template === null || requestParameters.template === undefined) {
      throw new runtime.RequiredError('template', 'Required parameter requestParameters.template was null or undefined when calling get7.');
    }

    const queryParameters: any = {};

    if (requestParameters.template !== undefined) {
      queryParameters['template'] = requestParameters.template;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/applications/{application}/forms`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'application'}}`, encodeURIComponent(String(requestParameters.application))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have APPLICATION_FORM[READ] permission on the specified application or APPLICATION_FORM[READ] permission on the specified domain or APPLICATION_FORM[READ] permission on the specified environment or APPLICATION_FORM[READ] permission on the specified organization
   * Find a form for an application
   */
  async get7(requestParameters: Get7Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.get7Raw(requestParameters, initOverrides);
  }

  /**
   * User must have the DOMAIN_THEME[READ] permission on the specified domain or DOMAIN_THEME[READ] permission on the specified environment or DOMAIN_THEME[READ] permission on the specified organization
   * Render the provided template
   */
  async renderDomainTemplateRaw(
    requestParameters: RenderDomainTemplateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<PreviewResponse>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling renderDomainTemplate.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling renderDomainTemplate.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError(
        'domain',
        'Required parameter requestParameters.domain was null or undefined when calling renderDomainTemplate.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/forms/preview`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: PreviewRequestToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PreviewResponseFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_THEME[READ] permission on the specified domain or DOMAIN_THEME[READ] permission on the specified environment or DOMAIN_THEME[READ] permission on the specified organization
   * Render the provided template
   */
  async renderDomainTemplate(
    requestParameters: RenderDomainTemplateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<PreviewResponse> {
    const response = await this.renderDomainTemplateRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have APPLICATION_FORM[UPDATE] permission on the specified application or APPLICATION_FORM[UPDATE] permission on the specified domain or APPLICATION_FORM[UPDATE] permission on the specified environment or APPLICATION_FORM[UPDATE] permission on the specified organization
   * Update a form for an application
   */
  async updateRaw(
    requestParameters: UpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Form>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling update.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling update.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling update.');
    }

    if (requestParameters.application === null || requestParameters.application === undefined) {
      throw new runtime.RequiredError(
        'application',
        'Required parameter requestParameters.application was null or undefined when calling update.',
      );
    }

    if (requestParameters.form === null || requestParameters.form === undefined) {
      throw new runtime.RequiredError('form', 'Required parameter requestParameters.form was null or undefined when calling update.');
    }

    if (requestParameters.form2 === null || requestParameters.form2 === undefined) {
      throw new runtime.RequiredError('form2', 'Required parameter requestParameters.form2 was null or undefined when calling update.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/applications/{application}/forms/{form}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'application'}}`, encodeURIComponent(String(requestParameters.application)))
          .replace(`{${'form'}}`, encodeURIComponent(String(requestParameters.form))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateFormToJSON(requestParameters.form2),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
  }

  /**
   * User must have APPLICATION_FORM[UPDATE] permission on the specified application or APPLICATION_FORM[UPDATE] permission on the specified domain or APPLICATION_FORM[UPDATE] permission on the specified environment or APPLICATION_FORM[UPDATE] permission on the specified organization
   * Update a form for an application
   */
  async update(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Form> {
    const response = await this.updateRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_FORM[UPDATE] permission on the specified organization
   * Update a form
   */
  async update13Raw(
    requestParameters: Update13Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Form>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling update13.',
      );
    }

    if (requestParameters.form === null || requestParameters.form === undefined) {
      throw new runtime.RequiredError('form', 'Required parameter requestParameters.form was null or undefined when calling update13.');
    }

    if (requestParameters.form2 === null || requestParameters.form2 === undefined) {
      throw new runtime.RequiredError('form2', 'Required parameter requestParameters.form2 was null or undefined when calling update13.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/forms/{form}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'form'}}`, encodeURIComponent(String(requestParameters.form))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateFormToJSON(requestParameters.form2),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_FORM[UPDATE] permission on the specified organization
   * Update a form
   */
  async update13(requestParameters: Update13Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Form> {
    const response = await this.update13Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the DOMAIN_FORM[UPDATE] permission on the specified domain or DOMAIN_FORM[UPDATE] permission on the specified environment or DOMAIN_FORM[UPDATE] permission on the specified organization
   * Update a form
   */
  async update3Raw(
    requestParameters: Update3Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Form>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling update3.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling update3.',
      );
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
      throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling update3.');
    }

    if (requestParameters.form === null || requestParameters.form === undefined) {
      throw new runtime.RequiredError('form', 'Required parameter requestParameters.form was null or undefined when calling update3.');
    }

    if (requestParameters.form2 === null || requestParameters.form2 === undefined) {
      throw new runtime.RequiredError('form2', 'Required parameter requestParameters.form2 was null or undefined when calling update3.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/forms/{form}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId)))
          .replace(`{${'domain'}}`, encodeURIComponent(String(requestParameters.domain)))
          .replace(`{${'form'}}`, encodeURIComponent(String(requestParameters.form))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateFormToJSON(requestParameters.form2),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
  }

  /**
   * User must have the DOMAIN_FORM[UPDATE] permission on the specified domain or DOMAIN_FORM[UPDATE] permission on the specified environment or DOMAIN_FORM[UPDATE] permission on the specified organization
   * Update a form
   */
  async update3(requestParameters: Update3Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Form> {
    const response = await this.update3Raw(requestParameters, initOverrides);
    return await response.value();
  }
}

/**
 * @export
 */
export const Get11TemplateEnum = {
  Login: 'LOGIN',
  Registration: 'REGISTRATION',
  RegistrationConfirmation: 'REGISTRATION_CONFIRMATION',
  ForgotPassword: 'FORGOT_PASSWORD',
  ResetPassword: 'RESET_PASSWORD',
  Oauth2UserConsent: 'OAUTH2_USER_CONSENT',
  MfaEnroll: 'MFA_ENROLL',
  MfaChallenge: 'MFA_CHALLENGE',
  MfaChallengeAlternatives: 'MFA_CHALLENGE_ALTERNATIVES',
  MfaRecoveryCode: 'MFA_RECOVERY_CODE',
  BlockedAccount: 'BLOCKED_ACCOUNT',
  CompleteProfile: 'COMPLETE_PROFILE',
  WebauthnRegister: 'WEBAUTHN_REGISTER',
  WebauthnLogin: 'WEBAUTHN_LOGIN',
  IdentifierFirstLogin: 'IDENTIFIER_FIRST_LOGIN',
  Error: 'ERROR',
  CertificateExpiration: 'CERTIFICATE_EXPIRATION',
  VerifyAttempt: 'VERIFY_ATTEMPT',
} as const;
export type Get11TemplateEnum = typeof Get11TemplateEnum[keyof typeof Get11TemplateEnum];
/**
 * @export
 */
export const Get25TemplateEnum = {
  Login: 'LOGIN',
  Registration: 'REGISTRATION',
  RegistrationConfirmation: 'REGISTRATION_CONFIRMATION',
  ForgotPassword: 'FORGOT_PASSWORD',
  ResetPassword: 'RESET_PASSWORD',
  Oauth2UserConsent: 'OAUTH2_USER_CONSENT',
  MfaEnroll: 'MFA_ENROLL',
  MfaChallenge: 'MFA_CHALLENGE',
  MfaChallengeAlternatives: 'MFA_CHALLENGE_ALTERNATIVES',
  MfaRecoveryCode: 'MFA_RECOVERY_CODE',
  BlockedAccount: 'BLOCKED_ACCOUNT',
  CompleteProfile: 'COMPLETE_PROFILE',
  WebauthnRegister: 'WEBAUTHN_REGISTER',
  WebauthnLogin: 'WEBAUTHN_LOGIN',
  IdentifierFirstLogin: 'IDENTIFIER_FIRST_LOGIN',
  Error: 'ERROR',
  CertificateExpiration: 'CERTIFICATE_EXPIRATION',
  VerifyAttempt: 'VERIFY_ATTEMPT',
} as const;
export type Get25TemplateEnum = typeof Get25TemplateEnum[keyof typeof Get25TemplateEnum];
/**
 * @export
 */
export const Get7TemplateEnum = {
  Login: 'LOGIN',
  Registration: 'REGISTRATION',
  RegistrationConfirmation: 'REGISTRATION_CONFIRMATION',
  ForgotPassword: 'FORGOT_PASSWORD',
  ResetPassword: 'RESET_PASSWORD',
  Oauth2UserConsent: 'OAUTH2_USER_CONSENT',
  MfaEnroll: 'MFA_ENROLL',
  MfaChallenge: 'MFA_CHALLENGE',
  MfaChallengeAlternatives: 'MFA_CHALLENGE_ALTERNATIVES',
  MfaRecoveryCode: 'MFA_RECOVERY_CODE',
  BlockedAccount: 'BLOCKED_ACCOUNT',
  CompleteProfile: 'COMPLETE_PROFILE',
  WebauthnRegister: 'WEBAUTHN_REGISTER',
  WebauthnLogin: 'WEBAUTHN_LOGIN',
  IdentifierFirstLogin: 'IDENTIFIER_FIRST_LOGIN',
  Error: 'ERROR',
  CertificateExpiration: 'CERTIFICATE_EXPIRATION',
  VerifyAttempt: 'VERIFY_ATTEMPT',
} as const;
export type Get7TemplateEnum = typeof Get7TemplateEnum[keyof typeof Get7TemplateEnum];
