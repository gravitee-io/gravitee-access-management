/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */

import * as runtime from '../runtime';
import {
  Domain,
  DomainFromJSON,
  DomainToJSON,
  NewTag,
  NewTagFromJSON,
  NewTagToJSON,
  Tag,
  TagFromJSON,
  TagToJSON,
  UpdateTag,
  UpdateTagFromJSON,
  UpdateTagToJSON,
} from '../models';

export interface CreateShardingTagRequest {
  organizationId: string;
  newTag: NewTag;
}

export interface DeleteTagRequest {
  organizationId: string;
  tag: string;
}

export interface GetTagRequest {
  organizationId: string;
  tag: string;
}

export interface ListShardingTagsRequest {
  organizationId: string;
}

export interface UpdateTagRequest {
  organizationId: string;
  tag: string;
  updateTag: UpdateTag;
}

/**
 *
 */
export class ShardingTagsApi extends runtime.BaseAPI {
  /**
   * User must have the ORGANIZATION_TAG[CREATE] permission on the specified organization
   * Create a sharding tags
   */
  async createShardingTagRaw(
    requestParameters: CreateShardingTagRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling createShardingTag.',
      );
    }

    if (requestParameters.newTag === null || requestParameters.newTag === undefined) {
      throw new runtime.RequiredError(
        'newTag',
        'Required parameter requestParameters.newTag was null or undefined when calling createShardingTag.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/tags`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewTagToJSON(requestParameters.newTag),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_TAG[CREATE] permission on the specified organization
   * Create a sharding tags
   */
  async createShardingTag(
    requestParameters: CreateShardingTagRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.createShardingTagRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_TAG[DELETE] permission on the specified organization
   * Delete the sharding tag
   */
  async deleteTagRaw(
    requestParameters: DeleteTagRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling deleteTag.',
      );
    }

    if (requestParameters.tag === null || requestParameters.tag === undefined) {
      throw new runtime.RequiredError('tag', 'Required parameter requestParameters.tag was null or undefined when calling deleteTag.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/tags/{tag}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'tag'}}`, encodeURIComponent(String(requestParameters.tag))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_TAG[DELETE] permission on the specified organization
   * Delete the sharding tag
   */
  async deleteTag(requestParameters: DeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.deleteTagRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_TAG[READ] permission on the specified organization
   * Get a sharding tag
   */
  async getTagRaw(
    requestParameters: GetTagRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Tag>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling getTag.',
      );
    }

    if (requestParameters.tag === null || requestParameters.tag === undefined) {
      throw new runtime.RequiredError('tag', 'Required parameter requestParameters.tag was null or undefined when calling getTag.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/tags/{tag}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'tag'}}`, encodeURIComponent(String(requestParameters.tag))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_TAG[READ] permission on the specified organization
   * Get a sharding tag
   */
  async getTag(requestParameters: GetTagRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Tag> {
    const response = await this.getTagRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION[LIST] permission on the specified organization. Each returned tag is filtered and contains only basic information such as id and name.
   * List sharding tags
   */
  async listShardingTagsRaw(
    requestParameters: ListShardingTagsRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Array<Domain>>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling listShardingTags.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/tags`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainFromJSON));
  }

  /**
   * User must have the ORGANIZATION[LIST] permission on the specified organization. Each returned tag is filtered and contains only basic information such as id and name.
   * List sharding tags
   */
  async listShardingTags(
    requestParameters: ListShardingTagsRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Array<Domain>> {
    const response = await this.listShardingTagsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_TAG[UPDATE] permission on the specified organization
   * Update the sharding tag
   */
  async updateTagRaw(
    requestParameters: UpdateTagRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Tag>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling updateTag.',
      );
    }

    if (requestParameters.tag === null || requestParameters.tag === undefined) {
      throw new runtime.RequiredError('tag', 'Required parameter requestParameters.tag was null or undefined when calling updateTag.');
    }

    if (requestParameters.updateTag === null || requestParameters.updateTag === undefined) {
      throw new runtime.RequiredError(
        'updateTag',
        'Required parameter requestParameters.updateTag was null or undefined when calling updateTag.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/tags/{tag}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'tag'}}`, encodeURIComponent(String(requestParameters.tag))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateTagToJSON(requestParameters.updateTag),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_TAG[UPDATE] permission on the specified organization
   * Update the sharding tag
   */
  async updateTag(requestParameters: UpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Tag> {
    const response = await this.updateTagRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
