/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  Domain,
  DomainFromJSON,
  DomainToJSON,
  NewTag,
  NewTagFromJSON,
  NewTagToJSON,
  Tag,
  TagFromJSON,
  TagToJSON,
  UpdateTag,
  UpdateTagFromJSON,
  UpdateTagToJSON,
} from '../models';

export interface Create9Request {
  organizationId: string;
  tag: NewTag;
}

export interface Delete12Request {
  organizationId: string;
  tag: string;
}

export interface Get18Request {
  organizationId: string;
  tag: string;
}

export interface List18Request {
  organizationId: string;
}

export interface Update9Request {
  organizationId: string;
  tag: string;
  tag2: UpdateTag;
}

/**
 *
 */
export class ShardingTagsApi extends runtime.BaseAPI {
  /**
   * User must have the ORGANIZATION_TAG[CREATE] permission on the specified organization
   * Create a sharding tags
   */
  async create9Raw(
    requestParameters: Create9Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling create9.',
      );
    }

    if (requestParameters.tag === null || requestParameters.tag === undefined) {
      throw new runtime.RequiredError('tag', 'Required parameter requestParameters.tag was null or undefined when calling create9.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/tags`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewTagToJSON(requestParameters.tag),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_TAG[CREATE] permission on the specified organization
   * Create a sharding tags
   */
  async create9(requestParameters: Create9Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.create9Raw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_TAG[DELETE] permission on the specified organization
   * Delete the sharding tag
   */
  async delete12Raw(
    requestParameters: Delete12Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling delete12.',
      );
    }

    if (requestParameters.tag === null || requestParameters.tag === undefined) {
      throw new runtime.RequiredError('tag', 'Required parameter requestParameters.tag was null or undefined when calling delete12.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/tags/{tag}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'tag'}}`, encodeURIComponent(String(requestParameters.tag))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_TAG[DELETE] permission on the specified organization
   * Delete the sharding tag
   */
  async delete12(requestParameters: Delete12Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.delete12Raw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_TAG[READ] permission on the specified organization
   * Get a sharding tag
   */
  async get18Raw(
    requestParameters: Get18Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Tag>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling get18.',
      );
    }

    if (requestParameters.tag === null || requestParameters.tag === undefined) {
      throw new runtime.RequiredError('tag', 'Required parameter requestParameters.tag was null or undefined when calling get18.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/tags/{tag}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'tag'}}`, encodeURIComponent(String(requestParameters.tag))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_TAG[READ] permission on the specified organization
   * Get a sharding tag
   */
  async get18(requestParameters: Get18Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Tag> {
    const response = await this.get18Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION[LIST] permission on the specified organization. Each returned tag is filtered and contains only basic information such as id and name.
   * List sharding tags
   */
  async list18Raw(
    requestParameters: List18Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Array<Domain>>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling list18.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/tags`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainFromJSON));
  }

  /**
   * User must have the ORGANIZATION[LIST] permission on the specified organization. Each returned tag is filtered and contains only basic information such as id and name.
   * List sharding tags
   */
  async list18(requestParameters: List18Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Domain>> {
    const response = await this.list18Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_TAG[UPDATE] permission on the specified organization
   * Update the sharding tag
   */
  async update9Raw(
    requestParameters: Update9Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Tag>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling update9.',
      );
    }

    if (requestParameters.tag === null || requestParameters.tag === undefined) {
      throw new runtime.RequiredError('tag', 'Required parameter requestParameters.tag was null or undefined when calling update9.');
    }

    if (requestParameters.tag2 === null || requestParameters.tag2 === undefined) {
      throw new runtime.RequiredError('tag2', 'Required parameter requestParameters.tag2 was null or undefined when calling update9.');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = this.configuration.apiKey('Authorization'); // gravitee-auth authentication
    }

    const response = await this.request(
      {
        path: `/organizations/{organizationId}/tags/{tag}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'tag'}}`, encodeURIComponent(String(requestParameters.tag))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateTagToJSON(requestParameters.tag2),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_TAG[UPDATE] permission on the specified organization
   * Update the sharding tag
   */
  async update9(requestParameters: Update9Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Tag> {
    const response = await this.update9Raw(requestParameters, initOverrides);
    return await response.value();
  }
}
