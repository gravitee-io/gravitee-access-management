/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */

import * as runtime from '../runtime';
import {
    DataPlane,
    DataPlaneFromJSON,
    DataPlaneToJSON,
} from '../models';

export interface ListDataPlanesRequest {
    organizationId: string;
    environmentId: string;
}

/**
 * 
 */
export class DataPlaneApi extends runtime.BaseAPI {

    /**
     * List all the data planes accessible to the current user. User must have DOMAIN[CREATE] permission on the specified environment or organization
     * List of data planes
     */
    async listDataPlanesRaw(requestParameters: ListDataPlanesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<DataPlane>>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling listDataPlanes.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling listDataPlanes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("gravitee-auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/data-planes`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DataPlaneFromJSON));
    }

    /**
     * List all the data planes accessible to the current user. User must have DOMAIN[CREATE] permission on the specified environment or organization
     * List of data planes
     */
    async listDataPlanes(requestParameters: ListDataPlanesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<DataPlane>> {
        const response = await this.listDataPlanesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
