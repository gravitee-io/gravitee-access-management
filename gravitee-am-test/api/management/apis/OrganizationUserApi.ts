/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */

import * as runtime from '../runtime';
import {
  AccountAccessToken,
  AccountAccessTokenFromJSON,
  AccountAccessTokenToJSON,
  NewAccountAccessToken,
  NewAccountAccessTokenFromJSON,
  NewAccountAccessTokenToJSON,
  PasswordValue,
  PasswordValueFromJSON,
  PasswordValueToJSON,
  StatusEntity,
  StatusEntityFromJSON,
  StatusEntityToJSON,
  UpdateUser,
  UpdateUserFromJSON,
  UpdateUserToJSON,
  User,
  UserFromJSON,
  UserToJSON,
  UserEntity,
  UserEntityFromJSON,
  UserEntityToJSON,
  UsernameEntity,
  UsernameEntityFromJSON,
  UsernameEntityToJSON,
} from '../models';

export interface CreateAccountAccessTokenRequest {
  organizationId: string;
  user: string;
  newAccountAccessToken?: NewAccountAccessToken;
}

export interface DeleteOrganizationUserRequest {
  organizationId: string;
  user: string;
}

export interface GetOrganizationUserRequest {
  organizationId: string;
  user: string;
}

export interface GetOrganizationUserTokensRequest {
  organizationId: string;
  user: string;
}

export interface ResetOrganizationUserPasswordRequest {
  organizationId: string;
  user: string;
  passwordValue: PasswordValue;
}

export interface RevokeAccountAccessTokenRequest {
  organizationId: string;
  user: string;
  tokenId: string;
}

export interface UpdateOrganisationUsernameRequest {
  organizationId: string;
  user: string;
  usernameEntity: UsernameEntity;
}

export interface UpdateOrganizationUserRequest {
  organizationId: string;
  user: string;
  updateUser: UpdateUser;
}

export interface UpdateOrganizationUserStatusRequest {
  organizationId: string;
  user: string;
  statusEntity: StatusEntity;
}

/**
 *
 */
export class OrganizationUserApi extends runtime.BaseAPI {
  /**
   * User must have the ORGANIZATION_USER[UPDATE] permission on the specified organization
   * Generate an account access token for a user
   */
  async createAccountAccessTokenRaw(
    requestParameters: CreateAccountAccessTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<AccountAccessToken>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling createAccountAccessToken.',
      );
    }

    if (requestParameters.user === null || requestParameters.user === undefined) {
      throw new runtime.RequiredError(
        'user',
        'Required parameter requestParameters.user was null or undefined when calling createAccountAccessToken.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/users/{user}/tokens`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'user'}}`, encodeURIComponent(String(requestParameters.user))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewAccountAccessTokenToJSON(requestParameters.newAccountAccessToken),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AccountAccessTokenFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_USER[UPDATE] permission on the specified organization
   * Generate an account access token for a user
   */
  async createAccountAccessToken(
    requestParameters: CreateAccountAccessTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<AccountAccessToken> {
    const response = await this.createAccountAccessTokenRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_USER[DELETE] permission on the specified organization
   * Delete a user
   */
  async deleteOrganizationUserRaw(
    requestParameters: DeleteOrganizationUserRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling deleteOrganizationUser.',
      );
    }

    if (requestParameters.user === null || requestParameters.user === undefined) {
      throw new runtime.RequiredError(
        'user',
        'Required parameter requestParameters.user was null or undefined when calling deleteOrganizationUser.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/users/{user}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'user'}}`, encodeURIComponent(String(requestParameters.user))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_USER[DELETE] permission on the specified organization
   * Delete a user
   */
  async deleteOrganizationUser(
    requestParameters: DeleteOrganizationUserRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.deleteOrganizationUserRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_USER[READ] permission on the specified organization
   * Get a user
   */
  async getOrganizationUserRaw(
    requestParameters: GetOrganizationUserRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<UserEntity>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling getOrganizationUser.',
      );
    }

    if (requestParameters.user === null || requestParameters.user === undefined) {
      throw new runtime.RequiredError(
        'user',
        'Required parameter requestParameters.user was null or undefined when calling getOrganizationUser.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/users/{user}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'user'}}`, encodeURIComponent(String(requestParameters.user))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_USER[READ] permission on the specified organization
   * Get a user
   */
  async getOrganizationUser(
    requestParameters: GetOrganizationUserRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<UserEntity> {
    const response = await this.getOrganizationUserRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_USER[READ] permission on the specified organization
   * Get tokens of a user
   */
  async getOrganizationUserTokensRaw(
    requestParameters: GetOrganizationUserTokensRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<AccountAccessToken>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling getOrganizationUserTokens.',
      );
    }

    if (requestParameters.user === null || requestParameters.user === undefined) {
      throw new runtime.RequiredError(
        'user',
        'Required parameter requestParameters.user was null or undefined when calling getOrganizationUserTokens.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/users/{user}/tokens`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'user'}}`, encodeURIComponent(String(requestParameters.user))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AccountAccessTokenFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_USER[READ] permission on the specified organization
   * Get tokens of a user
   */
  async getOrganizationUserTokens(
    requestParameters: GetOrganizationUserTokensRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<AccountAccessToken> {
    const response = await this.getOrganizationUserTokensRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_USER[UPDATE] permission on the specified organization
   * Reset password
   */
  async resetOrganizationUserPasswordRaw(
    requestParameters: ResetOrganizationUserPasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling resetOrganizationUserPassword.',
      );
    }

    if (requestParameters.user === null || requestParameters.user === undefined) {
      throw new runtime.RequiredError(
        'user',
        'Required parameter requestParameters.user was null or undefined when calling resetOrganizationUserPassword.',
      );
    }

    if (requestParameters.passwordValue === null || requestParameters.passwordValue === undefined) {
      throw new runtime.RequiredError(
        'passwordValue',
        'Required parameter requestParameters.passwordValue was null or undefined when calling resetOrganizationUserPassword.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/users/{user}/resetPassword`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'user'}}`, encodeURIComponent(String(requestParameters.user))),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: PasswordValueToJSON(requestParameters.passwordValue),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_USER[UPDATE] permission on the specified organization
   * Reset password
   */
  async resetOrganizationUserPassword(
    requestParameters: ResetOrganizationUserPasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.resetOrganizationUserPasswordRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_USER[UPDATE] permission on the specified organization
   * Revoke an account access token
   */
  async revokeAccountAccessTokenRaw(
    requestParameters: RevokeAccountAccessTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling revokeAccountAccessToken.',
      );
    }

    if (requestParameters.user === null || requestParameters.user === undefined) {
      throw new runtime.RequiredError(
        'user',
        'Required parameter requestParameters.user was null or undefined when calling revokeAccountAccessToken.',
      );
    }

    if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
      throw new runtime.RequiredError(
        'tokenId',
        'Required parameter requestParameters.tokenId was null or undefined when calling revokeAccountAccessToken.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/users/{user}/tokens/{tokenId}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'user'}}`, encodeURIComponent(String(requestParameters.user)))
          .replace(`{${'tokenId'}}`, encodeURIComponent(String(requestParameters.tokenId))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have the ORGANIZATION_USER[UPDATE] permission on the specified organization
   * Revoke an account access token
   */
  async revokeAccountAccessToken(
    requestParameters: RevokeAccountAccessTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.revokeAccountAccessTokenRaw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_USER[UPDATE] permission on the specified organization
   * Update a user username
   */
  async updateOrganisationUsernameRaw(
    requestParameters: UpdateOrganisationUsernameRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling updateOrganisationUsername.',
      );
    }

    if (requestParameters.user === null || requestParameters.user === undefined) {
      throw new runtime.RequiredError(
        'user',
        'Required parameter requestParameters.user was null or undefined when calling updateOrganisationUsername.',
      );
    }

    if (requestParameters.usernameEntity === null || requestParameters.usernameEntity === undefined) {
      throw new runtime.RequiredError(
        'usernameEntity',
        'Required parameter requestParameters.usernameEntity was null or undefined when calling updateOrganisationUsername.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/users/{user}/username`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'user'}}`, encodeURIComponent(String(requestParameters.user))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: UsernameEntityToJSON(requestParameters.usernameEntity),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_USER[UPDATE] permission on the specified organization
   * Update a user username
   */
  async updateOrganisationUsername(
    requestParameters: UpdateOrganisationUsernameRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<User> {
    const response = await this.updateOrganisationUsernameRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_USER[UPDATE] permission on the specified organization
   * Update a user
   */
  async updateOrganizationUserRaw(
    requestParameters: UpdateOrganizationUserRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling updateOrganizationUser.',
      );
    }

    if (requestParameters.user === null || requestParameters.user === undefined) {
      throw new runtime.RequiredError(
        'user',
        'Required parameter requestParameters.user was null or undefined when calling updateOrganizationUser.',
      );
    }

    if (requestParameters.updateUser === null || requestParameters.updateUser === undefined) {
      throw new runtime.RequiredError(
        'updateUser',
        'Required parameter requestParameters.updateUser was null or undefined when calling updateOrganizationUser.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/users/{user}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'user'}}`, encodeURIComponent(String(requestParameters.user))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateUserToJSON(requestParameters.updateUser),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_USER[UPDATE] permission on the specified organization
   * Update a user
   */
  async updateOrganizationUser(
    requestParameters: UpdateOrganizationUserRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<User> {
    const response = await this.updateOrganizationUserRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_USER[UPDATE] permission on the specified organization
   * Update a user status
   */
  async updateOrganizationUserStatusRaw(
    requestParameters: UpdateOrganizationUserStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling updateOrganizationUserStatus.',
      );
    }

    if (requestParameters.user === null || requestParameters.user === undefined) {
      throw new runtime.RequiredError(
        'user',
        'Required parameter requestParameters.user was null or undefined when calling updateOrganizationUserStatus.',
      );
    }

    if (requestParameters.statusEntity === null || requestParameters.statusEntity === undefined) {
      throw new runtime.RequiredError(
        'statusEntity',
        'Required parameter requestParameters.statusEntity was null or undefined when calling updateOrganizationUserStatus.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/users/{user}/status`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'user'}}`, encodeURIComponent(String(requestParameters.user))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: StatusEntityToJSON(requestParameters.statusEntity),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_USER[UPDATE] permission on the specified organization
   * Update a user status
   */
  async updateOrganizationUserStatus(
    requestParameters: UpdateOrganizationUserStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<User> {
    const response = await this.updateOrganizationUserStatusRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
