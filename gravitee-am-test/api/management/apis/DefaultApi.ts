/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */

import * as runtime from '../runtime';
import {
  Domain,
  DomainFromJSON,
  DomainToJSON,
  Environment,
  EnvironmentFromJSON,
  EnvironmentToJSON,
  MembershipListItem,
  MembershipListItemFromJSON,
  MembershipListItemToJSON,
  NewMembership,
  NewMembershipFromJSON,
  NewMembershipToJSON,
  PatchOrganization,
  PatchOrganizationFromJSON,
  PatchOrganizationToJSON,
} from '../models';

export interface AddOrUpdateMember2Request {
  organizationId: string;
  newMembership: NewMembership;
}

export interface Get20Request {
  organizationId: string;
}

export interface GetExternalGrammarRequest {
  path: string;
}

export interface GetMembers1Request {
  organizationId: string;
}

export interface List17Request {
  organizationId: string;
}

export interface PatchRequest {
  organizationId: string;
  patchOrganization: PatchOrganization;
}

export interface Permissions2Request {
  organizationId: string;
  environmentId: string;
}

export interface RemoveMember3Request {
  organizationId: string;
  member: string;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * User must have ORGANIZATION_MEMBER[READ] permission on the specified organization
   * Add or update an organization member
   */
  async addOrUpdateMember2Raw(
    requestParameters: AddOrUpdateMember2Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling addOrUpdateMember2.',
      );
    }

    if (requestParameters.newMembership === null || requestParameters.newMembership === undefined) {
      throw new runtime.RequiredError(
        'newMembership',
        'Required parameter requestParameters.newMembership was null or undefined when calling addOrUpdateMember2.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/members`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewMembershipToJSON(requestParameters.newMembership),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have ORGANIZATION_MEMBER[READ] permission on the specified organization
   * Add or update an organization member
   */
  async addOrUpdateMember2(
    requestParameters: AddOrUpdateMember2Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.addOrUpdateMember2Raw(requestParameters, initOverrides);
  }

  /**
   * User must have the ORGANIZATION_SETTINGS[READ] permission on the specified organization
   * Get organization main settings
   */
  async get20Raw(
    requestParameters: Get20Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Domain>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling get20.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/settings`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => DomainFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_SETTINGS[READ] permission on the specified organization
   * Get organization main settings
   */
  async get20(requestParameters: Get20Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Domain> {
    const response = await this.get20Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getExternalGrammarRaw(
    requestParameters: GetExternalGrammarRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.path === null || requestParameters.path === undefined) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling getExternalGrammar.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/application.wadl/{path}`.replace(`{${'path'}}`, encodeURIComponent(String(requestParameters.path))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async getExternalGrammar(
    requestParameters: GetExternalGrammarRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.getExternalGrammarRaw(requestParameters, initOverrides);
  }

  /**
   * User must have ORGANIZATION_MEMBER[LIST] permission on the specified organization
   * List members for an organization
   */
  async getMembers1Raw(
    requestParameters: GetMembers1Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<MembershipListItem>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling getMembers1.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/members`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => MembershipListItemFromJSON(jsonValue));
  }

  /**
   * User must have ORGANIZATION_MEMBER[LIST] permission on the specified organization
   * List members for an organization
   */
  async getMembers1(
    requestParameters: GetMembers1Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<MembershipListItem> {
    const response = await this.getMembers1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getWadlRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/application.wadl`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async getWadl(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.getWadlRaw(initOverrides);
  }

  /**
   * User must have the ENVIRONMENT[LIST] permission on the specified organization AND either ENVIRONMENT[READ] permission on each environment or ENVIRONMENT[READ] permission on the specified organization.Each returned environment is filtered and contains only basic information such as id and name.
   * List all the environments
   */
  async list17Raw(
    requestParameters: List17Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Array<Environment>>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling list17.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => Array.from(jsonValue).map(EnvironmentFromJSON));
  }

  /**
   * User must have the ENVIRONMENT[LIST] permission on the specified organization AND either ENVIRONMENT[READ] permission on each environment or ENVIRONMENT[READ] permission on the specified organization.Each returned environment is filtered and contains only basic information such as id and name.
   * List all the environments
   */
  async list17(requestParameters: List17Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Environment>> {
    const response = await this.list17Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have the ORGANIZATION_SETTINGS[UPDATE] permission on the specified organization
   * Update platform main settings
   */
  async patchRaw(
    requestParameters: PatchRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Domain>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling patch.',
      );
    }

    if (requestParameters.patchOrganization === null || requestParameters.patchOrganization === undefined) {
      throw new runtime.RequiredError(
        'patchOrganization',
        'Required parameter requestParameters.patchOrganization was null or undefined when calling patch.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/settings`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: PatchOrganizationToJSON(requestParameters.patchOrganization),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => DomainFromJSON(jsonValue));
  }

  /**
   * User must have the ORGANIZATION_SETTINGS[UPDATE] permission on the specified organization
   * Update platform main settings
   */
  async patch(requestParameters: PatchRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Domain> {
    const response = await this.patchRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have ENVIRONMENT[READ] permission on the specified environment or ENVIRONMENT[READ] permission on the specified organization
   * List environment member\'s permissions
   */
  async permissions2Raw(
    requestParameters: Permissions2Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling permissions2.',
      );
    }

    if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
      throw new runtime.RequiredError(
        'environmentId',
        'Required parameter requestParameters.environmentId was null or undefined when calling permissions2.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/environments/{environmentId}/members/permissions`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'environmentId'}}`, encodeURIComponent(String(requestParameters.environmentId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   * User must have ENVIRONMENT[READ] permission on the specified environment or ENVIRONMENT[READ] permission on the specified organization
   * List environment member\'s permissions
   */
  async permissions2(requestParameters: Permissions2Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string> {
    const response = await this.permissions2Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * User must have ORGANIZATION_MEMBER[DELETE] permission on the specified organization
   * Remove a membership of the organization
   */
  async removeMember3Raw(
    requestParameters: RemoveMember3Request,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling removeMember3.',
      );
    }

    if (requestParameters.member === null || requestParameters.member === undefined) {
      throw new runtime.RequiredError(
        'member',
        'Required parameter requestParameters.member was null or undefined when calling removeMember3.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('gravitee-auth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/organizations/{organizationId}/members/{member}`
          .replace(`{${'organizationId'}}`, encodeURIComponent(String(requestParameters.organizationId)))
          .replace(`{${'member'}}`, encodeURIComponent(String(requestParameters.member))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User must have ORGANIZATION_MEMBER[DELETE] permission on the specified organization
   * Remove a membership of the organization
   */
  async removeMember3(requestParameters: RemoveMember3Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
    await this.removeMember3Raw(requestParameters, initOverrides);
  }
}
