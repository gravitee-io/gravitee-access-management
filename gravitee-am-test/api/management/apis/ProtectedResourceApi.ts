/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */

import * as runtime from '../runtime';
import {
    NewProtectedResource,
    NewProtectedResourceFromJSON,
    NewProtectedResourceToJSON,
    ProtectedResourcePage,
    ProtectedResourcePageFromJSON,
    ProtectedResourcePageToJSON,
    ProtectedResourcePrimaryData,
    ProtectedResourcePrimaryDataFromJSON,
    ProtectedResourcePrimaryDataToJSON,
    ProtectedResourceSecret,
    ProtectedResourceSecretFromJSON,
    ProtectedResourceSecretToJSON,
    UpdateProtectedResource,
    UpdateProtectedResourceFromJSON,
    UpdateProtectedResourceToJSON,
} from '../models';

export interface CreateProtectedResourceRequest {
    organizationId: string;
    environmentId: string;
    domain: string;
    newProtectedResource: NewProtectedResource;
}

export interface FindProtectedResourceRequest {
    organizationId: string;
    environmentId: string;
    domain: string;
    protectedResource: string;
    type?: string;
}

export interface ListProtectedResourcesRequest {
    organizationId: string;
    environmentId: string;
    domain: string;
    type?: string;
    page?: number;
    size?: number;
    sort?: string;
}

export interface DeleteProtectedResourceRequest {
    organizationId: string;
    environmentId: string;
    domain: string;
    protectedResource: string;
    type?: string;
}

/**
 * 
 */
export interface UpdateProtectedResourceRequest {
    organizationId: string;
    environmentId: string;
    domain: string;
    protectedResource: string;
    updateProtectedResource: UpdateProtectedResource;
}

/**
 * 
 */
export class ProtectedResourceApi extends runtime.BaseAPI {

    /**
     * User must have PROTECTED_RESOURCE[CREATE] permission on the specified domain or PROTECTED_RESOURCE[CREATE] permission on the specified environment or PROTECTED_RESOURCE[CREATE] permission on the specified organization
     * Create a Protected Resource definition
     */
    async createProtectedResourceRaw(requestParameters: CreateProtectedResourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ProtectedResourceSecret>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling createProtectedResource.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling createProtectedResource.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling createProtectedResource.');
        }

        if (requestParameters.newProtectedResource === null || requestParameters.newProtectedResource === undefined) {
            throw new runtime.RequiredError('newProtectedResource','Required parameter requestParameters.newProtectedResource was null or undefined when calling createProtectedResource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("gravitee-auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/protected-resources`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewProtectedResourceToJSON(requestParameters.newProtectedResource),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProtectedResourceSecretFromJSON(jsonValue));
    }

    /**
     * User must have PROTECTED_RESOURCE[CREATE] permission on the specified domain or PROTECTED_RESOURCE[CREATE] permission on the specified environment or PROTECTED_RESOURCE[CREATE] permission on the specified organization
     * Create a Protected Resource definition
     */
    async createProtectedResource(requestParameters: CreateProtectedResourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ProtectedResourceSecret> {
        const response = await this.createProtectedResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PROTECTED_RESOURCE[READ] permission on the specified resource or PROTECTED_RESOURCE[READ] permission on the specified domain or PROTECTED_RESOURCE[READ] permission on the specified environment or PROTECTED_RESOURCE[READ] permission on the specified organization. 
     * Get a Protected Resource
     */
    async findProtectedResourceRaw(requestParameters: FindProtectedResourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ProtectedResourcePrimaryData>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling findProtectedResource.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling findProtectedResource.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling findProtectedResource.');
        }

        if (requestParameters.protectedResource === null || requestParameters.protectedResource === undefined) {
            throw new runtime.RequiredError('protectedResource','Required parameter requestParameters.protectedResource was null or undefined when calling findProtectedResource.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("gravitee-auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/protected-resources/{protected-resource}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"protected-resource"}}`, encodeURIComponent(String(requestParameters.protectedResource))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProtectedResourcePrimaryDataFromJSON(jsonValue));
    }

    /**
     * User must have the PROTECTED_RESOURCE[READ] permission on the specified resource or PROTECTED_RESOURCE[READ] permission on the specified domain or PROTECTED_RESOURCE[READ] permission on the specified environment or PROTECTED_RESOURCE[READ] permission on the specified organization. 
     * Get a Protected Resource
     */
    async findProtectedResource(requestParameters: FindProtectedResourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ProtectedResourcePrimaryData> {
        const response = await this.findProtectedResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PROTECTED_RESOURCE[UPDATE] permission on the specified resource or PROTECTED_RESOURCE[UPDATE] permission on the specified domain or PROTECTED_RESOURCE[UPDATE] permission on the specified environment or PROTECTED_RESOURCE[UPDATE] permission on the specified organization.
     * Update a Protected Resource
     */
    async updateProtectedResourceRaw(requestParameters: UpdateProtectedResourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ProtectedResourcePrimaryData>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling updateProtectedResource.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling updateProtectedResource.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling updateProtectedResource.');
        }

        if (requestParameters.protectedResource === null || requestParameters.protectedResource === undefined) {
            throw new runtime.RequiredError('protectedResource','Required parameter requestParameters.protectedResource was null or undefined when calling updateProtectedResource.');
        }

        if (requestParameters.updateProtectedResource === null || requestParameters.updateProtectedResource === undefined) {
            throw new runtime.RequiredError('updateProtectedResource','Required parameter requestParameters.updateProtectedResource was null or undefined when calling updateProtectedResource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("gravitee-auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/protected-resources/{protected-resource}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"protected-resource"}}`, encodeURIComponent(String(requestParameters.protectedResource))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProtectedResourceToJSON(requestParameters.updateProtectedResource),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProtectedResourcePrimaryDataFromJSON(jsonValue));
    }

    /**
     * User must have the PROTECTED_RESOURCE[UPDATE] permission on the specified resource or PROTECTED_RESOURCE[UPDATE] permission on the specified domain or PROTECTED_RESOURCE[UPDATE] permission on the specified environment or PROTECTED_RESOURCE[UPDATE] permission on the specified organization.
     * Update a Protected Resource
     */
    async updateProtectedResource(requestParameters: UpdateProtectedResourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ProtectedResourcePrimaryData> {
        const response = await this.updateProtectedResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PROTECTED_RESOURCE[LIST] permission on the specified domain, environment or organization AND either PROTECTED_RESOURCE[READ] permission on each domain\'s protected resource or PROTECTED_RESOURCE[READ] permission on the specified domain or PROTECTED_RESOURCE[READ] permission on the specified environment or PROTECTED_RESOURCE[READ] permission on the specified organization. Each returned protected resource is filtered and contains only basic information such as id, name, description and isEnabled.
     * List registered protected resources for a security domain
     */
    async listProtectedResourcesRaw(requestParameters: ListProtectedResourcesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ProtectedResourcePage>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling listProtectedResources.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling listProtectedResources.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling listProtectedResources.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("gravitee-auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/protected-resources`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProtectedResourcePageFromJSON(jsonValue));
    }

    /**
     * User must have the PROTECTED_RESOURCE[LIST] permission on the specified domain, environment or organization AND either PROTECTED_RESOURCE[READ] permission on each domain\'s protected resource or PROTECTED_RESOURCE[READ] permission on the specified domain or PROTECTED_RESOURCE[READ] permission on the specified environment or PROTECTED_RESOURCE[READ] permission on the specified organization. Each returned protected resource is filtered and contains only basic information such as id, name, description and isEnabled.
     * List registered protected resources for a security domain
     */
    async listProtectedResources(requestParameters: ListProtectedResourcesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ProtectedResourcePage> {
        const response = await this.listProtectedResourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the PROTECTED_RESOURCE[DELETE] permission on the specified resource or PROTECTED_RESOURCE[DELETE] permission on the specified domain or PROTECTED_RESOURCE[DELETE] permission on the specified environment or PROTECTED_RESOURCE[DELETE] permission on the specified organization.
     * Delete a Protected Resource
     */
    async deleteProtectedResourceRaw(requestParameters: DeleteProtectedResourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling deleteProtectedResource.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling deleteProtectedResource.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling deleteProtectedResource.');
        }

        if (requestParameters.protectedResource === null || requestParameters.protectedResource === undefined) {
            throw new runtime.RequiredError('protectedResource','Required parameter requestParameters.protectedResource was null or undefined when calling deleteProtectedResource.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("gravitee-auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/protected-resources/{protected-resource}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"protected-resource"}}`, encodeURIComponent(String(requestParameters.protectedResource))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the PROTECTED_RESOURCE[DELETE] permission on the specified resource or PROTECTED_RESOURCE[DELETE] permission on the specified domain or PROTECTED_RESOURCE[DELETE] permission on the specified environment or PROTECTED_RESOURCE[DELETE] permission on the specified organization.
     * Delete a Protected Resource
     */
    async deleteProtectedResource(requestParameters: DeleteProtectedResourceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteProtectedResourceRaw(requestParameters, initOverrides);
    }

}
