/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface PatchChallengeSettings
 */
export interface PatchChallengeSettings {
  /**
   *
   * @type {boolean}
   * @memberof PatchChallengeSettings
   */
  active?: boolean;
  /**
   *
   * @type {string}
   * @memberof PatchChallengeSettings
   */
  challengeRule?: string;
  /**
   *
   * @type {string}
   * @memberof PatchChallengeSettings
   */
  type?: PatchChallengeSettingsTypeEnum;
}

/**
 * @export
 */
export const PatchChallengeSettingsTypeEnum = {
  Required: 'REQUIRED',
  Conditional: 'CONDITIONAL',
  RiskBased: 'RISK_BASED',
} as const;
export type PatchChallengeSettingsTypeEnum = typeof PatchChallengeSettingsTypeEnum[keyof typeof PatchChallengeSettingsTypeEnum];

/**
 * Check if a given object implements the PatchChallengeSettings interface.
 */
export function instanceOfPatchChallengeSettings(value: object): value is PatchChallengeSettings {
  return true;
}

export function PatchChallengeSettingsFromJSON(json: any): PatchChallengeSettings {
  return PatchChallengeSettingsFromJSONTyped(json, false);
}

export function PatchChallengeSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchChallengeSettings {
  if (json == null) {
    return json;
  }
  return {
    active: json['active'] == null ? undefined : json['active'],
    challengeRule: json['challengeRule'] == null ? undefined : json['challengeRule'],
    type: json['type'] == null ? undefined : json['type'],
  };
}

export function PatchChallengeSettingsToJSON(json: any): PatchChallengeSettings {
  return PatchChallengeSettingsToJSONTyped(json, false);
}

export function PatchChallengeSettingsToJSONTyped(value?: PatchChallengeSettings | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    active: value['active'],
    challengeRule: value['challengeRule'],
    type: value['type'],
  };
}
