/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Email
 */
export interface Email {
    /**
     * 
     * @type {string}
     * @memberof Email
     */
    id?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Email
     */
    enabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Email
     */
    referenceType?: EmailReferenceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Email
     */
    referenceId?: string;
    /**
     * 
     * @type {string}
     * @memberof Email
     */
    client?: string;
    /**
     * 
     * @type {string}
     * @memberof Email
     */
    template?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Email
     */
    defaultTemplate?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Email
     */
    from?: string;
    /**
     * 
     * @type {string}
     * @memberof Email
     */
    fromName?: string;
    /**
     * 
     * @type {string}
     * @memberof Email
     */
    subject?: string;
    /**
     * 
     * @type {string}
     * @memberof Email
     */
    content?: string;
    /**
     * 
     * @type {number}
     * @memberof Email
     */
    expiresAfter?: number;
    /**
     * 
     * @type {Date}
     * @memberof Email
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Email
     */
    updatedAt?: Date;
}


/**
 * @export
 */
export const EmailReferenceTypeEnum = {
    Platform: 'PLATFORM',
    Domain: 'DOMAIN',
    Application: 'APPLICATION',
    Organization: 'ORGANIZATION',
    Environment: 'ENVIRONMENT'
} as const;
export type EmailReferenceTypeEnum = typeof EmailReferenceTypeEnum[keyof typeof EmailReferenceTypeEnum];


export function EmailFromJSON(json: any): Email {
    return EmailFromJSONTyped(json, false);
}

export function EmailFromJSONTyped(json: any, ignoreDiscriminator: boolean): Email {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'referenceType': !exists(json, 'referenceType') ? undefined : json['referenceType'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'client': !exists(json, 'client') ? undefined : json['client'],
        'template': !exists(json, 'template') ? undefined : json['template'],
        'defaultTemplate': !exists(json, 'defaultTemplate') ? undefined : json['defaultTemplate'],
        'from': !exists(json, 'from') ? undefined : json['from'],
        'fromName': !exists(json, 'fromName') ? undefined : json['fromName'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'content': !exists(json, 'content') ? undefined : json['content'],
        'expiresAfter': !exists(json, 'expiresAfter') ? undefined : json['expiresAfter'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function EmailToJSON(value?: Email | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'enabled': value.enabled,
        'referenceType': value.referenceType,
        'referenceId': value.referenceId,
        'client': value.client,
        'template': value.template,
        'defaultTemplate': value.defaultTemplate,
        'from': value.from,
        'fromName': value.fromName,
        'subject': value.subject,
        'content': value.content,
        'expiresAfter': value.expiresAfter,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

