/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
import type { AccountSettings } from './AccountSettings';
import {
  AccountSettingsFromJSON,
  AccountSettingsFromJSONTyped,
  AccountSettingsToJSON,
  AccountSettingsToJSONTyped,
} from './AccountSettings';
import type { SCIMSettings } from './SCIMSettings';
import { SCIMSettingsFromJSON, SCIMSettingsFromJSONTyped, SCIMSettingsToJSON, SCIMSettingsToJSONTyped } from './SCIMSettings';
import type { PatchOIDCSettings } from './PatchOIDCSettings';
import {
  PatchOIDCSettingsFromJSON,
  PatchOIDCSettingsFromJSONTyped,
  PatchOIDCSettingsToJSON,
  PatchOIDCSettingsToJSONTyped,
} from './PatchOIDCSettings';
import type { PatchPasswordSettings } from './PatchPasswordSettings';
import {
  PatchPasswordSettingsFromJSON,
  PatchPasswordSettingsFromJSONTyped,
  PatchPasswordSettingsToJSON,
  PatchPasswordSettingsToJSONTyped,
} from './PatchPasswordSettings';
import type { SelfServiceAccountManagementSettings } from './SelfServiceAccountManagementSettings';
import {
  SelfServiceAccountManagementSettingsFromJSON,
  SelfServiceAccountManagementSettingsFromJSONTyped,
  SelfServiceAccountManagementSettingsToJSON,
  SelfServiceAccountManagementSettingsToJSONTyped,
} from './SelfServiceAccountManagementSettings';
import type { CorsSettings } from './CorsSettings';
import { CorsSettingsFromJSON, CorsSettingsFromJSONTyped, CorsSettingsToJSON, CorsSettingsToJSONTyped } from './CorsSettings';
import type { LoginSettings } from './LoginSettings';
import { LoginSettingsFromJSON, LoginSettingsFromJSONTyped, LoginSettingsToJSON, LoginSettingsToJSONTyped } from './LoginSettings';
import type { SecretExpirationSettings } from './SecretExpirationSettings';
import {
  SecretExpirationSettingsFromJSON,
  SecretExpirationSettingsFromJSONTyped,
  SecretExpirationSettingsToJSON,
  SecretExpirationSettingsToJSONTyped,
} from './SecretExpirationSettings';
import type { VirtualHost } from './VirtualHost';
import { VirtualHostFromJSON, VirtualHostFromJSONTyped, VirtualHostToJSON, VirtualHostToJSONTyped } from './VirtualHost';
import type { PatchSAMLSettings } from './PatchSAMLSettings';
import {
  PatchSAMLSettingsFromJSON,
  PatchSAMLSettingsFromJSONTyped,
  PatchSAMLSettingsToJSON,
  PatchSAMLSettingsToJSONTyped,
} from './PatchSAMLSettings';
import type { WebAuthnSettings } from './WebAuthnSettings';
import {
  WebAuthnSettingsFromJSON,
  WebAuthnSettingsFromJSONTyped,
  WebAuthnSettingsToJSON,
  WebAuthnSettingsToJSONTyped,
} from './WebAuthnSettings';
import type { UMASettings } from './UMASettings';
import { UMASettingsFromJSON, UMASettingsFromJSONTyped, UMASettingsToJSON, UMASettingsToJSONTyped } from './UMASettings';

/**
 *
 * @export
 * @interface PatchDomain
 */
export interface PatchDomain {
  /**
   *
   * @type {string}
   * @memberof PatchDomain
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof PatchDomain
   */
  description?: string;
  /**
   *
   * @type {boolean}
   * @memberof PatchDomain
   */
  enabled?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PatchDomain
   */
  alertEnabled?: boolean;
  /**
   *
   * @type {string}
   * @memberof PatchDomain
   */
  path?: string;
  /**
   *
   * @type {boolean}
   * @memberof PatchDomain
   */
  vhostMode?: boolean;
  /**
   *
   * @type {Array<VirtualHost>}
   * @memberof PatchDomain
   */
  vhosts?: Array<VirtualHost>;
  /**
   *
   * @type {PatchOIDCSettings}
   * @memberof PatchDomain
   */
  oidc?: PatchOIDCSettings;
  /**
   *
   * @type {UMASettings}
   * @memberof PatchDomain
   */
  uma?: UMASettings;
  /**
   *
   * @type {SCIMSettings}
   * @memberof PatchDomain
   */
  scim?: SCIMSettings;
  /**
   *
   * @type {LoginSettings}
   * @memberof PatchDomain
   */
  loginSettings?: LoginSettings;
  /**
   *
   * @type {WebAuthnSettings}
   * @memberof PatchDomain
   */
  webAuthnSettings?: WebAuthnSettings;
  /**
   *
   * @type {AccountSettings}
   * @memberof PatchDomain
   */
  accountSettings?: AccountSettings;
  /**
   *
   * @type {PatchPasswordSettings}
   * @memberof PatchDomain
   */
  passwordSettings?: PatchPasswordSettings;
  /**
   *
   * @type {SelfServiceAccountManagementSettings}
   * @memberof PatchDomain
   */
  selfServiceAccountManagementSettings?: SelfServiceAccountManagementSettings;
  /**
   *
   * @type {Set<string>}
   * @memberof PatchDomain
   */
  tags?: Set<string>;
  /**
   *
   * @type {boolean}
   * @memberof PatchDomain
   */
  master?: boolean;
  /**
   *
   * @type {PatchSAMLSettings}
   * @memberof PatchDomain
   */
  saml?: PatchSAMLSettings;
  /**
   *
   * @type {CorsSettings}
   * @memberof PatchDomain
   */
  corsSettings?: CorsSettings;
  /**
   *
   * @type {string}
   * @memberof PatchDomain
   */
  dataPlaneId?: string;
  /**
   *
   * @type {SecretExpirationSettings}
   * @memberof PatchDomain
   */
  secretSettings?: SecretExpirationSettings;
  /**
   *
   * @type {Set<string>}
   * @memberof PatchDomain
   */
  requiredPermissions?: Set<PatchDomainRequiredPermissionsEnum>;
}

/**
 * @export
 */
export const PatchDomainRequiredPermissionsEnum = {
  Organization: 'ORGANIZATION',
  OrganizationSettings: 'ORGANIZATION_SETTINGS',
  OrganizationIdentityProvider: 'ORGANIZATION_IDENTITY_PROVIDER',
  OrganizationAudit: 'ORGANIZATION_AUDIT',
  OrganizationReporter: 'ORGANIZATION_REPORTER',
  OrganizationScope: 'ORGANIZATION_SCOPE',
  OrganizationUser: 'ORGANIZATION_USER',
  OrganizationGroup: 'ORGANIZATION_GROUP',
  OrganizationRole: 'ORGANIZATION_ROLE',
  OrganizationTag: 'ORGANIZATION_TAG',
  OrganizationEntrypoint: 'ORGANIZATION_ENTRYPOINT',
  OrganizationForm: 'ORGANIZATION_FORM',
  OrganizationMember: 'ORGANIZATION_MEMBER',
  Environment: 'ENVIRONMENT',
  DataPlane: 'DATA_PLANE',
  Domain: 'DOMAIN',
  DomainSettings: 'DOMAIN_SETTINGS',
  DomainForm: 'DOMAIN_FORM',
  DomainEmailTemplate: 'DOMAIN_EMAIL_TEMPLATE',
  DomainExtensionPoint: 'DOMAIN_EXTENSION_POINT',
  DomainIdentityProvider: 'DOMAIN_IDENTITY_PROVIDER',
  DomainAuthorizationEngine: 'DOMAIN_AUTHORIZATION_ENGINE',
  DomainAudit: 'DOMAIN_AUDIT',
  DomainCertificate: 'DOMAIN_CERTIFICATE',
  DomainUser: 'DOMAIN_USER',
  DomainUserDevice: 'DOMAIN_USER_DEVICE',
  DomainGroup: 'DOMAIN_GROUP',
  DomainRole: 'DOMAIN_ROLE',
  DomainScim: 'DOMAIN_SCIM',
  DomainScope: 'DOMAIN_SCOPE',
  DomainExtensionGrant: 'DOMAIN_EXTENSION_GRANT',
  DomainOpenid: 'DOMAIN_OPENID',
  DomainSaml: 'DOMAIN_SAML',
  DomainUma: 'DOMAIN_UMA',
  DomainUmaScope: 'DOMAIN_UMA_SCOPE',
  DomainReporter: 'DOMAIN_REPORTER',
  DomainMember: 'DOMAIN_MEMBER',
  DomainAnalytics: 'DOMAIN_ANALYTICS',
  DomainFactor: 'DOMAIN_FACTOR',
  DomainResource: 'DOMAIN_RESOURCE',
  DomainFlow: 'DOMAIN_FLOW',
  DomainAlert: 'DOMAIN_ALERT',
  DomainAlertNotifier: 'DOMAIN_ALERT_NOTIFIER',
  DomainBotDetection: 'DOMAIN_BOT_DETECTION',
  DomainDeviceIdentifier: 'DOMAIN_DEVICE_IDENTIFIER',
  DomainAuthdeviceNotifier: 'DOMAIN_AUTHDEVICE_NOTIFIER',
  DomainI18NDictionary: 'DOMAIN_I18N_DICTIONARY',
  DomainTheme: 'DOMAIN_THEME',
  Application: 'APPLICATION',
  ApplicationSettings: 'APPLICATION_SETTINGS',
  ApplicationIdentityProvider: 'APPLICATION_IDENTITY_PROVIDER',
  ApplicationForm: 'APPLICATION_FORM',
  ApplicationEmailTemplate: 'APPLICATION_EMAIL_TEMPLATE',
  ApplicationOpenid: 'APPLICATION_OPENID',
  ApplicationSaml: 'APPLICATION_SAML',
  ApplicationCertificate: 'APPLICATION_CERTIFICATE',
  ApplicationMember: 'APPLICATION_MEMBER',
  ApplicationFactor: 'APPLICATION_FACTOR',
  ApplicationResource: 'APPLICATION_RESOURCE',
  ApplicationAnalytics: 'APPLICATION_ANALYTICS',
  ApplicationFlow: 'APPLICATION_FLOW',
  ProtectedResource: 'PROTECTED_RESOURCE',
  LicenseNotification: 'LICENSE_NOTIFICATION',
  Installation: 'INSTALLATION',
} as const;
export type PatchDomainRequiredPermissionsEnum = typeof PatchDomainRequiredPermissionsEnum[keyof typeof PatchDomainRequiredPermissionsEnum];

/**
 * Check if a given object implements the PatchDomain interface.
 */
export function instanceOfPatchDomain(value: object): value is PatchDomain {
  return true;
}

export function PatchDomainFromJSON(json: any): PatchDomain {
  return PatchDomainFromJSONTyped(json, false);
}

export function PatchDomainFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchDomain {
  if (json == null) {
    return json;
  }
  return {
    name: json['name'] == null ? undefined : json['name'],
    description: json['description'] == null ? undefined : json['description'],
    enabled: json['enabled'] == null ? undefined : json['enabled'],
    alertEnabled: json['alertEnabled'] == null ? undefined : json['alertEnabled'],
    path: json['path'] == null ? undefined : json['path'],
    vhostMode: json['vhostMode'] == null ? undefined : json['vhostMode'],
    vhosts: json['vhosts'] == null ? undefined : (json['vhosts'] as Array<any>).map(VirtualHostFromJSON),
    oidc: json['oidc'] == null ? undefined : PatchOIDCSettingsFromJSON(json['oidc']),
    uma: json['uma'] == null ? undefined : UMASettingsFromJSON(json['uma']),
    scim: json['scim'] == null ? undefined : SCIMSettingsFromJSON(json['scim']),
    loginSettings: json['loginSettings'] == null ? undefined : LoginSettingsFromJSON(json['loginSettings']),
    webAuthnSettings: json['webAuthnSettings'] == null ? undefined : WebAuthnSettingsFromJSON(json['webAuthnSettings']),
    accountSettings: json['accountSettings'] == null ? undefined : AccountSettingsFromJSON(json['accountSettings']),
    passwordSettings: json['passwordSettings'] == null ? undefined : PatchPasswordSettingsFromJSON(json['passwordSettings']),
    selfServiceAccountManagementSettings:
      json['selfServiceAccountManagementSettings'] == null
        ? undefined
        : SelfServiceAccountManagementSettingsFromJSON(json['selfServiceAccountManagementSettings']),
    tags: json['tags'] == null ? undefined : new Set(json['tags']),
    master: json['master'] == null ? undefined : json['master'],
    saml: json['saml'] == null ? undefined : PatchSAMLSettingsFromJSON(json['saml']),
    corsSettings: json['corsSettings'] == null ? undefined : CorsSettingsFromJSON(json['corsSettings']),
    dataPlaneId: json['dataPlaneId'] == null ? undefined : json['dataPlaneId'],
    secretSettings: json['secretSettings'] == null ? undefined : SecretExpirationSettingsFromJSON(json['secretSettings']),
    requiredPermissions: json['requiredPermissions'] == null ? undefined : new Set(json['requiredPermissions']),
  };
}

export function PatchDomainToJSON(json: any): PatchDomain {
  return PatchDomainToJSONTyped(json, false);
}

export function PatchDomainToJSONTyped(value?: PatchDomain | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    name: value['name'],
    description: value['description'],
    enabled: value['enabled'],
    alertEnabled: value['alertEnabled'],
    path: value['path'],
    vhostMode: value['vhostMode'],
    vhosts: value['vhosts'] == null ? undefined : (value['vhosts'] as Array<any>).map(VirtualHostToJSON),
    oidc: PatchOIDCSettingsToJSON(value['oidc']),
    uma: UMASettingsToJSON(value['uma']),
    scim: SCIMSettingsToJSON(value['scim']),
    loginSettings: LoginSettingsToJSON(value['loginSettings']),
    webAuthnSettings: WebAuthnSettingsToJSON(value['webAuthnSettings']),
    accountSettings: AccountSettingsToJSON(value['accountSettings']),
    passwordSettings: PatchPasswordSettingsToJSON(value['passwordSettings']),
    selfServiceAccountManagementSettings: SelfServiceAccountManagementSettingsToJSON(value['selfServiceAccountManagementSettings']),
    tags: value['tags'] == null ? undefined : Array.from(value['tags'] as Set<any>),
    master: value['master'],
    saml: PatchSAMLSettingsToJSON(value['saml']),
    corsSettings: CorsSettingsToJSON(value['corsSettings']),
    dataPlaneId: value['dataPlaneId'],
    secretSettings: SecretExpirationSettingsToJSON(value['secretSettings']),
    requiredPermissions: value['requiredPermissions'] == null ? undefined : Array.from(value['requiredPermissions'] as Set<any>),
  };
}
