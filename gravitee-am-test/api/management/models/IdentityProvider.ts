/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface IdentityProvider
 */
export interface IdentityProvider {
  /**
   *
   * @type {string}
   * @memberof IdentityProvider
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof IdentityProvider
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof IdentityProvider
   */
  type?: string;
  /**
   *
   * @type {boolean}
   * @memberof IdentityProvider
   */
  system?: boolean;
  /**
   *
   * @type {string}
   * @memberof IdentityProvider
   */
  configuration?: string;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof IdentityProvider
   */
  mappers?: { [key: string]: string };
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof IdentityProvider
   */
  roleMapper?: { [key: string]: Array<string> };
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof IdentityProvider
   */
  groupMapper?: { [key: string]: Array<string> };
  /**
   *
   * @type {string}
   * @memberof IdentityProvider
   */
  referenceType?: IdentityProviderReferenceTypeEnum;
  /**
   *
   * @type {string}
   * @memberof IdentityProvider
   */
  referenceId?: string;
  /**
   *
   * @type {boolean}
   * @memberof IdentityProvider
   */
  external?: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof IdentityProvider
   */
  domainWhitelist?: Array<string>;
  /**
   *
   * @type {Date}
   * @memberof IdentityProvider
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof IdentityProvider
   */
  updatedAt?: Date;
  /**
   *
   * @type {string}
   * @memberof IdentityProvider
   */
  passwordPolicy?: string;
  /**
   *
   * @type {string}
   * @memberof IdentityProvider
   */
  dataPlaneId?: string;
}

/**
 * @export
 */
export const IdentityProviderReferenceTypeEnum = {
  Platform: 'PLATFORM',
  Domain: 'DOMAIN',
  Application: 'APPLICATION',
  Organization: 'ORGANIZATION',
  Environment: 'ENVIRONMENT',
} as const;
export type IdentityProviderReferenceTypeEnum = typeof IdentityProviderReferenceTypeEnum[keyof typeof IdentityProviderReferenceTypeEnum];

/**
 * Check if a given object implements the IdentityProvider interface.
 */
export function instanceOfIdentityProvider(value: object): value is IdentityProvider {
  return true;
}

export function IdentityProviderFromJSON(json: any): IdentityProvider {
  return IdentityProviderFromJSONTyped(json, false);
}

export function IdentityProviderFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentityProvider {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    name: json['name'] == null ? undefined : json['name'],
    type: json['type'] == null ? undefined : json['type'],
    system: json['system'] == null ? undefined : json['system'],
    configuration: json['configuration'] == null ? undefined : json['configuration'],
    mappers: json['mappers'] == null ? undefined : json['mappers'],
    roleMapper: json['roleMapper'] == null ? undefined : json['roleMapper'],
    groupMapper: json['groupMapper'] == null ? undefined : json['groupMapper'],
    referenceType: json['referenceType'] == null ? undefined : json['referenceType'],
    referenceId: json['referenceId'] == null ? undefined : json['referenceId'],
    external: json['external'] == null ? undefined : json['external'],
    domainWhitelist: json['domainWhitelist'] == null ? undefined : json['domainWhitelist'],
    createdAt: json['createdAt'] == null ? undefined : new Date(json['createdAt']),
    updatedAt: json['updatedAt'] == null ? undefined : new Date(json['updatedAt']),
    passwordPolicy: json['passwordPolicy'] == null ? undefined : json['passwordPolicy'],
    dataPlaneId: json['dataPlaneId'] == null ? undefined : json['dataPlaneId'],
  };
}

export function IdentityProviderToJSON(json: any): IdentityProvider {
  return IdentityProviderToJSONTyped(json, false);
}

export function IdentityProviderToJSONTyped(value?: IdentityProvider | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    name: value['name'],
    type: value['type'],
    system: value['system'],
    configuration: value['configuration'],
    mappers: value['mappers'],
    roleMapper: value['roleMapper'],
    groupMapper: value['groupMapper'],
    referenceType: value['referenceType'],
    referenceId: value['referenceId'],
    external: value['external'],
    domainWhitelist: value['domainWhitelist'],
    createdAt: value['createdAt'] == null ? undefined : value['createdAt'].toISOString(),
    updatedAt: value['updatedAt'] == null ? undefined : value['updatedAt'].toISOString(),
    passwordPolicy: value['passwordPolicy'],
    dataPlaneId: value['dataPlaneId'],
  };
}
