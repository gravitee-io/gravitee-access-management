/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface Credential
 */
export interface Credential {
  /**
   *
   * @type {string}
   * @memberof Credential
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Credential
   */
  referenceType?: CredentialReferenceTypeEnum;
  /**
   *
   * @type {string}
   * @memberof Credential
   */
  referenceId?: string;
  /**
   *
   * @type {string}
   * @memberof Credential
   */
  userId?: string;
  /**
   *
   * @type {string}
   * @memberof Credential
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof Credential
   */
  credentialId?: string;
  /**
   *
   * @type {string}
   * @memberof Credential
   */
  publicKey?: string;
  /**
   *
   * @type {number}
   * @memberof Credential
   */
  counter?: number;
  /**
   *
   * @type {string}
   * @memberof Credential
   */
  aaguid?: string;
  /**
   *
   * @type {string}
   * @memberof Credential
   */
  attestationStatementFormat?: string;
  /**
   *
   * @type {string}
   * @memberof Credential
   */
  attestationStatement?: string;
  /**
   *
   * @type {string}
   * @memberof Credential
   */
  ipAddress?: string;
  /**
   *
   * @type {string}
   * @memberof Credential
   */
  userAgent?: string;
  /**
   *
   * @type {string}
   * @memberof Credential
   */
  deviceName?: string;
  /**
   *
   * @type {Date}
   * @memberof Credential
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Credential
   */
  updatedAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Credential
   */
  accessedAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Credential
   */
  lastCheckedAt?: Date;
}

/**
 * @export
 */
export const CredentialReferenceTypeEnum = {
  Platform: 'PLATFORM',
  Domain: 'DOMAIN',
  Application: 'APPLICATION',
  Organization: 'ORGANIZATION',
  Environment: 'ENVIRONMENT',
} as const;
export type CredentialReferenceTypeEnum = typeof CredentialReferenceTypeEnum[keyof typeof CredentialReferenceTypeEnum];

/**
 * Check if a given object implements the Credential interface.
 */
export function instanceOfCredential(value: object): value is Credential {
  return true;
}

export function CredentialFromJSON(json: any): Credential {
  return CredentialFromJSONTyped(json, false);
}

export function CredentialFromJSONTyped(json: any, ignoreDiscriminator: boolean): Credential {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    referenceType: json['referenceType'] == null ? undefined : json['referenceType'],
    referenceId: json['referenceId'] == null ? undefined : json['referenceId'],
    userId: json['userId'] == null ? undefined : json['userId'],
    username: json['username'] == null ? undefined : json['username'],
    credentialId: json['credentialId'] == null ? undefined : json['credentialId'],
    publicKey: json['publicKey'] == null ? undefined : json['publicKey'],
    counter: json['counter'] == null ? undefined : json['counter'],
    aaguid: json['aaguid'] == null ? undefined : json['aaguid'],
    attestationStatementFormat: json['attestationStatementFormat'] == null ? undefined : json['attestationStatementFormat'],
    attestationStatement: json['attestationStatement'] == null ? undefined : json['attestationStatement'],
    ipAddress: json['ipAddress'] == null ? undefined : json['ipAddress'],
    userAgent: json['userAgent'] == null ? undefined : json['userAgent'],
    deviceName: json['deviceName'] == null ? undefined : json['deviceName'],
    createdAt: json['createdAt'] == null ? undefined : new Date(json['createdAt']),
    updatedAt: json['updatedAt'] == null ? undefined : new Date(json['updatedAt']),
    accessedAt: json['accessedAt'] == null ? undefined : new Date(json['accessedAt']),
    lastCheckedAt: json['lastCheckedAt'] == null ? undefined : new Date(json['lastCheckedAt']),
  };
}

export function CredentialToJSON(json: any): Credential {
  return CredentialToJSONTyped(json, false);
}

export function CredentialToJSONTyped(value?: Credential | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    referenceType: value['referenceType'],
    referenceId: value['referenceId'],
    userId: value['userId'],
    username: value['username'],
    credentialId: value['credentialId'],
    publicKey: value['publicKey'],
    counter: value['counter'],
    aaguid: value['aaguid'],
    attestationStatementFormat: value['attestationStatementFormat'],
    attestationStatement: value['attestationStatement'],
    ipAddress: value['ipAddress'],
    userAgent: value['userAgent'],
    deviceName: value['deviceName'],
    createdAt: value['createdAt'] == null ? value['createdAt'] : value['createdAt'].toISOString(),
    updatedAt: value['updatedAt'] == null ? value['updatedAt'] : value['updatedAt'].toISOString(),
    accessedAt: value['accessedAt'] == null ? value['accessedAt'] : value['accessedAt'].toISOString(),
    lastCheckedAt: value['lastCheckedAt'] == null ? value['lastCheckedAt'] : value['lastCheckedAt'].toISOString(),
  };
}
