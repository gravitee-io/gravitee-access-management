/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
import type { Reference } from './Reference';
import { ReferenceFromJSON, ReferenceFromJSONTyped, ReferenceToJSON, ReferenceToJSONTyped } from './Reference';

/**
 *
 * @export
 * @interface Reporter
 */
export interface Reporter {
  /**
   *
   * @type {string}
   * @memberof Reporter
   */
  id?: string;
  /**
   *
   * @type {Reference}
   * @memberof Reporter
   */
  reference?: Reference;
  /**
   *
   * @type {boolean}
   * @memberof Reporter
   */
  enabled?: boolean;
  /**
   *
   * @type {string}
   * @memberof Reporter
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof Reporter
   */
  name?: string;
  /**
   *
   * @type {boolean}
   * @memberof Reporter
   */
  system?: boolean;
  /**
   *
   * @type {string}
   * @memberof Reporter
   */
  dataType?: string;
  /**
   *
   * @type {string}
   * @memberof Reporter
   */
  configuration?: string;
  /**
   *
   * @type {Date}
   * @memberof Reporter
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Reporter
   */
  updatedAt?: Date;
  /**
   *
   * @type {boolean}
   * @memberof Reporter
   */
  inherited?: boolean;
}

/**
 * Check if a given object implements the Reporter interface.
 */
export function instanceOfReporter(value: object): value is Reporter {
  return true;
}

export function ReporterFromJSON(json: any): Reporter {
  return ReporterFromJSONTyped(json, false);
}

export function ReporterFromJSONTyped(json: any, ignoreDiscriminator: boolean): Reporter {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    reference: json['reference'] == null ? undefined : ReferenceFromJSON(json['reference']),
    enabled: json['enabled'] == null ? undefined : json['enabled'],
    type: json['type'] == null ? undefined : json['type'],
    name: json['name'] == null ? undefined : json['name'],
    system: json['system'] == null ? undefined : json['system'],
    dataType: json['dataType'] == null ? undefined : json['dataType'],
    configuration: json['configuration'] == null ? undefined : json['configuration'],
    createdAt: json['createdAt'] == null ? undefined : new Date(json['createdAt']),
    updatedAt: json['updatedAt'] == null ? undefined : new Date(json['updatedAt']),
    inherited: json['inherited'] == null ? undefined : json['inherited'],
  };
}

export function ReporterToJSON(json: any): Reporter {
  return ReporterToJSONTyped(json, false);
}

export function ReporterToJSONTyped(value?: Reporter | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    reference: ReferenceToJSON(value['reference']),
    enabled: value['enabled'],
    type: value['type'],
    name: value['name'],
    system: value['system'],
    dataType: value['dataType'],
    configuration: value['configuration'],
    createdAt: value['createdAt'] == null ? undefined : value['createdAt'].toISOString(),
    updatedAt: value['updatedAt'] == null ? undefined : value['updatedAt'].toISOString(),
    inherited: value['inherited'],
  };
}
