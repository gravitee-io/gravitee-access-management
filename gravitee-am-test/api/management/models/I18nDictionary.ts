/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
import type { Reference } from './Reference';
import { ReferenceFromJSON, ReferenceFromJSONTyped, ReferenceToJSON, ReferenceToJSONTyped } from './Reference';

/**
 *
 * @export
 * @interface I18nDictionary
 */
export interface I18nDictionary {
  /**
   *
   * @type {string}
   * @memberof I18nDictionary
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof I18nDictionary
   */
  referenceId?: string;
  /**
   *
   * @type {string}
   * @memberof I18nDictionary
   */
  referenceType?: I18nDictionaryReferenceTypeEnum;
  /**
   *
   * @type {string}
   * @memberof I18nDictionary
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof I18nDictionary
   */
  locale?: string;
  /**
   *
   * @type {Date}
   * @memberof I18nDictionary
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof I18nDictionary
   */
  updatedAt?: Date;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof I18nDictionary
   */
  entries?: { [key: string]: string };
  /**
   *
   * @type {Reference}
   * @memberof I18nDictionary
   */
  reference?: Reference;
}

/**
 * @export
 */
export const I18nDictionaryReferenceTypeEnum = {
  Platform: 'PLATFORM',
  Domain: 'DOMAIN',
  Application: 'APPLICATION',
  Organization: 'ORGANIZATION',
  Environment: 'ENVIRONMENT',
} as const;
export type I18nDictionaryReferenceTypeEnum = typeof I18nDictionaryReferenceTypeEnum[keyof typeof I18nDictionaryReferenceTypeEnum];

/**
 * Check if a given object implements the I18nDictionary interface.
 */
export function instanceOfI18nDictionary(value: object): value is I18nDictionary {
  return true;
}

export function I18nDictionaryFromJSON(json: any): I18nDictionary {
  return I18nDictionaryFromJSONTyped(json, false);
}

export function I18nDictionaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): I18nDictionary {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    referenceId: json['referenceId'] == null ? undefined : json['referenceId'],
    referenceType: json['referenceType'] == null ? undefined : json['referenceType'],
    name: json['name'] == null ? undefined : json['name'],
    locale: json['locale'] == null ? undefined : json['locale'],
    createdAt: json['createdAt'] == null ? undefined : new Date(json['createdAt']),
    updatedAt: json['updatedAt'] == null ? undefined : new Date(json['updatedAt']),
    entries: json['entries'] == null ? undefined : json['entries'],
    reference: json['reference'] == null ? undefined : ReferenceFromJSON(json['reference']),
  };
}

export function I18nDictionaryToJSON(json: any): I18nDictionary {
  return I18nDictionaryToJSONTyped(json, false);
}

export function I18nDictionaryToJSONTyped(value?: I18nDictionary | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    referenceId: value['referenceId'],
    referenceType: value['referenceType'],
    name: value['name'],
    locale: value['locale'],
    createdAt: value['createdAt'] == null ? value['createdAt'] : value['createdAt'].toISOString(),
    updatedAt: value['updatedAt'] == null ? value['updatedAt'] : value['updatedAt'].toISOString(),
    entries: value['entries'],
    reference: ReferenceToJSON(value['reference']),
  };
}
