/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface Membership
 */
export interface Membership {
  /**
   *
   * @type {string}
   * @memberof Membership
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Membership
   */
  domain?: string;
  /**
   *
   * @type {string}
   * @memberof Membership
   */
  memberId?: string;
  /**
   *
   * @type {string}
   * @memberof Membership
   */
  memberType?: MembershipMemberTypeEnum;
  /**
   *
   * @type {string}
   * @memberof Membership
   */
  referenceId?: string;
  /**
   *
   * @type {string}
   * @memberof Membership
   */
  referenceType?: MembershipReferenceTypeEnum;
  /**
   *
   * @type {string}
   * @memberof Membership
   */
  roleId?: string;
  /**
   *
   * @type {number}
   * @memberof Membership
   */
  createdAt?: number;
  /**
   *
   * @type {number}
   * @memberof Membership
   */
  updatedAt?: number;
}

/**
 * @export
 */
export const MembershipMemberTypeEnum = {
  User: 'USER',
  Group: 'GROUP',
} as const;
export type MembershipMemberTypeEnum = typeof MembershipMemberTypeEnum[keyof typeof MembershipMemberTypeEnum];

/**
 * @export
 */
export const MembershipReferenceTypeEnum = {
  Platform: 'PLATFORM',
  Domain: 'DOMAIN',
  Application: 'APPLICATION',
  Organization: 'ORGANIZATION',
  Environment: 'ENVIRONMENT',
} as const;
export type MembershipReferenceTypeEnum = typeof MembershipReferenceTypeEnum[keyof typeof MembershipReferenceTypeEnum];

export function MembershipFromJSON(json: any): Membership {
  return MembershipFromJSONTyped(json, false);
}

export function MembershipFromJSONTyped(json: any, ignoreDiscriminator: boolean): Membership {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    domain: !exists(json, 'domain') ? undefined : json['domain'],
    memberId: !exists(json, 'memberId') ? undefined : json['memberId'],
    memberType: !exists(json, 'memberType') ? undefined : json['memberType'],
    referenceId: !exists(json, 'referenceId') ? undefined : json['referenceId'],
    referenceType: !exists(json, 'referenceType') ? undefined : json['referenceType'],
    roleId: !exists(json, 'roleId') ? undefined : json['roleId'],
    createdAt: !exists(json, 'createdAt') ? undefined : json['createdAt'],
    updatedAt: !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
  };
}

export function MembershipToJSON(value?: Membership | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    domain: value.domain,
    memberId: value.memberId,
    memberType: value.memberType,
    referenceId: value.referenceId,
    referenceType: value.referenceType,
    roleId: value.roleId,
    createdAt: value.createdAt,
    updatedAt: value.updatedAt,
  };
}
