/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import { AuditAccessPoint, AuditAccessPointFromJSON, AuditAccessPointFromJSONTyped, AuditAccessPointToJSON } from './AuditAccessPoint';
import { AuditEntity, AuditEntityFromJSON, AuditEntityFromJSONTyped, AuditEntityToJSON } from './AuditEntity';
import { AuditOutcome, AuditOutcomeFromJSON, AuditOutcomeFromJSONTyped, AuditOutcomeToJSON } from './AuditOutcome';

/**
 *
 * @export
 * @interface Audit
 */
export interface Audit {
  /**
   *
   * @type {string}
   * @memberof Audit
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Audit
   */
  transactionId?: string;
  /**
   *
   * @type {string}
   * @memberof Audit
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof Audit
   */
  referenceType?: AuditReferenceTypeEnum;
  /**
   *
   * @type {string}
   * @memberof Audit
   */
  referenceId?: string;
  /**
   *
   * @type {AuditAccessPoint}
   * @memberof Audit
   */
  accessPoint?: AuditAccessPoint;
  /**
   *
   * @type {AuditEntity}
   * @memberof Audit
   */
  actor?: AuditEntity;
  /**
   *
   * @type {AuditEntity}
   * @memberof Audit
   */
  target?: AuditEntity;
  /**
   *
   * @type {AuditOutcome}
   * @memberof Audit
   */
  outcome?: AuditOutcome;
}

/**
 * @export
 */
export const AuditReferenceTypeEnum = {
  Platform: 'PLATFORM',
  Domain: 'DOMAIN',
  Application: 'APPLICATION',
  Organization: 'ORGANIZATION',
  Environment: 'ENVIRONMENT',
} as const;
export type AuditReferenceTypeEnum = typeof AuditReferenceTypeEnum[keyof typeof AuditReferenceTypeEnum];

export function AuditFromJSON(json: any): Audit {
  return AuditFromJSONTyped(json, false);
}

export function AuditFromJSONTyped(json: any, ignoreDiscriminator: boolean): Audit {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    transactionId: !exists(json, 'transactionId') ? undefined : json['transactionId'],
    type: !exists(json, 'type') ? undefined : json['type'],
    referenceType: !exists(json, 'referenceType') ? undefined : json['referenceType'],
    referenceId: !exists(json, 'referenceId') ? undefined : json['referenceId'],
    accessPoint: !exists(json, 'accessPoint') ? undefined : AuditAccessPointFromJSON(json['accessPoint']),
    actor: !exists(json, 'actor') ? undefined : AuditEntityFromJSON(json['actor']),
    target: !exists(json, 'target') ? undefined : AuditEntityFromJSON(json['target']),
    outcome: !exists(json, 'outcome') ? undefined : AuditOutcomeFromJSON(json['outcome']),
  };
}

export function AuditToJSON(value?: Audit | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    transactionId: value.transactionId,
    type: value.type,
    referenceType: value.referenceType,
    referenceId: value.referenceId,
    accessPoint: AuditAccessPointToJSON(value.accessPoint),
    actor: AuditEntityToJSON(value.actor),
    target: AuditEntityToJSON(value.target),
    outcome: AuditOutcomeToJSON(value.outcome),
  };
}
