/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
import type { FormField } from './FormField';
import { FormFieldFromJSON, FormFieldFromJSONTyped, FormFieldToJSON, FormFieldToJSONTyped } from './FormField';

/**
 *
 * @export
 * @interface AccountSettings
 */
export interface AccountSettings {
  /**
   *
   * @type {boolean}
   * @memberof AccountSettings
   */
  inherited?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof AccountSettings
   */
  loginAttemptsDetectionEnabled?: boolean;
  /**
   *
   * @type {number}
   * @memberof AccountSettings
   */
  maxLoginAttempts?: number;
  /**
   *
   * @type {number}
   * @memberof AccountSettings
   */
  loginAttemptsResetTime?: number;
  /**
   *
   * @type {number}
   * @memberof AccountSettings
   */
  accountBlockedDuration?: number;
  /**
   *
   * @type {boolean}
   * @memberof AccountSettings
   */
  sendRecoverAccountEmail?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof AccountSettings
   */
  completeRegistrationWhenResetPassword?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof AccountSettings
   */
  autoLoginAfterRegistration?: boolean;
  /**
   *
   * @type {string}
   * @memberof AccountSettings
   */
  redirectUriAfterRegistration?: string;
  /**
   *
   * @type {boolean}
   * @memberof AccountSettings
   */
  dynamicUserRegistration?: boolean;
  /**
   *
   * @type {string}
   * @memberof AccountSettings
   */
  defaultIdentityProviderForRegistration?: string;
  /**
   *
   * @type {boolean}
   * @memberof AccountSettings
   */
  autoLoginAfterResetPassword?: boolean;
  /**
   *
   * @type {string}
   * @memberof AccountSettings
   */
  redirectUriAfterResetPassword?: string;
  /**
   *
   * @type {boolean}
   * @memberof AccountSettings
   */
  deletePasswordlessDevicesAfterResetPassword?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof AccountSettings
   */
  useBotDetection?: boolean;
  /**
   *
   * @type {string}
   * @memberof AccountSettings
   */
  botDetectionPlugin?: string;
  /**
   *
   * @type {boolean}
   * @memberof AccountSettings
   */
  rememberMe?: boolean;
  /**
   *
   * @type {number}
   * @memberof AccountSettings
   */
  rememberMeDuration?: number;
  /**
   *
   * @type {boolean}
   * @memberof AccountSettings
   */
  resetPasswordCustomForm?: boolean;
  /**
   *
   * @type {Array<FormField>}
   * @memberof AccountSettings
   */
  resetPasswordCustomFormFields?: Array<FormField>;
  /**
   *
   * @type {boolean}
   * @memberof AccountSettings
   */
  resetPasswordConfirmIdentity?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof AccountSettings
   */
  resetPasswordInvalidateTokens?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof AccountSettings
   */
  mfaChallengeAttemptsDetectionEnabled?: boolean;
  /**
   *
   * @type {number}
   * @memberof AccountSettings
   */
  mfaChallengeMaxAttempts?: number;
  /**
   *
   * @type {number}
   * @memberof AccountSettings
   */
  mfaChallengeAttemptsResetTime?: number;
  /**
   *
   * @type {boolean}
   * @memberof AccountSettings
   */
  mfaChallengeSendVerifyAlertEmail?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof AccountSettings
   */
  sendVerifyRegistrationAccountEmail?: boolean;
}

/**
 * Check if a given object implements the AccountSettings interface.
 */
export function instanceOfAccountSettings(value: object): value is AccountSettings {
  return true;
}

export function AccountSettingsFromJSON(json: any): AccountSettings {
  return AccountSettingsFromJSONTyped(json, false);
}

export function AccountSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountSettings {
  if (json == null) {
    return json;
  }
  return {
    inherited: json['inherited'] == null ? undefined : json['inherited'],
    loginAttemptsDetectionEnabled: json['loginAttemptsDetectionEnabled'] == null ? undefined : json['loginAttemptsDetectionEnabled'],
    maxLoginAttempts: json['maxLoginAttempts'] == null ? undefined : json['maxLoginAttempts'],
    loginAttemptsResetTime: json['loginAttemptsResetTime'] == null ? undefined : json['loginAttemptsResetTime'],
    accountBlockedDuration: json['accountBlockedDuration'] == null ? undefined : json['accountBlockedDuration'],
    sendRecoverAccountEmail: json['sendRecoverAccountEmail'] == null ? undefined : json['sendRecoverAccountEmail'],
    completeRegistrationWhenResetPassword:
      json['completeRegistrationWhenResetPassword'] == null ? undefined : json['completeRegistrationWhenResetPassword'],
    autoLoginAfterRegistration: json['autoLoginAfterRegistration'] == null ? undefined : json['autoLoginAfterRegistration'],
    redirectUriAfterRegistration: json['redirectUriAfterRegistration'] == null ? undefined : json['redirectUriAfterRegistration'],
    dynamicUserRegistration: json['dynamicUserRegistration'] == null ? undefined : json['dynamicUserRegistration'],
    defaultIdentityProviderForRegistration:
      json['defaultIdentityProviderForRegistration'] == null ? undefined : json['defaultIdentityProviderForRegistration'],
    autoLoginAfterResetPassword: json['autoLoginAfterResetPassword'] == null ? undefined : json['autoLoginAfterResetPassword'],
    redirectUriAfterResetPassword: json['redirectUriAfterResetPassword'] == null ? undefined : json['redirectUriAfterResetPassword'],
    deletePasswordlessDevicesAfterResetPassword:
      json['deletePasswordlessDevicesAfterResetPassword'] == null ? undefined : json['deletePasswordlessDevicesAfterResetPassword'],
    useBotDetection: json['useBotDetection'] == null ? undefined : json['useBotDetection'],
    botDetectionPlugin: json['botDetectionPlugin'] == null ? undefined : json['botDetectionPlugin'],
    rememberMe: json['rememberMe'] == null ? undefined : json['rememberMe'],
    rememberMeDuration: json['rememberMeDuration'] == null ? undefined : json['rememberMeDuration'],
    resetPasswordCustomForm: json['resetPasswordCustomForm'] == null ? undefined : json['resetPasswordCustomForm'],
    resetPasswordCustomFormFields:
      json['resetPasswordCustomFormFields'] == null
        ? undefined
        : (json['resetPasswordCustomFormFields'] as Array<any>).map(FormFieldFromJSON),
    resetPasswordConfirmIdentity: json['resetPasswordConfirmIdentity'] == null ? undefined : json['resetPasswordConfirmIdentity'],
    resetPasswordInvalidateTokens: json['resetPasswordInvalidateTokens'] == null ? undefined : json['resetPasswordInvalidateTokens'],
    mfaChallengeAttemptsDetectionEnabled:
      json['mfaChallengeAttemptsDetectionEnabled'] == null ? undefined : json['mfaChallengeAttemptsDetectionEnabled'],
    mfaChallengeMaxAttempts: json['mfaChallengeMaxAttempts'] == null ? undefined : json['mfaChallengeMaxAttempts'],
    mfaChallengeAttemptsResetTime: json['mfaChallengeAttemptsResetTime'] == null ? undefined : json['mfaChallengeAttemptsResetTime'],
    mfaChallengeSendVerifyAlertEmail:
      json['mfaChallengeSendVerifyAlertEmail'] == null ? undefined : json['mfaChallengeSendVerifyAlertEmail'],
    sendVerifyRegistrationAccountEmail:
      json['sendVerifyRegistrationAccountEmail'] == null ? undefined : json['sendVerifyRegistrationAccountEmail'],
  };
}

export function AccountSettingsToJSON(json: any): AccountSettings {
  return AccountSettingsToJSONTyped(json, false);
}

export function AccountSettingsToJSONTyped(value?: AccountSettings | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    inherited: value['inherited'],
    loginAttemptsDetectionEnabled: value['loginAttemptsDetectionEnabled'],
    maxLoginAttempts: value['maxLoginAttempts'],
    loginAttemptsResetTime: value['loginAttemptsResetTime'],
    accountBlockedDuration: value['accountBlockedDuration'],
    sendRecoverAccountEmail: value['sendRecoverAccountEmail'],
    completeRegistrationWhenResetPassword: value['completeRegistrationWhenResetPassword'],
    autoLoginAfterRegistration: value['autoLoginAfterRegistration'],
    redirectUriAfterRegistration: value['redirectUriAfterRegistration'],
    dynamicUserRegistration: value['dynamicUserRegistration'],
    defaultIdentityProviderForRegistration: value['defaultIdentityProviderForRegistration'],
    autoLoginAfterResetPassword: value['autoLoginAfterResetPassword'],
    redirectUriAfterResetPassword: value['redirectUriAfterResetPassword'],
    deletePasswordlessDevicesAfterResetPassword: value['deletePasswordlessDevicesAfterResetPassword'],
    useBotDetection: value['useBotDetection'],
    botDetectionPlugin: value['botDetectionPlugin'],
    rememberMe: value['rememberMe'],
    rememberMeDuration: value['rememberMeDuration'],
    resetPasswordCustomForm: value['resetPasswordCustomForm'],
    resetPasswordCustomFormFields:
      value['resetPasswordCustomFormFields'] == null
        ? undefined
        : (value['resetPasswordCustomFormFields'] as Array<any>).map(FormFieldToJSON),
    resetPasswordConfirmIdentity: value['resetPasswordConfirmIdentity'],
    resetPasswordInvalidateTokens: value['resetPasswordInvalidateTokens'],
    mfaChallengeAttemptsDetectionEnabled: value['mfaChallengeAttemptsDetectionEnabled'],
    mfaChallengeMaxAttempts: value['mfaChallengeMaxAttempts'],
    mfaChallengeAttemptsResetTime: value['mfaChallengeAttemptsResetTime'],
    mfaChallengeSendVerifyAlertEmail: value['mfaChallengeSendVerifyAlertEmail'],
    sendVerifyRegistrationAccountEmail: value['sendVerifyRegistrationAccountEmail'],
  };
}
