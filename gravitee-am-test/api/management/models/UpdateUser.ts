/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface UpdateUser
 */
export interface UpdateUser {
  /**
   *
   * @type {string}
   * @memberof UpdateUser
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateUser
   */
  firstName?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateUser
   */
  lastName?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateUser
   */
  displayName?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateUser
   */
  externalId?: string;
  /**
   *
   * @type {boolean}
   * @memberof UpdateUser
   */
  accountNonExpired?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UpdateUser
   */
  accountNonLocked?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UpdateUser
   */
  credentialsNonExpired?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UpdateUser
   */
  enabled?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UpdateUser
   */
  preRegistration?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UpdateUser
   */
  registrationCompleted?: boolean;
  /**
   *
   * @type {string}
   * @memberof UpdateUser
   */
  source?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateUser
   */
  client?: string;
  /**
   *
   * @type {number}
   * @memberof UpdateUser
   */
  loginsCount?: number;
  /**
   *
   * @type {Date}
   * @memberof UpdateUser
   */
  loggedAt?: Date;
  /**
   *
   * @type {string}
   * @memberof UpdateUser
   */
  preferredLanguage?: string;
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof UpdateUser
   */
  additionalInformation?: { [key: string]: any };
  /**
   *
   * @type {Date}
   * @memberof UpdateUser
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof UpdateUser
   */
  updatedAt?: Date;
  /**
   *
   * @type {boolean}
   * @memberof UpdateUser
   */
  forceResetPassword?: boolean;
}

/**
 * Check if a given object implements the UpdateUser interface.
 */
export function instanceOfUpdateUser(value: object): value is UpdateUser {
  return true;
}

export function UpdateUserFromJSON(json: any): UpdateUser {
  return UpdateUserFromJSONTyped(json, false);
}

export function UpdateUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateUser {
  if (json == null) {
    return json;
  }
  return {
    email: json['email'] == null ? undefined : json['email'],
    firstName: json['firstName'] == null ? undefined : json['firstName'],
    lastName: json['lastName'] == null ? undefined : json['lastName'],
    displayName: json['displayName'] == null ? undefined : json['displayName'],
    externalId: json['externalId'] == null ? undefined : json['externalId'],
    accountNonExpired: json['accountNonExpired'] == null ? undefined : json['accountNonExpired'],
    accountNonLocked: json['accountNonLocked'] == null ? undefined : json['accountNonLocked'],
    credentialsNonExpired: json['credentialsNonExpired'] == null ? undefined : json['credentialsNonExpired'],
    enabled: json['enabled'] == null ? undefined : json['enabled'],
    preRegistration: json['preRegistration'] == null ? undefined : json['preRegistration'],
    registrationCompleted: json['registrationCompleted'] == null ? undefined : json['registrationCompleted'],
    source: json['source'] == null ? undefined : json['source'],
    client: json['client'] == null ? undefined : json['client'],
    loginsCount: json['loginsCount'] == null ? undefined : json['loginsCount'],
    loggedAt: json['loggedAt'] == null ? undefined : new Date(json['loggedAt']),
    preferredLanguage: json['preferredLanguage'] == null ? undefined : json['preferredLanguage'],
    additionalInformation: json['additionalInformation'] == null ? undefined : json['additionalInformation'],
    createdAt: json['createdAt'] == null ? undefined : new Date(json['createdAt']),
    updatedAt: json['updatedAt'] == null ? undefined : new Date(json['updatedAt']),
    forceResetPassword: json['forceResetPassword'] == null ? undefined : json['forceResetPassword'],
  };
}

export function UpdateUserToJSON(json: any): UpdateUser {
  return UpdateUserToJSONTyped(json, false);
}

export function UpdateUserToJSONTyped(value?: UpdateUser | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    email: value['email'],
    firstName: value['firstName'],
    lastName: value['lastName'],
    displayName: value['displayName'],
    externalId: value['externalId'],
    accountNonExpired: value['accountNonExpired'],
    accountNonLocked: value['accountNonLocked'],
    credentialsNonExpired: value['credentialsNonExpired'],
    enabled: value['enabled'],
    preRegistration: value['preRegistration'],
    registrationCompleted: value['registrationCompleted'],
    source: value['source'],
    client: value['client'],
    loginsCount: value['loginsCount'],
    loggedAt: value['loggedAt'] == null ? undefined : value['loggedAt'].toISOString(),
    preferredLanguage: value['preferredLanguage'],
    additionalInformation: value['additionalInformation'],
    createdAt: value['createdAt'] == null ? undefined : value['createdAt'].toISOString(),
    updatedAt: value['updatedAt'] == null ? undefined : value['updatedAt'].toISOString(),
    forceResetPassword: value['forceResetPassword'],
  };
}
