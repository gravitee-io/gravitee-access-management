/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Theme,
    ThemeFromJSON,
    ThemeFromJSONTyped,
    ThemeToJSON,
} from './Theme';

/**
 * 
 * @export
 * @interface PreviewRequest
 */
export interface PreviewRequest {
    /**
     * 
     * @type {string}
     * @memberof PreviewRequest
     */
    content?: string;
    /**
     * 
     * @type {Theme}
     * @memberof PreviewRequest
     */
    theme?: Theme;
    /**
     * 
     * @type {string}
     * @memberof PreviewRequest
     */
    type: PreviewRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PreviewRequest
     */
    template: string;
}


/**
 * @export
 */
export const PreviewRequestTypeEnum = {
    Email: 'EMAIL',
    Form: 'FORM'
} as const;
export type PreviewRequestTypeEnum = typeof PreviewRequestTypeEnum[keyof typeof PreviewRequestTypeEnum];


export function PreviewRequestFromJSON(json: any): PreviewRequest {
    return PreviewRequestFromJSONTyped(json, false);
}

export function PreviewRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PreviewRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'content': !exists(json, 'content') ? undefined : json['content'],
        'theme': !exists(json, 'theme') ? undefined : ThemeFromJSON(json['theme']),
        'type': json['type'],
        'template': json['template'],
    };
}

export function PreviewRequestToJSON(value?: PreviewRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'content': value.content,
        'theme': ThemeToJSON(value.theme),
        'type': value.type,
        'template': value.template,
    };
}

