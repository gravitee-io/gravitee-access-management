/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { exists, mapValues } from '../runtime';
import {
    Application,
    ApplicationFromJSON,
    ApplicationFromJSONTyped,
    ApplicationToJSON,
} from './Application';
import {
    IdentityProvider,
    IdentityProviderFromJSON,
    IdentityProviderFromJSONTyped,
    IdentityProviderToJSON,
} from './IdentityProvider';

/**
 * 
 * @export
 * @interface CertificateEntity
 */
export interface CertificateEntity {
    /**
     * 
     * @type {string}
     * @memberof CertificateEntity
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CertificateEntity
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CertificateEntity
     */
    type?: string;
    /**
     * 
     * @type {Date}
     * @memberof CertificateEntity
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof CertificateEntity
     */
    expiresAt?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof CertificateEntity
     */
    system?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CertificateEntity
     */
    status?: CertificateEntityStatusEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof CertificateEntity
     */
    usage?: Array<string>;
    /**
     * 
     * @type {Array<Application>}
     * @memberof CertificateEntity
     */
    applications?: Array<Application>;
    /**
     * 
     * @type {Array<IdentityProvider>}
     * @memberof CertificateEntity
     */
    identityProviders?: Array<IdentityProvider>;
}


/**
 * @export
 */
export const CertificateEntityStatusEnum = {
    Valid: 'VALID',
    WillExpire: 'WILL_EXPIRE',
    Expired: 'EXPIRED',
    Renewed: 'RENEWED'
} as const;
export type CertificateEntityStatusEnum = typeof CertificateEntityStatusEnum[keyof typeof CertificateEntityStatusEnum];


export function CertificateEntityFromJSON(json: any): CertificateEntity {
    return CertificateEntityFromJSONTyped(json, false);
}

export function CertificateEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateEntity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'expiresAt': !exists(json, 'expiresAt') ? undefined : (new Date(json['expiresAt'])),
        'system': !exists(json, 'system') ? undefined : json['system'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'usage': !exists(json, 'usage') ? undefined : json['usage'],
        'applications': !exists(json, 'applications') ? undefined : ((json['applications'] as Array<any>).map(ApplicationFromJSON)),
        'identityProviders': !exists(json, 'identityProviders') ? undefined : ((json['identityProviders'] as Array<any>).map(IdentityProviderFromJSON)),
    };
}

export function CertificateEntityToJSON(value?: CertificateEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'type': value.type,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'expiresAt': value.expiresAt === undefined ? undefined : (value.expiresAt.toISOString()),
        'system': value.system,
        'status': value.status,
        'usage': value.usage,
        'applications': value.applications === undefined ? undefined : ((value.applications as Array<any>).map(ApplicationToJSON)),
        'identityProviders': value.identityProviders === undefined ? undefined : ((value.identityProviders as Array<any>).map(IdentityProviderToJSON)),
    };
}

