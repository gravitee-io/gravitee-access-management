/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
import type { IdentityProvider } from './IdentityProvider';
import {
  IdentityProviderFromJSON,
  IdentityProviderFromJSONTyped,
  IdentityProviderToJSON,
  IdentityProviderToJSONTyped,
} from './IdentityProvider';
import type { Application } from './Application';
import { ApplicationFromJSON, ApplicationFromJSONTyped, ApplicationToJSON, ApplicationToJSONTyped } from './Application';

/**
 *
 * @export
 * @interface CertificateEntity
 */
export interface CertificateEntity {
  /**
   *
   * @type {string}
   * @memberof CertificateEntity
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof CertificateEntity
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof CertificateEntity
   */
  type?: string;
  /**
   *
   * @type {Date}
   * @memberof CertificateEntity
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof CertificateEntity
   */
  expiresAt?: Date;
  /**
   *
   * @type {boolean}
   * @memberof CertificateEntity
   */
  system?: boolean;
  /**
   *
   * @type {string}
   * @memberof CertificateEntity
   */
  status?: CertificateEntityStatusEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof CertificateEntity
   */
  usage?: Array<string>;
  /**
   *
   * @type {Array<Application>}
   * @memberof CertificateEntity
   */
  applications?: Array<Application>;
  /**
   *
   * @type {Array<IdentityProvider>}
   * @memberof CertificateEntity
   */
  identityProviders?: Array<IdentityProvider>;
}

/**
 * @export
 */
export const CertificateEntityStatusEnum = {
  Valid: 'VALID',
  WillExpire: 'WILL_EXPIRE',
  Expired: 'EXPIRED',
  Renewed: 'RENEWED',
} as const;
export type CertificateEntityStatusEnum = typeof CertificateEntityStatusEnum[keyof typeof CertificateEntityStatusEnum];

/**
 * Check if a given object implements the CertificateEntity interface.
 */
export function instanceOfCertificateEntity(value: object): value is CertificateEntity {
  return true;
}

export function CertificateEntityFromJSON(json: any): CertificateEntity {
  return CertificateEntityFromJSONTyped(json, false);
}

export function CertificateEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateEntity {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    name: json['name'] == null ? undefined : json['name'],
    type: json['type'] == null ? undefined : json['type'],
    createdAt: json['createdAt'] == null ? undefined : new Date(json['createdAt']),
    expiresAt: json['expiresAt'] == null ? undefined : new Date(json['expiresAt']),
    system: json['system'] == null ? undefined : json['system'],
    status: json['status'] == null ? undefined : json['status'],
    usage: json['usage'] == null ? undefined : json['usage'],
    applications: json['applications'] == null ? undefined : (json['applications'] as Array<any>).map(ApplicationFromJSON),
    identityProviders:
      json['identityProviders'] == null ? undefined : (json['identityProviders'] as Array<any>).map(IdentityProviderFromJSON),
  };
}

export function CertificateEntityToJSON(json: any): CertificateEntity {
  return CertificateEntityToJSONTyped(json, false);
}

export function CertificateEntityToJSONTyped(value?: CertificateEntity | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    name: value['name'],
    type: value['type'],
    createdAt: value['createdAt'] == null ? value['createdAt'] : value['createdAt'].toISOString(),
    expiresAt: value['expiresAt'] == null ? value['expiresAt'] : value['expiresAt'].toISOString(),
    system: value['system'],
    status: value['status'],
    usage: value['usage'],
    applications: value['applications'] == null ? undefined : (value['applications'] as Array<any>).map(ApplicationToJSON),
    identityProviders:
      value['identityProviders'] == null ? undefined : (value['identityProviders'] as Array<any>).map(IdentityProviderToJSON),
  };
}
