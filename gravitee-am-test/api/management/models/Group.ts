/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface Group
 */
export interface Group {
  /**
   *
   * @type {string}
   * @memberof Group
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Group
   */
  referenceType?: GroupReferenceTypeEnum;
  /**
   *
   * @type {string}
   * @memberof Group
   */
  referenceId?: string;
  /**
   *
   * @type {string}
   * @memberof Group
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Group
   */
  description?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Group
   */
  members?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Group
   */
  roles?: Array<string>;
  /**
   *
   * @type {Date}
   * @memberof Group
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Group
   */
  updatedAt?: Date;
}

/**
 * @export
 */
export const GroupReferenceTypeEnum = {
  Platform: 'PLATFORM',
  Domain: 'DOMAIN',
  Application: 'APPLICATION',
  Organization: 'ORGANIZATION',
  Environment: 'ENVIRONMENT',
} as const;
export type GroupReferenceTypeEnum = typeof GroupReferenceTypeEnum[keyof typeof GroupReferenceTypeEnum];

/**
 * Check if a given object implements the Group interface.
 */
export function instanceOfGroup(value: object): value is Group {
  return true;
}

export function GroupFromJSON(json: any): Group {
  return GroupFromJSONTyped(json, false);
}

export function GroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Group {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    referenceType: json['referenceType'] == null ? undefined : json['referenceType'],
    referenceId: json['referenceId'] == null ? undefined : json['referenceId'],
    name: json['name'] == null ? undefined : json['name'],
    description: json['description'] == null ? undefined : json['description'],
    members: json['members'] == null ? undefined : json['members'],
    roles: json['roles'] == null ? undefined : json['roles'],
    createdAt: json['createdAt'] == null ? undefined : new Date(json['createdAt']),
    updatedAt: json['updatedAt'] == null ? undefined : new Date(json['updatedAt']),
  };
}

export function GroupToJSON(json: any): Group {
  return GroupToJSONTyped(json, false);
}

export function GroupToJSONTyped(value?: Group | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    referenceType: value['referenceType'],
    referenceId: value['referenceId'],
    name: value['name'],
    description: value['description'],
    members: value['members'],
    roles: value['roles'],
    createdAt: value['createdAt'] == null ? value['createdAt'] : value['createdAt'].toISOString(),
    updatedAt: value['updatedAt'] == null ? value['updatedAt'] : value['updatedAt'].toISOString(),
  };
}
