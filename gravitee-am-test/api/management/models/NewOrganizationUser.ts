/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface NewOrganizationUser
 */
export interface NewOrganizationUser {
    /**
     * 
     * @type {string}
     * @memberof NewOrganizationUser
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof NewOrganizationUser
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof NewOrganizationUser
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof NewOrganizationUser
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof NewOrganizationUser
     */
    externalId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NewOrganizationUser
     */
    accountNonExpired?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NewOrganizationUser
     */
    accountNonLocked?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NewOrganizationUser
     */
    credentialsNonExpired?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NewOrganizationUser
     */
    enabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NewOrganizationUser
     */
    internal?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NewOrganizationUser
     */
    preRegistration?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NewOrganizationUser
     */
    registrationCompleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NewOrganizationUser
     */
    domain?: string;
    /**
     * 
     * @type {string}
     * @memberof NewOrganizationUser
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof NewOrganizationUser
     */
    client?: string;
    /**
     * 
     * @type {number}
     * @memberof NewOrganizationUser
     */
    loginsCount?: number;
    /**
     * 
     * @type {Date}
     * @memberof NewOrganizationUser
     */
    loggedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof NewOrganizationUser
     */
    preferredLanguage?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof NewOrganizationUser
     */
    additionalInformation?: { [key: string]: any; };
    /**
     * 
     * @type {Date}
     * @memberof NewOrganizationUser
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof NewOrganizationUser
     */
    updatedAt?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof NewOrganizationUser
     */
    forceResetPassword?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof NewOrganizationUser
     */
    lastPasswordReset?: Date;
    /**
     * 
     * @type {string}
     * @memberof NewOrganizationUser
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NewOrganizationUser
     */
    serviceAccount?: boolean;
}

export function NewOrganizationUserFromJSON(json: any): NewOrganizationUser {
    return NewOrganizationUserFromJSONTyped(json, false);
}

export function NewOrganizationUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): NewOrganizationUser {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'username': json['username'],
        'password': !exists(json, 'password') ? undefined : json['password'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'lastName': !exists(json, 'lastName') ? undefined : json['lastName'],
        'externalId': !exists(json, 'externalId') ? undefined : json['externalId'],
        'accountNonExpired': !exists(json, 'accountNonExpired') ? undefined : json['accountNonExpired'],
        'accountNonLocked': !exists(json, 'accountNonLocked') ? undefined : json['accountNonLocked'],
        'credentialsNonExpired': !exists(json, 'credentialsNonExpired') ? undefined : json['credentialsNonExpired'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'internal': !exists(json, 'internal') ? undefined : json['internal'],
        'preRegistration': !exists(json, 'preRegistration') ? undefined : json['preRegistration'],
        'registrationCompleted': !exists(json, 'registrationCompleted') ? undefined : json['registrationCompleted'],
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'source': !exists(json, 'source') ? undefined : json['source'],
        'client': !exists(json, 'client') ? undefined : json['client'],
        'loginsCount': !exists(json, 'loginsCount') ? undefined : json['loginsCount'],
        'loggedAt': !exists(json, 'loggedAt') ? undefined : (new Date(json['loggedAt'])),
        'preferredLanguage': !exists(json, 'preferredLanguage') ? undefined : json['preferredLanguage'],
        'additionalInformation': !exists(json, 'additionalInformation') ? undefined : json['additionalInformation'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'forceResetPassword': !exists(json, 'forceResetPassword') ? undefined : json['forceResetPassword'],
        'lastPasswordReset': !exists(json, 'lastPasswordReset') ? undefined : (new Date(json['lastPasswordReset'])),
        'email': !exists(json, 'email') ? undefined : json['email'],
        'serviceAccount': !exists(json, 'serviceAccount') ? undefined : json['serviceAccount'],
    };
}

export function NewOrganizationUserToJSON(value?: NewOrganizationUser | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'username': value.username,
        'password': value.password,
        'firstName': value.firstName,
        'lastName': value.lastName,
        'externalId': value.externalId,
        'accountNonExpired': value.accountNonExpired,
        'accountNonLocked': value.accountNonLocked,
        'credentialsNonExpired': value.credentialsNonExpired,
        'enabled': value.enabled,
        'internal': value.internal,
        'preRegistration': value.preRegistration,
        'registrationCompleted': value.registrationCompleted,
        'domain': value.domain,
        'source': value.source,
        'client': value.client,
        'loginsCount': value.loginsCount,
        'loggedAt': value.loggedAt === undefined ? undefined : (value.loggedAt.toISOString()),
        'preferredLanguage': value.preferredLanguage,
        'additionalInformation': value.additionalInformation,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'forceResetPassword': value.forceResetPassword,
        'lastPasswordReset': value.lastPasswordReset === undefined ? undefined : (value.lastPasswordReset.toISOString()),
        'email': value.email,
        'serviceAccount': value.serviceAccount,
    };
}

