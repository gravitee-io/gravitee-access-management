/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Factor
 */
export interface Factor {
    /**
     * 
     * @type {string}
     * @memberof Factor
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Factor
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Factor
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Factor
     */
    factorType?: FactorFactorTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Factor
     */
    configuration?: string;
    /**
     * 
     * @type {string}
     * @memberof Factor
     */
    domain?: string;
    /**
     * 
     * @type {Date}
     * @memberof Factor
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Factor
     */
    updatedAt?: Date;
}


/**
 * @export
 */
export const FactorFactorTypeEnum = {
    Otp: 'OTP',
    Sms: 'SMS',
    Email: 'EMAIL',
    Call: 'CALL',
    Http: 'HTTP',
    RecoveryCode: 'RECOVERY_CODE',
    Fido2: 'FIDO2'
} as const;
export type FactorFactorTypeEnum = typeof FactorFactorTypeEnum[keyof typeof FactorFactorTypeEnum];


export function FactorFromJSON(json: any): Factor {
    return FactorFromJSONTyped(json, false);
}

export function FactorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Factor {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'factorType': !exists(json, 'factorType') ? undefined : json['factorType'],
        'configuration': !exists(json, 'configuration') ? undefined : json['configuration'],
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function FactorToJSON(value?: Factor | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'type': value.type,
        'factorType': value.factorType,
        'configuration': value.configuration,
        'domain': value.domain,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

