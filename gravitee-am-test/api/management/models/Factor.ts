/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface Factor
 */
export interface Factor {
  /**
   *
   * @type {string}
   * @memberof Factor
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Factor
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Factor
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof Factor
   */
  factorType?: FactorFactorTypeEnum;
  /**
   *
   * @type {string}
   * @memberof Factor
   */
  configuration?: string;
  /**
   *
   * @type {string}
   * @memberof Factor
   */
  domain?: string;
  /**
   *
   * @type {number}
   * @memberof Factor
   */
  createdAt?: number;
  /**
   *
   * @type {number}
   * @memberof Factor
   */
  updatedAt?: number;
}

/**
 * @export
 */
export const FactorFactorTypeEnum = {
  Otp: 'OTP',
  Sms: 'SMS',
  Email: 'EMAIL',
  Call: 'CALL',
  Http: 'HTTP',
  RecoveryCode: 'RECOVERY_CODE',
  Fido2: 'FIDO2',
} as const;
export type FactorFactorTypeEnum = typeof FactorFactorTypeEnum[keyof typeof FactorFactorTypeEnum];

export function FactorFromJSON(json: any): Factor {
  return FactorFromJSONTyped(json, false);
}

export function FactorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Factor {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    type: !exists(json, 'type') ? undefined : json['type'],
    factorType: !exists(json, 'factorType') ? undefined : json['factorType'],
    configuration: !exists(json, 'configuration') ? undefined : json['configuration'],
    domain: !exists(json, 'domain') ? undefined : json['domain'],
    createdAt: !exists(json, 'createdAt') ? undefined : json['createdAt'],
    updatedAt: !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
  };
}

export function FactorToJSON(value?: Factor | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    type: value.type,
    factorType: value.factorType,
    configuration: value.configuration,
    domain: value.domain,
    createdAt: value.createdAt,
    updatedAt: value.updatedAt,
  };
}
