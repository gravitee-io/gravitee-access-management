/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface UpdatePasswordPolicy
 */
export interface UpdatePasswordPolicy {
  /**
   *
   * @type {string}
   * @memberof UpdatePasswordPolicy
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof UpdatePasswordPolicy
   */
  minLength?: number;
  /**
   *
   * @type {number}
   * @memberof UpdatePasswordPolicy
   */
  maxLength?: number;
  /**
   *
   * @type {boolean}
   * @memberof UpdatePasswordPolicy
   */
  includeNumbers?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UpdatePasswordPolicy
   */
  includeSpecialCharacters?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UpdatePasswordPolicy
   */
  lettersInMixedCase?: boolean;
  /**
   *
   * @type {number}
   * @memberof UpdatePasswordPolicy
   */
  maxConsecutiveLetters?: number;
  /**
   *
   * @type {boolean}
   * @memberof UpdatePasswordPolicy
   */
  excludePasswordsInDictionary?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UpdatePasswordPolicy
   */
  excludeUserProfileInfoInPassword?: boolean;
  /**
   *
   * @type {number}
   * @memberof UpdatePasswordPolicy
   */
  expiryDuration?: number;
  /**
   *
   * @type {boolean}
   * @memberof UpdatePasswordPolicy
   */
  passwordHistoryEnabled?: boolean;
  /**
   *
   * @type {number}
   * @memberof UpdatePasswordPolicy
   */
  oldPasswords?: number;
  /**
   *
   * @type {boolean}
   * @memberof UpdatePasswordPolicy
   */
  defaultPolicy?: boolean;
}

/**
 * Check if a given object implements the UpdatePasswordPolicy interface.
 */
export function instanceOfUpdatePasswordPolicy(value: object): value is UpdatePasswordPolicy {
  if (!('name' in value) || value['name'] === undefined) return false;
  return true;
}

export function UpdatePasswordPolicyFromJSON(json: any): UpdatePasswordPolicy {
  return UpdatePasswordPolicyFromJSONTyped(json, false);
}

export function UpdatePasswordPolicyFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdatePasswordPolicy {
  if (json == null) {
    return json;
  }
  return {
    name: json['name'],
    minLength: json['minLength'] == null ? undefined : json['minLength'],
    maxLength: json['maxLength'] == null ? undefined : json['maxLength'],
    includeNumbers: json['includeNumbers'] == null ? undefined : json['includeNumbers'],
    includeSpecialCharacters: json['includeSpecialCharacters'] == null ? undefined : json['includeSpecialCharacters'],
    lettersInMixedCase: json['lettersInMixedCase'] == null ? undefined : json['lettersInMixedCase'],
    maxConsecutiveLetters: json['maxConsecutiveLetters'] == null ? undefined : json['maxConsecutiveLetters'],
    excludePasswordsInDictionary: json['excludePasswordsInDictionary'] == null ? undefined : json['excludePasswordsInDictionary'],
    excludeUserProfileInfoInPassword:
      json['excludeUserProfileInfoInPassword'] == null ? undefined : json['excludeUserProfileInfoInPassword'],
    expiryDuration: json['expiryDuration'] == null ? undefined : json['expiryDuration'],
    passwordHistoryEnabled: json['passwordHistoryEnabled'] == null ? undefined : json['passwordHistoryEnabled'],
    oldPasswords: json['oldPasswords'] == null ? undefined : json['oldPasswords'],
    defaultPolicy: json['defaultPolicy'] == null ? undefined : json['defaultPolicy'],
  };
}

export function UpdatePasswordPolicyToJSON(json: any): UpdatePasswordPolicy {
  return UpdatePasswordPolicyToJSONTyped(json, false);
}

export function UpdatePasswordPolicyToJSONTyped(value?: UpdatePasswordPolicy | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    name: value['name'],
    minLength: value['minLength'],
    maxLength: value['maxLength'],
    includeNumbers: value['includeNumbers'],
    includeSpecialCharacters: value['includeSpecialCharacters'],
    lettersInMixedCase: value['lettersInMixedCase'],
    maxConsecutiveLetters: value['maxConsecutiveLetters'],
    excludePasswordsInDictionary: value['excludePasswordsInDictionary'],
    excludeUserProfileInfoInPassword: value['excludeUserProfileInfoInPassword'],
    expiryDuration: value['expiryDuration'],
    passwordHistoryEnabled: value['passwordHistoryEnabled'],
    oldPasswords: value['oldPasswords'],
    defaultPolicy: value['defaultPolicy'],
  };
}
