/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { exists, mapValues } from '../runtime';
import {
    PatchApplicationFactorSettings,
    PatchApplicationFactorSettingsFromJSON,
    PatchApplicationFactorSettingsFromJSONTyped,
    PatchApplicationFactorSettingsToJSON,
} from './PatchApplicationFactorSettings';

/**
 * 
 * @export
 * @interface PatchFactorSettings
 */
export interface PatchFactorSettings {
    /**
     * 
     * @type {string}
     * @memberof PatchFactorSettings
     */
    defaultFactorId?: string;
    /**
     * 
     * @type {Array<PatchApplicationFactorSettings>}
     * @memberof PatchFactorSettings
     */
    applicationFactors?: Array<PatchApplicationFactorSettings>;
}

export function PatchFactorSettingsFromJSON(json: any): PatchFactorSettings {
    return PatchFactorSettingsFromJSONTyped(json, false);
}

export function PatchFactorSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchFactorSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'defaultFactorId': !exists(json, 'defaultFactorId') ? undefined : json['defaultFactorId'],
        'applicationFactors': !exists(json, 'applicationFactors') ? undefined : ((json['applicationFactors'] as Array<any>).map(PatchApplicationFactorSettingsFromJSON)),
    };
}

export function PatchFactorSettingsToJSON(value?: PatchFactorSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'defaultFactorId': value.defaultFactorId,
        'applicationFactors': value.applicationFactors === undefined ? undefined : ((value.applicationFactors as Array<any>).map(PatchApplicationFactorSettingsToJSON)),
    };
}

