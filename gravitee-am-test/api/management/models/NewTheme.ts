/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface NewTheme
 */
export interface NewTheme {
  /**
   *
   * @type {string}
   * @memberof NewTheme
   */
  logoUrl?: string;
  /**
   *
   * @type {number}
   * @memberof NewTheme
   */
  logoWidth?: number;
  /**
   *
   * @type {string}
   * @memberof NewTheme
   */
  faviconUrl?: string;
  /**
   *
   * @type {string}
   * @memberof NewTheme
   */
  primaryButtonColorHex?: string;
  /**
   *
   * @type {string}
   * @memberof NewTheme
   */
  secondaryButtonColorHex?: string;
  /**
   *
   * @type {string}
   * @memberof NewTheme
   */
  primaryTextColorHex?: string;
  /**
   *
   * @type {string}
   * @memberof NewTheme
   */
  secondaryTextColorHex?: string;
  /**
   *
   * @type {string}
   * @memberof NewTheme
   */
  css?: string;
}

/**
 * Check if a given object implements the NewTheme interface.
 */
export function instanceOfNewTheme(value: object): value is NewTheme {
  return true;
}

export function NewThemeFromJSON(json: any): NewTheme {
  return NewThemeFromJSONTyped(json, false);
}

export function NewThemeFromJSONTyped(json: any, ignoreDiscriminator: boolean): NewTheme {
  if (json == null) {
    return json;
  }
  return {
    logoUrl: json['logoUrl'] == null ? undefined : json['logoUrl'],
    logoWidth: json['logoWidth'] == null ? undefined : json['logoWidth'],
    faviconUrl: json['faviconUrl'] == null ? undefined : json['faviconUrl'],
    primaryButtonColorHex: json['primaryButtonColorHex'] == null ? undefined : json['primaryButtonColorHex'],
    secondaryButtonColorHex: json['secondaryButtonColorHex'] == null ? undefined : json['secondaryButtonColorHex'],
    primaryTextColorHex: json['primaryTextColorHex'] == null ? undefined : json['primaryTextColorHex'],
    secondaryTextColorHex: json['secondaryTextColorHex'] == null ? undefined : json['secondaryTextColorHex'],
    css: json['css'] == null ? undefined : json['css'],
  };
}

export function NewThemeToJSON(json: any): NewTheme {
  return NewThemeToJSONTyped(json, false);
}

export function NewThemeToJSONTyped(value?: NewTheme | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    logoUrl: value['logoUrl'],
    logoWidth: value['logoWidth'],
    faviconUrl: value['faviconUrl'],
    primaryButtonColorHex: value['primaryButtonColorHex'],
    secondaryButtonColorHex: value['secondaryButtonColorHex'],
    primaryTextColorHex: value['primaryTextColorHex'],
    secondaryTextColorHex: value['secondaryTextColorHex'],
    css: value['css'],
  };
}
