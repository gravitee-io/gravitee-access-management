/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
import type { PatchEnrollSettings } from './PatchEnrollSettings';
import {
  PatchEnrollSettingsFromJSON,
  PatchEnrollSettingsFromJSONTyped,
  PatchEnrollSettingsToJSON,
  PatchEnrollSettingsToJSONTyped,
} from './PatchEnrollSettings';
import type { PatchRememberDeviceSettings } from './PatchRememberDeviceSettings';
import {
  PatchRememberDeviceSettingsFromJSON,
  PatchRememberDeviceSettingsFromJSONTyped,
  PatchRememberDeviceSettingsToJSON,
  PatchRememberDeviceSettingsToJSONTyped,
} from './PatchRememberDeviceSettings';
import type { PatchChallengeSettings } from './PatchChallengeSettings';
import {
  PatchChallengeSettingsFromJSON,
  PatchChallengeSettingsFromJSONTyped,
  PatchChallengeSettingsToJSON,
  PatchChallengeSettingsToJSONTyped,
} from './PatchChallengeSettings';
import type { PatchEnrollmentSettings } from './PatchEnrollmentSettings';
import {
  PatchEnrollmentSettingsFromJSON,
  PatchEnrollmentSettingsFromJSONTyped,
  PatchEnrollmentSettingsToJSON,
  PatchEnrollmentSettingsToJSONTyped,
} from './PatchEnrollmentSettings';
import type { PatchFactorSettings } from './PatchFactorSettings';
import {
  PatchFactorSettingsFromJSON,
  PatchFactorSettingsFromJSONTyped,
  PatchFactorSettingsToJSON,
  PatchFactorSettingsToJSONTyped,
} from './PatchFactorSettings';
import type { PatchStepUpAuthentication } from './PatchStepUpAuthentication';
import {
  PatchStepUpAuthenticationFromJSON,
  PatchStepUpAuthenticationFromJSONTyped,
  PatchStepUpAuthenticationToJSON,
  PatchStepUpAuthenticationToJSONTyped,
} from './PatchStepUpAuthentication';

/**
 *
 * @export
 * @interface PatchMFASettings
 */
export interface PatchMFASettings {
  /**
   *
   * @type {string}
   * @memberof PatchMFASettings
   */
  loginRule?: string;
  /**
   *
   * @type {PatchFactorSettings}
   * @memberof PatchMFASettings
   */
  factor?: PatchFactorSettings;
  /**
   *
   * @type {string}
   * @memberof PatchMFASettings
   */
  stepUpAuthenticationRule?: string;
  /**
   *
   * @type {PatchStepUpAuthentication}
   * @memberof PatchMFASettings
   */
  stepUpAuthentication?: PatchStepUpAuthentication;
  /**
   *
   * @type {string}
   * @memberof PatchMFASettings
   */
  adaptiveAuthenticationRule?: string;
  /**
   *
   * @type {PatchRememberDeviceSettings}
   * @memberof PatchMFASettings
   */
  rememberDevice?: PatchRememberDeviceSettings;
  /**
   *
   * @type {PatchEnrollmentSettings}
   * @memberof PatchMFASettings
   */
  enrollment?: PatchEnrollmentSettings;
  /**
   *
   * @type {PatchEnrollSettings}
   * @memberof PatchMFASettings
   */
  enroll?: PatchEnrollSettings;
  /**
   *
   * @type {PatchChallengeSettings}
   * @memberof PatchMFASettings
   */
  challenge?: PatchChallengeSettings;
}

/**
 * Check if a given object implements the PatchMFASettings interface.
 */
export function instanceOfPatchMFASettings(value: object): value is PatchMFASettings {
  return true;
}

export function PatchMFASettingsFromJSON(json: any): PatchMFASettings {
  return PatchMFASettingsFromJSONTyped(json, false);
}

export function PatchMFASettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchMFASettings {
  if (json == null) {
    return json;
  }
  return {
    loginRule: json['loginRule'] == null ? undefined : json['loginRule'],
    factor: json['factor'] == null ? undefined : PatchFactorSettingsFromJSON(json['factor']),
    stepUpAuthenticationRule: json['stepUpAuthenticationRule'] == null ? undefined : json['stepUpAuthenticationRule'],
    stepUpAuthentication:
      json['stepUpAuthentication'] == null ? undefined : PatchStepUpAuthenticationFromJSON(json['stepUpAuthentication']),
    adaptiveAuthenticationRule: json['adaptiveAuthenticationRule'] == null ? undefined : json['adaptiveAuthenticationRule'],
    rememberDevice: json['rememberDevice'] == null ? undefined : PatchRememberDeviceSettingsFromJSON(json['rememberDevice']),
    enrollment: json['enrollment'] == null ? undefined : PatchEnrollmentSettingsFromJSON(json['enrollment']),
    enroll: json['enroll'] == null ? undefined : PatchEnrollSettingsFromJSON(json['enroll']),
    challenge: json['challenge'] == null ? undefined : PatchChallengeSettingsFromJSON(json['challenge']),
  };
}

export function PatchMFASettingsToJSON(json: any): PatchMFASettings {
  return PatchMFASettingsToJSONTyped(json, false);
}

export function PatchMFASettingsToJSONTyped(value?: PatchMFASettings | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    loginRule: value['loginRule'],
    factor: PatchFactorSettingsToJSON(value['factor']),
    stepUpAuthenticationRule: value['stepUpAuthenticationRule'],
    stepUpAuthentication: PatchStepUpAuthenticationToJSON(value['stepUpAuthentication']),
    adaptiveAuthenticationRule: value['adaptiveAuthenticationRule'],
    rememberDevice: PatchRememberDeviceSettingsToJSON(value['rememberDevice']),
    enrollment: PatchEnrollmentSettingsToJSON(value['enrollment']),
    enroll: PatchEnrollSettingsToJSON(value['enroll']),
    challenge: PatchChallengeSettingsToJSON(value['challenge']),
  };
}
