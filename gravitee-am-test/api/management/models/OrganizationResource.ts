/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import { AuditsResource, AuditsResourceFromJSON, AuditsResourceFromJSONTyped, AuditsResourceToJSON } from './AuditsResource';
import {
  EntrypointsResource,
  EntrypointsResourceFromJSON,
  EntrypointsResourceFromJSONTyped,
  EntrypointsResourceToJSON,
} from './EntrypointsResource';
import {
  EnvironmentsResource,
  EnvironmentsResourceFromJSON,
  EnvironmentsResourceFromJSONTyped,
  EnvironmentsResourceToJSON,
} from './EnvironmentsResource';
import { FormsResource, FormsResourceFromJSON, FormsResourceFromJSONTyped, FormsResourceToJSON } from './FormsResource';
import { GroupsResource, GroupsResourceFromJSON, GroupsResourceFromJSONTyped, GroupsResourceToJSON } from './GroupsResource';
import {
  IdentityProvidersResource,
  IdentityProvidersResourceFromJSON,
  IdentityProvidersResourceFromJSONTyped,
  IdentityProvidersResourceToJSON,
} from './IdentityProvidersResource';
import { MembersResource, MembersResourceFromJSON, MembersResourceFromJSONTyped, MembersResourceToJSON } from './MembersResource';
import { RolesResource, RolesResourceFromJSON, RolesResourceFromJSONTyped, RolesResourceToJSON } from './RolesResource';
import { TagsResource, TagsResourceFromJSON, TagsResourceFromJSONTyped, TagsResourceToJSON } from './TagsResource';
import { UsersResource, UsersResourceFromJSON, UsersResourceFromJSONTyped, UsersResourceToJSON } from './UsersResource';

/**
 *
 * @export
 * @interface OrganizationResource
 */
export interface OrganizationResource {
  /**
   *
   * @type {EnvironmentsResource}
   * @memberof OrganizationResource
   */
  environmentsResource?: EnvironmentsResource;
  /**
   *
   * @type {MembersResource}
   * @memberof OrganizationResource
   */
  membersResource?: MembersResource;
  /**
   *
   * @type {TagsResource}
   * @memberof OrganizationResource
   */
  tagsResource?: TagsResource;
  /**
   *
   * @type {AuditsResource}
   * @memberof OrganizationResource
   */
  auditsResource?: AuditsResource;
  /**
   *
   * @type {EntrypointsResource}
   * @memberof OrganizationResource
   */
  entrypointsResource?: EntrypointsResource;
  /**
   *
   * @type {RolesResource}
   * @memberof OrganizationResource
   */
  rolesResource?: RolesResource;
  /**
   *
   * @type {GroupsResource}
   * @memberof OrganizationResource
   */
  groupsResource?: GroupsResource;
  /**
   *
   * @type {IdentityProvidersResource}
   * @memberof OrganizationResource
   */
  identityProvidersResource?: IdentityProvidersResource;
  /**
   *
   * @type {UsersResource}
   * @memberof OrganizationResource
   */
  usersResource?: UsersResource;
  /**
   *
   * @type {any}
   * @memberof OrganizationResource
   */
  settingsResource?: any;
  /**
   *
   * @type {FormsResource}
   * @memberof OrganizationResource
   */
  formsResource?: FormsResource;
}

export function OrganizationResourceFromJSON(json: any): OrganizationResource {
  return OrganizationResourceFromJSONTyped(json, false);
}

export function OrganizationResourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationResource {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    environmentsResource: !exists(json, 'environmentsResource') ? undefined : EnvironmentsResourceFromJSON(json['environmentsResource']),
    membersResource: !exists(json, 'membersResource') ? undefined : MembersResourceFromJSON(json['membersResource']),
    tagsResource: !exists(json, 'tagsResource') ? undefined : TagsResourceFromJSON(json['tagsResource']),
    auditsResource: !exists(json, 'auditsResource') ? undefined : AuditsResourceFromJSON(json['auditsResource']),
    entrypointsResource: !exists(json, 'entrypointsResource') ? undefined : EntrypointsResourceFromJSON(json['entrypointsResource']),
    rolesResource: !exists(json, 'rolesResource') ? undefined : RolesResourceFromJSON(json['rolesResource']),
    groupsResource: !exists(json, 'groupsResource') ? undefined : GroupsResourceFromJSON(json['groupsResource']),
    identityProvidersResource: !exists(json, 'identityProvidersResource')
      ? undefined
      : IdentityProvidersResourceFromJSON(json['identityProvidersResource']),
    usersResource: !exists(json, 'usersResource') ? undefined : UsersResourceFromJSON(json['usersResource']),
    settingsResource: !exists(json, 'settingsResource') ? undefined : json['settingsResource'],
    formsResource: !exists(json, 'formsResource') ? undefined : FormsResourceFromJSON(json['formsResource']),
  };
}

export function OrganizationResourceToJSON(value?: OrganizationResource | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    environmentsResource: EnvironmentsResourceToJSON(value.environmentsResource),
    membersResource: MembersResourceToJSON(value.membersResource),
    tagsResource: TagsResourceToJSON(value.tagsResource),
    auditsResource: AuditsResourceToJSON(value.auditsResource),
    entrypointsResource: EntrypointsResourceToJSON(value.entrypointsResource),
    rolesResource: RolesResourceToJSON(value.rolesResource),
    groupsResource: GroupsResourceToJSON(value.groupsResource),
    identityProvidersResource: IdentityProvidersResourceToJSON(value.identityProvidersResource),
    usersResource: UsersResourceToJSON(value.usersResource),
    settingsResource: value.settingsResource,
    formsResource: FormsResourceToJSON(value.formsResource),
  };
}
