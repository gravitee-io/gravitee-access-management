/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import { Group, GroupFromJSON, GroupFromJSONTyped, GroupToJSON } from './Group';

/**
 *
 * @export
 * @interface GroupPage
 */
export interface GroupPage {
  /**
   *
   * @type {Array<Group>}
   * @memberof GroupPage
   */
  data?: Array<Group>;
  /**
   *
   * @type {number}
   * @memberof GroupPage
   */
  currentPage?: number;
  /**
   *
   * @type {number}
   * @memberof GroupPage
   */
  totalCount?: number;
}

export function GroupPageFromJSON(json: any): GroupPage {
  return GroupPageFromJSONTyped(json, false);
}

export function GroupPageFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupPage {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    data: !exists(json, 'data') ? undefined : (json['data'] as Array<any>).map(GroupFromJSON),
    currentPage: !exists(json, 'currentPage') ? undefined : json['currentPage'],
    totalCount: !exists(json, 'totalCount') ? undefined : json['totalCount'],
  };
}

export function GroupPageToJSON(value?: GroupPage | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    data: value.data === undefined ? undefined : (value.data as Array<any>).map(GroupToJSON),
    currentPage: value.currentPage,
    totalCount: value.totalCount,
  };
}
