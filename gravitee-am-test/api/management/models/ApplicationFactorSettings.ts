/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface ApplicationFactorSettings
 */
export interface ApplicationFactorSettings {
  /**
   *
   * @type {string}
   * @memberof ApplicationFactorSettings
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ApplicationFactorSettings
   */
  selectionRule?: string;
}

/**
 * Check if a given object implements the ApplicationFactorSettings interface.
 */
export function instanceOfApplicationFactorSettings(value: object): value is ApplicationFactorSettings {
  return true;
}

export function ApplicationFactorSettingsFromJSON(json: any): ApplicationFactorSettings {
  return ApplicationFactorSettingsFromJSONTyped(json, false);
}

export function ApplicationFactorSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationFactorSettings {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    selectionRule: json['selectionRule'] == null ? undefined : json['selectionRule'],
  };
}

export function ApplicationFactorSettingsToJSON(json: any): ApplicationFactorSettings {
  return ApplicationFactorSettingsToJSONTyped(json, false);
}

export function ApplicationFactorSettingsToJSONTyped(value?: ApplicationFactorSettings | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    selectionRule: value['selectionRule'],
  };
}
