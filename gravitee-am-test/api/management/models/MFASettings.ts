/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
import type { ChallengeSettings } from './ChallengeSettings';
import {
  ChallengeSettingsFromJSON,
  ChallengeSettingsFromJSONTyped,
  ChallengeSettingsToJSON,
  ChallengeSettingsToJSONTyped,
} from './ChallengeSettings';
import type { RememberDeviceSettings } from './RememberDeviceSettings';
import {
  RememberDeviceSettingsFromJSON,
  RememberDeviceSettingsFromJSONTyped,
  RememberDeviceSettingsToJSON,
  RememberDeviceSettingsToJSONTyped,
} from './RememberDeviceSettings';
import type { StepUpAuthenticationSettings } from './StepUpAuthenticationSettings';
import {
  StepUpAuthenticationSettingsFromJSON,
  StepUpAuthenticationSettingsFromJSONTyped,
  StepUpAuthenticationSettingsToJSON,
  StepUpAuthenticationSettingsToJSONTyped,
} from './StepUpAuthenticationSettings';
import type { EnrollSettings } from './EnrollSettings';
import { EnrollSettingsFromJSON, EnrollSettingsFromJSONTyped, EnrollSettingsToJSON, EnrollSettingsToJSONTyped } from './EnrollSettings';
import type { EnrollmentSettings } from './EnrollmentSettings';
import {
  EnrollmentSettingsFromJSON,
  EnrollmentSettingsFromJSONTyped,
  EnrollmentSettingsToJSON,
  EnrollmentSettingsToJSONTyped,
} from './EnrollmentSettings';
import type { FactorSettings } from './FactorSettings';
import { FactorSettingsFromJSON, FactorSettingsFromJSONTyped, FactorSettingsToJSON, FactorSettingsToJSONTyped } from './FactorSettings';

/**
 *
 * @export
 * @interface MFASettings
 */
export interface MFASettings {
  /**
   *
   * @type {string}
   * @memberof MFASettings
   */
  loginRule?: string;
  /**
   *
   * @type {FactorSettings}
   * @memberof MFASettings
   */
  factor?: FactorSettings;
  /**
   *
   * @type {string}
   * @memberof MFASettings
   */
  stepUpAuthenticationRule?: string;
  /**
   *
   * @type {StepUpAuthenticationSettings}
   * @memberof MFASettings
   */
  stepUpAuthentication?: StepUpAuthenticationSettings;
  /**
   *
   * @type {string}
   * @memberof MFASettings
   */
  adaptiveAuthenticationRule?: string;
  /**
   *
   * @type {RememberDeviceSettings}
   * @memberof MFASettings
   */
  rememberDevice?: RememberDeviceSettings;
  /**
   *
   * @type {EnrollmentSettings}
   * @memberof MFASettings
   */
  enrollment?: EnrollmentSettings;
  /**
   *
   * @type {ChallengeSettings}
   * @memberof MFASettings
   */
  challenge?: ChallengeSettings;
  /**
   *
   * @type {EnrollSettings}
   * @memberof MFASettings
   */
  enroll?: EnrollSettings;
}

/**
 * Check if a given object implements the MFASettings interface.
 */
export function instanceOfMFASettings(value: object): value is MFASettings {
  return true;
}

export function MFASettingsFromJSON(json: any): MFASettings {
  return MFASettingsFromJSONTyped(json, false);
}

export function MFASettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MFASettings {
  if (json == null) {
    return json;
  }
  return {
    loginRule: json['loginRule'] == null ? undefined : json['loginRule'],
    factor: json['factor'] == null ? undefined : FactorSettingsFromJSON(json['factor']),
    stepUpAuthenticationRule: json['stepUpAuthenticationRule'] == null ? undefined : json['stepUpAuthenticationRule'],
    stepUpAuthentication:
      json['stepUpAuthentication'] == null ? undefined : StepUpAuthenticationSettingsFromJSON(json['stepUpAuthentication']),
    adaptiveAuthenticationRule: json['adaptiveAuthenticationRule'] == null ? undefined : json['adaptiveAuthenticationRule'],
    rememberDevice: json['rememberDevice'] == null ? undefined : RememberDeviceSettingsFromJSON(json['rememberDevice']),
    enrollment: json['enrollment'] == null ? undefined : EnrollmentSettingsFromJSON(json['enrollment']),
    challenge: json['challenge'] == null ? undefined : ChallengeSettingsFromJSON(json['challenge']),
    enroll: json['enroll'] == null ? undefined : EnrollSettingsFromJSON(json['enroll']),
  };
}

export function MFASettingsToJSON(json: any): MFASettings {
  return MFASettingsToJSONTyped(json, false);
}

export function MFASettingsToJSONTyped(value?: MFASettings | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    loginRule: value['loginRule'],
    factor: FactorSettingsToJSON(value['factor']),
    stepUpAuthenticationRule: value['stepUpAuthenticationRule'],
    stepUpAuthentication: StepUpAuthenticationSettingsToJSON(value['stepUpAuthentication']),
    adaptiveAuthenticationRule: value['adaptiveAuthenticationRule'],
    rememberDevice: RememberDeviceSettingsToJSON(value['rememberDevice']),
    enrollment: EnrollmentSettingsToJSON(value['enrollment']),
    challenge: ChallengeSettingsToJSON(value['challenge']),
    enroll: EnrollSettingsToJSON(value['enroll']),
  };
}
