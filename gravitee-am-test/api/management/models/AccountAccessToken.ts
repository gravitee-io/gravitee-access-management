/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AccountAccessToken
 */
export interface AccountAccessToken {
    /**
     * 
     * @type {string}
     * @memberof AccountAccessToken
     */
    tokenId?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAccessToken
     */
    referenceType?: AccountAccessTokenReferenceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AccountAccessToken
     */
    referenceId?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAccessToken
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAccessToken
     */
    issuerUsername?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAccessToken
     */
    issuerId?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAccessToken
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountAccessToken
     */
    token?: string;
    /**
     * 
     * @type {Date}
     * @memberof AccountAccessToken
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AccountAccessToken
     */
    updatedAt?: Date;
}


/**
 * @export
 */
export const AccountAccessTokenReferenceTypeEnum = {
    Platform: 'PLATFORM',
    Domain: 'DOMAIN',
    Application: 'APPLICATION',
    Organization: 'ORGANIZATION',
    Environment: 'ENVIRONMENT'
} as const;
export type AccountAccessTokenReferenceTypeEnum = typeof AccountAccessTokenReferenceTypeEnum[keyof typeof AccountAccessTokenReferenceTypeEnum];


export function AccountAccessTokenFromJSON(json: any): AccountAccessToken {
    return AccountAccessTokenFromJSONTyped(json, false);
}

export function AccountAccessTokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountAccessToken {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tokenId': !exists(json, 'tokenId') ? undefined : json['tokenId'],
        'referenceType': !exists(json, 'referenceType') ? undefined : json['referenceType'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'issuerUsername': !exists(json, 'issuerUsername') ? undefined : json['issuerUsername'],
        'issuerId': !exists(json, 'issuerId') ? undefined : json['issuerId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'token': !exists(json, 'token') ? undefined : json['token'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function AccountAccessTokenToJSON(value?: AccountAccessToken | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'tokenId': value.tokenId,
        'referenceType': value.referenceType,
        'referenceId': value.referenceId,
        'userId': value.userId,
        'issuerUsername': value.issuerUsername,
        'issuerId': value.issuerId,
        'name': value.name,
        'token': value.token,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

