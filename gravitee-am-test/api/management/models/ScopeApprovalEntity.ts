/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
import type { ScopeEntity } from './ScopeEntity';
import { ScopeEntityFromJSON, ScopeEntityFromJSONTyped, ScopeEntityToJSON, ScopeEntityToJSONTyped } from './ScopeEntity';
import type { ApplicationEntity } from './ApplicationEntity';
import {
  ApplicationEntityFromJSON,
  ApplicationEntityFromJSONTyped,
  ApplicationEntityToJSON,
  ApplicationEntityToJSONTyped,
} from './ApplicationEntity';
import type { UserId } from './UserId';
import { UserIdFromJSON, UserIdFromJSONTyped, UserIdToJSON, UserIdToJSONTyped } from './UserId';

/**
 *
 * @export
 * @interface ScopeApprovalEntity
 */
export interface ScopeApprovalEntity {
  /**
   *
   * @type {string}
   * @memberof ScopeApprovalEntity
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ScopeApprovalEntity
   */
  transactionId?: string;
  /**
   *
   * @type {UserId}
   * @memberof ScopeApprovalEntity
   */
  userId?: UserId;
  /**
   *
   * @type {string}
   * @memberof ScopeApprovalEntity
   */
  clientId?: string;
  /**
   *
   * @type {string}
   * @memberof ScopeApprovalEntity
   */
  domain?: string;
  /**
   *
   * @type {string}
   * @memberof ScopeApprovalEntity
   */
  scope?: string;
  /**
   *
   * @type {string}
   * @memberof ScopeApprovalEntity
   */
  status?: ScopeApprovalEntityStatusEnum;
  /**
   *
   * @type {Date}
   * @memberof ScopeApprovalEntity
   */
  expiresAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof ScopeApprovalEntity
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof ScopeApprovalEntity
   */
  updatedAt?: Date;
  /**
   *
   * @type {ApplicationEntity}
   * @memberof ScopeApprovalEntity
   */
  clientEntity?: ApplicationEntity;
  /**
   *
   * @type {ScopeEntity}
   * @memberof ScopeApprovalEntity
   */
  scopeEntity?: ScopeEntity;
}

/**
 * @export
 */
export const ScopeApprovalEntityStatusEnum = {
  Approved: 'APPROVED',
  Denied: 'DENIED',
} as const;
export type ScopeApprovalEntityStatusEnum = typeof ScopeApprovalEntityStatusEnum[keyof typeof ScopeApprovalEntityStatusEnum];

/**
 * Check if a given object implements the ScopeApprovalEntity interface.
 */
export function instanceOfScopeApprovalEntity(value: object): value is ScopeApprovalEntity {
  return true;
}

export function ScopeApprovalEntityFromJSON(json: any): ScopeApprovalEntity {
  return ScopeApprovalEntityFromJSONTyped(json, false);
}

export function ScopeApprovalEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScopeApprovalEntity {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    transactionId: json['transactionId'] == null ? undefined : json['transactionId'],
    userId: json['userId'] == null ? undefined : UserIdFromJSON(json['userId']),
    clientId: json['clientId'] == null ? undefined : json['clientId'],
    domain: json['domain'] == null ? undefined : json['domain'],
    scope: json['scope'] == null ? undefined : json['scope'],
    status: json['status'] == null ? undefined : json['status'],
    expiresAt: json['expiresAt'] == null ? undefined : new Date(json['expiresAt']),
    createdAt: json['createdAt'] == null ? undefined : new Date(json['createdAt']),
    updatedAt: json['updatedAt'] == null ? undefined : new Date(json['updatedAt']),
    clientEntity: json['clientEntity'] == null ? undefined : ApplicationEntityFromJSON(json['clientEntity']),
    scopeEntity: json['scopeEntity'] == null ? undefined : ScopeEntityFromJSON(json['scopeEntity']),
  };
}

export function ScopeApprovalEntityToJSON(json: any): ScopeApprovalEntity {
  return ScopeApprovalEntityToJSONTyped(json, false);
}

export function ScopeApprovalEntityToJSONTyped(value?: ScopeApprovalEntity | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    transactionId: value['transactionId'],
    userId: UserIdToJSON(value['userId']),
    clientId: value['clientId'],
    domain: value['domain'],
    scope: value['scope'],
    status: value['status'],
    expiresAt: value['expiresAt'] == null ? undefined : value['expiresAt'].toISOString(),
    createdAt: value['createdAt'] == null ? undefined : value['createdAt'].toISOString(),
    updatedAt: value['updatedAt'] == null ? undefined : value['updatedAt'].toISOString(),
    clientEntity: ApplicationEntityToJSON(value['clientEntity']),
    scopeEntity: ScopeEntityToJSON(value['scopeEntity']),
  };
}
