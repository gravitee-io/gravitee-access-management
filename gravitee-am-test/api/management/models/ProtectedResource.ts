/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
import type { ClientSecret } from './ClientSecret';
import { ClientSecretFromJSON, ClientSecretFromJSONTyped, ClientSecretToJSON, ClientSecretToJSONTyped } from './ClientSecret';
import type { ProtectedResourceFeature } from './ProtectedResourceFeature';
import {
  ProtectedResourceFeatureFromJSON,
  ProtectedResourceFeatureFromJSONTyped,
  ProtectedResourceFeatureToJSON,
  ProtectedResourceFeatureToJSONTyped,
} from './ProtectedResourceFeature';
import type { ApplicationSecretSettings } from './ApplicationSecretSettings';
import {
  ApplicationSecretSettingsFromJSON,
  ApplicationSecretSettingsFromJSONTyped,
  ApplicationSecretSettingsToJSON,
  ApplicationSecretSettingsToJSONTyped,
} from './ApplicationSecretSettings';

/**
 *
 * @export
 * @interface ProtectedResource
 */
export interface ProtectedResource {
  /**
   *
   * @type {string}
   * @memberof ProtectedResource
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ProtectedResource
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof ProtectedResource
   */
  clientId?: string;
  /**
   *
   * @type {string}
   * @memberof ProtectedResource
   */
  domainId?: string;
  /**
   *
   * @type {string}
   * @memberof ProtectedResource
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof ProtectedResource
   */
  type?: ProtectedResourceTypeEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof ProtectedResource
   */
  resourceIdentifiers?: Array<string>;
  /**
   *
   * @type {Array<ClientSecret>}
   * @memberof ProtectedResource
   */
  clientSecrets?: Array<ClientSecret>;
  /**
   *
   * @type {Array<ApplicationSecretSettings>}
   * @memberof ProtectedResource
   */
  secretSettings?: Array<ApplicationSecretSettings>;
  /**
   *
   * @type {Array<ProtectedResourceFeature>}
   * @memberof ProtectedResource
   */
  features?: Array<ProtectedResourceFeature>;
  /**
   *
   * @type {Date}
   * @memberof ProtectedResource
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof ProtectedResource
   */
  updatedAt?: Date;
}

/**
 * @export
 */
export const ProtectedResourceTypeEnum = {
  McpServer: 'MCP_SERVER',
} as const;
export type ProtectedResourceTypeEnum = typeof ProtectedResourceTypeEnum[keyof typeof ProtectedResourceTypeEnum];

/**
 * Check if a given object implements the ProtectedResource interface.
 */
export function instanceOfProtectedResource(value: object): value is ProtectedResource {
  return true;
}

export function ProtectedResourceFromJSON(json: any): ProtectedResource {
  return ProtectedResourceFromJSONTyped(json, false);
}

export function ProtectedResourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProtectedResource {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    name: json['name'] == null ? undefined : json['name'],
    clientId: json['clientId'] == null ? undefined : json['clientId'],
    domainId: json['domainId'] == null ? undefined : json['domainId'],
    description: json['description'] == null ? undefined : json['description'],
    type: json['type'] == null ? undefined : json['type'],
    resourceIdentifiers: json['resourceIdentifiers'] == null ? undefined : json['resourceIdentifiers'],
    clientSecrets: json['clientSecrets'] == null ? undefined : (json['clientSecrets'] as Array<any>).map(ClientSecretFromJSON),
    secretSettings:
      json['secretSettings'] == null ? undefined : (json['secretSettings'] as Array<any>).map(ApplicationSecretSettingsFromJSON),
    features: json['features'] == null ? undefined : (json['features'] as Array<any>).map(ProtectedResourceFeatureFromJSON),
    createdAt: json['createdAt'] == null ? undefined : new Date(json['createdAt']),
    updatedAt: json['updatedAt'] == null ? undefined : new Date(json['updatedAt']),
  };
}

export function ProtectedResourceToJSON(json: any): ProtectedResource {
  return ProtectedResourceToJSONTyped(json, false);
}

export function ProtectedResourceToJSONTyped(value?: ProtectedResource | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    name: value['name'],
    clientId: value['clientId'],
    domainId: value['domainId'],
    description: value['description'],
    type: value['type'],
    resourceIdentifiers: value['resourceIdentifiers'],
    clientSecrets: value['clientSecrets'] == null ? undefined : (value['clientSecrets'] as Array<any>).map(ClientSecretToJSON),
    secretSettings:
      value['secretSettings'] == null ? undefined : (value['secretSettings'] as Array<any>).map(ApplicationSecretSettingsToJSON),
    features: value['features'] == null ? undefined : (value['features'] as Array<any>).map(ProtectedResourceFeatureToJSON),
    createdAt: value['createdAt'] == null ? undefined : value['createdAt'].toISOString(),
    updatedAt: value['updatedAt'] == null ? undefined : value['updatedAt'].toISOString(),
  };
}
