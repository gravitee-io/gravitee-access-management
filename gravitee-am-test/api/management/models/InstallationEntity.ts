/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface InstallationEntity
 */
export interface InstallationEntity {
  /**
   *
   * @type {string}
   * @memberof InstallationEntity
   */
  id?: string;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof InstallationEntity
   */
  additionalInformation?: { [key: string]: string };
  /**
   *
   * @type {Date}
   * @memberof InstallationEntity
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof InstallationEntity
   */
  updatedAt?: Date;
}

/**
 * Check if a given object implements the InstallationEntity interface.
 */
export function instanceOfInstallationEntity(value: object): value is InstallationEntity {
  return true;
}

export function InstallationEntityFromJSON(json: any): InstallationEntity {
  return InstallationEntityFromJSONTyped(json, false);
}

export function InstallationEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): InstallationEntity {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    additionalInformation: json['additionalInformation'] == null ? undefined : json['additionalInformation'],
    createdAt: json['createdAt'] == null ? undefined : new Date(json['createdAt']),
    updatedAt: json['updatedAt'] == null ? undefined : new Date(json['updatedAt']),
  };
}

export function InstallationEntityToJSON(json: any): InstallationEntity {
  return InstallationEntityToJSONTyped(json, false);
}

export function InstallationEntityToJSONTyped(value?: InstallationEntity | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    additionalInformation: value['additionalInformation'],
    createdAt: value['createdAt'] == null ? value['createdAt'] : value['createdAt'].toISOString(),
    updatedAt: value['updatedAt'] == null ? value['updatedAt'] : value['updatedAt'].toISOString(),
  };
}
