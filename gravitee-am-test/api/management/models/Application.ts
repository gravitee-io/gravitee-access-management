/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
import type { ApplicationSettings } from './ApplicationSettings';
import {
  ApplicationSettingsFromJSON,
  ApplicationSettingsFromJSONTyped,
  ApplicationSettingsToJSON,
  ApplicationSettingsToJSONTyped,
} from './ApplicationSettings';
import type { ClientSecret } from './ClientSecret';
import { ClientSecretFromJSON, ClientSecretFromJSONTyped, ClientSecretToJSON, ClientSecretToJSONTyped } from './ClientSecret';
import type { ApplicationIdentityProvider } from './ApplicationIdentityProvider';
import {
  ApplicationIdentityProviderFromJSON,
  ApplicationIdentityProviderFromJSONTyped,
  ApplicationIdentityProviderToJSON,
  ApplicationIdentityProviderToJSONTyped,
} from './ApplicationIdentityProvider';
import type { PasswordSettings } from './PasswordSettings';
import {
  PasswordSettingsFromJSON,
  PasswordSettingsFromJSONTyped,
  PasswordSettingsToJSON,
  PasswordSettingsToJSONTyped,
} from './PasswordSettings';
import type { ApplicationSecretSettings } from './ApplicationSecretSettings';
import {
  ApplicationSecretSettingsFromJSON,
  ApplicationSecretSettingsFromJSONTyped,
  ApplicationSecretSettingsToJSON,
  ApplicationSecretSettingsToJSONTyped,
} from './ApplicationSecretSettings';

/**
 *
 * @export
 * @interface Application
 */
export interface Application {
  /**
   *
   * @type {string}
   * @memberof Application
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Application
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Application
   */
  type?: ApplicationTypeEnum;
  /**
   *
   * @type {string}
   * @memberof Application
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Application
   */
  domain?: string;
  /**
   *
   * @type {boolean}
   * @memberof Application
   */
  enabled?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Application
   */
  template?: boolean;
  /**
   *
   * @type {Set<string>}
   * @memberof Application
   */
  factors?: Set<string>;
  /**
   *
   * @type {string}
   * @memberof Application
   */
  certificate?: string;
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof Application
   */
  metadata?: { [key: string]: any };
  /**
   *
   * @type {ApplicationSettings}
   * @memberof Application
   */
  settings?: ApplicationSettings;
  /**
   *
   * @type {Set<ApplicationIdentityProvider>}
   * @memberof Application
   */
  identityProviders?: Set<ApplicationIdentityProvider>;
  /**
   *
   * @type {Date}
   * @memberof Application
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Application
   */
  updatedAt?: Date;
  /**
   *
   * @type {Array<ApplicationSecretSettings>}
   * @memberof Application
   */
  secretSettings?: Array<ApplicationSecretSettings>;
  /**
   *
   * @type {Array<ClientSecret>}
   * @memberof Application
   */
  secrets?: Array<ClientSecret>;
  /**
   *
   * @type {PasswordSettings}
   * @memberof Application
   */
  passwordSettings?: PasswordSettings;
}

/**
 * @export
 */
export const ApplicationTypeEnum = {
  Web: 'WEB',
  Native: 'NATIVE',
  Browser: 'BROWSER',
  Service: 'SERVICE',
  ResourceServer: 'RESOURCE_SERVER',
} as const;
export type ApplicationTypeEnum = typeof ApplicationTypeEnum[keyof typeof ApplicationTypeEnum];

/**
 * Check if a given object implements the Application interface.
 */
export function instanceOfApplication(value: object): value is Application {
  return true;
}

export function ApplicationFromJSON(json: any): Application {
  return ApplicationFromJSONTyped(json, false);
}

export function ApplicationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Application {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    name: json['name'] == null ? undefined : json['name'],
    type: json['type'] == null ? undefined : json['type'],
    description: json['description'] == null ? undefined : json['description'],
    domain: json['domain'] == null ? undefined : json['domain'],
    enabled: json['enabled'] == null ? undefined : json['enabled'],
    template: json['template'] == null ? undefined : json['template'],
    factors: json['factors'] == null ? undefined : new Set(json['factors']),
    certificate: json['certificate'] == null ? undefined : json['certificate'],
    metadata: json['metadata'] == null ? undefined : json['metadata'],
    settings: json['settings'] == null ? undefined : ApplicationSettingsFromJSON(json['settings']),
    identityProviders:
      json['identityProviders'] == null
        ? undefined
        : new Set((json['identityProviders'] as Array<any>).map(ApplicationIdentityProviderFromJSON)),
    createdAt: json['createdAt'] == null ? undefined : new Date(json['createdAt']),
    updatedAt: json['updatedAt'] == null ? undefined : new Date(json['updatedAt']),
    secretSettings:
      json['secretSettings'] == null ? undefined : (json['secretSettings'] as Array<any>).map(ApplicationSecretSettingsFromJSON),
    secrets: json['secrets'] == null ? undefined : (json['secrets'] as Array<any>).map(ClientSecretFromJSON),
    passwordSettings: json['passwordSettings'] == null ? undefined : PasswordSettingsFromJSON(json['passwordSettings']),
  };
}

export function ApplicationToJSON(json: any): Application {
  return ApplicationToJSONTyped(json, false);
}

export function ApplicationToJSONTyped(value?: Application | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    name: value['name'],
    type: value['type'],
    description: value['description'],
    domain: value['domain'],
    enabled: value['enabled'],
    template: value['template'],
    factors: value['factors'] == null ? undefined : Array.from(value['factors'] as Set<any>),
    certificate: value['certificate'],
    metadata: value['metadata'],
    settings: ApplicationSettingsToJSON(value['settings']),
    identityProviders:
      value['identityProviders'] == null
        ? undefined
        : Array.from(value['identityProviders'] as Set<any>).map(ApplicationIdentityProviderToJSON),
    createdAt: value['createdAt'] == null ? value['createdAt'] : value['createdAt'].toISOString(),
    updatedAt: value['updatedAt'] == null ? value['updatedAt'] : value['updatedAt'].toISOString(),
    secretSettings:
      value['secretSettings'] == null ? undefined : (value['secretSettings'] as Array<any>).map(ApplicationSecretSettingsToJSON),
    secrets: value['secrets'] == null ? undefined : (value['secrets'] as Array<any>).map(ClientSecretToJSON),
    passwordSettings: PasswordSettingsToJSON(value['passwordSettings']),
  };
}
