/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
import type { AccountSettings } from './AccountSettings';
import {
  AccountSettingsFromJSON,
  AccountSettingsFromJSONTyped,
  AccountSettingsToJSON,
  AccountSettingsToJSONTyped,
} from './AccountSettings';
import type { SCIMSettings } from './SCIMSettings';
import { SCIMSettingsFromJSON, SCIMSettingsFromJSONTyped, SCIMSettingsToJSON, SCIMSettingsToJSONTyped } from './SCIMSettings';
import type { SelfServiceAccountManagementSettings } from './SelfServiceAccountManagementSettings';
import {
  SelfServiceAccountManagementSettingsFromJSON,
  SelfServiceAccountManagementSettingsFromJSONTyped,
  SelfServiceAccountManagementSettingsToJSON,
  SelfServiceAccountManagementSettingsToJSONTyped,
} from './SelfServiceAccountManagementSettings';
import type { CorsSettings } from './CorsSettings';
import { CorsSettingsFromJSON, CorsSettingsFromJSONTyped, CorsSettingsToJSON, CorsSettingsToJSONTyped } from './CorsSettings';
import type { LoginSettings } from './LoginSettings';
import { LoginSettingsFromJSON, LoginSettingsFromJSONTyped, LoginSettingsToJSON, LoginSettingsToJSONTyped } from './LoginSettings';
import type { SecretExpirationSettings } from './SecretExpirationSettings';
import {
  SecretExpirationSettingsFromJSON,
  SecretExpirationSettingsFromJSONTyped,
  SecretExpirationSettingsToJSON,
  SecretExpirationSettingsToJSONTyped,
} from './SecretExpirationSettings';
import type { VirtualHost } from './VirtualHost';
import { VirtualHostFromJSON, VirtualHostFromJSONTyped, VirtualHostToJSON, VirtualHostToJSONTyped } from './VirtualHost';
import type { OIDCSettings } from './OIDCSettings';
import { OIDCSettingsFromJSON, OIDCSettingsFromJSONTyped, OIDCSettingsToJSON, OIDCSettingsToJSONTyped } from './OIDCSettings';
import type { PasswordSettings } from './PasswordSettings';
import {
  PasswordSettingsFromJSON,
  PasswordSettingsFromJSONTyped,
  PasswordSettingsToJSON,
  PasswordSettingsToJSONTyped,
} from './PasswordSettings';
import type { WebAuthnSettings } from './WebAuthnSettings';
import {
  WebAuthnSettingsFromJSON,
  WebAuthnSettingsFromJSONTyped,
  WebAuthnSettingsToJSON,
  WebAuthnSettingsToJSONTyped,
} from './WebAuthnSettings';
import type { SAMLSettings } from './SAMLSettings';
import { SAMLSettingsFromJSON, SAMLSettingsFromJSONTyped, SAMLSettingsToJSON, SAMLSettingsToJSONTyped } from './SAMLSettings';
import type { UMASettings } from './UMASettings';
import { UMASettingsFromJSON, UMASettingsFromJSONTyped, UMASettingsToJSON, UMASettingsToJSONTyped } from './UMASettings';

/**
 *
 * @export
 * @interface Domain
 */
export interface Domain {
  /**
   *
   * @type {string}
   * @memberof Domain
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Domain
   */
  hrid?: string;
  /**
   *
   * @type {string}
   * @memberof Domain
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Domain
   */
  version?: DomainVersionEnum;
  /**
   *
   * @type {string}
   * @memberof Domain
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Domain
   */
  referenceType?: DomainReferenceTypeEnum;
  /**
   *
   * @type {string}
   * @memberof Domain
   */
  referenceId?: string;
  /**
   *
   * @type {boolean}
   * @memberof Domain
   */
  enabled?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Domain
   */
  alertEnabled?: boolean;
  /**
   *
   * @type {string}
   * @memberof Domain
   */
  path?: string;
  /**
   *
   * @type {Set<string>}
   * @memberof Domain
   */
  identities?: Set<string>;
  /**
   *
   * @type {boolean}
   * @memberof Domain
   */
  master?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Domain
   */
  vhostMode?: boolean;
  /**
   *
   * @type {Array<VirtualHost>}
   * @memberof Domain
   */
  vhosts?: Array<VirtualHost>;
  /**
   *
   * @type {Set<string>}
   * @memberof Domain
   */
  tags?: Set<string>;
  /**
   *
   * @type {Date}
   * @memberof Domain
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof Domain
   */
  updatedAt?: Date;
  /**
   *
   * @type {OIDCSettings}
   * @memberof Domain
   */
  oidc?: OIDCSettings;
  /**
   *
   * @type {UMASettings}
   * @memberof Domain
   */
  uma?: UMASettings;
  /**
   *
   * @type {LoginSettings}
   * @memberof Domain
   */
  loginSettings?: LoginSettings;
  /**
   *
   * @type {WebAuthnSettings}
   * @memberof Domain
   */
  webAuthnSettings?: WebAuthnSettings;
  /**
   *
   * @type {SCIMSettings}
   * @memberof Domain
   */
  scim?: SCIMSettings;
  /**
   *
   * @type {AccountSettings}
   * @memberof Domain
   */
  accountSettings?: AccountSettings;
  /**
   *
   * @type {PasswordSettings}
   * @memberof Domain
   */
  passwordSettings?: PasswordSettings;
  /**
   *
   * @type {SelfServiceAccountManagementSettings}
   * @memberof Domain
   */
  selfServiceAccountManagementSettings?: SelfServiceAccountManagementSettings;
  /**
   *
   * @type {SAMLSettings}
   * @memberof Domain
   */
  saml?: SAMLSettings;
  /**
   *
   * @type {CorsSettings}
   * @memberof Domain
   */
  corsSettings?: CorsSettings;
  /**
   *
   * @type {string}
   * @memberof Domain
   */
  dataPlaneId?: string;
  /**
   *
   * @type {SecretExpirationSettings}
   * @memberof Domain
   */
  secretExpirationSettings?: SecretExpirationSettings;
  /**
   *
   * @type {boolean}
   * @memberof Domain
   */
  redirectUriLocalhostAllowed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Domain
   */
  redirectUriWildcardAllowed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Domain
   */
  redirectUriStrictMatching?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Domain
   */
  dynamicClientRegistrationEnabled?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Domain
   */
  openDynamicClientRegistrationEnabled?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Domain
   */
  redirectUriExpressionLanguageEnabled?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Domain
   */
  dynamicClientRegistrationTemplateEnabled?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Domain
   */
  redirectUriUnsecuredHttpSchemeAllowed?: boolean;
}

/**
 * @export
 */
export const DomainVersionEnum = {
  V10: 'V1_0',
  V20: 'V2_0',
} as const;
export type DomainVersionEnum = typeof DomainVersionEnum[keyof typeof DomainVersionEnum];

/**
 * @export
 */
export const DomainReferenceTypeEnum = {
  Platform: 'PLATFORM',
  Domain: 'DOMAIN',
  Application: 'APPLICATION',
  Organization: 'ORGANIZATION',
  Environment: 'ENVIRONMENT',
} as const;
export type DomainReferenceTypeEnum = typeof DomainReferenceTypeEnum[keyof typeof DomainReferenceTypeEnum];

/**
 * Check if a given object implements the Domain interface.
 */
export function instanceOfDomain(value: object): value is Domain {
  return true;
}

export function DomainFromJSON(json: any): Domain {
  return DomainFromJSONTyped(json, false);
}

export function DomainFromJSONTyped(json: any, ignoreDiscriminator: boolean): Domain {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    hrid: json['hrid'] == null ? undefined : json['hrid'],
    name: json['name'] == null ? undefined : json['name'],
    version: json['version'] == null ? undefined : json['version'],
    description: json['description'] == null ? undefined : json['description'],
    referenceType: json['referenceType'] == null ? undefined : json['referenceType'],
    referenceId: json['referenceId'] == null ? undefined : json['referenceId'],
    enabled: json['enabled'] == null ? undefined : json['enabled'],
    alertEnabled: json['alertEnabled'] == null ? undefined : json['alertEnabled'],
    path: json['path'] == null ? undefined : json['path'],
    identities: json['identities'] == null ? undefined : new Set(json['identities']),
    master: json['master'] == null ? undefined : json['master'],
    vhostMode: json['vhostMode'] == null ? undefined : json['vhostMode'],
    vhosts: json['vhosts'] == null ? undefined : (json['vhosts'] as Array<any>).map(VirtualHostFromJSON),
    tags: json['tags'] == null ? undefined : new Set(json['tags']),
    createdAt: json['createdAt'] == null ? undefined : new Date(json['createdAt']),
    updatedAt: json['updatedAt'] == null ? undefined : new Date(json['updatedAt']),
    oidc: json['oidc'] == null ? undefined : OIDCSettingsFromJSON(json['oidc']),
    uma: json['uma'] == null ? undefined : UMASettingsFromJSON(json['uma']),
    loginSettings: json['loginSettings'] == null ? undefined : LoginSettingsFromJSON(json['loginSettings']),
    webAuthnSettings: json['webAuthnSettings'] == null ? undefined : WebAuthnSettingsFromJSON(json['webAuthnSettings']),
    scim: json['scim'] == null ? undefined : SCIMSettingsFromJSON(json['scim']),
    accountSettings: json['accountSettings'] == null ? undefined : AccountSettingsFromJSON(json['accountSettings']),
    passwordSettings: json['passwordSettings'] == null ? undefined : PasswordSettingsFromJSON(json['passwordSettings']),
    selfServiceAccountManagementSettings:
      json['selfServiceAccountManagementSettings'] == null
        ? undefined
        : SelfServiceAccountManagementSettingsFromJSON(json['selfServiceAccountManagementSettings']),
    saml: json['saml'] == null ? undefined : SAMLSettingsFromJSON(json['saml']),
    corsSettings: json['corsSettings'] == null ? undefined : CorsSettingsFromJSON(json['corsSettings']),
    dataPlaneId: json['dataPlaneId'] == null ? undefined : json['dataPlaneId'],
    secretExpirationSettings:
      json['secretExpirationSettings'] == null ? undefined : SecretExpirationSettingsFromJSON(json['secretExpirationSettings']),
    redirectUriLocalhostAllowed: json['redirectUriLocalhostAllowed'] == null ? undefined : json['redirectUriLocalhostAllowed'],
    redirectUriWildcardAllowed: json['redirectUriWildcardAllowed'] == null ? undefined : json['redirectUriWildcardAllowed'],
    redirectUriStrictMatching: json['redirectUriStrictMatching'] == null ? undefined : json['redirectUriStrictMatching'],
    dynamicClientRegistrationEnabled:
      json['dynamicClientRegistrationEnabled'] == null ? undefined : json['dynamicClientRegistrationEnabled'],
    openDynamicClientRegistrationEnabled:
      json['openDynamicClientRegistrationEnabled'] == null ? undefined : json['openDynamicClientRegistrationEnabled'],
    redirectUriExpressionLanguageEnabled:
      json['redirectUriExpressionLanguageEnabled'] == null ? undefined : json['redirectUriExpressionLanguageEnabled'],
    dynamicClientRegistrationTemplateEnabled:
      json['dynamicClientRegistrationTemplateEnabled'] == null ? undefined : json['dynamicClientRegistrationTemplateEnabled'],
    redirectUriUnsecuredHttpSchemeAllowed:
      json['redirectUriUnsecuredHttpSchemeAllowed'] == null ? undefined : json['redirectUriUnsecuredHttpSchemeAllowed'],
  };
}

export function DomainToJSON(json: any): Domain {
  return DomainToJSONTyped(json, false);
}

export function DomainToJSONTyped(value?: Domain | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    hrid: value['hrid'],
    name: value['name'],
    version: value['version'],
    description: value['description'],
    referenceType: value['referenceType'],
    referenceId: value['referenceId'],
    enabled: value['enabled'],
    alertEnabled: value['alertEnabled'],
    path: value['path'],
    identities: value['identities'] == null ? undefined : Array.from(value['identities'] as Set<any>),
    master: value['master'],
    vhostMode: value['vhostMode'],
    vhosts: value['vhosts'] == null ? undefined : (value['vhosts'] as Array<any>).map(VirtualHostToJSON),
    tags: value['tags'] == null ? undefined : Array.from(value['tags'] as Set<any>),
    createdAt: value['createdAt'] == null ? undefined : value['createdAt'].toISOString(),
    updatedAt: value['updatedAt'] == null ? undefined : value['updatedAt'].toISOString(),
    oidc: OIDCSettingsToJSON(value['oidc']),
    uma: UMASettingsToJSON(value['uma']),
    loginSettings: LoginSettingsToJSON(value['loginSettings']),
    webAuthnSettings: WebAuthnSettingsToJSON(value['webAuthnSettings']),
    scim: SCIMSettingsToJSON(value['scim']),
    accountSettings: AccountSettingsToJSON(value['accountSettings']),
    passwordSettings: PasswordSettingsToJSON(value['passwordSettings']),
    selfServiceAccountManagementSettings: SelfServiceAccountManagementSettingsToJSON(value['selfServiceAccountManagementSettings']),
    saml: SAMLSettingsToJSON(value['saml']),
    corsSettings: CorsSettingsToJSON(value['corsSettings']),
    dataPlaneId: value['dataPlaneId'],
    secretExpirationSettings: SecretExpirationSettingsToJSON(value['secretExpirationSettings']),
    redirectUriLocalhostAllowed: value['redirectUriLocalhostAllowed'],
    redirectUriWildcardAllowed: value['redirectUriWildcardAllowed'],
    redirectUriStrictMatching: value['redirectUriStrictMatching'],
    dynamicClientRegistrationEnabled: value['dynamicClientRegistrationEnabled'],
    openDynamicClientRegistrationEnabled: value['openDynamicClientRegistrationEnabled'],
    redirectUriExpressionLanguageEnabled: value['redirectUriExpressionLanguageEnabled'],
    dynamicClientRegistrationTemplateEnabled: value['dynamicClientRegistrationTemplateEnabled'],
    redirectUriUnsecuredHttpSchemeAllowed: value['redirectUriUnsecuredHttpSchemeAllowed'],
  };
}
