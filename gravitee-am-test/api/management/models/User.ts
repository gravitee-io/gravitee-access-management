/*
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
import { mapValues } from '../runtime';
import type { Role } from './Role';
import { RoleFromJSON, RoleFromJSONTyped, RoleToJSON, RoleToJSONTyped } from './Role';
import type { Address } from './Address';
import { AddressFromJSON, AddressFromJSONTyped, AddressToJSON, AddressToJSONTyped } from './Address';
import type { Attribute } from './Attribute';
import { AttributeFromJSON, AttributeFromJSONTyped, AttributeToJSON, AttributeToJSONTyped } from './Attribute';
import type { EnrolledFactor } from './EnrolledFactor';
import { EnrolledFactorFromJSON, EnrolledFactorFromJSONTyped, EnrolledFactorToJSON, EnrolledFactorToJSONTyped } from './EnrolledFactor';
import type { UserId } from './UserId';
import { UserIdFromJSON, UserIdFromJSONTyped, UserIdToJSON, UserIdToJSONTyped } from './UserId';
import type { UserIdentity } from './UserIdentity';
import { UserIdentityFromJSON, UserIdentityFromJSONTyped, UserIdentityToJSON, UserIdentityToJSONTyped } from './UserIdentity';
import type { Certificate } from './Certificate';
import { CertificateFromJSON, CertificateFromJSONTyped, CertificateToJSON, CertificateToJSONTyped } from './Certificate';

/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  externalId?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  displayName?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  nickName?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  firstName?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  lastName?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  preferredLanguage?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  picture?: string;
  /**
   *
   * @type {Array<Attribute>}
   * @memberof User
   */
  emails?: Array<Attribute>;
  /**
   *
   * @type {Array<Attribute>}
   * @memberof User
   */
  phoneNumbers?: Array<Attribute>;
  /**
   *
   * @type {Array<Attribute>}
   * @memberof User
   */
  ims?: Array<Attribute>;
  /**
   *
   * @type {Array<Attribute>}
   * @memberof User
   */
  photos?: Array<Attribute>;
  /**
   *
   * @type {Array<string>}
   * @memberof User
   */
  entitlements?: Array<string>;
  /**
   *
   * @type {Array<Address>}
   * @memberof User
   */
  addresses?: Array<Address>;
  /**
   *
   * @type {Array<string>}
   * @memberof User
   */
  roles?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof User
   */
  dynamicRoles?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof User
   */
  dynamicGroups?: Array<string>;
  /**
   *
   * @type {Set<Role>}
   * @memberof User
   */
  rolesPermissions?: Set<Role>;
  /**
   *
   * @type {Array<string>}
   * @memberof User
   */
  groups?: Array<string>;
  /**
   *
   * @type {Array<Certificate>}
   * @memberof User
   */
  x509Certificates?: Array<Certificate>;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  accountNonExpired?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  accountNonLocked?: boolean;
  /**
   *
   * @type {Date}
   * @memberof User
   */
  accountLockedAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof User
   */
  accountLockedUntil?: Date;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  credentialsNonExpired?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  enabled?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  internal?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  preRegistration?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  registrationCompleted?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  newsletter?: boolean;
  /**
   *
   * @type {string}
   * @memberof User
   */
  registrationUserUri?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  registrationAccessToken?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  referenceType?: UserReferenceTypeEnum;
  /**
   *
   * @type {string}
   * @memberof User
   */
  referenceId?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  source?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  client?: string;
  /**
   *
   * @type {number}
   * @memberof User
   */
  loginsCount?: number;
  /**
   *
   * @type {Array<EnrolledFactor>}
   * @memberof User
   */
  factors?: Array<EnrolledFactor>;
  /**
   *
   * @type {Array<UserIdentity>}
   * @memberof User
   */
  identities?: Array<UserIdentity>;
  /**
   *
   * @type {string}
   * @memberof User
   */
  lastIdentityUsed?: string;
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof User
   */
  additionalInformation?: { [key: string]: any };
  /**
   *
   * @type {Date}
   * @memberof User
   */
  loggedAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof User
   */
  lastLoginWithCredentials?: Date;
  /**
   *
   * @type {Date}
   * @memberof User
   */
  lastPasswordReset?: Date;
  /**
   *
   * @type {Date}
   * @memberof User
   */
  lastUsernameReset?: Date;
  /**
   *
   * @type {Date}
   * @memberof User
   */
  lastLogoutAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof User
   */
  mfaEnrollmentSkippedAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof User
   */
  createdAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof User
   */
  updatedAt?: Date;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  forceResetPassword?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  serviceAccount?: boolean;
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof User
   */
  address?: { [key: string]: any };
  /**
   *
   * @type {string}
   * @memberof User
   */
  locale?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  zoneInfo?: string;
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof User
   */
  lastIdentityInformation?: { [key: string]: any };
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof User
   */
  identitiesAsMap?: { [key: string]: any };
  /**
   *
   * @type {UserId}
   * @memberof User
   */
  fullId?: UserId;
  /**
   *
   * @type {string}
   * @memberof User
   */
  middleName?: string;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  inactive?: boolean;
  /**
   *
   * @type {string}
   * @memberof User
   */
  profile?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  website?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  birthdate?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  phoneNumber?: string;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  disabled?: boolean;
}

/**
 * @export
 */
export const UserReferenceTypeEnum = {
  Platform: 'PLATFORM',
  Domain: 'DOMAIN',
  Application: 'APPLICATION',
  Organization: 'ORGANIZATION',
  Environment: 'ENVIRONMENT',
} as const;
export type UserReferenceTypeEnum = typeof UserReferenceTypeEnum[keyof typeof UserReferenceTypeEnum];

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
  return true;
}

export function UserFromJSON(json: any): User {
  return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    externalId: json['externalId'] == null ? undefined : json['externalId'],
    username: json['username'] == null ? undefined : json['username'],
    password: json['password'] == null ? undefined : json['password'],
    email: json['email'] == null ? undefined : json['email'],
    displayName: json['displayName'] == null ? undefined : json['displayName'],
    nickName: json['nickName'] == null ? undefined : json['nickName'],
    firstName: json['firstName'] == null ? undefined : json['firstName'],
    lastName: json['lastName'] == null ? undefined : json['lastName'],
    title: json['title'] == null ? undefined : json['title'],
    type: json['type'] == null ? undefined : json['type'],
    preferredLanguage: json['preferredLanguage'] == null ? undefined : json['preferredLanguage'],
    picture: json['picture'] == null ? undefined : json['picture'],
    emails: json['emails'] == null ? undefined : (json['emails'] as Array<any>).map(AttributeFromJSON),
    phoneNumbers: json['phoneNumbers'] == null ? undefined : (json['phoneNumbers'] as Array<any>).map(AttributeFromJSON),
    ims: json['ims'] == null ? undefined : (json['ims'] as Array<any>).map(AttributeFromJSON),
    photos: json['photos'] == null ? undefined : (json['photos'] as Array<any>).map(AttributeFromJSON),
    entitlements: json['entitlements'] == null ? undefined : json['entitlements'],
    addresses: json['addresses'] == null ? undefined : (json['addresses'] as Array<any>).map(AddressFromJSON),
    roles: json['roles'] == null ? undefined : json['roles'],
    dynamicRoles: json['dynamicRoles'] == null ? undefined : json['dynamicRoles'],
    dynamicGroups: json['dynamicGroups'] == null ? undefined : json['dynamicGroups'],
    rolesPermissions: json['rolesPermissions'] == null ? undefined : new Set((json['rolesPermissions'] as Array<any>).map(RoleFromJSON)),
    groups: json['groups'] == null ? undefined : json['groups'],
    x509Certificates: json['x509Certificates'] == null ? undefined : (json['x509Certificates'] as Array<any>).map(CertificateFromJSON),
    accountNonExpired: json['accountNonExpired'] == null ? undefined : json['accountNonExpired'],
    accountNonLocked: json['accountNonLocked'] == null ? undefined : json['accountNonLocked'],
    accountLockedAt: json['accountLockedAt'] == null ? undefined : new Date(json['accountLockedAt']),
    accountLockedUntil: json['accountLockedUntil'] == null ? undefined : new Date(json['accountLockedUntil']),
    credentialsNonExpired: json['credentialsNonExpired'] == null ? undefined : json['credentialsNonExpired'],
    enabled: json['enabled'] == null ? undefined : json['enabled'],
    internal: json['internal'] == null ? undefined : json['internal'],
    preRegistration: json['preRegistration'] == null ? undefined : json['preRegistration'],
    registrationCompleted: json['registrationCompleted'] == null ? undefined : json['registrationCompleted'],
    newsletter: json['newsletter'] == null ? undefined : json['newsletter'],
    registrationUserUri: json['registrationUserUri'] == null ? undefined : json['registrationUserUri'],
    registrationAccessToken: json['registrationAccessToken'] == null ? undefined : json['registrationAccessToken'],
    referenceType: json['referenceType'] == null ? undefined : json['referenceType'],
    referenceId: json['referenceId'] == null ? undefined : json['referenceId'],
    source: json['source'] == null ? undefined : json['source'],
    client: json['client'] == null ? undefined : json['client'],
    loginsCount: json['loginsCount'] == null ? undefined : json['loginsCount'],
    factors: json['factors'] == null ? undefined : (json['factors'] as Array<any>).map(EnrolledFactorFromJSON),
    identities: json['identities'] == null ? undefined : (json['identities'] as Array<any>).map(UserIdentityFromJSON),
    lastIdentityUsed: json['lastIdentityUsed'] == null ? undefined : json['lastIdentityUsed'],
    additionalInformation: json['additionalInformation'] == null ? undefined : json['additionalInformation'],
    loggedAt: json['loggedAt'] == null ? undefined : new Date(json['loggedAt']),
    lastLoginWithCredentials: json['lastLoginWithCredentials'] == null ? undefined : new Date(json['lastLoginWithCredentials']),
    lastPasswordReset: json['lastPasswordReset'] == null ? undefined : new Date(json['lastPasswordReset']),
    lastUsernameReset: json['lastUsernameReset'] == null ? undefined : new Date(json['lastUsernameReset']),
    lastLogoutAt: json['lastLogoutAt'] == null ? undefined : new Date(json['lastLogoutAt']),
    mfaEnrollmentSkippedAt: json['mfaEnrollmentSkippedAt'] == null ? undefined : new Date(json['mfaEnrollmentSkippedAt']),
    createdAt: json['createdAt'] == null ? undefined : new Date(json['createdAt']),
    updatedAt: json['updatedAt'] == null ? undefined : new Date(json['updatedAt']),
    forceResetPassword: json['forceResetPassword'] == null ? undefined : json['forceResetPassword'],
    serviceAccount: json['serviceAccount'] == null ? undefined : json['serviceAccount'],
    address: json['address'] == null ? undefined : json['address'],
    locale: json['locale'] == null ? undefined : json['locale'],
    zoneInfo: json['zoneInfo'] == null ? undefined : json['zoneInfo'],
    lastIdentityInformation: json['lastIdentityInformation'] == null ? undefined : json['lastIdentityInformation'],
    identitiesAsMap: json['identitiesAsMap'] == null ? undefined : json['identitiesAsMap'],
    fullId: json['fullId'] == null ? undefined : UserIdFromJSON(json['fullId']),
    middleName: json['middleName'] == null ? undefined : json['middleName'],
    inactive: json['inactive'] == null ? undefined : json['inactive'],
    profile: json['profile'] == null ? undefined : json['profile'],
    website: json['website'] == null ? undefined : json['website'],
    birthdate: json['birthdate'] == null ? undefined : json['birthdate'],
    phoneNumber: json['phoneNumber'] == null ? undefined : json['phoneNumber'],
    disabled: json['disabled'] == null ? undefined : json['disabled'],
  };
}

export function UserToJSON(json: any): User {
  return UserToJSONTyped(json, false);
}

export function UserToJSONTyped(value?: User | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    externalId: value['externalId'],
    username: value['username'],
    password: value['password'],
    email: value['email'],
    displayName: value['displayName'],
    nickName: value['nickName'],
    firstName: value['firstName'],
    lastName: value['lastName'],
    title: value['title'],
    type: value['type'],
    preferredLanguage: value['preferredLanguage'],
    picture: value['picture'],
    emails: value['emails'] == null ? undefined : (value['emails'] as Array<any>).map(AttributeToJSON),
    phoneNumbers: value['phoneNumbers'] == null ? undefined : (value['phoneNumbers'] as Array<any>).map(AttributeToJSON),
    ims: value['ims'] == null ? undefined : (value['ims'] as Array<any>).map(AttributeToJSON),
    photos: value['photos'] == null ? undefined : (value['photos'] as Array<any>).map(AttributeToJSON),
    entitlements: value['entitlements'],
    addresses: value['addresses'] == null ? undefined : (value['addresses'] as Array<any>).map(AddressToJSON),
    roles: value['roles'],
    dynamicRoles: value['dynamicRoles'],
    dynamicGroups: value['dynamicGroups'],
    rolesPermissions: value['rolesPermissions'] == null ? undefined : Array.from(value['rolesPermissions'] as Set<any>).map(RoleToJSON),
    groups: value['groups'],
    x509Certificates: value['x509Certificates'] == null ? undefined : (value['x509Certificates'] as Array<any>).map(CertificateToJSON),
    accountNonExpired: value['accountNonExpired'],
    accountNonLocked: value['accountNonLocked'],
    accountLockedAt: value['accountLockedAt'] == null ? undefined : value['accountLockedAt'].toISOString(),
    accountLockedUntil: value['accountLockedUntil'] == null ? undefined : value['accountLockedUntil'].toISOString(),
    credentialsNonExpired: value['credentialsNonExpired'],
    enabled: value['enabled'],
    internal: value['internal'],
    preRegistration: value['preRegistration'],
    registrationCompleted: value['registrationCompleted'],
    newsletter: value['newsletter'],
    registrationUserUri: value['registrationUserUri'],
    registrationAccessToken: value['registrationAccessToken'],
    referenceType: value['referenceType'],
    referenceId: value['referenceId'],
    source: value['source'],
    client: value['client'],
    loginsCount: value['loginsCount'],
    factors: value['factors'] == null ? undefined : (value['factors'] as Array<any>).map(EnrolledFactorToJSON),
    identities: value['identities'] == null ? undefined : (value['identities'] as Array<any>).map(UserIdentityToJSON),
    lastIdentityUsed: value['lastIdentityUsed'],
    additionalInformation: value['additionalInformation'],
    loggedAt: value['loggedAt'] == null ? undefined : value['loggedAt'].toISOString(),
    lastLoginWithCredentials: value['lastLoginWithCredentials'] == null ? undefined : value['lastLoginWithCredentials'].toISOString(),
    lastPasswordReset: value['lastPasswordReset'] == null ? undefined : value['lastPasswordReset'].toISOString(),
    lastUsernameReset: value['lastUsernameReset'] == null ? undefined : value['lastUsernameReset'].toISOString(),
    lastLogoutAt: value['lastLogoutAt'] == null ? undefined : value['lastLogoutAt'].toISOString(),
    mfaEnrollmentSkippedAt: value['mfaEnrollmentSkippedAt'] == null ? undefined : value['mfaEnrollmentSkippedAt'].toISOString(),
    createdAt: value['createdAt'] == null ? undefined : value['createdAt'].toISOString(),
    updatedAt: value['updatedAt'] == null ? undefined : value['updatedAt'].toISOString(),
    forceResetPassword: value['forceResetPassword'],
    serviceAccount: value['serviceAccount'],
    address: value['address'],
    locale: value['locale'],
    zoneInfo: value['zoneInfo'],
    lastIdentityInformation: value['lastIdentityInformation'],
    identitiesAsMap: value['identitiesAsMap'],
    fullId: UserIdToJSON(value['fullId']),
    middleName: value['middleName'],
    inactive: value['inactive'],
    profile: value['profile'],
    website: value['website'],
    birthdate: value['birthdate'],
    phoneNumber: value['phoneNumber'],
    disabled: value['disabled'],
  };
}
