{
	"info": {
		"_postman_id": "b16190ea-dddf-468c-8ed6-18ee8fbd2620",
		"name": "Gravitee.io - AM - Openid DCR - app version",
		"description": "Test openid connect dynamc client registration specifications: https://openid.net/specs/openid-connect-registration-1_0.html",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{management_url}}/management/auth/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create dcr domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"DCR disabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowLocalhostRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowHttpSchemeRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowWildCardRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isOpenDynamicClientRegistrationEnabled).to.eql(false);",
									"    ",
									"    pm.environment.set('domain', jsonData.id);",
									"    pm.environment.set('domainHrid', jsonData.hrid);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"dcr-app-version\", \n\t\"description\": \"test dynamic client registration\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default identity provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"#CoMpL3X-P@SsW0Rd\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities/default-idp-{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities",
								"default-idp-{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create in-memory IDP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('idp.inmemory', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"domainWhitelist\" : [],\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"#CoMpL3X-P@SsW0Rd\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get default certificate ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get default certificate id\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.environment.set('defaultCertificateId', body[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"#CoMpL3X-P@SsW0Rd\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates/{{defaultCertificateId}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates",
								"{{defaultCertificateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jks certificate rs256",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Extension Grant - create jks certificate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('certificateJks', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
                            "raw": "{\n  \"type\": \"javakeystore-am-certificate\",\n  \"configuration\": \"{\\\"jks\\\":\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"server.jks\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"size\\\\\\\":2237,\\\\\\\"content\\\\\\\":\\\\\\\"/u3+7QAAAAIAAAABAAAAAQAJbXl0ZXN0a2V5AAABjNRK8OgAAAUBMIIE/TAOBgorBgEEASoCEQEBBQAEggTpvJkSxQizivQ8lHg0iLs3k1/PcaPrnyMPcmZR3k+E6Xo8BP6qdK8hq2yK1N11A7aMrwAcpxDFJ0VItku+wLYPBMZXAEEB1GFL0UMVtr+sP637ejLPGn8IwAzyAKwvHzOJzJ/I3jrKCdjgF60be3rN287xRVbtKmjFpWVHA707D3MklHEWTNsyKB5wofN8MDifqns1yvjjUn4fhrmETqDaIH7qkNPdjD/lnhppuw7oaRUti0Uma0GRd8WgifYMuXyNnWtLE15ZDIEpzcLWifAI3edmWLpMwdnT7HCTMKAqgT2mZwJk/JnfbICXrWGcO+t5kfnIejR+YUiijFZk/zWpl3q5TGHucTk4o+5pftZPYEzowW70qxCkxQUesh9sImAdXtBbfV4BvM0LP9D7EWZmHfxSCnVe7NS+hgATFyDLum5rFnUcp2S7BYa09U426EPXrQdmaN5RaJ55mhNL9S3DJ+KS/1+qvQRsoFThhsgbgSnFkv6O3kEu5KC6n8VL6u/51VkcRxiPXZHYAnRGUDQws4LCk4ZLg9oBP4tsZ7+6nw1pwTaXglcyT2H5bSb0Gr3HYpk4mwjbyQMINpI+YOLF/YZnuuZbZo3yWSC48b3cHfHQ71JcbiWh/glI8rJzdKc4b9hHQ8eAiuM7EhP/JuQs1+wIuZ19UERq7Bal3XMU/A112nONm3TY7dU/xfowuOry0YceMZLq4icb9Eo7fxzXkIvWmcaRx6S7KUVSs0pRbON8XqNGOd8TxSAiUjDZIuW86a8cf8JnRAEI8AAso4TdFn3hSDHg5icAWmIlvKViERqwG1xLc//JPT+1OOAguLkWi4KDh2ruYtDkkUEsw1mlnTdHMcrBsdTGkJnRf1KqqdeU7rt/jfmj2i6YevaOu6txU94ycJ5e2TJ0P1sFNwFaDOujLkKY1zTv3CIOo9myehBss+Y6Aa/6uUwaUJx1k9SNrcbqsphe4EX4I/oxeheygIS9CQFZ7PpTqKbmEnXcxAjjbAqoIHkUtpd7VN9lxmnxeemfF/1j9no2yN5x6dc4KJmA30SzoKOATLAWnXw4pXEu5UL9u3yOarjzSr/mN+NQumZ4jtQ+PdxNJdrXb7DLcvIibNRtfUlJWtNAEQQKnNnTJBiMF4Aw8ArF+gxFIf3sF0X0CZe7qWSRJgtgNt5QPSzjg32pnO1jDKYvAxekHZOOH7bGD9nWBpf8UuRNtvnsLCBbnTdWWB17RlO1vBDEe5p1KOPndmn3NtfGA02AHhLlTexx8FzPrt3XRXVHn+e9LS906qVu1i5lo3IEpt+rr03a8Vpeoyy8mLXukVJUxE1gt6c8Wb3ASr25NCTl06wqU1oIobjSk5wzwNpAF86IdSVCwEn6lAhkYsiDAg7gT97UC5nunfMiBZGjCbMlKnYawPRF7HGuZxN8wzPItKG+o76IFPgI6lWSfpxPa8RSBJUWV/BctY2IbovhvLg3LR/90OYLlAhgzLCZXZ20TTIPOQv5JpnsjN1n3ASV/NcNiJx3TrBPTwz5cDWCsz6mtipaDJLPFGQRWVcALkAeKqe8KXqTNafCB9Ry5oVQ2jQv2YvWLgnQCbkOlI7qe68Ur+ntSDtZBdcgcZ71X+CO3WzP8p+itVoZkJnAZGExIHSuYKNLyW43+ixiPF/dBRi8ZKt+n6FCUTHPbp7cAAAAAQAFWC41MDkAAAPCMIIDvjCCAqagAwIBAgIJANyU9PL6kmbCMA0GCSqGSIb3DQEBCwUAMIGDMRAwDgYDVQQGEwdDb3VudHJ5MQ0wCwYDVQQIEwRDaXR5MQ4wDAYDVQQHEwVTdGF0ZTETMBEGA1UEChMKTXkgQ29tcGFueTEcMBoGA1UECxMTTXkgQ29tcGFueSBEZXYgVGVhbTEdMBsGA1UEAxMUc2VydmVyLm15Y29tcGFueS5jb20wIBcNMjQwMTA0MTE0NTMwWhgPMjEyMzEyMTExMTQ1MzBaMIGDMRAwDgYDVQQGEwdDb3VudHJ5MQ0wCwYDVQQIEwRDaXR5MQ4wDAYDVQQHEwVTdGF0ZTETMBEGA1UEChMKTXkgQ29tcGFueTEcMBoGA1UECxMTTXkgQ29tcGFueSBEZXYgVGVhbTEdMBsGA1UEAxMUc2VydmVyLm15Y29tcGFueS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQChjv1u2Z56gjSMRDi7jiLE10ro8CCZbq5//J+1iO8urUH7vnRmmXwOqgoILRXsqq+sufS6qKEIa8HbQEWNb56qegrL/kh1gPxtTnNIh20ucWNawH46N5X2TK0hTNj9BaIYB8fbEgRAqALNI/fOS3KCOj7xIKWrbEfZVGuYtq+Wn3bdBijtsld2PYzi58i8qi+LpUPWyxZA4EQYYrLZLOVST+ttwKOmY4qmOEZ/NI6X5hIr98TkfbTlNHqT4scsRJAqq0JpBa7289piu+GfZ0PFFGQXKxu+ODIXRxR2kiLRlPPhpNX1FkAARokl1sM1CQcYbj66ilVWta4Uk3tFgxX9AgMBAAGjMTAvMB0GA1UdDgQWBBQH1PLdtVzXJkqJ46Ada7H4Ng3+bDAOBgNVHQ8BAf8EBAMCBaAwDQYJKoZIhvcNAQELBQADggEBAFr0LR3zoY1t+fT5H4SdblXiBQ+Tm7LPW4WeEU6WPenVCmgT0dXlT6ZQca2zquhW4ZMt3h2Kv/IrJ+ny0eUT7jEcIJ0NjzeuZOaOzQ7/HhJQCwEMBgWQ546jp0bQ212zez5VCe+UKfyrlpJmZwurGwBVbUfVkCwXVXRTnLwG+UFpLkwXJo3OvJ0bnHWvbj1Uy10WQNeP8L4xmkOFR9kVmPh0nX4STi8Ey5D6idXX+qhdx72reEDP5T5Qq5zjI+eE3xyHh8kE6AtiqSAKyJ8VAK6a+XiQMKvwRCxWEUnSPX8wQ7r2yKa77eXuiXb58+OHLgHm0GSubpvaa3ZKIOlxEmleegpqHo97N57SRm23gHT90cNsRg==\\\\\\\"}\\\",\\\"storepass\\\":\\\"letmein\\\",\\\"alias\\\":\\\"mytestkey\\\",\\\"keypass\\\":\\\"changeme\\\"}\",\n  \"name\": \"Test\"\n}"
                        },
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jks certificate rs512",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Extension Grant - create jks certificate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('certificateJksRs512', jsonData.id);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
                            "raw": "{\n  \"type\": \"javakeystore-am-certificate\",\n  \"configuration\": \"{\\\"jks\\\":\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"server.jks\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"size\\\\\\\":2237,\\\\\\\"content\\\\\\\":\\\\\\\"/u3+7QAAAAIAAAABAAAAAQAJbXk0MDk2a2V5AAABjNRK87cAAAmHMIIJgzAOBgorBgEEASoCEQEBBQAEgglvbMrco8euApWxDGIJxhdcAhwPZbbBqBrXoqhJe1oN9JEOr9HQawtxJrYZZr+9SFNHtzrjdGniMobat6tL6oTf1XRmUX1fHhs/7ogYYbRr0CX1M0us1ZHicSKrMTztDF8KqQy8JzCweEllJPVWp1vy7f8msqJdiOJVU035Hx0b7TUXbpknQAX5LD+LazEgkwZ4NnRVYytarAn9Bnf1KZVq5PJhf1qnwtpnQT8AI3pvHv0SpuDqklSKtf1fFT/LH7ftz52OPyegWmwWKLBeEWczx9CSg8TyurTMAu1dG1O8Ikf6foooUvUcn3NEt9LSAJYp/Upixf5ucIADirBf/C4Qln7+o1Yw4/qRuACMGGyrlYK0U1v87VXfBm3SUJr0Xbu/6PVJVY2oegOalkJH6H70WMLlRhTtEaanDEwOca8J8zp6pzUWminZlWR9uj8xOB8sxnFgc4Cro9VUFyZ9cqd2uwIfbQwBDOu/0DzHYMu5KnsNYQ2UKWNAFV00vUKRtY6cCSB9CsIGOCQNp7dfkIjs3qqtclwW1I3KuZ49rkRkXfWkC3eDs/nxmbHcbwSAU0ljPrOtN0uHYQxikX8W2PP5M576HOVlplh83NsVWZfvrDvluXAvZOI0K0DP61CkO3To7rvFiIRGH97zJUejwj2JQ792oIEIFLZ00/d2bPfHrB88jvrI+yIByEiZN6/S80bBibv3JypH7YJxZfLFA/v51e7yZEnaj5emjPDsDm79NnNA5toR/vtiZF/KP5hcuV4qHcP2KvVp+AmMLsczHue+2OYVd5t4uhHDEnXblej9hpJqn8+kh7YrWYUbOEzdBtb9Mpy6zZbXF6Ng4kNOHdTIxB7NOfbLz9Nn+oJKcebr4k2dE76uw087qQtxWAajYo3qpmzt2rTfN/USEIBhesnMV99/LBMzKKdBPYgjWQb/ZFxaDOk7P+BuQGeDDgbhxoJwzQv4zzFAUeB9JLbAQyL5R3o+4XAAX+lGmByvvwjvj4yWT/5kET1ialXGOcDqOGZWNkmA5jGQ3mPP0ujZ2sAro8FeaZoiJLfQ50zeoqR7zpPA3FyIvoC75z5d9/P2Qlsk+rI4Z/sconc2wecUK+dugi25YSsNiCLsw14PcMjJp3FQOiejRqsTLrs/gK02IEDOiUEj9cVfiLeiFs9n0gK8Edtcv9p3ighFLOdSyzaeSyhlmxffYTdM8hcvIgA2RV1Pcji+G8mM13tSsAh0hnQrRuIKObdEQfM3EWlUDcD6ymlJ22IT9NUrkjm1sNSpNM6NZmjSy8uSGH+gqRpsY1yr5iQlnVC2u6qIpaHT+mgpsqxphEhm/YEF9IKA3m5CZrcwbux4TKpZ3cBCMvoAyUf4NyfW4ct10fv9deRva1fJ9o4bKIsAFsAsHRSPr5YdwwlIoHK56vx1439BhGQh+WqsExHU5WeVO6ScYM0aMewNnWB0LVmJhActGppZUI4F785GbkNRLrb7lcaGGa6V0KjpiDku4/dZtkeUdaRSJEJGWUsP5JWhXH8hYuBCgypQix3EwpmYvb6Emx1KE7T9lR7zyFhojqjCbvPuVO65/6t8eeoBxMmJRP8eWT0PnAiQI2Llgqs80haFwG0aPkQg1bBLn6QM2fURX229gERFhp0UJkVY4w/dWWsqJnjlxbV6IYtc6Url+X1JJmDfGqZQBmyfVsWR/jN48GI6GndGa5OwFrezANuEJA7bjDr4M5/nY4Ddc0bf+SkAqEhU6OLHOy34I8OHPXESbulmBOR3ETOaz37nX2EcdyLDFbq7aP0ZKAmZULlBWJi74S8f5Z8yeR1qXF79wbEUPJpS5OJadvblpZ2pT2qxW4+6l8huHNHK5VHc0kjzst0g6qXmjSIe6bduQeRBK1/5aKxBLMYPkLcWQMQHZobuDfEufN7EnRJMfRDBc9E+YYHi/R8zFyxvHSLMBKG/xFjjtld7cAVuy1Kb85/KPXi4UUvEselQfW6XK3e+v7ZMyyu6byXwnSGfmU6FTyRb/CykAEe9xCfCp9+vuNbq8j0/oigGm8B3YFfLgeIvFHNZAgbJODPTbnMrO/g4JlO5e065wfHw0OC4io/aNH1/MjXIpaLlwqS44B3QKQ4Jbdk3EEdFlqKjg5NUa4SeQ/6gTpG8dkUxl34zikAMQ0/ZYP+JvJHYC83VGLrXwupkuhe1kyFIMvxzYbCGYGFY6EgtGWjkuwwiEteFVdnKDhJKaKGjIJaJlpkRasISUlhbZR0ktbsZukNhy5F3FwGu3SE5JUAWavWdLIbGeju+Rzm4jLBGbU6fSeFttXCh8/2H6frcZ/eOoVdAbCcuOQEYgUmMy+G8nDxWPj5JxXpuEdPdLe+ykZu9CqTtQ7fFMpkLZmlueM/2SJCUEQfc1nQeZUMlA4hcpU3G1h7BVOZh4fUIqZsk7FLSWcbeaRCMajp7IgwgLgBLw6/3c1mwtAgZJNUnL2YAD3R5pEuFls9yFZuqm+n6ctX7VCWO78jXlXN6en3hsx+NWX6HDpK3hyJb6w73okcYyRH5Pl0EcOFNWKuzToCeTH8aHx2lyliIY/SKtnPro7evcyJ0UXqcJ1EcA+BziN//gFOeEBEUtMgLZhujYhFqEIl/F6J/Z92dBU9fg5SH29d7zrUQH97ZvX/unakUHyGmissTTqUW0klcZqTXp6foj+tgiuWAUgU5ET4wL4ZnS0nIcSdA2lja/PEbJdgm0OaSyuZWmLngeVwc/nFFPCbrNr+Qy0/kgMfGK/LTcAfwtgeh30zMhIaOISTw5ZHxLyQL9fa72x1b1O2Nd4quLg4uet7rgSHtNsqKt2WCGTl3qBS9CqA4/uy97xeyzWc0Anoy7/HQMbsfCCu+Q/YMChqww0pe8NRgiyqhTSjFNrP7z8mJcXazRfEYKd6j2jKGA/q/cuIorka3QfNr63k0HbfTnQo69pmi7XIl4OG9JDOSqcqIFSQUOoPVnM1Z8p1Bm6hLJ+nukd0NiKIvfFUkUsniAnw3CH8ijMlGisawcg+Ery3Zx2YVrlAqmPgdOK2DzNMRZ9vKGTTzKfgJXn/BtZRNiIYKj8O6jsLq0NgtbMVvLQn5W2VLyGmuw1qFVWQ1zf4sysg2eKANcpjYvvU8pc7Z2CETW4glHfHaArtZQxfZzy1rQVJ2OXZmAaQxXg0x5rkHYhyq/V2YDST86d96nHAf3+mzDcZMK9qBe/vTd4YNMkj1J/FCwJHtoxQ9AAAAAQAFWC41MDkAAAXBMIIFvTCCA6WgAwIBAgIIDiSkgzGr73kwDQYJKoZIhvcNAQENBQAwgYMxEDAOBgNVBAYTB0NvdW50cnkxDTALBgNVBAgTBENpdHkxDjAMBgNVBAcTBVN0YXRlMRMwEQYDVQQKEwpNeSBDb21wYW55MRwwGgYDVQQLExNNeSBDb21wYW55IERldiBUZWFtMR0wGwYDVQQDExRzZXJ2ZXIubXljb21wYW55LmNvbTAgFw0yNDAxMDQxMTQ1MzFaGA8yMTIzMTIxMTExNDUzMVowgYMxEDAOBgNVBAYTB0NvdW50cnkxDTALBgNVBAgTBENpdHkxDjAMBgNVBAcTBVN0YXRlMRMwEQYDVQQKEwpNeSBDb21wYW55MRwwGgYDVQQLExNNeSBDb21wYW55IERldiBUZWFtMR0wGwYDVQQDExRzZXJ2ZXIubXljb21wYW55LmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALKjtzZcVLqDYsB9gUdeppREhdYnswgUazYaTIBFJndKlSS+Uum3TTkAaDoQtqGLGcvMCgybuKoHeJRU/VJnICH0VgNPDUTmXqcSK/ojM22/UvFCPUlTuXab7FVAUzDrDsm4oe9XbDXBipcX9NA/55Xb6VHnuDOdmf5MN6MccGVZv+LDyHAsvYm/rBJjgIot9dAwqCD1YBg/g0PENP4Lc6zn+g0S1NaX8N0AZIaU5HflL2fhK9JqY6ovCZz5N+q5X3K2tBCORoOJqDzTy/3Nl7eMRnUWJsLdycomkvzFOum2TrDy8uHEJKeomaZ088oJPoALYLFhfLkYb0ZK71Ly1T3mzFU779b4kRDKlhOFkbTqx0a+BlF9jaNVxRQN5vs8jVDOTI7qwsbXzS7lF22rhpbxAeCTK+S2BNa1CACtZdHlTtKYXilNRLVNQL+e2lKVRLVbnha5WMutZ6XCaqjreMtfudEjgyII5sgDleMaz/GGr+TqP57XGpqXwOAatoNSHmSfdG2GY+288GIw243BSg0Ah8fOmWQqgsuehX0A1/qk98Gy+tbXiGGGAYFP9rMr8BakFFYspC8yE/52lXH7j+YynRfr9lzU20E7XFNIVrVmJBGZT9VI7DXuRDBYJqiSU+f2zKOIo15pr0lrcriSfyD9oRd8i1+IMn8IeX1FcKq1AgMBAAGjMTAvMB0GA1UdDgQWBBQecqLJX7s5s43JEVFqyxkT1dG4MzAOBgNVHQ8BAf8EBAMCBaAwDQYJKoZIhvcNAQENBQADggIBAJNPSs0gxXlPRvLJVMuhBtIXmNr08MmJmLF3eaDQWZAwk9Q2Hd9B7u99DxfAahwaQl7q3FLa/aBqf4ksSLsJlGRdP8CVmIvkJ0+cLP570beuazytUc4qNhIzhUBuH8B1J1UeMptFlMlMuqHfAaRE72biHMKkqMsRsXmPn67i8HSei+q+Il9hrlfen7ZJiGTPbr0ANpXtnsQkCoUfguZqNBgLp3yDgszs2R8K2ldmhoxWd1v/5z04M4pjMLOH+pPCQNt4wGR+ygBPMUa6FyWqTZNmZMXOGY0iOqUSqGCYfBDOenmbmaLZCei/5rVzOuvIM4xh01WaNg8vhy4gDk7N1gd5Hx1UXz0kTAPH9m95XuVD0Ar/l/cxj22OcNLsusex6+oH//SzJAeZUgA36PP8wiIxMMh8I1Uj/4uFol/1PaGRjltVX2kjaCYzziNyVcx0N8h5FWXMuQ78N9I54apmCCVj1TtL7nErQugy8GeAynNNzX2u8+HO4b3gjdKVqt2GIBLD7wEj3q7t8TgXqjDzgZQdGnObhWZLCbdAXN0gfG4F8ygY90kPIfmGYZLVGWpp5PhjGizHQgc7AVknLGR+nGsBe6/+O0BpYbph1hHo9CSWvkUP6+LK1g0gv5WXBk7p0SYoY2P4prdbHJ2j3fOKfUzzIdxQYsGlwz8Z2dSR8PvQjFa4rqIpWKtuvdDw0ol085EnW8I=\\\\\\\"}\\\",\\\"storepass\\\":\\\"letmein\\\",\\\"alias\\\":\\\"my4096key\\\",\\\"keypass\\\":\\\"changeme\\\"}\",\n  \"name\": \"my4096key\"\n}"
                        },
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body).to.have.property(\"authorization_endpoint\");",
									"    pm.expect(body).to.have.property(\"token_endpoint\");",
									"    pm.expect(body).to.have.property(\"revocation_endpoint\");",
									"    pm.expect(body).to.have.property(\"userinfo_endpoint\");",
									"    pm.expect(body).to.have.property(\"registration_endpoint\");",
									"    pm.expect(body).to.have.property(\"registration_renew_secret_endpoint\");",
									"",
									"    pm.environment.set('authorizationEndpoint', body.authorization_endpoint);",
									"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
									"    pm.environment.set('userinfoEndpoint', body.userinfo_endpoint);",
									"    pm.environment.set('revocationEndpoint', body.revocation_endpoint);",
									"    pm.environment.set('registrationEndpoint', body.registration_endpoint);",
									"    pm.environment.set('registrationRenewSecretEndpoint', body.registration_renew_secret_endpoint);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/{{domainHrid}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domainHrid}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - Non DCR domain",
			"item": [
				{
					"name": "Non DCR domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Non DCR domain\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body.error).to.eql('registration_forbidden');",
									"    pm.expect(body.error_description).to.eql('Not allowed to access to this resource.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - open DCR",
			"item": [
				{
					"name": "Configure open DCR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR enabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isOpenDynamicClientRegistrationEnabled).to.eql(true);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oidc\": {\n    \"clientRegistrationSettings\": {\n      \"allowLocalhostRedirectUri\": false,\n      \"allowHttpSchemeRedirectUri\": false,\n      \"allowWildCardRedirectUri\": false,\n      \"isDynamicClientRegistrationEnabled\": true,\n      \"isOpenDynamicClientRegistrationEnabled\": true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register open client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has default attributes\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('open_dcr_client');",
									"    pm.expect(body.application_type).to.eql('web');",
									"    pm.expect(body.grant_types[0]).to.eql('authorization_code');",
									"    pm.expect(body.response_types[0]).to.eql('code');",
									"    ",
									"    pm.environment.set('newClientForDCRTests', body.id);",
									"    pm.environment.set('newClientIdForDCRTests', body.client_id);",
									"    pm.environment.set('newClientSecretForDCRTests', body.client_secret);",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"client_name\": \"open_dcr_client\",\t\n   \"redirect_uris\":\n     [\"https://client.example.org/callback\",\n      \"https://client.example.org/callback2\"],\n   \"logo_uri\": \"https://client.example.org/logo.png\",\n   \"subject_type\": \"public\",\n   \"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n   \"request_uris\":\n     [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get open client - with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"redirect_uris\");",
									"    pm.expect(body).to.have.property(\"grant_types\");",
									"    pm.expect(body.response_types).to.eql([ 'code' ]);//default value",
									"    pm.expect(body.grant_types).to.eql([ 'authorization_code' ]);//default value",
									"    ",
									"    //The Authorization Server need not include the registration_access_token or registration_client_uri value in this response unless they have been updated.",
									"    pm.expect(body).to.not.have.property('registration_access_token');",
									"    pm.expect(body).to.not.have.property('registration_client_uri');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch open client - with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('Client patched via DCR');",
									"    pm.expect(body).to.have.property(\"response_types\");",
									"    pm.expect(body.response_types).to.eql(['token', 'code', 'code id_token']);",
									"    pm.expect(body).to.have.property(\"grant_types\");",
									"    pm.expect(body.grant_types).to.eql(['implicit', 'authorization_code']);",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"client_name\": \"Client patched via DCR\",\n   \"response_types\" : [\"token\", \"code\", \"code id_token\"]\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update open client - with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('Client name updated via DCR');",
									"    pm.expect(body).to.have.property(\"response_types\");",
									"    pm.expect(body.response_types).to.eql(['code']);",
									"    pm.expect(body).to.have.property(\"grant_types\");",
									"    pm.expect(body.grant_types).to.eql(['authorization_code']);",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"redirect_uris\": [\n        \"https://client.example.org/callback\",\n        \"https://client.example.org/callback2\"\n    ],\n    \"response_types\": [\n        \"code\"\n    ],\n    \"grant_types\": [\n        \"authorization_code\"\n    ],\n    \"application_type\": \"web\",\n    \"contacts\": [\n        \"marie@example.org\",\n        \"jeanne@example.org\"\n    ],\n\t\"client_name\": \"Client name updated via DCR\",\n    \"logo_uri\": \"https://client.example.org/logo.png\",\n    \"subject_type\": \"public\",\n    \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n    \"userinfo_encrypted_response_enc\": \"A128CBC-HS256\",\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"require_auth_time\": false,\n    \"request_uris\": [\n        \"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"\n    ],\n    \"scope\": \"openid\"\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Renew open client secret - with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_id).to.eql(pm.environment.get('newClientIdForDCRTests'));",
									"    pm.expect(body.client_secret).to.not.eql(pm.environment.get('newClientSecretForDCRTests'));",
									"",
									"    let renewSecretEndpoint = pm.environment.get('registrationClientUri')+'/renew_secret';",
									"    let discoveryRenewSecret = pm.environment.get('registrationRenewSecretEndpoint').replace(':client_id',pm.environment.get('newClientIdForDCRTests'));",
									"    pm.expect(renewSecretEndpoint).to.be.eql(discoveryRenewSecret);",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}/renew_secret",
							"host": [
								"{{registrationClientUri}}"
							],
							"path": [
								"renew_secret"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete open client - with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Enable DCR on domain",
			"item": [
				{
					"name": "Enable DCR - non open mode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR enabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(true);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oidc\": {\n    \"clientRegistrationSettings\": {\n      \"allowLocalhostRedirectUri\": false,\n      \"allowHttpSchemeRedirectUri\": false,\n      \"allowWildCardRedirectUri\": false,\n      \"isDynamicClientRegistrationEnabled\": true,\n      \"isOpenDynamicClientRegistrationEnabled\": false\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - non DCR Client",
			"item": [
				{
					"name": "Create client without DCR enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('clientDCR', body.id);",
									"pm.environment.set('clientId', body.settings.oauth.clientId);",
									"pm.environment.set('clientSecret', body.settings.oauth.clientSecret);",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"dcr-client-public-name\",\n  \"type\": \"SERVICE\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('access_token');",
									"    ",
									"    pm.environment.set('access_token', body.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clientSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clientId}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Non DCR client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Non DCR client\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body.error).to.eql('insufficient_scope');",
									"    pm.expect(body.error_description).to.eql('Invalid access token scopes. The access token should have at least \\'dcr_admin\\' scope');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Enable DCR on client",
			"item": [
				{
					"name": "Configure client with DCR enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR enabled for client\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.settings.oauth.scopeSettings[0].scope).to.eql('dcr_admin');",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"settings\": {\n\t\t\"oauth\": {\n\t\t\t\"scopeSettings\": [ {\"scope\" : \"dcr_admin\"}]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{clientDCR}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{clientDCR}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('access_token');",
									"    pm.expect(body.scope).to.eql('dcr_admin');",
									"    ",
									"    pm.environment.set('access_token', body.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clientSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clientId}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "dcr_admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - Invalid requests",
			"item": [
				{
					"name": "Invalid creation requests",
					"item": [
						{
							"name": "Invalid access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid bearer\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_token');",
											"    pm.expect(body.error_description).to.eql('The access token is invalid');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris are missing\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid redirect_uris.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - null - implicit grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris are missing\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid redirect_uris.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": null,\n  \"grant_types\": [\"implicit\"],\n  \"response_types\": [\"token\"],\n  \"client_name\": \"My implicit Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - empty - implicit grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris are missing\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid redirect_uris.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [],\n  \"grant_types\": [\"implicit\"],\n  \"response_types\": [\"token\"],\n  \"client_name\": \"My implicit Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - no scheme uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris localhost forbidden\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('redirect_uri : no_scheme is malformed');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\"no_scheme\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - malformed uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris localhost forbidden\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('redirect_uri : malformed:uri:exception is malformed');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\"malformed:uri:exception\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - localhost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris localhost forbidden\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('localhost is forbidden');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://localhost/callback\",\n    \"https://localhost/callback2\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - wildcard",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris wildcard forbidden\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('Wildcard are forbidden');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/*/callback\",\n    \"https://client.example.org/*/callback2\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - http scheme",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris http scheme forbidden\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('Unsecured http scheme is forbidden');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"http://client.example.org/callback\",\n    \"http://client.example.org/callback2\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - fragment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris fragment forbidden\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('redirect_uri with fragment is forbidden');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2#fragment\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid response type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid response type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Invalid response type.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"response_types\": [\n\t\"unknown\"\n   ],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid grant type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid grant type.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"grant_types\": [\n\t\"unknown\"\n   ],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid grant type - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid grant type.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"grant_types\": [],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid grant type - refresh_token alone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.include('refresh_token grant type must be associated with one of');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [],\n  \"response_types\": [],\n  \"grant_types\": [\"refresh_token\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid subject type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported subject type');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"application_type\": \"web\",\n   \"redirect_uris\":\n     [\"https://client.example.org/callback\",\n      \"https://client.example.org/callback2\"],\n   \"logo_uri\": \"https://client.example.org/logo.png\",\n   \"subject_type\": \"pairwise\",\n   \"token_endpoint_auth_method\": \"client_secret_basic\",\n   \"userinfo_encrypted_response_alg\": \"RSA1_5\",\n   \"userinfo_encrypted_response_enc\": \"A128CBC-HS256\",\n   \"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n   \"request_uris\":\n     [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid userinfo signing algorithm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported userinfo signing algorithm');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"web\",\n\t\"redirect_uris\": [\n\t\t\"https://client.example.org/callback\",\n\t\t\"https://client.example.org/callback2\"\n\t],\n\t\"logo_uri\": \"https://client.example.org/logo.png\",\n\t\"token_endpoint_auth_method\": \"client_secret_basic\",\n\t\"userinfo_signed_response_alg\":\"unknown\",\n\t\"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n\t\"request_uris\": [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid userinfo response alg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported userinfo_encrypted_response_alg value');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"web\",\n\t\"redirect_uris\": [\n\t\t\"https://client.example.org/callback\",\n\t\t\"https://client.example.org/callback2\"\n\t],\n\t\"logo_uri\": \"https://client.example.org/logo.png\",\n\t\"token_endpoint_auth_method\": \"client_secret_basic\",\n\t\"userinfo_encrypted_response_alg\":\"unknown\",\n\t\"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n\t\"request_uris\": [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid userinfo response enc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported userinfo_encrypted_response_enc value');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"web\",\n\t\"redirect_uris\": [\n\t\t\"https://client.example.org/callback\",\n\t\t\"https://client.example.org/callback2\"\n\t],\n\t\"logo_uri\": \"https://client.example.org/logo.png\",\n\t\"token_endpoint_auth_method\": \"client_secret_basic\",\n\t\"userinfo_encrypted_response_alg\":\"RSA-OAEP-256\",\n\t\"userinfo_encrypted_response_enc\":\"unknown\",\n\t\"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n\t\"request_uris\": [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid id_token signing algorithm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported id_token signing algorithm');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"web\",\n\t\"redirect_uris\": [\n\t\t\"https://client.example.org/callback\",\n\t\t\"https://client.example.org/callback2\"\n\t],\n\t\"logo_uri\": \"https://client.example.org/logo.png\",\n\t\"token_endpoint_auth_method\": \"client_secret_basic\",\n\t\"id_token_signed_response_alg\":\"unknown\",\n\t\"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n\t\"request_uris\": [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid id_token response alg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported id_token_encrypted_response_alg value');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"web\",\n\t\"redirect_uris\": [\n\t\t\"https://client.example.org/callback\",\n\t\t\"https://client.example.org/callback2\"\n\t],\n\t\"logo_uri\": \"https://client.example.org/logo.png\",\n\t\"token_endpoint_auth_method\": \"client_secret_basic\",\n\t\"id_token_encrypted_response_alg\":\"unknown\",\n\t\"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n\t\"request_uris\": [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing id_token response alg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg MUST also be provided');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"web\",\n\t\"redirect_uris\": [\n\t\t\"https://client.example.org/callback\",\n\t\t\"https://client.example.org/callback2\"\n\t],\n\t\"logo_uri\": \"https://client.example.org/logo.png\",\n\t\"token_endpoint_auth_method\": \"client_secret_basic\",\n\t\"id_token_encrypted_response_enc\":\"unknown\",\n\t\"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n\t\"request_uris\": [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid id_token response enc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported id_token_encrypted_response_enc value');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"web\",\n\t\"redirect_uris\": [\n\t\t\"https://client.example.org/callback\",\n\t\t\"https://client.example.org/callback2\"\n\t],\n\t\"logo_uri\": \"https://client.example.org/logo.png\",\n\t\"token_endpoint_auth_method\": \"client_secret_basic\",\n\t\"id_token_encrypted_response_alg\":\"RSA-OAEP-256\",\n\t\"id_token_encrypted_response_enc\":\"unknown\",\n\t\"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n\t\"request_uris\": [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid request uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid request uri\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('request_uris: malformed_url is not valid.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"request_uris\": [\n\t\"malformed_url\"\n   ],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid scope\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('scope unkown-domain-scope is not valid.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"scope\": \"unkown-domain-scope\",\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid jwks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid scope\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.include('Unable to parse jwks content');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"client_name\": \"My Example Client\",\n   \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n\t\t\t\t\"kty\":\"EC\",\n\t\t\t\t\"use\":\"enc\",\n\t\t\t\t\"crv\":\"P-521\",\n                \"kid\": \"elliptic-curve-encryption\",\n\t\t\t\t\"x\":\"l3X_aK4GSyoZ9TV8XXM9D3BaowFI4AQtrQyU39DWzxU\",\n\t\t\t\t\"y\":\"2J7zifgjRhLV7B-MPYVqIB-X1bLQAyVXvZmc9LTpcXM\"\n\t\t\t}\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid jwks_uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid scope\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.include('Unable to parse jwks from');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"client_name\": \"My Example Client\",\n   \"jwks_uri\": \"https://unbound/uri\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "duplicate jwk and jwks_uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid scope\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.be.eql('The jwks_uri and jwks parameters MUST NOT be used together.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"client_name\": \"My Example Client\",\n   \"jwks_uri\": \"https://unbound/uri\",\n   \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n                \"kty\": \"EC\",\n                \"use\": \"sig\",\n                \"crv\": \"P-256\",\n                \"kid\": \"elliptic-curve-signature\",\n                \"x\": \"R4JmPwezbzLuyGkonWIkezzplUfed5b6F5PL4j0zdf8\",\n                \"y\": \"QQRGKwRV9jHSlHjUhOQ0FqdQEddFBPCHZXpoFjvGmcY\"\n\t\t\t}\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Invalid update requests",
					"item": [
						{
							"name": "Register client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('response_types');",
											"    pm.expect(body).to.have.property('grant_types');",
											"    pm.expect(body).to.have.property('client_name');",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');",
											"    pm.expect(body.response_types).to.eql(['code']);",
											"    pm.expect(body.grant_types).to.eql(['authorization_code']);",
											"    pm.expect(body.client_name).to.eql('Unknown Client');",
											"    ",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"application_type\": \"web\",\n   \"redirect_uris\":\n     [\"https://client.example.org/callback\",\n      \"https://client.example.org/callback2\"],\n   \"logo_uri\": \"https://client.example.org/logo.png\",\n   \"token_endpoint_auth_method\": \"client_secret_basic\",\n   \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"userinfo_encrypted_response_enc\": \"A128CBC-HS256\",\n   \"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n   \"request_uris\":\n     [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid bearer\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_token');",
											"    pm.expect(body.error_description).to.eql('The access token is invalid');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer wrongToken"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris are missing\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid redirect_uris.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"client_name\": \"Should have not been updated\"\n}\n"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - can not be empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris are missing\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid redirect_uris.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"client_name\": \"Client with implicit flow should not allow empty redirect_uris\",\n   \"grant_types\": [\"implicit\"],\n   \"response_types\": [\"token\"],\n   \"redirect_uris\": []\n}\n"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - localhost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris localhost forbidden\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('localhost is forbidden');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \"redirect_uris\": [\n    \"https://localhost/callback\",\n    \"https://localhost/callback2\"\n   ],\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid response type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid response type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Invalid response type.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"response_types\": [\n\t\"unknown\"\n   ],\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid grant type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid grant type.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"grant_types\": [\n\t\"unknown\"\n   ],\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid grant type - refresh_token alone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.include('refresh_token grant type must be associated with one of');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [],\n  \"response_types\": [],\n  \"grant_types\": [\"refresh_token\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid subject  type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported subject type');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n   \"subject_type\": \"pairwise\",\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid userinfo signing algorithm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid response type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported userinfo signing algorithm');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n   \"userinfo_signed_response_alg\":\"unknown\",\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing userinfo response alg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('When userinfo_encrypted_response_enc is included, userinfo_encrypted_response_alg MUST also be provided');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n   \"userinfo_encrypted_response_enc\":\"unknown\",\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid userinfo response enc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported userinfo_encrypted_response_enc value');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"redirect_uris\": [\n    \t\"https://client.example.org/callback\",\n    \t\"https://client.example.org/callback2\"],\n\t\"userinfo_encrypted_response_alg\":\"RSA-OAEP-256\",\n\t\"userinfo_encrypted_response_enc\":\"unknown\",\n\t\"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid id_token signing algorithm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid response type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported id_token signing algorithm');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n   \"id_token_signed_response_alg\":\"unknown\",\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing id_token response alg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg MUST also be provided');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n   \"id_token_encrypted_response_enc\":\"unknown\",\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid id_token response alg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported id_token_encrypted_response_alg value');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n   \"id_token_encrypted_response_alg\":\"unknown\",\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid id_token response enc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported id_token_encrypted_response_enc value');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"redirect_uris\": [\n    \t\"https://client.example.org/callback\",\n    \t\"https://client.example.org/callback2\"],\n\t\"id_token_encrypted_response_alg\":\"RSA-OAEP-256\",\n\t\"id_token_encrypted_response_enc\":\"unknown\",\n\t\"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid scope\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('scope unkown-domain-scope is not valid.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"scope\": \"unkown-domain-scope\",\n  \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Case - Nominal",
			"item": [
				{
					"name": "web application",
					"item": [
						{
							"name": "Register client - web application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('application_type');",
											"    pm.expect(body).to.have.property('response_types');",
											"    pm.expect(body).to.have.property('grant_types');",
											"    pm.expect(body).to.have.property('client_name');",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');",
											"    pm.expect(body.application_type).to.eql('web');",
											"    pm.expect(body.response_types).to.eql(['code']);",
											"    pm.expect(body.grant_types).to.eql(['authorization_code']);",
											"    pm.expect(body.client_name).to.eql('Unknown Client');",
											"    ",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('newClientIdForDCRTests', body.client_id);",
											"    pm.environment.set('newClientSecretForDCRTests', body.client_secret);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"redirect_uris\":\n     [\"https://client.example.org/callback\",\n      \"https://client.example.org/callback2\"],\n   \"logo_uri\": \"https://client.example.org/logo.png\",\n   \"subject_type\": \"public\",\n   \"token_endpoint_auth_method\": \"client_secret_basic\",\n   \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"userinfo_encrypted_response_enc\": \"A128CBC-HS256\",\n   \"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n   \"request_uris\":\n     [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"redirect_uris\");",
											"    pm.expect(body).to.have.property(\"grant_types\");",
											"    pm.expect(body.response_types).to.eql([ 'code' ]);",
											"    pm.expect(body.grant_types).to.eql([ 'authorization_code' ]);",
											"    pm.expect(body.client_name).to.eql('Unknown Client');",
											"    ",
											"    //The Authorization Server need not include the registration_access_token or registration_client_uri value in this response unless they have been updated.",
											"    pm.expect(body).to.not.have.property('registration_access_token');",
											"    pm.expect(body).to.not.have.property('registration_client_uri');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.client_name).to.eql('Client patched via DCR');",
											"    pm.expect(body).to.have.property(\"response_types\");",
											"    pm.expect(body.response_types).to.eql(['token', 'code', 'code id_token']);",
											"    pm.expect(body.grant_types).to.eql([ 'implicit','authorization_code' ]);",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"client_name\": \"Client patched via DCR\",\n   \"response_types\" : [\"token\", \"code\", \"code id_token\"]\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.client_name).to.eql('Client name updated via DCR');",
											"    pm.expect(body).to.have.property(\"response_types\");",
											"    pm.expect(body.response_types).to.eql(['code']);",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"redirect_uris\": [\n        \"https://client.example.org/callback\",\n        \"https://client.example.org/callback2\"\n    ],\n    \"response_types\": [\n        \"code\"\n    ],\n    \"grant_types\": [\n        \"authorization_code\"\n    ],\n    \"application_type\": \"web\",\n    \"contacts\": [\n        \"marie@example.org\",\n        \"jeanne@example.org\"\n    ],\n\t\"client_name\": \"Client name updated via DCR\",\n    \"logo_uri\": \"https://client.example.org/logo.png\",\n    \"subject_type\": \"public\",\n    \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n    \"userinfo_encrypted_response_enc\": \"A128CBC-HS256\",\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"require_auth_time\": false,\n    \"request_uris\": [\n        \"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"\n    ],\n    \"scope\": \"openid\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Renew client secret - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.client_id).to.eql(pm.environment.get('newClientIdForDCRTests'));",
											"    pm.expect(body.client_secret).to.not.eql(pm.environment.get('newClientSecretForDCRTests'));",
											"",
											"    let renewSecretEndpoint = pm.environment.get('registrationClientUri')+'/renew_secret';",
											"    let discoveryRenewSecret = pm.environment.get('registrationRenewSecretEndpoint').replace(':client_id',pm.environment.get('newClientIdForDCRTests'));",
											"    pm.expect(renewSecretEndpoint).to.be.eql(discoveryRenewSecret);",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}/renew_secret",
									"host": [
										"{{registrationClientUri}}"
									],
									"path": [
										"renew_secret"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "client application",
					"item": [
						{
							"name": "Register client - client application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('application_type');",
											"    pm.expect(body).to.have.property('response_types');",
											"    pm.expect(body).to.have.property('grant_types');",
											"    pm.expect(body).to.have.property('client_name');",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');",
											"    pm.expect(body.response_types).to.eql([]);",
											"    pm.expect(body.application_type).to.eql('server');",
											"    pm.expect(body.grant_types).to.eql(['client_credentials']);",
											"    pm.expect(body.client_name).to.eql('machina');",
											"    ",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('newClientIdForDCRTests', body.client_id);",
											"    pm.environment.set('newClientSecretForDCRTests', body.client_secret);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"server\",\n\t\"redirect_uris\": null,\n\t\"grant_types\": [\"client_credentials\"],\n\t\"response_types\": [],\n\t\"client_name\":\"machina\",\n\t\"scope\":null\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"grant_types\");",
											"    pm.expect(body.response_types).to.eql([]);",
											"    pm.expect(body.grant_types).to.eql([ 'client_credentials' ]);",
											"    ",
											"    //The Authorization Server need not include the registration_access_token or registration_client_uri value in this response unless they have been updated.",
											"    pm.expect(body).to.not.have.property('registration_access_token');",
											"    pm.expect(body).to.not.have.property('registration_client_uri');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch client - invalidRedirectUri",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris are missing\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid redirect_uris.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"client_name\": \"Adding code or token response type means a redirect_uri will be required.\",\n   \"response_types\" : [\"token\", \"code\", \"code id_token\"]\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"response_types\");",
											"    pm.expect(body.response_types).to.eql(['token', 'code', 'code id_token']);",
											"    pm.expect(body).to.have.property(\"grant_types\");",
											"    pm.expect(body.grant_types).to.eql(['implicit', 'client_credentials', 'authorization_code']);",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"client_name\": \"Do not block even if we add code/implicit in addition to client_credentials\",\n   \"response_types\" : [\"token\", \"code\", \"code id_token\"],\n   \"redirect_uris\": [\"https://callback\"]\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.client_name).to.eql('Client name updated via DCR');",
											"    pm.expect(body).not.to.have.property(\"response_types\");",
											"    pm.expect(body).to.have.property(\"grant_types\");",
											"    pm.expect(body.grant_types).to.eql([\"client_credentials\"]);",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"server\",\n\t\"redirect_uris\": null,\n\t\"grant_types\": [\"client_credentials\"],\n\t\"response_types\": null,\n\t\n    \"contacts\": [\n        \"marie@example.org\",\n        \"jeanne@example.org\"\n    ],\n\t\"client_name\": \"Client name updated via DCR\",\n    \"logo_uri\": \"https://client.example.org/logo.png\",\n    \"subject_type\": \"public\",\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"require_auth_time\": false,\n    \"request_uris\": [\n        \"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"\n    ]\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Renew client secret - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.client_id).to.eql(pm.environment.get('newClientIdForDCRTests'));",
											"    pm.expect(body.client_secret).to.not.eql(pm.environment.get('newClientSecretForDCRTests'));",
											"",
											"    let renewSecretEndpoint = pm.environment.get('registrationClientUri')+'/renew_secret';",
											"    let discoveryRenewSecret = pm.environment.get('registrationRenewSecretEndpoint').replace(':client_id',pm.environment.get('newClientIdForDCRTests'));",
											"    pm.expect(renewSecretEndpoint).to.be.eql(discoveryRenewSecret);",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}/renew_secret",
									"host": [
										"{{registrationClientUri}}"
									],
									"path": [
										"renew_secret"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "case with all metadatas",
					"item": [
						{
							"name": "Register client - client application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"    //Check expecting metadata",
											"    pm.expect(body).to.have.property('grant_types');",
											"    pm.expect(body).to.have.property('application_type');",
											"    pm.expect(body).to.have.property('client_name');",
											"    pm.expect(body).to.have.property('require_auth_time');",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body).to.have.property('registration_client_uri');",
											"    pm.expect(body).to.have.property('client_secret_expires_at');",
											"    ",
											"    //Check expecting values",
											"    pm.expect(body.application_type).to.eql('server');",
											"    pm.expect(body.grant_types).to.eql(['client_credentials']);",
											"    pm.expect(body.client_name).to.eql('test all metadatas');",
											"    pm.expect(body.require_auth_time).to.eql(false);",
											"    ",
											"    //Track just created client",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('newClientIdForDCRTests', body.client_id);",
											"    pm.environment.set('newClientSecretForDCRTests', body.client_secret);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"    ",
											"    //Expect null values to not be returned.",
											"    pm.expect(body).not.to.have.property('redirect_uris');",
											"    pm.expect(body).not.to.have.property(\"response_types\");",
											"    pm.expect(body).not.to.have.property('contacts');",
											"    pm.expect(body).not.to.have.property(\"logo_uri\");",
											"    pm.expect(body).not.to.have.property('client_uri');",
											"    pm.expect(body).not.to.have.property(\"policy_uri\");",
											"    pm.expect(body).not.to.have.property('tos_uri');",
											"    pm.expect(body).not.to.have.property(\"jwks_uri\");",
											"    pm.expect(body).not.to.have.property('sector_identifier_uri');",
											"    pm.expect(body).not.to.have.property(\"subject_type\");",
											"    pm.expect(body).not.to.have.property('id_token_signed_response_alg');",
											"    pm.expect(body).not.to.have.property(\"id_token_encrypted_response_alg\");",
											"    pm.expect(body).not.to.have.property('id_token_encrypted_response_enc');",
											"    pm.expect(body).not.to.have.property(\"userinfo_signed_response_alg\");",
											"    pm.expect(body).not.to.have.property('userinfo_encrypted_response_alg');",
											"    pm.expect(body).not.to.have.property(\"userinfo_encrypted_response_enc\");",
											"    pm.expect(body).not.to.have.property('request_object_signing_alg');",
											"    pm.expect(body).not.to.have.property(\"request_object_encryption_alg\");",
											"    pm.expect(body).not.to.have.property('request_object_encryption_enc');",
											"    pm.expect(body).not.to.have.property(\"token_endpoint_auth_method\");",
											"    pm.expect(body).not.to.have.property('token_endpoint_auth_signing_alg');",
											"    pm.expect(body).not.to.have.property(\"default_max_age\");",
											"    pm.expect(body).not.to.have.property(\"default_acr_values\");",
											"    pm.expect(body).not.to.have.property(\"initiate_login_uri\");",
											"    pm.expect(body).not.to.have.property('request_uris');",
											"    pm.expect(body).not.to.have.property(\"scope\");",
											"    pm.expect(body).not.to.have.property('software_id');",
											"    pm.expect(body).not.to.have.property(\"software_version\");",
											"    pm.expect(body).not.to.have.property(\"software_statement\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"redirect_uris\":null,\n   \"response_types\":null,\n   \"grant_types\":[\"client_credentials\"],\n   \"application_type\":\"server\",\n   \"contacts\":null,\n   \"client_name\":\"test all metadatas\",\n   \"logo_uri\":null,\n   \"client_uri\":null,\n   \"policy_uri\":null,\n   \"tos_uri\":null,\n   \"jwks_uri\":null,\n   \"sector_identifier_uri\":null,\n   \"subject_type\":null,\n   \"id_token_signed_response_alg\":null,\n   \"id_token_encrypted_response_alg\":null,\n   \"id_token_encrypted_response_enc\":null,\n   \"userinfo_signed_response_alg\":null,\n   \"userinfo_encrypted_response_alg\":null,\n   \"userinfo_encrypted_response_enc\":null,\n   \"request_object_signing_alg\":null,\n   \"request_object_encryption_alg\":null,\n   \"request_object_encryption_enc\":null,\n   \"token_endpoint_auth_method\":null,\n   \"token_endpoint_auth_signing_alg\":null,\n   \"default_max_age\":null,\n   \"require_auth_time\":null,\n   \"default_acr_values\":null,\n   \"initiate_login_uri\":null,\n   \"request_uris\":null,\n   \"scope\":null,\n   \"software_id\":null,\n   \"software_version\":null,\n   \"software_statement\":null\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"grant_types\");",
											"    pm.expect(body.grant_types).to.eql([ 'client_credentials' ]);",
											"    ",
											"    //The Authorization Server need not include the registration_access_token ",
											"    //or registration_client_uri value in this response unless they have been updated.",
											"    pm.expect(body).to.not.have.property('registration_access_token');",
											"    pm.expect(body).to.not.have.property('registration_client_uri');",
											"    ",
											"    //Expect null values to not be returned.",
											"    pm.expect(body).not.to.have.property('redirect_uris');",
											"    pm.expect(body).not.to.have.property(\"response_types\");",
											"    pm.expect(body).not.to.have.property('contacts');",
											"    pm.expect(body).not.to.have.property(\"logo_uri\");",
											"    pm.expect(body).not.to.have.property('client_uri');",
											"    pm.expect(body).not.to.have.property(\"policy_uri\");",
											"    pm.expect(body).not.to.have.property('tos_uri');",
											"    pm.expect(body).not.to.have.property(\"jwks_uri\");",
											"    pm.expect(body).not.to.have.property('sector_identifier_uri');",
											"    pm.expect(body).not.to.have.property(\"subject_type\");",
											"    pm.expect(body).not.to.have.property('id_token_signed_response_alg');",
											"    pm.expect(body).not.to.have.property(\"id_token_encrypted_response_alg\");",
											"    pm.expect(body).not.to.have.property('id_token_encrypted_response_enc');",
											"    pm.expect(body).not.to.have.property(\"userinfo_signed_response_alg\");",
											"    pm.expect(body).not.to.have.property('userinfo_encrypted_response_alg');",
											"    pm.expect(body).not.to.have.property(\"userinfo_encrypted_response_enc\");",
											"    pm.expect(body).not.to.have.property('request_object_signing_alg');",
											"    pm.expect(body).not.to.have.property(\"request_object_encryption_alg\");",
											"    pm.expect(body).not.to.have.property('request_object_encryption_enc');",
											"    pm.expect(body).not.to.have.property(\"token_endpoint_auth_method\");",
											"    pm.expect(body).not.to.have.property('token_endpoint_auth_signing_alg');",
											"    pm.expect(body).not.to.have.property(\"default_max_age\");",
											"    pm.expect(body).not.to.have.property(\"default_acr_values\");",
											"    pm.expect(body).not.to.have.property(\"initiate_login_uri\");",
											"    pm.expect(body).not.to.have.property('request_uris');",
											"    pm.expect(body).not.to.have.property(\"scope\");",
											"    pm.expect(body).not.to.have.property('software_id');",
											"    pm.expect(body).not.to.have.property(\"software_version\");",
											"    pm.expect(body).not.to.have.property(\"software_statement\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    //Check expecting metadata",
											"    pm.expect(body).to.have.property('grant_types');",
											"    pm.expect(body).to.have.property('application_type');",
											"    pm.expect(body).to.have.property('client_name');",
											"    pm.expect(body).to.have.property('require_auth_time');",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body).to.have.property('registration_client_uri');",
											"    pm.expect(body).to.have.property('client_secret_expires_at');",
											"    ",
											"    //Check expecting values",
											"    pm.expect(body.application_type).to.eql('server');",
											"    pm.expect(body.grant_types).to.eql(['client_credentials']);",
											"    pm.expect(body.client_name).to.eql('test');",
											"    pm.expect(body.require_auth_time).to.eql(false);",
											"    ",
											"    //Expect null values to not be returned.",
											"    pm.expect(body).not.to.have.property('redirect_uris');",
											"    pm.expect(body).not.to.have.property(\"response_types\");",
											"    pm.expect(body).not.to.have.property('contacts');",
											"    pm.expect(body).not.to.have.property(\"logo_uri\");",
											"    pm.expect(body).not.to.have.property('client_uri');",
											"    pm.expect(body).not.to.have.property(\"policy_uri\");",
											"    pm.expect(body).not.to.have.property('tos_uri');",
											"    pm.expect(body).not.to.have.property(\"jwks_uri\");",
											"    pm.expect(body).not.to.have.property('sector_identifier_uri');",
											"    pm.expect(body).not.to.have.property(\"subject_type\");",
											"    pm.expect(body).not.to.have.property('id_token_signed_response_alg');",
											"    pm.expect(body).not.to.have.property(\"id_token_encrypted_response_alg\");",
											"    pm.expect(body).not.to.have.property('id_token_encrypted_response_enc');",
											"    pm.expect(body).not.to.have.property(\"userinfo_signed_response_alg\");",
											"    pm.expect(body).not.to.have.property('userinfo_encrypted_response_alg');",
											"    pm.expect(body).not.to.have.property(\"userinfo_encrypted_response_enc\");",
											"    pm.expect(body).not.to.have.property('request_object_signing_alg');",
											"    pm.expect(body).not.to.have.property(\"request_object_encryption_alg\");",
											"    pm.expect(body).not.to.have.property('request_object_encryption_enc');",
											"    pm.expect(body).not.to.have.property(\"token_endpoint_auth_method\");",
											"    pm.expect(body).not.to.have.property('token_endpoint_auth_signing_alg');",
											"    pm.expect(body).not.to.have.property(\"default_max_age\");",
											"    pm.expect(body).not.to.have.property(\"default_acr_values\");",
											"    pm.expect(body).not.to.have.property(\"initiate_login_uri\");",
											"    pm.expect(body).not.to.have.property('request_uris');",
											"    pm.expect(body).not.to.have.property(\"scope\");",
											"    pm.expect(body).not.to.have.property('software_id');",
											"    pm.expect(body).not.to.have.property(\"software_version\");",
											"    pm.expect(body).not.to.have.property(\"software_statement\");",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"redirect_uris\":null,\n   \"response_types\":null,\n   \"grant_types\":[\"client_credentials\"],\n   \"application_type\":\"server\",\n   \"contacts\":null,\n   \"client_name\":\"test\",\n   \"logo_uri\":null,\n   \"client_uri\":null,\n   \"policy_uri\":null,\n   \"tos_uri\":null,\n   \"jwks_uri\":null,\n   \"sector_identifier_uri\":null,\n   \"subject_type\":null,\n   \"id_token_signed_response_alg\":null,\n   \"id_token_encrypted_response_alg\":null,\n   \"id_token_encrypted_response_enc\":null,\n   \"userinfo_signed_response_alg\":null,\n   \"userinfo_encrypted_response_alg\":null,\n   \"userinfo_encrypted_response_enc\":null,\n   \"request_object_signing_alg\":null,\n   \"request_object_encryption_alg\":null,\n   \"request_object_encryption_enc\":null,\n   \"token_endpoint_auth_method\":null,\n   \"token_endpoint_auth_signing_alg\":null,\n   \"default_max_age\":null,\n   \"require_auth_time\":null,\n   \"default_acr_values\":null,\n   \"initiate_login_uri\":null,\n   \"request_uris\":null,\n   \"scope\":null,\n   \"software_id\":null,\n   \"software_version\":null,\n   \"software_statement\":null\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    //Check expecting metadata",
											"    pm.expect(body).to.have.property('grant_types');",
											"    pm.expect(body).to.have.property('application_type');",
											"    pm.expect(body).to.have.property('client_name');",
											"    pm.expect(body).to.have.property('require_auth_time');",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body).to.have.property('registration_client_uri');",
											"    pm.expect(body).to.have.property('client_secret_expires_at');",
											"    ",
											"    //Check expecting values",
											"    pm.expect(body.application_type).to.eql('server');",
											"    pm.expect(body.grant_types).to.eql(['client_credentials']);",
											"    pm.expect(body.client_name).to.eql('test');",
											"    pm.expect(body.require_auth_time).to.eql(false);",
											"    ",
											"    //Expect null values to not be returned.",
											"    pm.expect(body).not.to.have.property('redirect_uris');",
											"    pm.expect(body).not.to.have.property(\"response_types\");",
											"    pm.expect(body).not.to.have.property('contacts');",
											"    pm.expect(body).not.to.have.property(\"logo_uri\");",
											"    pm.expect(body).not.to.have.property('client_uri');",
											"    pm.expect(body).not.to.have.property(\"policy_uri\");",
											"    pm.expect(body).not.to.have.property('tos_uri');",
											"    pm.expect(body).not.to.have.property(\"jwks_uri\");",
											"    pm.expect(body).not.to.have.property('sector_identifier_uri');",
											"    pm.expect(body).not.to.have.property(\"subject_type\");",
											"    pm.expect(body).not.to.have.property('id_token_signed_response_alg');",
											"    pm.expect(body).not.to.have.property(\"id_token_encrypted_response_alg\");",
											"    pm.expect(body).not.to.have.property('id_token_encrypted_response_enc');",
											"    pm.expect(body).not.to.have.property(\"userinfo_signed_response_alg\");",
											"    pm.expect(body).not.to.have.property('userinfo_encrypted_response_alg');",
											"    pm.expect(body).not.to.have.property(\"userinfo_encrypted_response_enc\");",
											"    pm.expect(body).not.to.have.property('request_object_signing_alg');",
											"    pm.expect(body).not.to.have.property(\"request_object_encryption_alg\");",
											"    pm.expect(body).not.to.have.property('request_object_encryption_enc');",
											"    pm.expect(body).not.to.have.property(\"token_endpoint_auth_method\");",
											"    pm.expect(body).not.to.have.property('token_endpoint_auth_signing_alg');",
											"    pm.expect(body).not.to.have.property(\"default_max_age\");",
											"    pm.expect(body).not.to.have.property(\"default_acr_values\");",
											"    pm.expect(body).not.to.have.property(\"initiate_login_uri\");",
											"    pm.expect(body).not.to.have.property('request_uris');",
											"    pm.expect(body).not.to.have.property(\"scope\");",
											"    pm.expect(body).not.to.have.property('software_id');",
											"    pm.expect(body).not.to.have.property(\"software_version\");",
											"    pm.expect(body).not.to.have.property(\"software_statement\");",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"redirect_uris\":null,\n   \"response_types\":null,\n   \"grant_types\":[\"client_credentials\"],\n   \"application_type\":\"server\",\n   \"contacts\":null,\n   \"client_name\":\"test\",\n   \"logo_uri\":null,\n   \"client_uri\":null,\n   \"policy_uri\":null,\n   \"tos_uri\":null,\n   \"jwks_uri\":null,\n   \"sector_identifier_uri\":null,\n   \"subject_type\":null,\n   \"id_token_signed_response_alg\":null,\n   \"id_token_encrypted_response_alg\":null,\n   \"id_token_encrypted_response_enc\":null,\n   \"userinfo_signed_response_alg\":null,\n   \"userinfo_encrypted_response_alg\":null,\n   \"userinfo_encrypted_response_enc\":null,\n   \"request_object_signing_alg\":null,\n   \"request_object_encryption_alg\":null,\n   \"request_object_encryption_enc\":null,\n   \"token_endpoint_auth_method\":null,\n   \"token_endpoint_auth_signing_alg\":null,\n   \"default_max_age\":null,\n   \"require_auth_time\":null,\n   \"default_acr_values\":null,\n   \"initiate_login_uri\":null,\n   \"request_uris\":null,\n   \"scope\":null,\n   \"software_id\":null,\n   \"software_version\":null,\n   \"software_statement\":null\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Case - Templates",
			"item": [
				{
					"name": "Enable templating on domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR enabled for domain with templating\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isOpenDynamicClientRegistrationEnabled).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isClientTemplateEnabled).to.be.eql(true);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oidc\": {\n    \"clientRegistrationSettings\": {\n\t\t\"isClientTemplateEnabled\": true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create client for templating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('templateId', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"template-client-public-name\",\n  \"type\": \"BROWSER\",\n  \"redirectUris\": [\"https://gravitee.io/callback\"]\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch client to implicit template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"template\": true,\n  \"settings\": {\n  \t\"oauth\": {\n  \t\t\"grantTypes\": [\"implicit\"],\n  \t\t\"responseTypes\": [\"token\"]\n  \t}\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{templateId}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{templateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Login Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"template\":\"LOGIN\",\n\t\"enabled\":true,\n\t\"content\":\"// Custom template login form...\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{templateId}}/forms",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{templateId}}",
								"forms"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Error Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"template\":\"ERROR\",\n\t\"enabled\":true,\n\t\"content\":\"// Custom template error form...\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{templateId}}/forms",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{templateId}}",
								"forms"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Registration Mail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"template\":\"REGISTRATION_CONFIRMATION\",\n\t\"expiresAfter\":86400,\n\t\"enabled\":true,\n\t\"from\":\"a@b.c\",\n\t\"fromName\":\"sender name\",\n\t\"subject\":\"abc\",\n\t\"content\":\"// Custom template email...\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{templateId}}/emails",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{templateId}}",
								"emails"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get template endpoint from discovery",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body).to.have.property(\"registration_templates_endpoint\");",
									"    pm.environment.set('registrationTemplatesEndpoint', body.registration_templates_endpoint);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/{{domainHrid}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domainHrid}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get template from discovery",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.environment.set('software_id', body[0].software_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{registrationTemplatesEndpoint}}",
							"host": [
								"{{registrationTemplatesEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register client from template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has template attributes values\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.application_type).to.eql('web');",
									"    pm.expect(body.response_types).to.eql(['token']);",
									"    pm.expect(body.grant_types).to.eql(['implicit']);",
									"",
									"    //Has overrided metadata",
									"    pm.expect(body.client_name).to.eql('New client from template');",
									"    pm.expect(body.redirect_uris).to.eql(['https://client.example.org/callback']);",
									"    ",
									"    pm.expect(body).to.have.property(\"client_secret\");",
									"    ",
									"    pm.environment.set('newClientForDCRTests', body.id);",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"software_id\":\"{{software_id}}\",\n\t\"client_name\": \"New client from template\",\n\t\"redirect_uris\": [\"https://client.example.org/callback\"]\n}"
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Login Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has values from template\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.content).to.eql('// Custom template login form...');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{newClientForDCRTests}}/forms?template=LOGIN",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{newClientForDCRTests}}",
								"forms"
							],
							"query": [
								{
									"key": "template",
									"value": "LOGIN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Error Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has values from template\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.content).to.eql('// Custom template error form...');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{newClientForDCRTests}}/forms?template=ERROR",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{newClientForDCRTests}}",
								"forms"
							],
							"query": [
								{
									"key": "template",
									"value": "ERROR"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Consent Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    ",
									"    var body = JSON.parse(responseBody);",
									"    pm.expect(body).to.have.property('enabled');",
									"    pm.expect(body.enabled).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{newClientForDCRTests}}/forms?template=OAUTH2_USER_CONSENT",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{newClientForDCRTests}}",
								"forms"
							],
							"query": [
								{
									"key": "template",
									"value": "OAUTH2_USER_CONSENT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Registration Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has values from template\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.content).to.eql('// Custom template email...');",
									"    pm.expect(body.from).to.eql('a@b.c');",
									"    pm.expect(body.fromName).to.eql('sender name');",
									"    pm.expect(body.subject).to.eql('abc');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{newClientForDCRTests}}/emails?template=REGISTRATION_CONFIRMATION",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{newClientForDCRTests}}",
								"emails"
							],
							"query": [
								{
									"key": "template",
									"value": "REGISTRATION_CONFIRMATION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check access with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"redirect_uris\");",
									"    pm.expect(body).to.have.property(\"grant_types\");",
									"    pm.expect(body.response_types).to.eql([ 'token']);",
									"    pm.expect(body.grant_types).to.eql([ 'implicit']);",
									"    ",
									"    //The Authorization Server need not include the registration_access_token or registration_client_uri value in this response unless they have been updated.",
									"    pm.expect(body).to.not.have.property('registration_access_token');",
									"    pm.expect(body).to.not.have.property('registration_client_uri');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - Signing id_token",
			"item": [
				{
					"name": "Generate token - Case signing id_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('access_token');",
									"    pm.expect(body.scope).to.eql('dcr_admin');",
									"    ",
									"    pm.environment.set('access_token', body.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clientSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clientId}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "dcr_admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register client - rs256 signed id_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has default attributes\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('client_rs256');",
									"",
									"    pm.expect(body).to.have.property('client_id');",
									"    pm.expect(body).to.have.property('client_secret');    ",
									"    var credentials = body.client_id + \":\" + body.client_secret;",
									"    var authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(credentials));",
									"    pm.environment.set('dcrClientAuthorization', authorization);",
									"    ",
									"    pm.environment.set('newClientForDCRTests', body.id);",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"client_name\":\"client_rs256\",\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"response_types\": [\"code\",\"token\",\"id_token\"],\n    \"grant_types\": [\"authorization_code\",\"implicit\",\"password\"],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"id_token_signed_response_alg\": \"RS256\"\n}"
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token - user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function parseJwtHeader (token) {",
									"    var base64Url = token.split('.')[0];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an id_token\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    ",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('id_token');",
									"    let header = parseJwtHeader(body.id_token);",
									"    tests['Contains kid claim'] = header.kid === 'mytestkey';",
									"    tests['Contains alg claim'] = header.alg === 'RS256';",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{dcrClientAuthorization}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "#CoMpL3X-P@SsW0Rd",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch client - require RS512",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('client_rs512');",
									"    pm.expect(body.id_token_signed_response_alg).to.eql('RS512');",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_name\": \"client_rs512\",\n\t\"id_token_signed_response_alg\": \"RS512\"\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token - user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function parseJwtHeader (token) {",
									"    var base64Url = token.split('.')[0];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an id_token\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    ",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('id_token');",
									"    let header = parseJwtHeader(body.id_token);",
									"    tests['Contains kid claim'] = header.kid === 'my4096key';",
									"    tests['Contains alg claim'] = header.alg === 'RS512';",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{dcrClientAuthorization}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "#CoMpL3X-P@SsW0Rd",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete client - with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - Encrypt id_token",
			"item": [
				{
					"name": "Case - invalid",
					"item": [
						{
							"name": "Generate token - client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body.scope).to.eql('dcr_admin');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{clientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{clientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "dcr_admin",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "register client - with no keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"",
											"    pm.expect(body.id_token_encrypted_response_alg).to.eql('RSA-OAEP-256');",
											"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
											"",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');    ",
											"    var credentials = body.client_id + \":\" + body.client_secret;",
											"    var authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(credentials));",
											"    pm.environment.set('dcrClientAuthorization', authorization);",
											"    ",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"client_name\": \"Client test for JWE - no jwks\",\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"grant_types\": [\"authorization_code\",\"implicit\",\"password\"],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"request_uris\": [\"https://op-test:60001/requests/4472f1ee2cd34273a9b8bff4be1549418e5dd1b182639b7b2ae21d93e387467e#hNN9dc7MUCrZF0Jq\"],\n    \"response_types\": [\"code\",\"id_token\"],\n    \"id_token_encrypted_response_alg\": \"RSA-OAEP-256\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate user token - no jwe key error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid response type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('no matching key found to encrypt');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Set up - jwk keys",
					"item": [
						{
							"name": "register client - with jwks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');    ",
											"    var credentials = body.client_id + \":\" + body.client_secret;",
											"    var authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(credentials));",
											"    pm.environment.set('dcrClientAuthorization', authorization);",
											"    ",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"client_name\": \"Client test for JWE - no jwks\",\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"grant_types\": [\"authorization_code\",\"implicit\",\"password\"],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"request_uris\": [\"https://op-test:60001/requests/4472f1ee2cd34273a9b8bff4be1549418e5dd1b182639b7b2ae21d93e387467e#hNN9dc7MUCrZF0Jq\"],\n    \"response_types\": [\"code\",\"id_token\"],\n    \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n\t\t\t\t\"kty\": \"RSA\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"rsa-encryption-256\",\n\t\t\t\t\"e\": \"AQAB\",\n\t\t\t\t\"n\": \"lFAsvOm58TV5q9zyb3psQSESezZtYLZryGjq8LMnuqRt9cdPQCvMrnjcqdFWiXkD4ZXRO2Wp1iyzgprecx3dAnaD-KHlZR7vsFEmDh27DgNvEx5jKRSy5N2quI2LJw66Jb9JeMqoX6vtv_z3PRHb-zUhnIw6tBwZtuNE-AZSC6atr8ZCLXn6RPqJq_eoGgG-xaAzWPyRXDIqWPVO0RD3odjs6er7BcqVyHg54DyylrmRI4m6xERxpuNYI57bQN5_7a_3tR7hLeHJ8J1mNraMLH7H5_aAM_oSqKBEG9jHSTR7JsI3gSvsNOG-nP9jYxw7fH_c1XfRuTEJfBPEZxzD2Q\"\n\t\t\t},\n            {\n                \"kty\": \"RSA\",\n                \"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"e\": \"AQAB\",\n                \"n\": \"pRXXMvbZC4-I8nmeirMmr_wlo-lpZo2cyfXLPSduieEsfLeO38vIFdXbVTQ-OAeihFrvbxHELt2mNwCH3gbosd0P-pyYtUOaGmi7rLW9Wik8JcNCKA-v7q2JWmBeRFyRAuwf343gnxNL1mpUHfhqd4eswRiO55iwFT8a8gmxSOm8VXjg2aeUjkI3diT84rGR-wK77OcXeF2zJzjRDe0yFla0Tjb1RNTNkVQBJAQ3VQOOaNL7bXajR79ERlMKCjRFIZ0QCB7Nf6LtMwp9QWRdFrm7RXIPpN1V03E4v51gq82URjuQvEANe-VGRVSBij_GcOSLGjyZQi-yGVyPjNVl1Q\"\n            },\n            {\n                \"kty\": \"EC\",\n                \"use\": \"sig\",\n                \"crv\": \"P-256\",\n                \"kid\": \"elliptic-curve-signature\",\n                \"x\": \"R4JmPwezbzLuyGkonWIkezzplUfed5b6F5PL4j0zdf8\",\n                \"y\": \"QQRGKwRV9jHSlHjUhOQ0FqdQEddFBPCHZXpoFjvGmcY\"\n            },\n\t\t\t{  \n\t\t\t\t\"kty\":\"EC\",\n\t\t\t\t\"use\":\"enc\",\n\t\t\t\t\"crv\":\"P-521\",\n                \"kid\": \"elliptic-curve-encryption\",\n\t\t\t\t\"x\":\"AfEFyeYAr1TwmvCxvqgWPEg4Vvf50RC2OdkYfTS30dInZwX-Ebn6elp4fQ0GOdOBbYRq9b2gQ79Cd1AytQhdF6To\",\n\t\t\t\t\"y\":\"Abj0w4nSumQWtO6AV7ufQN6VpmJoKlWmz9KB6BUU0ANcj4aTJjBE9WNiGCqFpvaIdEWZWcSsZNYGKT3rJ71AfLdm\"\n\t\t\t},\n\t\t\t{  \n\t\t\t\t\"kty\":\"OKP\",\n\t\t\t\t\"use\":\"enc\",\n\t\t\t\t\"kid\":\"edwards-curve-encryption\",\n\t\t\t\t\"crv\":\"X25519\",\n\t\t\t\t\"x\":\"vBNW8f19leF79U4U6NrDDQaK_i5kL0iMKghB39AUT2I\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"128bits\",\n\t\t\t\t\"k\" : \"p94TA_PhiVUdi_yxPbviAw\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"192bits\",\n\t\t\t\t\"k\" : \"G9jUYv3b0-0wZWCGxAnIUH6gI0kjeXj4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"256bits\",\n\t\t\t\t\"k\" : \"pzx01XDfexcfxHWtk_MzjfCin5NMy3KBx2xtjrX1G-E\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"384bits\",\n\t\t\t\t\"k\" : \"MBNrGN8nwS7hlOVfqEy6qA98bzyo1BLGxr-kyN1E4UXYWQDkBg4L7AQRwpZdrKKS\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"512bits\",\n\t\t\t\t\"k\" : \"LfWisS5p-ohMbNbeWdiSapnHgA62XPu8DXzyzNZQHtQPglHf0Lb6NUM-8aQGj_YWErvODY5rQkpKeolrBKkcmg\"\n\t\t\t}\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Case - RSA",
					"item": [
						{
							"name": "RSA-OAEP-256",
							"item": [
								{
									"name": "patch client - RSA-OAEP-256 - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"RSA-OAEP-256\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - RSA-OAEP-256 - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - RSA-OAEP-256 - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - RSA-OAEP-256 - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - RSA-OAEP-256 - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - RSA-OAEP-256 - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - RSA-OAEP-256 - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Case - Curve",
					"item": [
						{
							"name": "Case - Elliptic Curve",
							"item": [
								{
									"name": "ECDH-ES",
									"item": [
										{
											"name": "patch client - ECDH-ES - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ECDH-ES+A128KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A128KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ECDH-ES+A192KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A192KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ECDH-ES+A256KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A256KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Case - Edward Curve",
							"item": [
								{
									"name": "Set up - okp keys",
									"item": [
										{
											"name": "patch client - with OKP keys",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n\t\t\t\t\"kty\": \"RSA\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"rsa-encryption-256\",\n\t\t\t\t\"e\": \"AQAB\",\n\t\t\t\t\"n\": \"lFAsvOm58TV5q9zyb3psQSESezZtYLZryGjq8LMnuqRt9cdPQCvMrnjcqdFWiXkD4ZXRO2Wp1iyzgprecx3dAnaD-KHlZR7vsFEmDh27DgNvEx5jKRSy5N2quI2LJw66Jb9JeMqoX6vtv_z3PRHb-zUhnIw6tBwZtuNE-AZSC6atr8ZCLXn6RPqJq_eoGgG-xaAzWPyRXDIqWPVO0RD3odjs6er7BcqVyHg54DyylrmRI4m6xERxpuNYI57bQN5_7a_3tR7hLeHJ8J1mNraMLH7H5_aAM_oSqKBEG9jHSTR7JsI3gSvsNOG-nP9jYxw7fH_c1XfRuTEJfBPEZxzD2Q\"\n\t\t\t},\n            {\n                \"kty\": \"RSA\",\n                \"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"e\": \"AQAB\",\n                \"n\": \"pRXXMvbZC4-I8nmeirMmr_wlo-lpZo2cyfXLPSduieEsfLeO38vIFdXbVTQ-OAeihFrvbxHELt2mNwCH3gbosd0P-pyYtUOaGmi7rLW9Wik8JcNCKA-v7q2JWmBeRFyRAuwf343gnxNL1mpUHfhqd4eswRiO55iwFT8a8gmxSOm8VXjg2aeUjkI3diT84rGR-wK77OcXeF2zJzjRDe0yFla0Tjb1RNTNkVQBJAQ3VQOOaNL7bXajR79ERlMKCjRFIZ0QCB7Nf6LtMwp9QWRdFrm7RXIPpN1V03E4v51gq82URjuQvEANe-VGRVSBij_GcOSLGjyZQi-yGVyPjNVl1Q\"\n            },\n            {\n                \"kty\": \"EC\",\n                \"use\": \"sig\",\n                \"crv\": \"P-256\",\n                \"kid\": \"elliptic-curve-signature\",\n                \"x\": \"R4JmPwezbzLuyGkonWIkezzplUfed5b6F5PL4j0zdf8\",\n                \"y\": \"QQRGKwRV9jHSlHjUhOQ0FqdQEddFBPCHZXpoFjvGmcY\"\n            },\n\t\t\t{  \n\t\t\t\t\"kty\":\"EC\",\n\t\t\t\t\"use\":\"sig\",\n\t\t\t\t\"crv\":\"P-521\",\n                \"kid\": \"elliptic-curve-encryption\",\n\t\t\t\t\"x\":\"AfEFyeYAr1TwmvCxvqgWPEg4Vvf50RC2OdkYfTS30dInZwX-Ebn6elp4fQ0GOdOBbYRq9b2gQ79Cd1AytQhdF6To\",\n\t\t\t\t\"y\":\"Abj0w4nSumQWtO6AV7ufQN6VpmJoKlWmz9KB6BUU0ANcj4aTJjBE9WNiGCqFpvaIdEWZWcSsZNYGKT3rJ71AfLdm\"\n\t\t\t},\n\t\t\t{  \n\t\t\t\t\"kty\":\"OKP\",\n\t\t\t\t\"kid\":\"edwards-curve-encryption\",\n\t\t\t\t\"crv\":\"X25519\",\n\t\t\t\t\"x\":\"vBNW8f19leF79U4U6NrDDQaK_i5kL0iMKghB39AUT2I\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"128bits\",\n\t\t\t\t\"k\" : \"p94TA_PhiVUdi_yxPbviAw\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"192bits\",\n\t\t\t\t\"k\" : \"G9jUYv3b0-0wZWCGxAnIUH6gI0kjeXj4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"256bits\",\n\t\t\t\t\"k\" : \"pzx01XDfexcfxHWtk_MzjfCin5NMy3KBx2xtjrX1G-E\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"384bits\",\n\t\t\t\t\"k\" : \"MBNrGN8nwS7hlOVfqEy6qA98bzyo1BLGxr-kyN1E4UXYWQDkBg4L7AQRwpZdrKKS\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"512bits\",\n\t\t\t\t\"k\" : \"LfWisS5p-ohMbNbeWdiSapnHgA62XPu8DXzyzNZQHtQPglHf0Lb6NUM-8aQGj_YWErvODY5rQkpKeolrBKkcmg\"\n\t\t\t}\n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ECDH-ES",
									"item": [
										{
											"name": "patch client - ECDH-ES - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ECDH-ES+A128KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A128KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ECDH-ES+A192KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A192KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ECDH-ES+A256KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A256KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Case - AES",
					"item": [
						{
							"name": "A128GCMKW",
							"item": [
								{
									"name": "patch client - A128GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128GCMKW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "A128KW",
							"item": [
								{
									"name": "patch client - A128KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "A192GCMKW",
							"item": [
								{
									"name": "patch client - A192GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192GCMKW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "A192KW",
							"item": [
								{
									"name": "patch client - A192KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "A256GCMKW",
							"item": [
								{
									"name": "patch client - A256GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256GCMKW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "A256KW",
							"item": [
								{
									"name": "patch client - A256KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Case - Direct",
					"item": [
						{
							"name": "patch client - dir - default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.id_token_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"id_token_encrypted_response_alg\": \"dir\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - dir - default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an id_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    ",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('id_token');",
											"    let header = parseJweHeader(body.id_token);",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A128GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.id_token_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"id_token_encrypted_response_alg\": \"dir\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - dir - A128GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an id_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    ",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('id_token');",
											"    let header = parseJweHeader(body.id_token);",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A192GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.id_token_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"id_token_encrypted_response_alg\": \"dir\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - dir - A192GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an id_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    ",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('id_token');",
											"    let header = parseJweHeader(body.id_token);",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A192CBC-HS384",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.id_token_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"id_token_encrypted_response_alg\": \"dir\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - dir - A192CBC-HS384",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an id_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    ",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('id_token');",
											"    let header = parseJweHeader(body.id_token);",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A256GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.id_token_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"id_token_encrypted_response_alg\": \"dir\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - dir - A256GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an id_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    ",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('id_token');",
											"    let header = parseJweHeader(body.id_token);",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A256CBC-HS512",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.id_token_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"id_token_encrypted_response_alg\": \"dir\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - dir - A256CBC-HS512",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an id_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    ",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('id_token');",
											"    let header = parseJweHeader(body.id_token);",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Case - Password Based Encryption",
					"item": [
						{
							"name": "Set up - shared secret key",
							"item": [
								{
									"name": "patch client - with weak secret",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n\t\t\t\t\"kty\": \"RSA\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"rsa-encryption-256\",\n\t\t\t\t\"e\": \"AQAB\",\n\t\t\t\t\"n\": \"lFAsvOm58TV5q9zyb3psQSESezZtYLZryGjq8LMnuqRt9cdPQCvMrnjcqdFWiXkD4ZXRO2Wp1iyzgprecx3dAnaD-KHlZR7vsFEmDh27DgNvEx5jKRSy5N2quI2LJw66Jb9JeMqoX6vtv_z3PRHb-zUhnIw6tBwZtuNE-AZSC6atr8ZCLXn6RPqJq_eoGgG-xaAzWPyRXDIqWPVO0RD3odjs6er7BcqVyHg54DyylrmRI4m6xERxpuNYI57bQN5_7a_3tR7hLeHJ8J1mNraMLH7H5_aAM_oSqKBEG9jHSTR7JsI3gSvsNOG-nP9jYxw7fH_c1XfRuTEJfBPEZxzD2Q\"\n\t\t\t},\n            {\n                \"kty\": \"RSA\",\n                \"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"e\": \"AQAB\",\n                \"n\": \"pRXXMvbZC4-I8nmeirMmr_wlo-lpZo2cyfXLPSduieEsfLeO38vIFdXbVTQ-OAeihFrvbxHELt2mNwCH3gbosd0P-pyYtUOaGmi7rLW9Wik8JcNCKA-v7q2JWmBeRFyRAuwf343gnxNL1mpUHfhqd4eswRiO55iwFT8a8gmxSOm8VXjg2aeUjkI3diT84rGR-wK77OcXeF2zJzjRDe0yFla0Tjb1RNTNkVQBJAQ3VQOOaNL7bXajR79ERlMKCjRFIZ0QCB7Nf6LtMwp9QWRdFrm7RXIPpN1V03E4v51gq82URjuQvEANe-VGRVSBij_GcOSLGjyZQi-yGVyPjNVl1Q\"\n            },\n            {\n                \"kty\": \"EC\",\n                \"use\": \"sig\",\n                \"crv\": \"P-256\",\n                \"kid\": \"elliptic-curve-signature\",\n                \"x\": \"R4JmPwezbzLuyGkonWIkezzplUfed5b6F5PL4j0zdf8\",\n                \"y\": \"QQRGKwRV9jHSlHjUhOQ0FqdQEddFBPCHZXpoFjvGmcY\"\n            },\n\t\t\t{  \n\t\t\t\t\"kty\": \"EC\",\n\t\t\t\t\"use\": \"sig\",\n\t\t\t\t\"crv\": \"P-521\",\n                \"kid\": \"elliptic-curve-encryption\",\n\t\t\t\t\"x\": \"AfEFyeYAr1TwmvCxvqgWPEg4Vvf50RC2OdkYfTS30dInZwX-Ebn6elp4fQ0GOdOBbYRq9b2gQ79Cd1AytQhdF6To\",\n\t\t\t\t\"y\": \"Abj0w4nSumQWtO6AV7ufQN6VpmJoKlWmz9KB6BUU0ANcj4aTJjBE9WNiGCqFpvaIdEWZWcSsZNYGKT3rJ71AfLdm\"\n\t\t\t},\n\t\t\t{  \n\t\t\t\t\"kty\": \"OKP\",\n\t\t\t\t\"kid\": \"edwards-curve-encryption\",\n\t\t\t\t\"crv\": \"X25519\",\n\t\t\t\t\"x\": \"vBNW8f19leF79U4U6NrDDQaK_i5kL0iMKghB39AUT2I\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"use\": \"sig\",\n\t\t\t\t\"kid\": \"128bits\",\n\t\t\t\t\"k\" : \"p94TA_PhiVUdi_yxPbviAw\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"use\":\"sig\",\n\t\t\t\t\"kid\": \"192bits\",\n\t\t\t\t\"k\" : \"G9jUYv3b0-0wZWCGxAnIUH6gI0kjeXj4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"use\": \"sig\",\n\t\t\t\t\"kid\": \"256bits\",\n\t\t\t\t\"k\" : \"pzx01XDfexcfxHWtk_MzjfCin5NMy3KBx2xtjrX1G-E\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"shared-secret\",\n\t\t\t\t\"k\" : \"weak\"\n\t\t\t}\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PBES2-HS256+A128KW",
							"item": [
								{
									"name": "patch client - PBES2-HS256+A128KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS256+A128KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS256+A128KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS256+A128KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS256+A128KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS256+A128KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS256+A128KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS256+A128KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PBES2-HS384+A192KW",
							"item": [
								{
									"name": "patch client - PBES2-HS384+A192KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS384+A192KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS384+A192KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS384+A192KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS384+A192KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS384+A192KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS384+A192KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS384+A192KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PBES2-HS512+A256KW",
							"item": [
								{
									"name": "patch client - PBES2-HS512+A256KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS512+A256KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS512+A256KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS512+A256KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS512+A256KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS512+A256KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS512+A256KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS512+A256KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - Signing userinfo",
			"item": [
				{
					"name": "Generate token - client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('access_token');",
									"    pm.expect(body.scope).to.eql('dcr_admin');",
									"    ",
									"    pm.environment.set('access_token', body.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clientSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clientId}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "dcr_admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register client - rs384 signed userinfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has default attributes\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('client_rs384');",
									"",
									"    pm.expect(body).to.have.property('client_id');",
									"    pm.expect(body).to.have.property('client_secret');    ",
									"    var credentials = body.client_id + \":\" + body.client_secret;",
									"    var authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(credentials));",
									"    pm.environment.set('dcrClientAuthorization', authorization);",
									"    ",
									"    pm.environment.set('newClientForDCRTests', body.id);",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"client_name\":\"client_rs384\",\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"grant_types\": [\"authorization_code\",\"implicit\",\"password\"],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"response_types\": [\"code\",\"token\"],\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"userinfo_signed_response_alg\": \"RS384\"\n}"
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token - user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('access_token');",
									"    pm.environment.set('access_token', body.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{dcrClientAuthorization}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "#CoMpL3X-P@SsW0Rd",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Signed UserInfo default alg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function parseJwtHeader (token) {",
									"    var base64Url = token.split('.')[0];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"function parseJwtpayload (token) {",
									"    var base64Url = token.split('.')[1];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/jwt');",
									"    ",
									"    var body = pm.response.text();",
									"    let header = parseJwtHeader(body);",
									"    pm.expect(header).to.have.property('kid');",
									"    pm.expect(header).to.have.property('alg');",
									"    let payload = parseJwtpayload(body);",
									"    pm.expect(payload).to.have.property('iss');",
									"    pm.expect(payload).to.have.property('sub');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{userinfoEndpoint}}",
							"host": [
								"{{userinfoEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Signed UserInfo default alg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function parseJwtHeader (token) {",
									"    var base64Url = token.split('.')[0];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"function parseJwtpayload (token) {",
									"    var base64Url = token.split('.')[1];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/jwt');",
									"    ",
									"    var body = pm.response.text();",
									"    let header = parseJwtHeader(body);",
									"    pm.expect(header).to.have.property('kid');",
									"    pm.expect(header).to.have.property('alg');",
									"    let payload = parseJwtpayload(body);",
									"    pm.expect(payload).to.have.property('iss');",
									"    pm.expect(payload).to.have.property('sub');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "#CoMpL3X-P@SsW0Rd",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{userinfoEndpoint}}",
							"host": [
								"{{userinfoEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch client - require RS512",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body.userinfo_signed_response_alg).to.eql('RS512');",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"client_name\": \"client_rs512\",\n\t\"userinfo_signed_response_alg\": \"RS512\"\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Signed UserInfo RS512",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function parseJwtHeader (token) {",
									"    var base64Url = token.split('.')[0];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"function parseJwtpayload (token) {",
									"    var base64Url = token.split('.')[1];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/jwt');",
									"    ",
									"    var body = pm.response.text();",
									"    let header = parseJwtHeader(body);",
									"    tests['Contains kid claim'] = header.kid === 'my4096key';",
									"    tests['Contains alg claim'] = header.alg === 'RS512';",
									"    let payload = parseJwtpayload(body);",
									"    pm.expect(payload).to.have.property('iss');",
									"    pm.expect(payload).to.have.property('sub');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{userinfoEndpoint}}",
							"host": [
								"{{userinfoEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Signed UserInfo RS512",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function parseJwtHeader (token) {",
									"    var base64Url = token.split('.')[0];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"function parseJwtpayload (token) {",
									"    var base64Url = token.split('.')[1];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/jwt');",
									"    ",
									"    var body = pm.response.text();",
									"    let header = parseJwtHeader(body);",
									"    tests['Contains kid claim'] = header.kid === 'my4096key';",
									"    tests['Contains alg claim'] = header.alg === 'RS512';",
									"    let payload = parseJwtpayload(body);",
									"    pm.expect(payload).to.have.property('iss');",
									"    pm.expect(payload).to.have.property('sub');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "#CoMpL3X-P@SsW0Rd",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{userinfoEndpoint}}",
							"host": [
								"{{userinfoEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete client - with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - Encrypt userinfo",
			"item": [
				{
					"name": "Case - invalid",
					"item": [
						{
							"name": "Generate token - client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body.scope).to.eql('dcr_admin');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{clientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{clientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "dcr_admin",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "register client - with no keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"",
											"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('RSA-OAEP-256');",
											"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
											"",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');    ",
											"    var credentials = body.client_id + \":\" + body.client_secret;",
											"    var authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(credentials));",
											"    pm.environment.set('dcrClientAuthorization', authorization);",
											"    ",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"client_name\": \"Client test for JWE - no jwks\",\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"grant_types\": [\"password\"],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"request_uris\": [\"https://op-test:60001/requests/4472f1ee2cd34273a9b8bff4be1549418e5dd1b182639b7b2ae21d93e387467e#hNN9dc7MUCrZF0Jq\"],\n    \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Retrieve access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"access_token\");",
											"    pm.environment.set(\"user_access_token\",body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Userinfo - no jwe key error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid response type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('no matching key found to encrypt');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{user_access_token}}"
									}
								],
								"url": {
									"raw": "{{userinfoEndpoint}}",
									"host": [
										"{{userinfoEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Userinfo - no jwe key error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid response type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('no matching key found to encrypt');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{user_access_token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{userinfoEndpoint}}?=",
									"host": [
										"{{userinfoEndpoint}}"
									],
									"query": [
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Set up - jwk keys",
					"item": [
						{
							"name": "register client - with jwks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');    ",
											"    var credentials = body.client_id + \":\" + body.client_secret;",
											"    var authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(credentials));",
											"    pm.environment.set('dcrClientAuthorization', authorization);",
											"    ",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"client_name\": \"Client test for JWE - no jwks\",\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"grant_types\": [\"password\"],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"request_uris\": [\"https://op-test:60001/requests/4472f1ee2cd34273a9b8bff4be1549418e5dd1b182639b7b2ae21d93e387467e#hNN9dc7MUCrZF0Jq\"],\n    \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n\t\t\t\t\"kty\": \"RSA\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"rsa-encryption-256\",\n\t\t\t\t\"e\": \"AQAB\",\n\t\t\t\t\"n\": \"lFAsvOm58TV5q9zyb3psQSESezZtYLZryGjq8LMnuqRt9cdPQCvMrnjcqdFWiXkD4ZXRO2Wp1iyzgprecx3dAnaD-KHlZR7vsFEmDh27DgNvEx5jKRSy5N2quI2LJw66Jb9JeMqoX6vtv_z3PRHb-zUhnIw6tBwZtuNE-AZSC6atr8ZCLXn6RPqJq_eoGgG-xaAzWPyRXDIqWPVO0RD3odjs6er7BcqVyHg54DyylrmRI4m6xERxpuNYI57bQN5_7a_3tR7hLeHJ8J1mNraMLH7H5_aAM_oSqKBEG9jHSTR7JsI3gSvsNOG-nP9jYxw7fH_c1XfRuTEJfBPEZxzD2Q\"\n\t\t\t},\n            {\n                \"kty\": \"RSA\",\n                \"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"e\": \"AQAB\",\n                \"n\": \"pRXXMvbZC4-I8nmeirMmr_wlo-lpZo2cyfXLPSduieEsfLeO38vIFdXbVTQ-OAeihFrvbxHELt2mNwCH3gbosd0P-pyYtUOaGmi7rLW9Wik8JcNCKA-v7q2JWmBeRFyRAuwf343gnxNL1mpUHfhqd4eswRiO55iwFT8a8gmxSOm8VXjg2aeUjkI3diT84rGR-wK77OcXeF2zJzjRDe0yFla0Tjb1RNTNkVQBJAQ3VQOOaNL7bXajR79ERlMKCjRFIZ0QCB7Nf6LtMwp9QWRdFrm7RXIPpN1V03E4v51gq82URjuQvEANe-VGRVSBij_GcOSLGjyZQi-yGVyPjNVl1Q\"\n            },\n            {\n                \"kty\": \"EC\",\n                \"use\": \"sig\",\n                \"crv\": \"P-256\",\n                \"kid\": \"elliptic-curve-signature\",\n                \"x\": \"R4JmPwezbzLuyGkonWIkezzplUfed5b6F5PL4j0zdf8\",\n                \"y\": \"QQRGKwRV9jHSlHjUhOQ0FqdQEddFBPCHZXpoFjvGmcY\"\n            },\n\t\t\t{  \n\t\t\t\t\"kty\":\"EC\",\n\t\t\t\t\"use\":\"enc\",\n\t\t\t\t\"crv\":\"P-521\",\n                \"kid\": \"elliptic-curve-encryption\",\n\t\t\t\t\"x\":\"AfEFyeYAr1TwmvCxvqgWPEg4Vvf50RC2OdkYfTS30dInZwX-Ebn6elp4fQ0GOdOBbYRq9b2gQ79Cd1AytQhdF6To\",\n\t\t\t\t\"y\":\"Abj0w4nSumQWtO6AV7ufQN6VpmJoKlWmz9KB6BUU0ANcj4aTJjBE9WNiGCqFpvaIdEWZWcSsZNYGKT3rJ71AfLdm\"\n\t\t\t},\n\t\t\t{  \n\t\t\t\t\"kty\":\"OKP\",\n\t\t\t\t\"use\":\"enc\",\n\t\t\t\t\"kid\":\"edwards-curve-encryption\",\n\t\t\t\t\"crv\":\"X25519\",\n\t\t\t\t\"x\":\"vBNW8f19leF79U4U6NrDDQaK_i5kL0iMKghB39AUT2I\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"128bits\",\n\t\t\t\t\"k\" : \"p94TA_PhiVUdi_yxPbviAw\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"192bits\",\n\t\t\t\t\"k\" : \"G9jUYv3b0-0wZWCGxAnIUH6gI0kjeXj4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"256bits\",\n\t\t\t\t\"k\" : \"pzx01XDfexcfxHWtk_MzjfCin5NMy3KBx2xtjrX1G-E\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"384bits\",\n\t\t\t\t\"k\" : \"MBNrGN8nwS7hlOVfqEy6qA98bzyo1BLGxr-kyN1E4UXYWQDkBg4L7AQRwpZdrKKS\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"512bits\",\n\t\t\t\t\"k\" : \"LfWisS5p-ohMbNbeWdiSapnHgA62XPu8DXzyzNZQHtQPglHf0Lb6NUM-8aQGj_YWErvODY5rQkpKeolrBKkcmg\"\n\t\t\t}\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Case - RSA",
					"item": [
						{
							"name": "RSA-OAEP-256",
							"item": [
								{
									"name": "patch client - RSA-OAEP-256 - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - RSA-OAEP-256 - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - RSA-OAEP-256 - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - RSA-OAEP-256 - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - RSA-OAEP-256 - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - RSA-OAEP-256 - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - RSA-OAEP-256 - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Case - Curve",
					"item": [
						{
							"name": "Case - Elliptic Curve",
							"item": [
								{
									"name": "ECDH-ES",
									"item": [
										{
											"name": "patch client - ECDH-ES - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ECDH-ES+A128KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A128KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ECDH-ES+A192KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A192KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ECDH-ES+A256KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A256KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Case - Edward Curve",
							"item": [
								{
									"name": "Set up - okp keys",
									"item": [
										{
											"name": "patch client - with OKP keys",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n\t\t\t\t\"kty\": \"RSA\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"rsa-encryption-256\",\n\t\t\t\t\"e\": \"AQAB\",\n\t\t\t\t\"n\": \"lFAsvOm58TV5q9zyb3psQSESezZtYLZryGjq8LMnuqRt9cdPQCvMrnjcqdFWiXkD4ZXRO2Wp1iyzgprecx3dAnaD-KHlZR7vsFEmDh27DgNvEx5jKRSy5N2quI2LJw66Jb9JeMqoX6vtv_z3PRHb-zUhnIw6tBwZtuNE-AZSC6atr8ZCLXn6RPqJq_eoGgG-xaAzWPyRXDIqWPVO0RD3odjs6er7BcqVyHg54DyylrmRI4m6xERxpuNYI57bQN5_7a_3tR7hLeHJ8J1mNraMLH7H5_aAM_oSqKBEG9jHSTR7JsI3gSvsNOG-nP9jYxw7fH_c1XfRuTEJfBPEZxzD2Q\"\n\t\t\t},\n            {\n                \"kty\": \"RSA\",\n                \"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"e\": \"AQAB\",\n                \"n\": \"pRXXMvbZC4-I8nmeirMmr_wlo-lpZo2cyfXLPSduieEsfLeO38vIFdXbVTQ-OAeihFrvbxHELt2mNwCH3gbosd0P-pyYtUOaGmi7rLW9Wik8JcNCKA-v7q2JWmBeRFyRAuwf343gnxNL1mpUHfhqd4eswRiO55iwFT8a8gmxSOm8VXjg2aeUjkI3diT84rGR-wK77OcXeF2zJzjRDe0yFla0Tjb1RNTNkVQBJAQ3VQOOaNL7bXajR79ERlMKCjRFIZ0QCB7Nf6LtMwp9QWRdFrm7RXIPpN1V03E4v51gq82URjuQvEANe-VGRVSBij_GcOSLGjyZQi-yGVyPjNVl1Q\"\n            },\n            {\n                \"kty\": \"EC\",\n                \"use\": \"sig\",\n                \"crv\": \"P-256\",\n                \"kid\": \"elliptic-curve-signature\",\n                \"x\": \"R4JmPwezbzLuyGkonWIkezzplUfed5b6F5PL4j0zdf8\",\n                \"y\": \"QQRGKwRV9jHSlHjUhOQ0FqdQEddFBPCHZXpoFjvGmcY\"\n            },\n\t\t\t{  \n\t\t\t\t\"kty\":\"EC\",\n\t\t\t\t\"use\":\"sig\",\n\t\t\t\t\"crv\":\"P-521\",\n                \"kid\": \"elliptic-curve-encryption\",\n\t\t\t\t\"x\":\"AfEFyeYAr1TwmvCxvqgWPEg4Vvf50RC2OdkYfTS30dInZwX-Ebn6elp4fQ0GOdOBbYRq9b2gQ79Cd1AytQhdF6To\",\n\t\t\t\t\"y\":\"Abj0w4nSumQWtO6AV7ufQN6VpmJoKlWmz9KB6BUU0ANcj4aTJjBE9WNiGCqFpvaIdEWZWcSsZNYGKT3rJ71AfLdm\"\n\t\t\t},\n\t\t\t{  \n\t\t\t\t\"kty\":\"OKP\",\n\t\t\t\t\"kid\":\"edwards-curve-encryption\",\n\t\t\t\t\"crv\":\"X25519\",\n\t\t\t\t\"x\":\"vBNW8f19leF79U4U6NrDDQaK_i5kL0iMKghB39AUT2I\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"128bits\",\n\t\t\t\t\"k\" : \"p94TA_PhiVUdi_yxPbviAw\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"192bits\",\n\t\t\t\t\"k\" : \"G9jUYv3b0-0wZWCGxAnIUH6gI0kjeXj4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"256bits\",\n\t\t\t\t\"k\" : \"pzx01XDfexcfxHWtk_MzjfCin5NMy3KBx2xtjrX1G-E\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"384bits\",\n\t\t\t\t\"k\" : \"MBNrGN8nwS7hlOVfqEy6qA98bzyo1BLGxr-kyN1E4UXYWQDkBg4L7AQRwpZdrKKS\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"512bits\",\n\t\t\t\t\"k\" : \"LfWisS5p-ohMbNbeWdiSapnHgA62XPu8DXzyzNZQHtQPglHf0Lb6NUM-8aQGj_YWErvODY5rQkpKeolrBKkcmg\"\n\t\t\t}\n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ECDH-ES",
									"item": [
										{
											"name": "patch client - ECDH-ES - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ECDH-ES+A128KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A128KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ECDH-ES+A192KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A192KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ECDH-ES+A256KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A256KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "#CoMpL3X-P@SsW0Rd",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Case - AES",
					"item": [
						{
							"name": "A128GCMKW",
							"item": [
								{
									"name": "patch client - A128GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128GCMKW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "A128KW",
							"item": [
								{
									"name": "patch client - A128KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "A192GCMKW",
							"item": [
								{
									"name": "patch client - A192GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192GCMKW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "A192KW",
							"item": [
								{
									"name": "patch client - A192KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "A256GCMKW",
							"item": [
								{
									"name": "patch client - A256GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256GCMKW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "A256KW",
							"item": [
								{
									"name": "patch client - A256KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Case - Direct",
					"item": [
						{
							"name": "patch client - dir - default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"userinfo_encrypted_response_alg\": \"dir\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Retrieve access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"access_token\");",
											"    pm.environment.set(\"user_access_token\",body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Userinfo - dir - default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/jwt');",
											"    ",
											"    var body = pm.response.text();",
											"    let header = parseJweHeader(body);",
											"    ",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{user_access_token}}"
									}
								],
								"url": {
									"raw": "{{userinfoEndpoint}}",
									"host": [
										"{{userinfoEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A128GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"userinfo_encrypted_response_alg\": \"dir\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Retrieve access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"access_token\");",
											"    pm.environment.set(\"user_access_token\",body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Userinfo - dir - A128GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/jwt');",
											"    ",
											"    var body = pm.response.text();",
											"    let header = parseJweHeader(body);",
											"    ",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{user_access_token}}"
									}
								],
								"url": {
									"raw": "{{userinfoEndpoint}}",
									"host": [
										"{{userinfoEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A192GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"userinfo_encrypted_response_alg\": \"dir\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Retrieve access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"access_token\");",
											"    pm.environment.set(\"user_access_token\",body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Userinfo - dir - A192GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/jwt');",
											"    ",
											"    var body = pm.response.text();",
											"    let header = parseJweHeader(body);",
											"    ",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{user_access_token}}"
									}
								],
								"url": {
									"raw": "{{userinfoEndpoint}}",
									"host": [
										"{{userinfoEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A192CBC-HS384",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"userinfo_encrypted_response_alg\": \"dir\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Retrieve access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"access_token\");",
											"    pm.environment.set(\"user_access_token\",body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Userinfo - dir - A192CBC-HS384",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/jwt');",
											"    ",
											"    var body = pm.response.text();",
											"    let header = parseJweHeader(body);",
											"    ",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{user_access_token}}"
									}
								],
								"url": {
									"raw": "{{userinfoEndpoint}}",
									"host": [
										"{{userinfoEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A256GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"userinfo_encrypted_response_alg\": \"dir\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Retrieve access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"access_token\");",
											"    pm.environment.set(\"user_access_token\",body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Userinfo - dir - A256GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/jwt');",
											"    ",
											"    var body = pm.response.text();",
											"    let header = parseJweHeader(body);",
											"    ",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{user_access_token}}"
									}
								],
								"url": {
									"raw": "{{userinfoEndpoint}}",
									"host": [
										"{{userinfoEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A256CBC-HS512",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"userinfo_encrypted_response_alg\": \"dir\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Retrieve access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"access_token\");",
											"    pm.environment.set(\"user_access_token\",body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Userinfo - dir - A256CBC-HS512",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/jwt');",
											"    ",
											"    var body = pm.response.text();",
											"    let header = parseJweHeader(body);",
											"    ",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{user_access_token}}"
									}
								],
								"url": {
									"raw": "{{userinfoEndpoint}}",
									"host": [
										"{{userinfoEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Case - Password Based Encryption",
					"item": [
						{
							"name": "Set up - shared secret key",
							"item": [
								{
									"name": "patch client - with weak secret",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n\t\t\t\t\"kty\": \"RSA\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"rsa-encryption-256\",\n\t\t\t\t\"e\": \"AQAB\",\n\t\t\t\t\"n\": \"lFAsvOm58TV5q9zyb3psQSESezZtYLZryGjq8LMnuqRt9cdPQCvMrnjcqdFWiXkD4ZXRO2Wp1iyzgprecx3dAnaD-KHlZR7vsFEmDh27DgNvEx5jKRSy5N2quI2LJw66Jb9JeMqoX6vtv_z3PRHb-zUhnIw6tBwZtuNE-AZSC6atr8ZCLXn6RPqJq_eoGgG-xaAzWPyRXDIqWPVO0RD3odjs6er7BcqVyHg54DyylrmRI4m6xERxpuNYI57bQN5_7a_3tR7hLeHJ8J1mNraMLH7H5_aAM_oSqKBEG9jHSTR7JsI3gSvsNOG-nP9jYxw7fH_c1XfRuTEJfBPEZxzD2Q\"\n\t\t\t},\n            {\n                \"kty\": \"RSA\",\n                \"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"e\": \"AQAB\",\n                \"n\": \"pRXXMvbZC4-I8nmeirMmr_wlo-lpZo2cyfXLPSduieEsfLeO38vIFdXbVTQ-OAeihFrvbxHELt2mNwCH3gbosd0P-pyYtUOaGmi7rLW9Wik8JcNCKA-v7q2JWmBeRFyRAuwf343gnxNL1mpUHfhqd4eswRiO55iwFT8a8gmxSOm8VXjg2aeUjkI3diT84rGR-wK77OcXeF2zJzjRDe0yFla0Tjb1RNTNkVQBJAQ3VQOOaNL7bXajR79ERlMKCjRFIZ0QCB7Nf6LtMwp9QWRdFrm7RXIPpN1V03E4v51gq82URjuQvEANe-VGRVSBij_GcOSLGjyZQi-yGVyPjNVl1Q\"\n            },\n            {\n                \"kty\": \"EC\",\n                \"use\": \"sig\",\n                \"crv\": \"P-256\",\n                \"kid\": \"elliptic-curve-signature\",\n                \"x\": \"R4JmPwezbzLuyGkonWIkezzplUfed5b6F5PL4j0zdf8\",\n                \"y\": \"QQRGKwRV9jHSlHjUhOQ0FqdQEddFBPCHZXpoFjvGmcY\"\n            },\n\t\t\t{  \n\t\t\t\t\"kty\": \"EC\",\n\t\t\t\t\"use\": \"sig\",\n\t\t\t\t\"crv\": \"P-521\",\n                \"kid\": \"elliptic-curve-encryption\",\n\t\t\t\t\"x\": \"AfEFyeYAr1TwmvCxvqgWPEg4Vvf50RC2OdkYfTS30dInZwX-Ebn6elp4fQ0GOdOBbYRq9b2gQ79Cd1AytQhdF6To\",\n\t\t\t\t\"y\": \"Abj0w4nSumQWtO6AV7ufQN6VpmJoKlWmz9KB6BUU0ANcj4aTJjBE9WNiGCqFpvaIdEWZWcSsZNYGKT3rJ71AfLdm\"\n\t\t\t},\n\t\t\t{  \n\t\t\t\t\"kty\": \"OKP\",\n\t\t\t\t\"kid\": \"edwards-curve-encryption\",\n\t\t\t\t\"crv\": \"X25519\",\n\t\t\t\t\"x\": \"vBNW8f19leF79U4U6NrDDQaK_i5kL0iMKghB39AUT2I\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"use\": \"sig\",\n\t\t\t\t\"kid\": \"128bits\",\n\t\t\t\t\"k\" : \"p94TA_PhiVUdi_yxPbviAw\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"use\":\"sig\",\n\t\t\t\t\"kid\": \"192bits\",\n\t\t\t\t\"k\" : \"G9jUYv3b0-0wZWCGxAnIUH6gI0kjeXj4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"use\": \"sig\",\n\t\t\t\t\"kid\": \"256bits\",\n\t\t\t\t\"k\" : \"pzx01XDfexcfxHWtk_MzjfCin5NMy3KBx2xtjrX1G-E\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"shared-secret\",\n\t\t\t\t\"k\" : \"weak\"\n\t\t\t}\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PBES2-HS256+A128KW",
							"item": [
								{
									"name": "patch client - PBES2-HS256+A128KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS256+A128KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS256+A128KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS256+A128KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS256+A128KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS256+A128KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS256+A128KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS256+A128KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PBES2-HS384+A192KW",
							"item": [
								{
									"name": "patch client - PBES2-HS384+A192KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS384+A192KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS384+A192KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS384+A192KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS384+A192KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS384+A192KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS384+A192KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS384+A192KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PBES2-HS512+A256KW",
							"item": [
								{
									"name": "patch client - PBES2-HS512+A256KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS512+A256KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS512+A256KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS512+A256KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS512+A256KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS512+A256KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS512+A256KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS512+A256KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - Default and Allowed Scopes",
			"item": [
				{
					"name": "Enable Default and Allowed scopes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR enabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isAllowedScopesEnabled).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowedScopes).to.eql([\"email\"]);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.defaultScopes).to.eql([\"openid\",\"profile\"]);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oidc\": {\n    \"clientRegistrationSettings\": {\n      \"isAllowedScopesEnabled\": true,\n      \"allowedScopes\" : [\n\t\t\"email\"\n\t  ],\n\t  \"defaultScopes\" : [\n\t\t\"openid\",\n\t\t\"profile\"\n\t  ]\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Allowed Scopes filter - scopes reduced",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has default attributes\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('scope');",
									"    pm.expect(body.scope).to.eql('email');//scopes have been filtered to keep only allowed ones",
									"",
									"    pm.environment.set('newClientForDCRTests', body.id);",
									"    pm.environment.set('newClientIdForDCRTests', body.client_id);",
									"    pm.environment.set('newClientSecretForDCRTests', body.client_secret);",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"redirect_uris\":\n     [\"https://client.example.org/callback\",\n      \"https://client.example.org/callback2\"],\n   \"scope\": \"phone email\"\n  }"
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "All scopes rejected - Default scopes applied",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"",
									"    pm.expect(body).to.have.property('scope');",
									"    pm.expect(body.scope).to.eql('openid profile');//no scopes retained, expecting default scopes.",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"scope\": \"phone address\"\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset scope to email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"",
									"    pm.expect(body).to.have.property('scope');",
									"    pm.expect(body.scope).to.eql('email');",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"scope\": \"email\"\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "No scopes - Default scopes applied",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('Client name updated via DCR');",
									"    pm.expect(body.scope).to.eql('openid profile');//no scopes into the request, expecting default scopes.",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"redirect_uris\": [\n        \"https://client.example.org/callback\",\n        \"https://client.example.org/callback2\"\n    ],\n    \"response_types\": [\n        \"code\"\n    ],\n    \"grant_types\": [\n        \"authorization_code\"\n    ],\n    \"application_type\": \"web\",\n    \"contacts\": [\n        \"marie@example.org\",\n        \"jeanne@example.org\"\n    ],\n\t\"client_name\": \"Client name updated via DCR\",\n    \"logo_uri\": \"https://client.example.org/logo.png\",\n    \"subject_type\": \"public\",\n    \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n    \"userinfo_encrypted_response_enc\": \"A128CBC-HS256\",\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"require_auth_time\": false,\n    \"request_uris\": [\n        \"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"\n    ]\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset scope to email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"",
									"    pm.expect(body).to.have.property('scope');",
									"    pm.expect(body.scope).to.eql('email');",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"scope\": \"email\"\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scopes null - Default scopes applied",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"",
									"    pm.expect(body).to.have.property('scope');",
									"    pm.expect(body.scope).to.eql('openid profile');//no scopes retained, expecting default scopes.",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"scope\": null\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete client - with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"organizations",
						"{{defaultOrganizationId}}",
						"environments",
						"{{defaultEnvironmentId}}",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		}
	]
}
