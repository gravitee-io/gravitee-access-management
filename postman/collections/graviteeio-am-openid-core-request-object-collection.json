{
	"info": {
		"_postman_id": "65ce1ff6-a4d2-4495-bcd2-f632216ca7f8",
		"name": "Gravitee.io - AM - Openid Core - Request Object",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31343100"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{management_url}}/management/auth/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create request_object domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"DCR disabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowLocalhostRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowHttpSchemeRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowWildCardRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isOpenDynamicClientRegistrationEnabled).to.eql(false);",
									"    ",
									"    pm.environment.set('domain', jsonData.id);",
									"    pm.environment.set('domainHrid', jsonData.hrid);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"request-object\", \n\t\"description\": \"test request object parameters\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable DCR - non open mode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR enabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oidc\": {\n    \"clientRegistrationSettings\": {\n      \"allowLocalhostRedirectUri\": false,\n      \"allowHttpSchemeRedirectUri\": false,\n      \"allowWildCardRedirectUri\": false,\n      \"isDynamicClientRegistrationEnabled\": true,\n      \"isOpenDynamicClientRegistrationEnabled\": false\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default identity provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"#CoMpL3X-P@SsW0Rd\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities/default-idp-{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities",
								"default-idp-{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create in-memory IDP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('idp.inmemory', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"domainWhitelist\" : [],\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"#CoMpL3X-P@SsW0Rd\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get default certificate ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get default certificate id\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.environment.set('defaultCertificateId', body[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"#CoMpL3X-P@SsW0Rd\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates/{{defaultCertificateId}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates",
								"{{defaultCertificateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jks certificate rs256",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Extension Grant - create jks certificate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('certificateJks', jsonData.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"javakeystore-am-certificate\",\n  \"configuration\": \"{\\\"jks\\\":\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"server.jks\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"size\\\\\\\":3060,\\\\\\\"content\\\\\\\":\\\\\\\"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\\\\\\\"}\\\",\\\"storepass\\\":\\\"letmein\\\",\\\"alias\\\":\\\"mytestkey\\\",\\\"keypass\\\":\\\"letmein\\\", \\\"use\\\" : [\\\"enc\\\", \\\"sig\\\"]}\",\n  \"name\": \"Test\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jks certificate rs256 for encrypted RequetObject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Extension Grant - create jks certificate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('certificateJks', jsonData.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"type\":\"pkcs12-am-certificate\",\"configuration\":\"{\\\"content\\\":\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"client1.jwks.pkcs12\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"size\\\\\\\":2734,\\\\\\\"content\\\\\\\":\\\\\\\"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\\\\\\\"}\\\",\\\"storepass\\\":\\\"changeit\\\",\\\"alias\\\":\\\"client1-jwks\\\",\\\"keypass\\\":\\\"changeit\\\",\\\"algorithm\\\":\\\"RS256\\\", \\\"use\\\" : [\\\"enc\\\", \\\"sig\\\"]}\",\"name\":\"client1-jwks\"}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jks certificate rs512",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Extension Grant - create jks certificate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('certificateJksRs512', jsonData.id);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"javakeystore-am-certificate\",\n  \"configuration\": \"{\\\"jks\\\":\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"server.jks\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"size\\\\\\\":5284,\\\\\\\"content\\\\\\\":\\\\\\\"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\\\\\\\"}\\\",\\\"storepass\\\":\\\"changeme\\\",\\\"alias\\\":\\\"my4096key\\\",\\\"keypass\\\":\\\"changeme\\\"}\",\n  \"name\": \"my4096key\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body).to.have.property(\"authorization_endpoint\");",
									"    pm.expect(body).to.have.property(\"token_endpoint\");",
									"    pm.expect(body).to.have.property(\"revocation_endpoint\");",
									"    pm.expect(body).to.have.property(\"userinfo_endpoint\");",
									"    pm.expect(body).to.have.property(\"registration_endpoint\");",
									"    pm.expect(body).to.have.property(\"registration_renew_secret_endpoint\");",
									"",
									"    pm.environment.set('authorizationEndpoint', body.authorization_endpoint);",
									"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
									"    pm.environment.set('userinfoEndpoint', body.userinfo_endpoint);",
									"    pm.environment.set('revocationEndpoint', body.revocation_endpoint);",
									"    pm.environment.set('registrationEndpoint', body.registration_endpoint);",
									"    pm.environment.set('registrationRenewSecretEndpoint', body.registration_renew_secret_endpoint);",
									"    pm.environment.set('logoutEndpoint', body.end_session_endpoint);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/{{domainHrid}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domainHrid}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create DCR client",
			"item": [
				{
					"name": "Create client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('clientDCR', body.id);",
									"pm.environment.set('clientId', body.settings.oauth.clientId);",
									"pm.environment.set('clientSecret', body.settings.oauth.clientSecret);",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"dcr-client-public-name\",\n  \"type\": \"SERVICE\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure client with DCR enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR enabled for client\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.settings.oauth.scopeSettings[0].scope).to.eql('dcr_admin');",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"settings\": {\n\t\t\"oauth\": {\n\t\t\t\"scopeSettings\": [ {\"scope\" : \"dcr_admin\"}]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{clientDCR}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{clientDCR}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('access_token');",
									"    pm.expect(body.scope).to.eql('dcr_admin');",
									"    ",
									"    pm.environment.set('access_token', body.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clientSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clientId}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "dcr_admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - Invalid requests",
			"item": [
				{
					"name": "Generate token for DCR client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('access_token');",
									"    pm.expect(body.scope).to.eql('dcr_admin');",
									"    ",
									"    pm.environment.set('access_token', body.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clientSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clientId}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "dcr_admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register new client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has default attributes\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('client_rs256');",
									"",
									"    pm.expect(body).to.have.property('client_id');",
									"    pm.expect(body).to.have.property('client_secret');",
									"    ",
									"    pm.environment.set('ro_client_id', body.client_id);",
									"    ",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"client_name\":\"client_rs256\",\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"response_types\": [\"code\",\"token\",\"id_token\"],\n    \"grant_types\": [\"authorization_code\",\"implicit\",\"password\"],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"jwks\": {\n        \"keys\": [\n            {\n            \t\"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"kty\": \"RSA\",\n                \"e\": \"AQAB\",\n                \"n\": \"4-iLfs52Ta-7s3W_X4-E-f8SwigNhOqigF0Mjoce8mWTQGjS9U1kOuSJKnS9c4gf5vZhBB8iGkufMDvl5nwB0JgcihG6QUiN1NT8WPasJLjRTYQmJNCIYBac0oSZfHIUq8C4kmbFbWqXdp3uB-0l9qalD_HlckBt6lJ4VEb-ntbDpWgQnSxtRDzPZgH_kqJ3sNGnXnd5uNcG1W9v0IC-Wz1-kZ1eFM9-HqfnhGLr4yOr1sSeRQTJUaT12ixSKwn7qBJvnSSUlevIao-Zje2wnvTGVAgsEIuGulw0KWH9hLnYecyTPf3YR7v9sv8ff1qpn0LOmOWOfXYvXqteEcdh9w\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "With request and request_uri parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.be.header('Content-Length', '0');",
									"    pm.response.to.have.header('Location');",
									"});",
									"",
									"pm.test(\"Should be a location error\", function() {",
									"    var location = postman.getResponseHeader('Location');",
									"    let domain = pm.environment.get(\"domain\");",
									"    ",
									"    tests['Redirect to redirect_uri'] = location.startsWith(\"https://op-test:60001/authz_cb?error\");",
									"    tests['Contains an error query-parameter'] = location.includes('error=invalid_request');",
									"    tests['Contains an error description query-parameter'] = location.includes('error_description=request+and+request_uri+parameters+must+not+be+use+in+the+same+request');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{ro_client_id}}&redirect_uri=https://op-test:60001/authz_cb&state=1234-5678-9876&request=invalid_jwt&request_uri=invalid_uri&scope=openid",
							"host": [
								"{{authorizationEndpoint}}"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "{{ro_client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "https://op-test:60001/authz_cb"
								},
								{
									"key": "state",
									"value": "1234-5678-9876"
								},
								{
									"key": "request",
									"value": "invalid_jwt"
								},
								{
									"key": "request_uri",
									"value": "invalid_uri"
								},
								{
									"key": "scope",
									"value": "openid"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "With invalid signature algorithm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.be.header('Content-Length', '0');",
									"    pm.response.to.have.header('Location');",
									"});",
									"",
									"pm.test(\"Should be a location error\", function() {",
									"    var location = postman.getResponseHeader('Location');",
									"    let domain = pm.environment.get(\"domainHrid\");",
									"    ",
									"    tests['Redirect to redirect_uri'] = location.startsWith(pm.environment.get('gateway_url') + '/' + domain + '/oauth/error');",
									"    tests['Contains an error query-parameter'] = location.includes('error=invalid_request_object');",
									"    tests['Contains an error description query-parameter'] = location.includes('error_description=Invalid+request+object+signing+algorithm');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{ro_client_id}}&redirect_uri=https://op-test:60001/authz_cb&state=1234-5678-9876&request=eyJraWQiOiJyc2Etc2lnbmF0dXJlIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJhbGljZSIsImlzcyI6Imh0dHBzOlwvXC9jMmlkLmNvbSIsImV4cCI6MTU4ODY4NTc2MX0.sx-QW8xbhMuousR5_j7wNg_HQ-2I4T38uQcvUq7RXh0JaWPEoerMMZVXi6UG_-q_kbF4n93G9hxyVCVzcGKrmyNLE5AaNjmFUe2WgYe4JEO59aUjP9QZ3jdw5O3KhEaH6emUDr05gR1ZdI9XR6R4BxzCKaiCUK16cTl_-_0Hwo4oIKO6lj-1DdpS9sVJ_AyvxrQ8JEdjjTKnZTcTx4wiB7-qYBkmWD8HpeO_621i3dxBms4FbFIp9VfbcPrI9_w8aoLd02Gq9GnQaOqekGSeIW3sX1pWOvUdjbSuWJkREhZZJSO00b48UQdLAJgb8mn-Bl9Jvt7JFy-9erXxi6fU_w&scope=openid",
							"host": [
								"{{authorizationEndpoint}}"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "{{ro_client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "https://op-test:60001/authz_cb"
								},
								{
									"key": "state",
									"value": "1234-5678-9876"
								},
								{
									"key": "request",
									"value": "eyJraWQiOiJyc2Etc2lnbmF0dXJlIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJhbGljZSIsImlzcyI6Imh0dHBzOlwvXC9jMmlkLmNvbSIsImV4cCI6MTU4ODY4NTc2MX0.sx-QW8xbhMuousR5_j7wNg_HQ-2I4T38uQcvUq7RXh0JaWPEoerMMZVXi6UG_-q_kbF4n93G9hxyVCVzcGKrmyNLE5AaNjmFUe2WgYe4JEO59aUjP9QZ3jdw5O3KhEaH6emUDr05gR1ZdI9XR6R4BxzCKaiCUK16cTl_-_0Hwo4oIKO6lj-1DdpS9sVJ_AyvxrQ8JEdjjTKnZTcTx4wiB7-qYBkmWD8HpeO_621i3dxBms4FbFIp9VfbcPrI9_w8aoLd02Gq9GnQaOqekGSeIW3sX1pWOvUdjbSuWJkREhZZJSO00b48UQdLAJgb8mn-Bl9Jvt7JFy-9erXxi6fU_w"
								},
								{
									"key": "scope",
									"value": "openid"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch client -  with request_object_signing_alg RS256",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body.request_object_signing_alg).to.eql('RS256');",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"request_object_signing_alg\": \"RS256\"\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "With invalid client_id in request object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.be.header('Content-Length', '0');",
									"    pm.response.to.have.header('Location');",
									"});",
									"",
									"pm.test(\"Should be a location error\", function() {",
									"    var location = postman.getResponseHeader('Location');",
									"    let domain = pm.environment.get(\"domain\");",
									"    ",
									"    tests['Redirect to redirect_uri'] = location.startsWith(\"https://op-test:60001/authz_cb?error\");",
									"    tests['Contains an error query-parameter'] = location.includes('error=invalid_request_object');",
									"    tests['Contains an error description query-parameter'] = location.includes('error_description=client_id+does+not+match+request+parameter');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{ro_client_id}}&redirect_uri=https://op-test:60001/authz_cb&state=1234-5678-9876&request=eyJraWQiOiJyc2Etc2lnbmF0dXJlIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJhbGljZSIsImlzcyI6Imh0dHBzOlwvXC9jMmlkLmNvbSIsImV4cCI6MTU4ODY4NTg3NiwiY2xpZW50X2lkIjoidW5rbm93bl9jbGllbnQifQ.XN-Fgy6M9aBJPwWsatQ9qgtf0sfWCo0hzDqe2-HHeMzJHFpj3pe0Yp--VLxlSG1LxzpqfCBL6QuHzUH6Rslz_tYhobOY13054-xkuQMDdbtjgFlKtdoMh15tKdPJCqPIMdaWpsi9bV2qiXYPVIYuE9ywmt_UETh5Hs166IgZ_SkITxfPf1LOuk0jQVkr-eppe1qymqHCzXBSXeVcVyP55sPTjEpNk5d-hsv3Z35Q6sdG3tpg688k-157coJHCpoMKGwLAVC9RscgqaDf30Mhyg4uejqLyenMb-ImWkIhc1i7HWfbwea5-d7o0NeVjKpE2HYORbp93QRKZrDXN8ckxw&scope=openid",
							"host": [
								"{{authorizationEndpoint}}"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "{{ro_client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "https://op-test:60001/authz_cb"
								},
								{
									"key": "state",
									"value": "1234-5678-9876"
								},
								{
									"key": "request",
									"value": "eyJraWQiOiJyc2Etc2lnbmF0dXJlIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJhbGljZSIsImlzcyI6Imh0dHBzOlwvXC9jMmlkLmNvbSIsImV4cCI6MTU4ODY4NTg3NiwiY2xpZW50X2lkIjoidW5rbm93bl9jbGllbnQifQ.XN-Fgy6M9aBJPwWsatQ9qgtf0sfWCo0hzDqe2-HHeMzJHFpj3pe0Yp--VLxlSG1LxzpqfCBL6QuHzUH6Rslz_tYhobOY13054-xkuQMDdbtjgFlKtdoMh15tKdPJCqPIMdaWpsi9bV2qiXYPVIYuE9ywmt_UETh5Hs166IgZ_SkITxfPf1LOuk0jQVkr-eppe1qymqHCzXBSXeVcVyP55sPTjEpNk5d-hsv3Z35Q6sdG3tpg688k-157coJHCpoMKGwLAVC9RscgqaDf30Mhyg4uejqLyenMb-ImWkIhc1i7HWfbwea5-d7o0NeVjKpE2HYORbp93QRKZrDXN8ckxw"
								},
								{
									"key": "scope",
									"value": "openid"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Case - Invalid requests - forbidden request_uri",
			"item": [
				{
					"name": "Generate token for DCR client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('access_token');",
									"    pm.expect(body.scope).to.eql('dcr_admin');",
									"    ",
									"    pm.environment.set('access_token', body.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clientSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clientId}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "dcr_admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register new client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has default attributes\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('client_request_uri');",
									"",
									"    pm.expect(body).to.have.property('client_id');",
									"    pm.expect(body).to.have.property('client_secret');",
									"    ",
									"    pm.environment.set('ro_client_id', body.client_id);",
									"    ",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"client_name\":\"client_request_uri\",\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"response_types\": [\"code\",\"token\",\"id_token\"],\n    \"grant_types\": [\"authorization_code\",\"implicit\",\"password\"],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"request_uris\": [\"https://op-test:60001/request/uri\"],\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"jwks\": {\n        \"keys\": [\n            {\n            \t\"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"kty\": \"RSA\",\n                \"e\": \"AQAB\",\n                \"n\": \"4-iLfs52Ta-7s3W_X4-E-f8SwigNhOqigF0Mjoce8mWTQGjS9U1kOuSJKnS9c4gf5vZhBB8iGkufMDvl5nwB0JgcihG6QUiN1NT8WPasJLjRTYQmJNCIYBac0oSZfHIUq8C4kmbFbWqXdp3uB-0l9qalD_HlckBt6lJ4VEb-ntbDpWgQnSxtRDzPZgH_kqJ3sNGnXnd5uNcG1W9v0IC-Wz1-kZ1eFM9-HqfnhGLr4yOr1sSeRQTJUaT12ixSKwn7qBJvnSSUlevIao-Zje2wnvTGVAgsEIuGulw0KWH9hLnYecyTPf3YR7v9sv8ff1qpn0LOmOWOfXYvXqteEcdh9w\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "With forbidden request_uri parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.be.header('Content-Length', '0');",
									"    pm.response.to.have.header('Location');",
									"});",
									"",
									"pm.test(\"Should be a location error\", function() {",
									"    var location = postman.getResponseHeader('Location');",
									"    let domain = pm.environment.get(\"domain\");",
									"    ",
									"    tests['Redirect to redirect_uri'] = location.startsWith(\"https://op-test:60001/authz_cb?error\");",
									"    tests['Contains an error query-parameter'] = location.includes('error=invalid_request_uri');",
									"    tests['Contains an error description query-parameter'] = location.includes('error_description=The+request_uri+MUST+match+the+registered+URL+for+this+application');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{ro_client_id}}&redirect_uri=https://op-test:60001/authz_cb&state=1234-5678-9876&scope=openid&request_uri=https://somewhere",
							"host": [
								"{{authorizationEndpoint}}"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "{{ro_client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "https://op-test:60001/authz_cb"
								},
								{
									"key": "state",
									"value": "1234-5678-9876"
								},
								{
									"key": "scope",
									"value": "openid"
								},
								{
									"key": "request_uri",
									"value": "https://somewhere"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Case - Nominal - Signed Request Object",
			"item": [
				{
					"name": "Generate token for DCR client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('access_token');",
									"    pm.expect(body.scope).to.eql('dcr_admin');",
									"    ",
									"    pm.environment.set('access_token', body.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clientSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clientId}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "dcr_admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register new client - RS256",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has default attributes\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('client_rs256');",
									"",
									"    pm.expect(body).to.have.property('client_id');",
									"    pm.expect(body).to.have.property('client_secret');",
									"    pm.expect(body.request_object_signing_alg).to.eql('RS256');",
									"    ",
									"    pm.environment.set('ro_client_id', body.client_id);",
									"    ",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_name\": \"client_rs256\",\n    \"redirect_uris\": [\n        \"https://op-test:60001/authz_cb\",\n        \"https://op-test-from-query-param:60001/authz_cb\"\n    ],\n    \"application_type\": \"web\",\n    \"contacts\": [\n        \"roland@example.com\"\n    ],\n    \"response_types\": [\n        \"code\",\n        \"token\",\n        \"id_token\"\n    ],\n    \"grant_types\": [\n        \"authorization_code\",\n        \"implicit\",\n        \"password\"\n    ],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\n        \"https://op-test:60001/logout\"\n    ],\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"request_object_signing_alg\": \"RS256\",\n    \"jwks\": {\n        \"keys\": [\n            {\n            \t\"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"kty\": \"RSA\",\n                \"e\": \"AQAB\",\n                \"n\": \"4-iLfs52Ta-7s3W_X4-E-f8SwigNhOqigF0Mjoce8mWTQGjS9U1kOuSJKnS9c4gf5vZhBB8iGkufMDvl5nwB0JgcihG6QUiN1NT8WPasJLjRTYQmJNCIYBac0oSZfHIUq8C4kmbFbWqXdp3uB-0l9qalD_HlckBt6lJ4VEb-ntbDpWgQnSxtRDzPZgH_kqJ3sNGnXnd5uNcG1W9v0IC-Wz1-kZ1eFM9-HqfnhGLr4yOr1sSeRQTJUaT12ixSKwn7qBJvnSSUlevIao-Zje2wnvTGVAgsEIuGulw0KWH9hLnYecyTPf3YR7v9sv8ff1qpn0LOmOWOfXYvXqteEcdh9w\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Do not override state and nonce",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.have.header('Location');",
									"});",
									"",
									"pm.test(\"Should redirect to login\", function() {",
									"    var location = postman.getResponseHeader('Location');",
									"    let domain = pm.environment.get(\"domainHrid\");",
									"    ",
									"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=' + pm.environment.get('ro_client_id'));",
									"",
									"    pm.environment.set('redirection', location);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{ro_client_id}}&redirect_uri=https://op-test-from-query-param:60001/authz_cb&state=1234-5678-9876&request=eyJraWQiOiJyc2Etc2lnbmF0dXJlIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJhbGljZSIsImlzcyI6Imh0dHBzOlwvXC9jMmlkLmNvbSIsInN0YXRlIjoib3ZlcnJpZGUtc3RhdGUiLCJleHAiOjE1ODg2ODExMDAsIm5vbmNlIjoib3ZlcnJpZGUtbm9uY2UifQ.uQLxFiaReQwWqT-TnMXPNrIMdEaHMDlar90iuv_ub3njH1hTNIYV_IdRWs-2Skx5e9tYxnSNt7swHPE1aLKnnmylo52sa2-d7gOxkIiGzsnET8io-_AQsSocl25x8IiXP6IYyUSclVHFUNc_hjcbWkgw2oNXH8f6gx_z7nMahMbEW0L2XlA7fq7SZXzZE78hd9VZ3IaVVUHV90CafYt7kf_Y3Y7VpqoNPXpmfjLQKGWi9tXwmwfoS2OgqlrnXr5kVUiPhbO1OernunlZW7E3er3hBtguhYNzgtXU2iZQEjUD-rPfrnEJdNxdCxq8DnSgKJxBIzabjaJLG5BdgVD7qw&scope=openid&nonce=n-0S6_WzA2Mj&max_age=120000",
							"host": [
								"{{authorizationEndpoint}}"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "{{ro_client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "https://op-test-from-query-param:60001/authz_cb"
								},
								{
									"key": "state",
									"value": "1234-5678-9876"
								},
								{
									"key": "request",
									"value": "eyJraWQiOiJyc2Etc2lnbmF0dXJlIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJhbGljZSIsImlzcyI6Imh0dHBzOlwvXC9jMmlkLmNvbSIsInN0YXRlIjoib3ZlcnJpZGUtc3RhdGUiLCJleHAiOjE1ODg2ODExMDAsIm5vbmNlIjoib3ZlcnJpZGUtbm9uY2UifQ.uQLxFiaReQwWqT-TnMXPNrIMdEaHMDlar90iuv_ub3njH1hTNIYV_IdRWs-2Skx5e9tYxnSNt7swHPE1aLKnnmylo52sa2-d7gOxkIiGzsnET8io-_AQsSocl25x8IiXP6IYyUSclVHFUNc_hjcbWkgw2oNXH8f6gx_z7nMahMbEW0L2XlA7fq7SZXzZE78hd9VZ3IaVVUHV90CafYt7kf_Y3Y7VpqoNPXpmfjLQKGWi9tXwmwfoS2OgqlrnXr5kVUiPhbO1OernunlZW7E3er3hBtguhYNzgtXU2iZQEjUD-rPfrnEJdNxdCxq8DnSgKJxBIzabjaJLG5BdgVD7qw"
								},
								{
									"key": "scope",
									"value": "openid"
								},
								{
									"key": "nonce",
									"value": "n-0S6_WzA2Mj"
								},
								{
									"key": "max_age",
									"value": "120000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Redirect to login form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should be ok\", function () {",
									"    pm.response.to.be.ok;",
									"    ",
									"    // Extract the XSRF token to send it with the next request.",
									"    var responseHTML = cheerio.load(pm.response.text());",
									"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
									"    const action = responseHTML('form').attr('action');",
									"    pm.environment.set('xsrf', xsrfToken);",
									"    pm.environment.set('action', action);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{redirection}}",
							"host": [
								"{{redirection}}"
							]
						},
						"description": "The client does not have a redirect_uri define"
					},
					"response": []
				},
				{
					"name": "Post login form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.have.header('Location');",
									"",
									"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "X-XSRF-TOKEN",
									"value": "{{xsrf}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{ro_client_id}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "#CoMpL3X-P@SsW0Rd",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{action}}",
							"host": [
								"{{action}}"
							]
						},
						"description": "The client does not have a redirect_uri define"
					},
					"response": []
				},
				{
					"name": "Redirect after login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.have.header('Location');",
									"",
									"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{redirection}}",
							"host": [
								"{{redirection}}"
							]
						},
						"description": "The client does not have a redirect_uri define"
					},
					"response": []
				},
				{
					"name": "Redirect to consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should be ok\", function () {",
									"    pm.response.to.be.ok;",
									"    ",
									"    // Extract the XSRF token to send it with the next request.",
									"    var responseHTML = cheerio.load(pm.response.text());",
									"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
									"    const action = responseHTML('form').attr('action');",
									"    pm.environment.set('xsrf', xsrfToken);",
									"    pm.environment.set('action', action);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{redirection}}",
							"host": [
								"{{redirection}}"
							]
						},
						"description": "The client does not have a redirect_uri define"
					},
					"response": []
				},
				{
					"name": "Post consent form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.have.header('Location');",
									"",
									"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "X-XSRF-TOKEN",
									"value": "{{xsrf}}",
									"type": "text"
								},
								{
									"key": "scope.openid",
									"value": "true",
									"type": "text"
								},
								{
									"key": "user_oauth_approval",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{action}}",
							"host": [
								"{{action}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Redirect after consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected to client app\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.have.header('Location');",
									"",
									"   const location = postman.getResponseHeader(\"Location\");",
									"",
									"    // State must come from request object",
									"    tests['Contains the request object state'] = location.includes('state=override-state');",
									"    ",
									"    // Redirect uri must match the one specified in query params.",
									"    tests['Redirect to query param redirect_uri'] = location.includes('https://op-test-from-query-param:60001/authz_cb');",
									"",
									"    // Redirect uri must match the one specified in query params.",
									"    tests['Contains a code'] = location.includes('code=');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{redirection}}",
							"host": [
								"{{redirection}}"
							]
						},
						"description": "The client does not have a redirect_uri define"
					},
					"response": []
				},
				{
					"name": "Use redirect_uri from request_object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.have.header('Location');",
									"});",
									"",
									"pm.test(\"Should be redirected to client app\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.have.header('Location');",
									"",
									"   const location = postman.getResponseHeader(\"Location\");",
									"",
									"    // State must come from request object",
									"    tests['Contains the request object state'] = location.includes('state=1234-5678-9876');",
									"    ",
									"    // Redirect uri must match the one specified in query params.",
									"    tests['Redirect to query param redirect_uri'] = location.includes('https://op-test:60001/authz_cb');",
									"",
									"    // Redirect uri must match the one specified in query params.",
									"    tests['Contains a code'] = location.includes('code=');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{ro_client_id}}&redirect_uri=http://unknown_but_overriden_uri/&state=1234-5678-9876&request=eyJraWQiOiJyc2Etc2lnbmF0dXJlIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJhbGljZSIsImlzcyI6Imh0dHBzOlwvXC9jMmlkLmNvbSIsInJlZGlyZWN0X3VyaSI6Imh0dHBzOlwvXC9vcC10ZXN0OjYwMDAxXC9hdXRoel9jYiIsImV4cCI6MTU4ODY4MTEzNX0.anyAlDScD_4qQjaj2mejrgG7sV_t9Dbhw9aloaCv7zNhZ0OL1BHBemvQ4zN6yXwvCd9IXOM7_uC6ayquxENnBF8bl53ukNVgzE3x52TEBap6ckXoDEaIdWWB7JukrofH_X0vXwBa2QH3tYSp4BRnXUCbvctADm-gTGv_qNDvZHOCmhSMYdN7HwVkWX5yfYDthQ-F7eS-ZbUH1jQqOAk5QI597p-wxdUq7k6IppQ3_g_x9K-bTZ2FfqkG4izHG0USl3VoyP5_gItPi7m6htKASw6y_L9l1twWAfEdI-uJbdYC4P-3p3fR92tlc_TPBLgpiLe6D4gt8CeUM5jBIsUZkw&scope=openid&nonce=n-0S6_WzA2Mj",
							"host": [
								"{{authorizationEndpoint}}"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "{{ro_client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "http://unknown_but_overriden_uri/"
								},
								{
									"key": "state",
									"value": "1234-5678-9876"
								},
								{
									"key": "request",
									"value": "eyJraWQiOiJyc2Etc2lnbmF0dXJlIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJhbGljZSIsImlzcyI6Imh0dHBzOlwvXC9jMmlkLmNvbSIsInJlZGlyZWN0X3VyaSI6Imh0dHBzOlwvXC9vcC10ZXN0OjYwMDAxXC9hdXRoel9jYiIsImV4cCI6MTU4ODY4MTEzNX0.anyAlDScD_4qQjaj2mejrgG7sV_t9Dbhw9aloaCv7zNhZ0OL1BHBemvQ4zN6yXwvCd9IXOM7_uC6ayquxENnBF8bl53ukNVgzE3x52TEBap6ckXoDEaIdWWB7JukrofH_X0vXwBa2QH3tYSp4BRnXUCbvctADm-gTGv_qNDvZHOCmhSMYdN7HwVkWX5yfYDthQ-F7eS-ZbUH1jQqOAk5QI597p-wxdUq7k6IppQ3_g_x9K-bTZ2FfqkG4izHG0USl3VoyP5_gItPi7m6htKASw6y_L9l1twWAfEdI-uJbdYC4P-3p3fR92tlc_TPBLgpiLe6D4gt8CeUM5jBIsUZkw"
								},
								{
									"key": "scope",
									"value": "openid"
								},
								{
									"key": "nonce",
									"value": "n-0S6_WzA2Mj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.have.header('Location');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{logoutEndpoint}}",
							"host": [
								"{{logoutEndpoint}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Case - Nominal - Encrypted Request Object",
			"item": [
				{
					"name": "Generate token for DCR client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('access_token');",
									"    pm.expect(body.scope).to.eql('dcr_admin');",
									"    ",
									"    pm.environment.set('access_token', body.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clientSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clientId}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "dcr_admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register new client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has default attributes\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('client_rs256');",
									"",
									"    pm.expect(body).to.have.property('client_id');",
									"    pm.expect(body).to.have.property('client_secret');",
									"    pm.expect(body.request_object_signing_alg).to.eql('RS256');",
									"    ",
									"    pm.environment.set('ro_client_id', body.client_id);",
									"    ",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_name\": \"client_rs256\",\n    \"redirect_uris\": [\n        \"https://op-test:60001/authz_cb\",\n        \"https://op-test-from-query-param:60001/authz_cb\"\n    ],\n    \"application_type\": \"web\",\n    \"contacts\": [\n        \"roland@example.com\"\n    ],\n    \"response_types\": [\n        \"code\",\n        \"token\",\n        \"id_token\"\n    ],\n    \"grant_types\": [\n        \"authorization_code\",\n        \"implicit\",\n        \"password\"\n    ],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\n        \"https://op-test:60001/logout\"\n    ],\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"request_object_signing_alg\": \"RS256\",\n    \"jwks\": {\n        \"keys\": [\n        \t{\n            \t\"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"kty\": \"RSA\",\n                \"e\": \"AQAB\",\n                \"n\": \"4-iLfs52Ta-7s3W_X4-E-f8SwigNhOqigF0Mjoce8mWTQGjS9U1kOuSJKnS9c4gf5vZhBB8iGkufMDvl5nwB0JgcihG6QUiN1NT8WPasJLjRTYQmJNCIYBac0oSZfHIUq8C4kmbFbWqXdp3uB-0l9qalD_HlckBt6lJ4VEb-ntbDpWgQnSxtRDzPZgH_kqJ3sNGnXnd5uNcG1W9v0IC-Wz1-kZ1eFM9-HqfnhGLr4yOr1sSeRQTJUaT12ixSKwn7qBJvnSSUlevIao-Zje2wnvTGVAgsEIuGulw0KWH9hLnYecyTPf3YR7v9sv8ff1qpn0LOmOWOfXYvXqteEcdh9w\"\n            },\n            {\n                \"use\": \"enc\",\n                \"kid\": \"rsa-encryption\",\n                \"p\":\"yrQb4NgK6Tl7hQ7--ttdIWPMe2WDC_L4Y2P2PLZX-Kt_SsDO0nuQS_sdCoigkHiS_hC73fuVFhmR99-rKACwUDNxNF6PMlqIBB6bbnprbU7tv7SNdxD1k64eXfbk4JV5wp34zQIhiRDMY_04yopFRmu1Zx_ENmZ7-zteihPFdrM\",\n                \"kty\":\"RSA\",\n                \"q\":\"vIqSFMCFFJXAwVnxKjYP-1uPHn9A2CeBDEBWd-A2PC51ZxyhZrqw55J_3j3L7OgHUTbdrhtbdj8JyMlTcuELJvVt8xYSWT3dmDQoOdPuOmr4e4wynyIe9w4IMVRVIX1HIfNZcf8YlMzar7hxqCzDZ9IqfOMXBalayUUGhPwZV6s\",\n                \"d\":\"B2RTepUrNcD1ZA6M3duV3oG3GLLhbb8JvHOKPjaHcRBgNEofrbVZsYHxXzaEGfu2Xmv8-nKiZQGOhslPQmNQsa69WnpnP_NfsvAUbi3OFnKL_uIzWkU80gaPZiAtxbV4P9cgImCMxEMyvCLp0Q-wfvzj5bsMN9pVflHGIKK8KzRfbyJ73eIzMq5DRN-xYHbgrv_fhne8gEQhrnpL-dVozhCxYBiPcXpC9qP96Xm7HFvJzh5Dyc2oswkzPT9d1VuSBeArL2dSt2-79lIjLcTjPilBs4kxCS03Quv8yu1lxfAMbFxliCPfaIzwS16M3ZQtU-L4F28Tou2l51vajnijJQ\",\n                \"e\":\"AQAB\",\n                \"qi\":\"SeUeCdB1I6kYZGmOISpMn_mAnoRJNIqMeLdpUqruT4kx502tCj26VrD-86sAGjz3JcALE1JP7aXDc9gTKzNQU_92KzpbkHyHnRVDc2y6-aZOCROEhChj_HEYrpp2oLiMh5ayLNuxDDqdpaslZE6oILtQ9Ad5RTs7oaZwarMJwr0\",\n                \"dp\":\"rv8tLkD1soGozKe0o9esID5rc4Cg0TkTDaNoGuQFMK7GN0AbjgWU_rOtT8HCdNdTd7n0puEixbCPnyJfPirSDHtM2TxlfcBAuuW9pHRVuEmy4ZU7qDZg_P0ORGr5D5acRtNgz4RudUmmWxBq7hjPU8t7EauQFrMFiFCp_qSxDhc\",\n                \"dq\":\"Mx_0KrJlo8ZTxVpJPeP5A3S5Y1CoWbSklpjfmZPvwPPsG_C0h3G6RKECEVZ6dJwaV9hj1jFO5MqFMa_989m4N3E3xkHG6fIPo5UJD107bRXSmVXT6DjNYrqoWBABIZqh7j_ZkkLU_IxsBFgkYbD5r65anRDLDlr05jzUXr0pdg8\",\n                \"n\":\"lUn9O0xFVrbNCbLq9-jxQTWxdSaWajk71nJJ0nZPBCqzcyCUTRQR5Z8xFQ4RPM9aLrs9LLNOT1wvrU9J5Ym_3JzCKr1Q5AsEXRLOFSlH46ZB6FkqPl7BOU36N1kPN47eGfwNsA8UVsbiDEd4nymKWUF4W24MYMNweHyusjP5Ne5UUlEa8LBDnkfeNMnS4GBX_BGQdCFLh3jhNqPWIHyV2GrUKm43AYhRDPBXGdyjuamMaZtu58xgiauhnNB13D3m0zYs3YRJTugMWjAXsTST2X63VNvmvIcL9_gmSKNh33Xld78bT0gfooMXNIJ4Fvfem03w-yNs0RCAk8hgG7gekQ\"\n                }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Request Object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.have.header('Location');",
									"});",
									"",
									"pm.test(\"Should be a location error\", function() {",
									"    var location = postman.getResponseHeader('Location');",
									"    let domain = pm.environment.get(\"domainHrid\");",
									"    ",
									"    tests['Redirect to default error page (invalid redirect_uri)'] = location.startsWith(pm.environment.get('gateway_url') + '/' + domain + '/oauth/error');",
									"    tests['Contains an error query-parameter'] = location.includes('error=invalid_request_object');",
									"    tests['Contains an error description query-parameter'] = location.includes('error_description=Malformed+request+object');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{ro_client_id}}&redirect_uri=http://unknown-redirect-uri/&state=1234-5678-9876&request=eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.bxamyCBh3pGbKbUARGC7G53RV0cqhJCpe-IRYP8eC_7mnoZEMQBQGhGKeAJSEXEAWwftSLUhVspJjDX_76_FmmpeTAa7oCdHKaHwAMAP8oqZmlnQwXR8nsmuaz_kPCnsaQbIdKpG90uXOVVNqH6vho9wtqV_WjbFZkDa7y52ox5e2BII2fjHq_LbpIaFuMgepPiQ3u6q9n3SKCsjrxAVac8xFVip_8BpQQ2N64rWAv-oT1WdzQJrJjiq08AU9vWY_zv7efxGJVeVAUBRjOaBev4mtmB5yA48SySJZ07fKXfqfPIy_3vRiOYqzh-OmvJDDBW1ae8ohZDUUdGhUxxBcrC9LiLB_oBfaIen3pFn5hpap6KDv3flKXQcPv6uGSOA4EJ7dMW57YkBBSKIyDFjmUNGRc8ORK-y2Mom4KSz7DJUZdzzmDZ8yLEEWym-SC5qRX12WJkGRu-D5AwUbaY3yS3AVLHtyItbHwbt0rU95fyWYGjxPeV4SxGhAquE8SVD-2VIBOTTYcpd6fxpeN0fayTTYkTuwVJxiOESkq8lhLK4v53x0zKkh5xgY6Iuo1Ruw6Iqza7u8q8aSip3CjnfY6sBHJqvbJXdXHSH3PAqBINvoZ1y-_QmtO_lBpkO_LFXPiWSOL5PDk3_DRUCMYgVisFtLUJDm9AW1FoSy_v5Z78.CfO3odeR-Xy1usX-wyETdw.QLOzyczHALX3rU0jQcP6057qHnGtQ80O6M5bIOuhyZ5Uj4iQxrdh2OSjuebHTSs2oeP3waBrKNIVCfrn26asho3s4xgL1_HmYbhhTDsWvAtLSKjqXW3lonshBiv0WkqRpm0OlZ_6adowfWEJhHIRZkYyKClETf4kYRn3oWrhB5NLatexz3zDxxfccLJL7IIEJLnIJGZxZvlFGwQcWV65u2ioZ3irrxl6Bi8tpcRZGaIfTVNFMhyviIHj2ogiXf37J2ImqWaNtWVAl1XiFmKqNaTSq7ZVe8n2xVlfZ51VlLQse-xPO2oHxUCWeVXUB3IQ.IvTA1DphtWuceEj5pb2hpQ&scope=openid&nonce=n-0S6_WzA2Mj",
							"host": [
								"{{authorizationEndpoint}}"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "{{ro_client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "http://unknown-redirect-uri/"
								},
								{
									"key": "state",
									"value": "1234-5678-9876"
								},
								{
									"key": "request",
									"value": "eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.bxamyCBh3pGbKbUARGC7G53RV0cqhJCpe-IRYP8eC_7mnoZEMQBQGhGKeAJSEXEAWwftSLUhVspJjDX_76_FmmpeTAa7oCdHKaHwAMAP8oqZmlnQwXR8nsmuaz_kPCnsaQbIdKpG90uXOVVNqH6vho9wtqV_WjbFZkDa7y52ox5e2BII2fjHq_LbpIaFuMgepPiQ3u6q9n3SKCsjrxAVac8xFVip_8BpQQ2N64rWAv-oT1WdzQJrJjiq08AU9vWY_zv7efxGJVeVAUBRjOaBev4mtmB5yA48SySJZ07fKXfqfPIy_3vRiOYqzh-OmvJDDBW1ae8ohZDUUdGhUxxBcrC9LiLB_oBfaIen3pFn5hpap6KDv3flKXQcPv6uGSOA4EJ7dMW57YkBBSKIyDFjmUNGRc8ORK-y2Mom4KSz7DJUZdzzmDZ8yLEEWym-SC5qRX12WJkGRu-D5AwUbaY3yS3AVLHtyItbHwbt0rU95fyWYGjxPeV4SxGhAquE8SVD-2VIBOTTYcpd6fxpeN0fayTTYkTuwVJxiOESkq8lhLK4v53x0zKkh5xgY6Iuo1Ruw6Iqza7u8q8aSip3CjnfY6sBHJqvbJXdXHSH3PAqBINvoZ1y-_QmtO_lBpkO_LFXPiWSOL5PDk3_DRUCMYgVisFtLUJDm9AW1FoSy_v5Z78.CfO3odeR-Xy1usX-wyETdw.QLOzyczHALX3rU0jQcP6057qHnGtQ80O6M5bIOuhyZ5Uj4iQxrdh2OSjuebHTSs2oeP3waBrKNIVCfrn26asho3s4xgL1_HmYbhhTDsWvAtLSKjqXW3lonshBiv0WkqRpm0OlZ_6adowfWEJhHIRZkYyKClETf4kYRn3oWrhB5NLatexz3zDxxfccLJL7IIEJLnIJGZxZvlFGwQcWV65u2ioZ3irrxl6Bi8tpcRZGaIfTVNFMhyviIHj2ogiXf37J2ImqWaNtWVAl1XiFmKqNaTSq7ZVe8n2xVlfZ51VlLQse-xPO2oHxUCWeVXUB3IQ.IvTA1DphtWuceEj5pb2hpQ"
								},
								{
									"key": "scope",
									"value": "openid"
								},
								{
									"key": "nonce",
									"value": "n-0S6_WzA2Mj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Do not override state and nonce",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.have.header('Location');",
									"});",
									"",
									"pm.test(\"Should redirect to login\", function() {",
									"    var location = postman.getResponseHeader('Location');",
									"    let domain = pm.environment.get(\"domainHrid\");",
									"    ",
									"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=' + pm.environment.get('ro_client_id'));",
									"    ",
									"    pm.environment.set('redirection', location);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{ro_client_id}}&redirect_uri=https://op-test-from-query-param:60001/authz_cb&state=1234-5678-9876&request=eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.TcYFciRRD6TY2TVSHevgsOZSQxf95ipJWSeKsHlzcVnQPvsAkYKX4fhIBB6PHI2U2wsb1P3rzOVYEKYSM-ZXF0Zf-qifXm4nmeAZ2oSJp9ficPL7nIlx9m3rSgEmPlfbGA567XPiTkYUmE0CioVmKvwpxw1F8zpADKANwynirNFduwosHSMHkfUYcSkCoD2kGnI6wYYF5mvPur6jT8EMN9sTrSaoR7YkUubi8gtPK5uMAUUvkDA6f3mOioYFPimZzdDCvS06hQpaTW4yqm9i-UWDZCLEYWRRx5GXCmlBfjBC5AMOmHcVrj6Yo_xn-MT09G3dgiK5s36pDqa00Z3SBA.U4WPt-Zk7biz8scO5UbjjQ.RJCU0SzZ2Frz55HztJgBg_g-ywc2iY6Og05uB5vNdTbuZYM7QysYqdC60y5zppswKw6aaq16DC5roXirHBWfAVPEYJ4dwR95oBQTiGBZgs88HtyiQzHem1XvoDY61O9DqepVEJEgS-JSx-2SxFPCRtvbdatBYVnvQHycyQRQIW7uT6KIP_T16Clwyr5NNJOq6mSiVrqXRyfzLUuUFjGwFKgUPhJoomXepPbcssxscg9beI9JxUIvteLApw43TCF6MR_djkHlHpsXDr5iE40_NwalYIon1I1nkZD4oQ38wyuU8qh0vg_ceMGtXcv81TsLf1St3RnmcCpNiY5wKa6O1YKa15j7LPqJUWM7L8cA6gHqu_hLD4edGMsJwltSrLtLhXM4jzpbpf80UWf_zHJ9a9Bj2Tn4lGcA7scgaG9nKHVrCsghh3vEivxHOPFPCD4yafk74emThGfVeYCl7VmCNIyETFfHwzN8ta2BlaGcnxQhYfrpV1uh_54IHiwWv83ixHEAmXBTLL0bh4Bq-GECXm5lcto2j7v4KK0ZzRevjR96puR9992Ui5gFacC0SZTGx6NtIQRyd9DpIJCZ7ExrvGIsqObm-fpdihmXH9V8JGl2WvOSL2RjRqLLdcsRHd9vDZlUI0kKOMSkWPofS9n5u2m1iHUVnkuZPLUCzjaMQnUYgjSoPdefLFQ9nb3YqQkVDpUaCssGj2aGZthR8uL9-w.u6TAAEzedsTH8SmLa9elCQ&scope=openid&nonce=n-0S6_WzA2Mj",
							"host": [
								"{{authorizationEndpoint}}"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "{{ro_client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "https://op-test-from-query-param:60001/authz_cb"
								},
								{
									"key": "state",
									"value": "1234-5678-9876"
								},
								{
									"key": "request",
									"value": "eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.TcYFciRRD6TY2TVSHevgsOZSQxf95ipJWSeKsHlzcVnQPvsAkYKX4fhIBB6PHI2U2wsb1P3rzOVYEKYSM-ZXF0Zf-qifXm4nmeAZ2oSJp9ficPL7nIlx9m3rSgEmPlfbGA567XPiTkYUmE0CioVmKvwpxw1F8zpADKANwynirNFduwosHSMHkfUYcSkCoD2kGnI6wYYF5mvPur6jT8EMN9sTrSaoR7YkUubi8gtPK5uMAUUvkDA6f3mOioYFPimZzdDCvS06hQpaTW4yqm9i-UWDZCLEYWRRx5GXCmlBfjBC5AMOmHcVrj6Yo_xn-MT09G3dgiK5s36pDqa00Z3SBA.U4WPt-Zk7biz8scO5UbjjQ.RJCU0SzZ2Frz55HztJgBg_g-ywc2iY6Og05uB5vNdTbuZYM7QysYqdC60y5zppswKw6aaq16DC5roXirHBWfAVPEYJ4dwR95oBQTiGBZgs88HtyiQzHem1XvoDY61O9DqepVEJEgS-JSx-2SxFPCRtvbdatBYVnvQHycyQRQIW7uT6KIP_T16Clwyr5NNJOq6mSiVrqXRyfzLUuUFjGwFKgUPhJoomXepPbcssxscg9beI9JxUIvteLApw43TCF6MR_djkHlHpsXDr5iE40_NwalYIon1I1nkZD4oQ38wyuU8qh0vg_ceMGtXcv81TsLf1St3RnmcCpNiY5wKa6O1YKa15j7LPqJUWM7L8cA6gHqu_hLD4edGMsJwltSrLtLhXM4jzpbpf80UWf_zHJ9a9Bj2Tn4lGcA7scgaG9nKHVrCsghh3vEivxHOPFPCD4yafk74emThGfVeYCl7VmCNIyETFfHwzN8ta2BlaGcnxQhYfrpV1uh_54IHiwWv83ixHEAmXBTLL0bh4Bq-GECXm5lcto2j7v4KK0ZzRevjR96puR9992Ui5gFacC0SZTGx6NtIQRyd9DpIJCZ7ExrvGIsqObm-fpdihmXH9V8JGl2WvOSL2RjRqLLdcsRHd9vDZlUI0kKOMSkWPofS9n5u2m1iHUVnkuZPLUCzjaMQnUYgjSoPdefLFQ9nb3YqQkVDpUaCssGj2aGZthR8uL9-w.u6TAAEzedsTH8SmLa9elCQ"
								},
								{
									"key": "scope",
									"value": "openid"
								},
								{
									"key": "nonce",
									"value": "n-0S6_WzA2Mj"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Redirect to login form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should be ok\", function () {",
									"    pm.response.to.be.ok;",
									"    ",
									"    // Extract the XSRF token to send it with the next request.",
									"    var responseHTML = cheerio.load(pm.response.text());",
									"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
									"    const action = responseHTML('form').attr('action');",
									"    pm.environment.set('xsrf', xsrfToken);",
									"    pm.environment.set('action', action);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{redirection}}",
							"host": [
								"{{redirection}}"
							]
						},
						"description": "The client does not have a redirect_uri define"
					},
					"response": []
				},
				{
					"name": "Post login form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.have.header('Location');",
									"",
									"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "X-XSRF-TOKEN",
									"value": "{{xsrf}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{ro_client_id}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "#CoMpL3X-P@SsW0Rd",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{action}}",
							"host": [
								"{{action}}"
							]
						},
						"description": "The client does not have a redirect_uri define"
					},
					"response": []
				},
				{
					"name": "Redirect after login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.have.header('Location');",
									"",
									"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{redirection}}",
							"host": [
								"{{redirection}}"
							]
						},
						"description": "The client does not have a redirect_uri define"
					},
					"response": []
				},
				{
					"name": "Redirect to consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should be ok\", function () {",
									"    pm.response.to.be.ok;",
									"    ",
									"    // Extract the XSRF token to send it with the next request.",
									"    var responseHTML = cheerio.load(pm.response.text());",
									"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
									"    const action = responseHTML('form').attr('action');",
									"    pm.environment.set('xsrf', xsrfToken);",
									"    pm.environment.set('action', action);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{redirection}}",
							"host": [
								"{{redirection}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post consent form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.have.header('Location');",
									"",
									"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "X-XSRF-TOKEN",
									"value": "{{xsrf}}",
									"type": "text"
								},
								{
									"key": "scope.openid",
									"value": "true",
									"type": "text"
								},
								{
									"key": "user_oauth_approval",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{action}}",
							"host": [
								"{{action}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Redirect after consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected to client app\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.have.header('Location');",
									"",
									"   const location = postman.getResponseHeader(\"Location\");",
									"",
									"    // State must come from request params",
									"    tests['Contains the request object state'] = location.includes('state=override-state');",
									"    ",
									"    // Redirect uri must match the one specified in request object.",
									"    tests['Redirect to query param redirect_uri'] = location.includes('https://op-test-from-query-param:60001/authz_cb');",
									"",
									"    // Redirect uri must match the one specified in query params.",
									"    tests['Contains a code'] = location.includes('code=');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{redirection}}",
							"host": [
								"{{redirection}}"
							]
						},
						"description": "The client does not have a redirect_uri define"
					},
					"response": []
				},
				{
					"name": "Use redirect_uri from request_object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Should be redirected\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.have.header('Location');",
									"});",
									"",
									"",
									"pm.test(\"Should be redirected to client app\", function () {",
									"    pm.response.to.be.redirection;",
									"    pm.response.to.have.header('Location');",
									"",
									"   const location = postman.getResponseHeader(\"Location\");",
									"",
									"    // State must come from request object",
									"    tests['Contains the request object state'] = location.includes('state=1234-5678-9876');",
									"    ",
									"    // Redirect uri must match the one specified in query params.",
									"    tests['Redirect to query param redirect_uri'] = location.includes('https://op-test:60001/authz_cb');",
									"",
									"    // Redirect uri must match the one specified in query params.",
									"    tests['Contains a code'] = location.includes('code=');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{ro_client_id}}&redirect_uri=http://unknown_but_overriden_uri/&state=1234-5678-9876&request=eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.HLZLoFzG8bOjHiJVPplTy79Mw1kO66PXjs1zEQj4nnvknVskwonk--PGdLWCtcNdVKgmP-qKfCKSW4gHMCaaufsd4bmVyDK5hpiJbZs04VpsS7h9V5LsqzyWBVBlDZjujAKoYfaS8xBQHs9Hb4wBP4y_Xccn0xI7Xb2yoPLDZcXwFRfFVtxXK2furEfDLwTvl2tbFnV8t8nE6DLyZAdKsRweQjZUb-9OleFa9srtuAFb7-Jb2Iat1H2G4YiVFwRdd1WnDd3hM0nBVvMs0zfI_Icb7869Ys9DACbs06X7sVRK9poQT7hKgX_OoCj5vE6wbpYm_eEnSNxJcwlhLHxgXA.sGJqfQ_sXC6SxMauwe1UxQ.mF6ZTHMYvI9FPZ-S4vwMiN-19JAMW2x550u_S3TjEYdIOlwa7DLmOPAjDGhx1LnQyO_37NO4nRqQZQaLU-FvYHRZ0hJqgqmX6IWbXU14MMy_MDj2Ex3CReAPzVn57bgNwJ9sKTdJ19FfPNBqBaIJS6aWHIPqDVJsNwQXmyh9iMcLTa8_fqM6rNH2lxQq9_d57jpffhwhaoBixI5zxrO4NQ0IJBCm9DQ-gKyWsZJreExlMQ1NeIgs6Qo8D-l-DxxJ1FXx33UJpad-zmsGsT9H5OZn-MN_OrIn4XEVQX2Ncivue_QTNamEtAdxBi3LYmVzwBjsc90zuxpQ-9qP9sdv6TnSdfGJp04VdsfevOa8D-t96iRotXLdLSqUjdlMnlb-_LbrPKqouYAjyuUsN9tQHyFamj0LjISlYY3RJ_2FlPQQmB3NyewMv78zfLiwi8oL0KAwCEz5ed-Y4zRQbLbkcqtkv9fjt4eq8yfbzq-bPRFHMlTqAONh7PqbittGSXAyMR0lRFp82vqcVN7AHhnRN4bGXIPNpWI7p1p7Pmi3LVgJX5EYNOcQyiHwAzyYJA9x2qUcfxlrAgy7p3rwt1zcwHCP51NJYkzvNuEdlwvXIV0mVR9uXhpNPbboPjOavCJK3u7-Vh5t8jz9eNQNjkEoZQHlk7BOFx0WjF1RTTqK8sXL5czgmHKiJvVA2GejEBiqs7ZKjsS0A1d2FalDMlvryw.RLyunLdoIJfzIfuo-xRPRA&scope=openid&nonce=n-0S6_WzA2Mj",
							"host": [
								"{{authorizationEndpoint}}"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "{{ro_client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "http://unknown_but_overriden_uri/"
								},
								{
									"key": "state",
									"value": "1234-5678-9876"
								},
								{
									"key": "request",
									"value": "eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.HLZLoFzG8bOjHiJVPplTy79Mw1kO66PXjs1zEQj4nnvknVskwonk--PGdLWCtcNdVKgmP-qKfCKSW4gHMCaaufsd4bmVyDK5hpiJbZs04VpsS7h9V5LsqzyWBVBlDZjujAKoYfaS8xBQHs9Hb4wBP4y_Xccn0xI7Xb2yoPLDZcXwFRfFVtxXK2furEfDLwTvl2tbFnV8t8nE6DLyZAdKsRweQjZUb-9OleFa9srtuAFb7-Jb2Iat1H2G4YiVFwRdd1WnDd3hM0nBVvMs0zfI_Icb7869Ys9DACbs06X7sVRK9poQT7hKgX_OoCj5vE6wbpYm_eEnSNxJcwlhLHxgXA.sGJqfQ_sXC6SxMauwe1UxQ.mF6ZTHMYvI9FPZ-S4vwMiN-19JAMW2x550u_S3TjEYdIOlwa7DLmOPAjDGhx1LnQyO_37NO4nRqQZQaLU-FvYHRZ0hJqgqmX6IWbXU14MMy_MDj2Ex3CReAPzVn57bgNwJ9sKTdJ19FfPNBqBaIJS6aWHIPqDVJsNwQXmyh9iMcLTa8_fqM6rNH2lxQq9_d57jpffhwhaoBixI5zxrO4NQ0IJBCm9DQ-gKyWsZJreExlMQ1NeIgs6Qo8D-l-DxxJ1FXx33UJpad-zmsGsT9H5OZn-MN_OrIn4XEVQX2Ncivue_QTNamEtAdxBi3LYmVzwBjsc90zuxpQ-9qP9sdv6TnSdfGJp04VdsfevOa8D-t96iRotXLdLSqUjdlMnlb-_LbrPKqouYAjyuUsN9tQHyFamj0LjISlYY3RJ_2FlPQQmB3NyewMv78zfLiwi8oL0KAwCEz5ed-Y4zRQbLbkcqtkv9fjt4eq8yfbzq-bPRFHMlTqAONh7PqbittGSXAyMR0lRFp82vqcVN7AHhnRN4bGXIPNpWI7p1p7Pmi3LVgJX5EYNOcQyiHwAzyYJA9x2qUcfxlrAgy7p3rwt1zcwHCP51NJYkzvNuEdlwvXIV0mVR9uXhpNPbboPjOavCJK3u7-Vh5t8jz9eNQNjkEoZQHlk7BOFx0WjF1RTTqK8sXL5czgmHKiJvVA2GejEBiqs7ZKjsS0A1d2FalDMlvryw.RLyunLdoIJfzIfuo-xRPRA"
								},
								{
									"key": "scope",
									"value": "openid"
								},
								{
									"key": "nonce",
									"value": "n-0S6_WzA2Mj"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"organizations",
						"{{defaultOrganizationId}}",
						"environments",
						"{{defaultEnvironmentId}}",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		}
	]
}
