{
	"info": {
		"_postman_id": "8a6730ff-9d8f-4143-8f89-56f76a0ee13b",
		"name": "Gravitee.io - AM - VirtualHost",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa3d92cf-905e-4eaf-946a-572068f2529f",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/auth/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create vhost domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "943847cb-2bb1-4cf1-b8ba-dde91fcc00ea",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set('domainPath', jsonData.id);",
									"pm.environment.set('domain', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"vhost\", \n\t\"description\": \"test Virtual Hosts\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20c09f7a-cb22-4057-9d44-15deef332277",
								"exec": [
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b718bdb8-b1b3-42ac-9513-30f17f872a45",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body.issuer).to.eql(\"http://localhost:8092/vhost/oidc\");",
									"    pm.expect(body.authorization_endpoint).to.eql(\"http://localhost:8092/vhost/oauth/authorize\");",
									"    pm.expect(body.token_endpoint).to.eql(\"http://localhost:8092/vhost/oauth/token\");",
									"    pm.expect(body.userinfo_endpoint).to.eql(\"http://localhost:8092/vhost/oidc/userinfo\");",
									"    pm.expect(body.jwks_uri).to.eql(\"http://localhost:8092/vhost/oidc/.well-known/jwks.json\");",
									"    pm.expect(body.end_session_endpoint).to.eql(\"http://localhost:8092/vhost/logout\");",
									"    pm.expect(body.revocation_endpoint).to.eql(\"http://localhost:8092/vhost/oauth/revoke\");",
									"    pm.expect(body.introspection_endpoint).to.eql(\"http://localhost:8092/vhost/oauth/introspect\");",
									"    pm.expect(body.registration_endpoint).to.eql(\"http://localhost:8092/vhost/oidc/register\");",
									"    pm.expect(body.registration_renew_secret_endpoint).to.eql(\"http://localhost:8092/vhost/oidc/register/:client_id/renew_secret\");",
									"    pm.expect(body.request_object_endpoint).to.eql(\"http://localhost:8092/vhost/oidc/ros\");",
									"",
									"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/{{domainPath}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domainPath}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create other domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1fba3fe-0d63-4758-ada6-f7394eba4aaf",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set('otherDomainPath', jsonData.id);",
									"pm.environment.set('otherDomain', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"otherVhost\", \n\t\"description\": \"test Virtual Hosts\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Path mode",
			"item": [
				{
					"name": "Unautorized path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6fa1a434-3ace-450a-86f8-da510baf1c6a",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"'/' path not allowed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"'/' path is not allowed in context-path mode\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"path\": \"/\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unautorized empty path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3288f07a-fcdd-4279-92f2-fd691e97aa01",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"'/' path not allowed\", function () {",
									"    var jsonData = pm.response.json();",
									"    // Empty path is considered as '/'",
									"    pm.expect(jsonData.message).to.eql(\"'/' path is not allowed in context-path mode\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"path\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbe412e7-c8c6-4aaf-a688-7875289034d0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set('domainPath', jsonData.path.replace('/', ''));",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 6000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"path\": \"/vhostUpdated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e0ee150-5f0f-46b6-810b-4f3fa7ea8732",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body.issuer).to.eql(\"http://localhost:8092/vhostUpdated/oidc\");",
									"    pm.expect(body.authorization_endpoint).to.eql(\"http://localhost:8092/vhostUpdated/oauth/authorize\");",
									"    pm.expect(body.token_endpoint).to.eql(\"http://localhost:8092/vhostUpdated/oauth/token\");",
									"    pm.expect(body.userinfo_endpoint).to.eql(\"http://localhost:8092/vhostUpdated/oidc/userinfo\");",
									"    pm.expect(body.jwks_uri).to.eql(\"http://localhost:8092/vhostUpdated/oidc/.well-known/jwks.json\");",
									"    pm.expect(body.end_session_endpoint).to.eql(\"http://localhost:8092/vhostUpdated/logout\");",
									"    pm.expect(body.revocation_endpoint).to.eql(\"http://localhost:8092/vhostUpdated/oauth/revoke\");",
									"    pm.expect(body.introspection_endpoint).to.eql(\"http://localhost:8092/vhostUpdated/oauth/introspect\");",
									"    pm.expect(body.registration_endpoint).to.eql(\"http://localhost:8092/vhostUpdated/oidc/register\");",
									"    pm.expect(body.registration_renew_secret_endpoint).to.eql(\"http://localhost:8092/vhostUpdated/oidc/register/:client_id/renew_secret\");",
									"    pm.expect(body.request_object_endpoint).to.eql(\"http://localhost:8092/vhostUpdated/oidc/ros\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/{{domainPath}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domainPath}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change other domain path overlap",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8a7c219-e398-41ff-a63c-38ab16466545",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Path overlap\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Path [/vhostUpdated] overlap path defined in another security domain\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"path\": \"/vhostUpdated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{otherDomain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{otherDomain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change other domain path overlapped",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6a91d5e-b835-4795-89c9-93c60fe14cd6",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Path overlapped\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Path [/vhostUpdated/overlapped] is overlapped by another security domain\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"path\": \"/vhostUpdated/overlapped\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{otherDomain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{otherDomain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change other domain path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc31c60f-7c63-4cd1-ab9b-712d264d4c6b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"path\": \"/vhostPath2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{otherDomain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{otherDomain}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "VHost mode",
			"item": [
				{
					"name": "Invalid empty vhosts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff0a3ef4-bf33-40e3-afb9-da1e7409702f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"VHost required in vhost mode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"VHost mode requires at least one VHost\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"vhostMode\": true,\n    \"vhosts\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid host required",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6eb5c2d-38be-45a0-9c70-055c84b0f86b",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Host required\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Host is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"vhostMode\": true,\n    \"vhosts\": [ \n        {\n            \"host\": null,\n            \"path\": \"/vhostPath\",\n            \"overrideEntrypoint\": true\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid host required with port",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0dbdac72-810f-40ab-a47f-33c9e9b2f631",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Host required\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Host [] is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"vhostMode\": true,\n    \"vhosts\": [ \n        {\n            \"host\": \":1234\",\n            \"path\": \"/vhostPath\",\n            \"overrideEntrypoint\": true\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid host",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68c94ad4-805a-4ab1-becd-2c20d2cd3060",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Host invalid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Host [!Not a Valid Host] is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"vhostMode\": true,\n    \"vhosts\": [ \n        {\n            \"host\": \"!Not a Valid Host\",\n            \"path\": \"/vhostPath\",\n            \"overrideEntrypoint\": true\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid port",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "814735b4-52e4-4229-9a91-ad1cd391636d",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Port invalid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Host port for [localhost:NotValid] is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"vhostMode\": true,\n    \"vhosts\": [ \n        {\n            \"host\": \"localhost:NotValid\",\n            \"path\": \"/vhostPath\",\n            \"overrideEntrypoint\": true\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid port too high",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "382c1fc4-3aeb-4841-bc48-a242c1e7caa2",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Port too high\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Host port [700000] is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"vhostMode\": true,\n    \"vhosts\": [ \n        {\n            \"host\": \"localhost:700000\",\n            \"path\": \"/vhostPath\",\n            \"overrideEntrypoint\": true\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid override entrypoint required",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc7a2875-2243-42ba-a89b-c562444665a9",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Override entrypoint required\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"You must select one vhost to override entrypoint\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"vhostMode\": true,\n    \"vhosts\": [ \n        {\n            \"host\": \"localhost:8092\",\n            \"path\": \"/vhostPath\",\n            \"overrideEntrypoint\": false\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch domain to vhost",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "afcdd1cf-8b2e-447d-b15f-4e7a0ced2933",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 6000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"vhostMode\": true,\n    \"vhosts\": [ \n        {\n            \"host\": \"localhost:8092\",\n            \"path\": \"/vhostPath\",\n            \"overrideEntrypoint\": true\n        },\n        {\n            \"host\": \"localhost:8092\",\n            \"path\": \"/otherVhostPath\",\n            \"overrideEntrypoint\": false\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "No security domain original path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "613f5fc5-ea04-4d38-a0e2-f8e5b95ca3b7",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/{{domainPath}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domainPath}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "No security domain bad host",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1bb5b2d0-1a97-40ce-a8d7-815ce8c6af0e",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"type": "text",
								"value": "test.gravitee.io"
							}
						],
						"url": {
							"raw": "{{gateway_url}}/vhostPath/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"vhostPath",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4c623ac-21d7-452f-bec6-fdb6192542d5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body.issuer).to.eql(\"http://localhost:8092/vhostPath/oidc\");",
									"    pm.expect(body.authorization_endpoint).to.eql(\"http://localhost:8092/vhostPath/oauth/authorize\");",
									"    pm.expect(body.token_endpoint).to.eql(\"http://localhost:8092/vhostPath/oauth/token\");",
									"    pm.expect(body.userinfo_endpoint).to.eql(\"http://localhost:8092/vhostPath/oidc/userinfo\");",
									"    pm.expect(body.jwks_uri).to.eql(\"http://localhost:8092/vhostPath/oidc/.well-known/jwks.json\");",
									"    pm.expect(body.end_session_endpoint).to.eql(\"http://localhost:8092/vhostPath/logout\");",
									"    pm.expect(body.revocation_endpoint).to.eql(\"http://localhost:8092/vhostPath/oauth/revoke\");",
									"    pm.expect(body.introspection_endpoint).to.eql(\"http://localhost:8092/vhostPath/oauth/introspect\");",
									"    pm.expect(body.registration_endpoint).to.eql(\"http://localhost:8092/vhostPath/oidc/register\");",
									"    pm.expect(body.registration_renew_secret_endpoint).to.eql(\"http://localhost:8092/vhostPath/oidc/register/:client_id/renew_secret\");",
									"    pm.expect(body.request_object_endpoint).to.eql(\"http://localhost:8092/vhostPath/oidc/ros\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "localhost:8092",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{gateway_url}}/vhostPath/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"vhostPath",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration otherVhostPath",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d193fd64-448f-4d21-af2c-fac4178d8931",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body.issuer).to.eql(\"http://localhost:8092/otherVhostPath/oidc\");",
									"    pm.expect(body.authorization_endpoint).to.eql(\"http://localhost:8092/otherVhostPath/oauth/authorize\");",
									"    pm.expect(body.token_endpoint).to.eql(\"http://localhost:8092/otherVhostPath/oauth/token\");",
									"    pm.expect(body.userinfo_endpoint).to.eql(\"http://localhost:8092/otherVhostPath/oidc/userinfo\");",
									"    pm.expect(body.jwks_uri).to.eql(\"http://localhost:8092/otherVhostPath/oidc/.well-known/jwks.json\");",
									"    pm.expect(body.end_session_endpoint).to.eql(\"http://localhost:8092/otherVhostPath/logout\");",
									"    pm.expect(body.revocation_endpoint).to.eql(\"http://localhost:8092/otherVhostPath/oauth/revoke\");",
									"    pm.expect(body.introspection_endpoint).to.eql(\"http://localhost:8092/otherVhostPath/oauth/introspect\");",
									"    pm.expect(body.registration_endpoint).to.eql(\"http://localhost:8092/otherVhostPath/oidc/register\");",
									"    pm.expect(body.registration_renew_secret_endpoint).to.eql(\"http://localhost:8092/otherVhostPath/oidc/register/:client_id/renew_secret\");",
									"    pm.expect(body.request_object_endpoint).to.eql(\"http://localhost:8092/otherVhostPath/oidc/ros\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"type": "text",
								"value": "localhost:8092"
							}
						],
						"url": {
							"raw": "{{gateway_url}}/otherVhostPath/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"otherVhostPath",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration X-Forwarded",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18c113fe-3a5e-4585-b587-296da08fc7d3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body.issuer).to.eql(\"http://test.gravitee.io/am/vhostPath/oidc\");",
									"    pm.expect(body.authorization_endpoint).to.eql(\"http://test.gravitee.io/am/vhostPath/oauth/authorize\");",
									"    pm.expect(body.token_endpoint).to.eql(\"http://test.gravitee.io/am/vhostPath/oauth/token\");",
									"    pm.expect(body.userinfo_endpoint).to.eql(\"http://test.gravitee.io/am/vhostPath/oidc/userinfo\");",
									"    pm.expect(body.jwks_uri).to.eql(\"http://test.gravitee.io/am/vhostPath/oidc/.well-known/jwks.json\");",
									"    pm.expect(body.end_session_endpoint).to.eql(\"http://test.gravitee.io/am/vhostPath/logout\");",
									"    pm.expect(body.revocation_endpoint).to.eql(\"http://test.gravitee.io/am/vhostPath/oauth/revoke\");",
									"    pm.expect(body.introspection_endpoint).to.eql(\"http://test.gravitee.io/am/vhostPath/oauth/introspect\");",
									"    pm.expect(body.registration_endpoint).to.eql(\"http://test.gravitee.io/am/vhostPath/oidc/register\");",
									"    pm.expect(body.registration_renew_secret_endpoint).to.eql(\"http://test.gravitee.io/am/vhostPath/oidc/register/:client_id/renew_secret\");",
									"    pm.expect(body.request_object_endpoint).to.eql(\"http://test.gravitee.io/am/vhostPath/oidc/ros\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "localhost:8092",
								"type": "text"
							},
							{
								"key": "X-Forwarded-Host",
								"value": "test.gravitee.io",
								"type": "text"
							},
							{
								"key": "X-Forwarded-Prefix",
								"value": "/am",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{gateway_url}}/vhostPath/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"vhostPath",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change other domain path overlap",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0928b6c-566e-4a2a-bebe-36e44bf80099",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Path overlap\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Path [/vhostPath] overlap path defined in another security domain\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"path\": \"/vhostPath\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{otherDomain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{otherDomain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change other domain path overlapped",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f98db5e7-dffa-4688-81fb-cfd5b3cca32d",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Path overlapped\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Path [/vhostPath/overlapped] is overlapped by another security domain\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"path\": \"/vhostPath/overlapped\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{otherDomain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{otherDomain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change other domain path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "872b3b21-2e68-4958-b67a-9fa04f4e4501",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"path\": \"/vhostPath2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{otherDomain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{otherDomain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch other domain to vhost path overlap",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4fb7382-e238-46bb-8766-829c40ec9d5c",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Path overlap\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Path [/vhostPath] overlap path defined in another security domain\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"vhostMode\": true,\n    \"vhosts\": [ \n        {\n            \"host\": \"localhost:8092\",\n            \"path\": \"/vhostPath\",\n            \"overrideEntrypoint\": true\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{otherDomain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{otherDomain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch other domain to vhost path overlapped",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4477a961-4d31-42e5-bfaa-3b455bb858a6",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Path overlap\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Path [/vhostPath/overlapped] is overlapped by another security domain\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"vhostMode\": true,\n    \"vhosts\": [ \n        {\n            \"host\": \"localhost:8092\",\n            \"path\": \"/vhostPath/overlapped\",\n            \"overrideEntrypoint\": true\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{otherDomain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{otherDomain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch other domain to vhost",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75dca6d2-64e5-4c1a-8839-9fb8fb79ad82",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"vhostMode\": true,\n    \"vhosts\": [ \n        {\n            \"host\": \"localhost:8092\",\n            \"path\": \"/vhostPath2\",\n            \"overrideEntrypoint\": true\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{otherDomain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{otherDomain}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ac9999db-8d94-402b-9cc0-5c0e1bd07898",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "73d0c76f-c419-4be7-8506-fe99bbd4865d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "21e9d221-5987-4d58-bdd2-cac7e597c4f2",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"organizations",
						"{{defaultOrganizationId}}",
						"environments",
						"{{defaultEnvironmentId}}",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete other domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4d2f3b6f-0579-41e4-bc19-c359c5c017e6",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{otherDomain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"organizations",
						"{{defaultOrganizationId}}",
						"environments",
						"{{defaultEnvironmentId}}",
						"domains",
						"{{otherDomain}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}