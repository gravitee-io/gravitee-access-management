{
	"info": {
		"_postman_id": "88f51f73-0d98-488f-95de-437fb5e04713",
		"name": "Gravitee.io - AM - User Management - app version",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "604aa2f6-4a2e-4497-abad-0614f459bf37",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{management_url}}/management/auth/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user management domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dde5b4a7-41eb-4f7a-9e04-171def256950",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set('domain', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"user-domain-app-version\", \n\t\"description\": \"test System for User Management specifications\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f46cd26-62ee-483a-add7-1d94f8f08519",
								"exec": [
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a442b1a0-bd45-48be-a213-467b940b5f2d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body).to.have.property(\"token_endpoint\");",
									"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/{{domain}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domain}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Roles",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "085d9581-1a81-40f3-9942-53fc318d8e52",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"wrong\" : \n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - name required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd7dd470-81c2-4463-a3a0-a5ee72489904",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create role - name field required\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[name: must not be null]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"description\": \"role description\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create role",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4818a18f-6c8e-4d0b-812a-376739cd28c3",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"UM - create role\", function () {",
													"    var jsonData = pm.response.json();",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.name).to.eql('role name');",
													"    pm.expect(jsonData.description).to.eql('role description');",
													"    pm.environment.set('roleUM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"role name\",\n\t\"description\": \"role description\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create role 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33e83c11-54f8-4060-b207-5b00304f9e8f",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"UM - create role\", function () {",
													"    var jsonData = pm.response.json();",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.name).to.eql('role 2 name');",
													"    pm.expect(jsonData.description).to.eql('role 2 description');",
													"    pm.environment.set('role2UM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"role 2 name\",\n\t\"description\": \"role 2 description\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - name already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d398f6c0-ada2-4f41-8b32-f0e9d9059f37",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create role - uniqueness\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"A role [role name] already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"role name\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Invalid request - role not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b134c416-976a-467e-bfbf-fba6f960e31e",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"UM - update role - unknown role\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Role [wrong-id] can not be found.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"role name 2\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles/wrong-id",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31529131-821c-4dac-9c40-dadd696155ee",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles/{{roleUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles",
												"{{roleUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update role",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6e2e30c-6abd-491f-9ab2-1d5bab30d691",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - update role\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.description).to.eql('new description');",
													"    pm.expect(jsonData.permissions).to.eql(['read']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"role name\",\n\t\"description\": \"new description\",\n\t\"permissions\": [\"read\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles/{{roleUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles",
												"{{roleUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update role 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edc35b4b-fb34-4924-8531-0333548e5f88",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - update role\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.description).to.eql('new description 2');",
													"    pm.expect(jsonData.permissions).to.eql(['write']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"role 2 name\",\n\t\"description\": \"new description 2\",\n\t\"permissions\": [\"write\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles/{{role2UM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles",
												"{{role2UM}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List",
							"item": [
								{
									"name": "List roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "294809cd-3eb2-4527-b5f0-5fe8545833fe",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - list roles\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.length).to.eql(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd73b77e-1a08-43a7-a9cc-189153058087",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"wrong\" : \n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - username required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71d78d65-ea31-4138-a047-396643b806c1",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - username field required\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[username: must not be blank]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@mail.com\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - email required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54d19dba-9a17-4e4e-8ecd-598d3e3409ea",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - email field required\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[email: must not be blank]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - password required if no pre-registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e9ccd35-a326-4e98-aa8b-0f538659f412",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - password field required if no pre-registration\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Field [password] is required\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barbara@mail.com\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - username invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc01b3ae-20ee-47d2-bce0-f2f52c142b81",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - username invalid\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[#Invalid&: invalid username]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"#Invalid&\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"password\": \"#CoMpL3X-P@SsW0Rd\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - email invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6dadbac9-a81d-4c45-85d2-8bb2150622c1",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - email invalid\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[jensen.barba: must be a well-formed email address]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barba\",\n\t\"password\": \"#CoMpL3X-P@SsW0Rd\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - first name invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b2cb7be-9c55-4687-b000-531dcf08f072",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - first name invalid\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[#Invalid: invalid first name]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"#Invalid\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"password\": \"#CoMpL3X-P@SsW0Rd\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - last name invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f1822f4-5c04-46b6-b466-0a6bbd7f6d53",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - last name invalid\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[#Invalid: invalid last name]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"#Invalid\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"password\": \"#CoMpL3X-P@SsW0Rd\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - password too long",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "759b9a9e-1a22-45c3-825d-bf2d435646a5",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - password too long\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa: must not be greater than 72]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"password\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - email too long",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb19b2a2-760e-444e-9bcd-6fe3e412939c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - email too long\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Value [jensen.barbara@maaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaail.com] is not a valid email.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barbara@maaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaail.com\",\n\t\"password\": \"#CoMpL3X-P@SsW0Rd\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - external id too long",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6fca8f3-d661-4b91-8963-03d59aae86ef",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - external id too long\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[Tooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo long: must not be greater than 100]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"password\": \"#CoMpL3X-P@SsW0Rd\",\n\t\"externalId\": \"Tooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo long\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edbc936c-e14b-494a-b0c1-49d9eb8b3f84",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"UM - create user\", function () {",
													"    var jsonData = pm.response.json();",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.internal).to.eql(true);",
													"    pm.expect(jsonData.enabled).to.eql(true);",
													"    pm.expect(jsonData.preRegistration).to.eql(false);",
													"    pm.expect(jsonData.registrationCompleted).to.eql(true);",
													"    pm.expect(jsonData.source).to.eql('default-idp-'+domain)",
													"    pm.environment.set('userUM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"password\": \"#CoMpL3X-P@SsW0Rd\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - username already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47768a57-fac7-4c17-8265-bbeee5fd3c29",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - uniqueness\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"A user [jensen.barbara] already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"password\": \"#CoMpL3X-P@SsW0Rd\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - username already exists - case insensitive",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea1cd4ea-fc9f-4585-9b49-132a3624ddac",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - uniqueness\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"A user [jensen.BarBara] already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.BarBara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"password\": \"#CoMpL3X-P@SsW0Rd\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Pre-Register",
							"item": [
								{
									"name": "Patch domain - dynamic user registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91182bb8-1f11-4cbe-a437-e42140e6c98b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountSettings\": {\n    \"dynamicUserRegistration\": true\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15abc734-b4ba-4027-96c6-47f69ca0f01b",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"UM - pre-register user\", function () {",
													"    var jsonData = pm.response.json();",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData).to.have.property('registrationUserUri');",
													"    pm.expect(jsonData).to.have.property('registrationAccessToken');",
													"    pm.expect(jsonData.internal).to.eql(true);",
													"    pm.expect(jsonData.enabled).to.eql(false);",
													"    pm.expect(jsonData.preRegistration).to.eql(true);",
													"    pm.expect(jsonData.registrationCompleted).to.eql(false);",
													"    pm.expect(jsonData.source).to.eql('default-idp-'+domain)",
													"    pm.environment.set('userTemp', jsonData.id);",
													"    pm.environment.set('userRegistrationURI', jsonData.registrationUserUri);",
													"    pm.environment.set('userRegistrationToken', jsonData.registrationAccessToken);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"John\",\n\t\"lastName\": \"Doe\",\n\t\"username\": \"john.doe\",\n\t\"email\": \"john.doe@mail.com\",\n\t\"preRegistration\": true\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initiate post registration flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0ad4f4b-2f90-4ef4-b24d-0f67eb37ab55",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be a redirection to confirm registration page\", function() {",
													"    pm.response.to.be.ok;",
													"    var responseHTML = cheerio(pm.response.text());",
													"    tests['Redirect to confirm registration page'] = responseHTML.find('span').text().includes('Thanks for signing up, please complete the form to activate your account');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "93cca7de-218d-4f13-9166-41fc3cf679b8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{userRegistrationURI}}?token={{userRegistrationToken}}",
											"host": [
												"{{userRegistrationURI}}"
											],
											"query": [
												{
													"key": "token",
													"value": "{{userRegistrationToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a44e8a8-5bcf-4560-a0fc-567473ad2502",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userTemp}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users",
												"{{userTemp}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Invalid request - user not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c89add53-264c-4aee-a11d-55ca0b405fd6",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"UM - update user - unknown user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"User [wrong-id] can not be found.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@mail.com\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/wrong-id",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c759008a-b190-4de6-bdc7-5a2ccf5bc267",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users",
												"{{userUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - email invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9457c5c-a41c-4940-8172-85a634091228",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - email invalid\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[jensen.barba: must be a well-formed email address]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barba\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users",
												"{{userUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - first name invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01b10746-6485-4eab-ac0d-28a2fedf4973",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - first name invalid\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[#Invalid: invalid first name]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"#Invalid\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@mail.com\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users",
												"{{userUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - last name invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de66d85a-5f31-4f82-87fd-976dd37c4fe9",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - last name invalid\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[#Invalid: invalid last name]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"#Invalid\",\n\t\"email\": \"jensen.barbara@mail.com\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users",
												"{{userUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - email too long",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f260b85-bd74-439f-b326-96585d0649ae",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - email too long\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[jensen.barbara@maaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaail.com: must not be greater than 320]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@maaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaail.com\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users",
												"{{userUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - external id too long",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ccd7a79f-b9e3-4e4a-ab8c-7689965b437f",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - external id too long\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[Tooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo long: must not be greater than 100]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"externalId\": \"Tooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo long\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users",
												"{{userUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e7740ce-11fd-41fd-a1fb-21fccbd19963",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - update user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.additionalInformation.profile).to.eql('https://my.profile.com');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"additionalInformation\": {\n\t\t\"profile\":\"https://my.profile.com\"\n\t}\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users",
												"{{userUM}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List",
							"item": [
								{
									"name": "List users",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f1a6677-6c13-4a0b-878b-50380107d647",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - list users\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currentPage).to.eql(0);",
													"    pm.expect(jsonData.totalCount).to.eql(1);",
													"    pm.expect(jsonData.data.length).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Assign roles",
							"item": [
								{
									"name": "Assign roles to user - role not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c95cbe4f-ae67-4698-8dfc-15b3efe48f7a",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\"wrong-role-id\"]\n"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users",
												"{{userUM}}",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign roles to user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3241954a-e55d-4ac5-86c9-9df4531f148b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - assign roles to user\", function () {",
													"    let role = pm.environment.get(\"roleUM\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roles).to.eql([role]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[ \"{{roleUM}}\"]"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users",
												"{{userUM}}",
												"roles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Groups",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "244ac6f3-4aa6-4de0-aab6-cf90b4b9b5b4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"wrong\" : \n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - name required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93c0cfb0-f625-4511-8c39-b70dd805b71a",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create group - name field required\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[name: must not be null]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a83e251-83fa-49e8-b3e1-374afa2dab9c",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"UM - create group\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.name).to.eql('My Group');",
													"    pm.environment.set('groupUM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My Group\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create group 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e7ec10f-c189-4cfc-b43f-ace8d11c6087",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"UM - create group 2\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.name).to.eql('My Group 2');",
													"    pm.environment.set('group2UM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My Group 2\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - name already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fee32ae-aeba-499d-8915-a4ce6990d50a",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create group - uniqueness\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"A group [My Group] already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My Group\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Invalid request - group not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69d21c7d-aea5-4dd5-aa7c-e7e86eaa97ba",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"UM - update group - unknown user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Group [wrong-id] can not be found.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My Group\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/wrong-id",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec4905cf-6254-4db3-84bf-c909484906f2",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/{{groupUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"{{groupUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a212087-1b3b-4a25-bd18-d67832a7ac75",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - update group\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.name).to.eql('My New Group');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My New Group\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/{{groupUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"{{groupUM}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Members",
							"item": [
								{
									"name": "Update group - member not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78acba1b-5fe0-4f7a-bf27-14afec317645",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - update group - member not found\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.members).to.eql([]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My New Group\",\n\t\"members\": [\"wrong-member-id\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/{{groupUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"{{groupUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update group - member exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25ca238c-12fb-49da-b4c0-2ad70c468338",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - update group - member found\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.members).to.eql([environment[\"userUM\"]]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My New Group\",\n\t\"members\": [\"{{userUM}}\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/{{groupUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"{{groupUM}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Assign roles",
							"item": [
								{
									"name": "Assign roles to group - role not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14b353e7-1e49-4aad-95ed-a723a0ab25dc",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\"wrong-role-id\"]\n"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/{{groupUM}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"{{groupUM}}",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign roles to group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c65a6b2a-1955-4ecf-bad3-41a4c3f25f44",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - assign roles to group\", function () {",
													"    let role = pm.environment.get(\"role2UM\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roles).to.eql([role]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[ \"{{role2UM}}\"]"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/{{groupUM}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"{{groupUM}}",
												"roles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List",
							"item": [
								{
									"name": "List groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7a4d790-7b2d-4090-ba41-0c34b7956e98",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - list groups\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currentPage).to.eql(0);",
													"    pm.expect(jsonData.totalCount).to.eql(2);",
													"    pm.expect(jsonData.data.length).to.eql(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Invalid request - group not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1605b4dc-58b4-4a95-a834-c652d271244f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"UM - delete group - unknown group\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Group [wrong-id] can not be found.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/wrong-id",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ec16ae1-0b1a-4a21-8608-96277894b3d5",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/{{group2UM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"{{group2UM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "List groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edc955ac-5aa9-4b5d-bef8-1d053c3afef0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - list groups - after delete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currentPage).to.eql(0);",
													"    pm.expect(jsonData.totalCount).to.eql(1);",
													"    pm.expect(jsonData.data.length).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c5318841-5174-48ef-9002-10635e2d64ac",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d51aaea5-6aaa-4b28-831c-0e2eafd4de4d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configure application",
					"item": [
						{
							"name": "Create User Management application",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7021ed28-d226-4874-8c47-f65a433ab4f5",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var body = JSON.parse(responseBody);",
											"pm.environment.set('clientUM', body.id);",
											"pm.environment.set('clientId', body.settings.oauth.clientId);",
											"pm.environment.set('clientSecret', body.settings.oauth.clientSecret);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"client-um\",\n  \"type\": \"WEB\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"applications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure User Management application",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1efe945e-a690-40fe-bbcd-670ac6484be7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 10000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f29c8534-950b-4f19-ba36-074c13b0af83",
										"exec": [
											"let domain = pm.environment.get(\"domain\");",
											"let identityProvider = 'default-idp-'+domain;",
											"pm.environment.set(\"identityProvider\",identityProvider)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"settings\": {\n  \t\"oauth\": {\n  \t   \"grantTypes\": [\"password\"],\n       \"scopes\" : [\"openid\"],\n       \"enhanceScopesWithUserPermissions\": true\n  \t}\n  },\n  \"identities\" : [\"{{identityProvider}}\"]\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{clientUM}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"applications",
										"{{clientUM}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Authenticate User",
					"item": [
						{
							"name": "Authenticate - wrong user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9186a5ce-7ca7-42a1-9df2-37d51a0d5344",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"UM - authenticate - wrong user\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('invalid_grant');",
											"    pm.expect(jsonData.error_description).to.eql('Invalid or unknown user');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4bc8bf4d-7aa0-4a05-b59a-cbe887985035",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{clientId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{clientSecret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "username",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate - wrong credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca9ba9d2-02fc-435b-8999-3923e9bcb783",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"UM - authenticate - wrong credentials\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('invalid_grant');",
											"    pm.expect(jsonData.error_description).to.eql('The credentials you entered are invalid');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c80a3e9-9173-4788-b778-cacc97d34f4e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{clientId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{clientSecret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "jensen.barbara",
											"type": "text"
										},
										{
											"key": "password",
											"value": "wrong-password",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate - success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "890a8757-12ab-4941-a394-ad7880c73aa5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"UM - authenticate - success\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('read openid write');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7ef581f2-9d49-4f6f-8db6-ba39e2e17e7d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{clientId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{clientSecret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "jensen.barbara",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user - disable user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b00dc4bf-bdfa-426b-bd54-79234c8ecc84",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"UM - update user\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.enabled).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"additionalInformation\": {\n\t\t\"profile\":\"https://my.profile.com\"\n\t},\n\t\"enabled\": false\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"users",
										"{{userUM}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate - user disabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec168dd4-8020-4f4d-81f3-3c0fb71dc190",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"UM - authenticate - user disabled\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('invalid_grant');",
											"    pm.expect(jsonData.error_description).to.eql('Account is disabled for user jensen.barbara');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2ccd1e3-0b54-49b6-a3e5-d5bb40413719",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{clientId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{clientSecret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "jensen.barbara",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user - enable user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82aa28e7-bef2-4e40-a17b-358a2112e722",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"UM - update user\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.enabled).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"additionalInformation\": {\n\t\t\"profile\":\"https://my.profile.com\"\n\t},\n\t\"enabled\": true\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"users",
										"{{userUM}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user - reset password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1682e18f-deb5-45d2-ac8b-f39002164eda",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"myNew#CoMpL3X-P@SsW0Rd\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}/resetPassword",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"users",
										"{{userUM}}",
										"resetPassword"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate - success after reset password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f570bad-04b1-49d4-92ab-73f65cda0cf0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"UM - authenticate - success after reset password\", function () {",
											"     var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ec31bc6-d7c3-402f-bfe3-589aaa0da261",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{clientId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{clientSecret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "jensen.barbara",
											"type": "text"
										},
										{
											"key": "password",
											"value": "myNew#CoMpL3X-P@SsW0Rd",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid request - user not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2a04f71-d6c1-4c35-977b-0ce7b1b7813e",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"UM - delete user - unknown user\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"User [wrong-id] can not be found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/wrong-id",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"users",
										"wrong-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28d68c3b-517d-4f67-942a-631076e04ccb",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"users",
										"{{userUM}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate - user not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3569183f-340d-4a18-af2a-dbbaae1cce3d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"UM - authenticate - wrong user\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('invalid_grant');",
											"    pm.expect(jsonData.error_description).to.eql('Invalid or unknown user');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "acba3207-c686-437e-83c0-1afb47fd9ede",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{clientId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{clientSecret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "username",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "22eab64d-4cd4-4da7-b7a0-65ec8b33679c",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"organizations",
						"{{defaultOrganizationId}}",
						"environments",
						"{{defaultEnvironmentId}}",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}