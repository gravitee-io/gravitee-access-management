{
	"info": {
		"_postman_id": "1db11782-8b56-4abc-b98e-80c9823f233a",
		"name": "Gravitee.io - AM - User Management - app version",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "571e9b59-b9e7-452c-9469-9786ded290a6",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{management_url}}/management/auth/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user management domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b286f0fa-cfcc-45b9-863a-1dbc87fdf835",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set('domain', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"user-domain-app-version\", \n\t\"description\": \"test System for User Management specifications\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bfe78ac1-144a-4bbd-abf9-55e160e723bf",
								"exec": [
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5332b6f5-7419-4792-a30f-cce968d3d67e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body).to.have.property(\"token_endpoint\");",
									"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/{{domain}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domain}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Roles",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"wrong\" : \n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - name required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create role - name field required\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[name: must not be null]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"description\": \"role description\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create role",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"UM - create role\", function () {",
													"    var jsonData = pm.response.json();",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.name).to.eql('role name');",
													"    pm.expect(jsonData.description).to.eql('role description');",
													"    pm.environment.set('roleUM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"role name\",\n\t\"description\": \"role description\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create role 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"UM - create role\", function () {",
													"    var jsonData = pm.response.json();",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.name).to.eql('role 2 name');",
													"    pm.expect(jsonData.description).to.eql('role 2 description');",
													"    pm.environment.set('role2UM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"role 2 name\",\n\t\"description\": \"role 2 description\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - name already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create role - uniqueness\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"A role [role name] already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"role name\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Invalid request - role not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"UM - update role - unknown role\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Role [wrong-id] can not be found.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"role name 2\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles/wrong-id",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles/{{roleUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles",
												"{{roleUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update role",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - update role\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.description).to.eql('new description');",
													"    pm.expect(jsonData.permissions).to.eql(['read']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"role name\",\n\t\"description\": \"new description\",\n\t\"permissions\": [\"read\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles/{{roleUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles",
												"{{roleUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update role 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - update role\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.description).to.eql('new description 2');",
													"    pm.expect(jsonData.permissions).to.eql(['write']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"role 2 name\",\n\t\"description\": \"new description 2\",\n\t\"permissions\": [\"write\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles/{{role2UM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles",
												"{{role2UM}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List",
							"item": [
								{
									"name": "List roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ace28d5f-a975-4430-ba47-29184cf01460",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - list roles\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.length).to.eql(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"roles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"wrong\" : \n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - username required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - username field required\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[username: must not be null]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@mail.com\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - email required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - email field required\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[email: must not be null]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - password required if no pre-registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - password field required if no pre-registration\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Field [password] is required\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barbara@mail.com\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - email malformed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - email malformed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[jensen.barba: must be a well-formed email address]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barba\",\n\t\"password\": \"password\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"UM - create user\", function () {",
													"    var jsonData = pm.response.json();",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.internal).to.eql(true);",
													"    pm.expect(jsonData.enabled).to.eql(true);",
													"    pm.expect(jsonData.preRegistration).to.eql(false);",
													"    pm.expect(jsonData.registrationCompleted).to.eql(true);",
													"    pm.expect(jsonData.source).to.eql('default-idp-'+domain)",
													"    pm.environment.set('userUM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"password\": \"password\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - username already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - uniqueness\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"A user [jensen.barbara] already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"password\": \"password\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - username already exists - case insensitive",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - uniqueness\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"A user [jensen.BarBara] already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.BarBara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"password\": \"password\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Pre-Register",
							"item": [
								{
									"name": "Patch domain - dynamic user registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29adabbe-3199-4e82-afb7-851bdd50b1bb",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountSettings\": {\n    \"dynamicUserRegistration\": true\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"UM - pre-register user\", function () {",
													"    var jsonData = pm.response.json();",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData).to.have.property('registrationUserUri');",
													"    pm.expect(jsonData).to.have.property('registrationAccessToken');",
													"    pm.expect(jsonData.internal).to.eql(true);",
													"    pm.expect(jsonData.enabled).to.eql(false);",
													"    pm.expect(jsonData.preRegistration).to.eql(true);",
													"    pm.expect(jsonData.registrationCompleted).to.eql(false);",
													"    pm.expect(jsonData.source).to.eql('default-idp-'+domain)",
													"    pm.environment.set('userTemp', jsonData.id);",
													"    pm.environment.set('userRegistrationURI', jsonData.registrationUserUri);",
													"    pm.environment.set('userRegistrationToken', jsonData.registrationAccessToken);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"John\",\n\t\"lastName\": \"Doe\",\n\t\"username\": \"john.doe\",\n\t\"email\": \"john.doe@mail.com\",\n\t\"preRegistration\": true\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initiate post registration flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be a redirection to confirm registration page\", function() {",
													"    pm.response.to.be.ok;",
													"    var responseHTML = cheerio(pm.response.text());",
													"    tests['Redirect to confirm registration page'] = responseHTML.find('span').text().includes('Thanks for signing up, please complete the form to activate your account');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{userRegistrationURI}}?token={{userRegistrationToken}}",
											"host": [
												"{{userRegistrationURI}}"
											],
											"query": [
												{
													"key": "token",
													"value": "{{userRegistrationToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userTemp}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users",
												"{{userTemp}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Invalid request - user not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"UM - update user - unknown user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"User [wrong-id] can not be found.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@mail.com\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/wrong-id",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users",
												"{{userUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - update user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.additionalInformation.profile).to.eql('https://my.profile.com');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"additionalInformation\": {\n\t\t\"profile\":\"https://my.profile.com\"\n\t}\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users",
												"{{userUM}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List",
							"item": [
								{
									"name": "List users",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ace28d5f-a975-4430-ba47-29184cf01460",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - list users\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currentPage).to.eql(0);",
													"    pm.expect(jsonData.totalCount).to.eql(1);",
													"    pm.expect(jsonData.data.length).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Assign roles",
							"item": [
								{
									"name": "Assign roles to user - role not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\"wrong-role-id\"]\n"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users",
												"{{userUM}}",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign roles to user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - assign roles to user\", function () {",
													"    let role = pm.environment.get(\"roleUM\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roles).to.eql([role]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[ \"{{roleUM}}\"]"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"users",
												"{{userUM}}",
												"roles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Groups",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"wrong\" : \n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - name required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create group - name field required\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[name: must not be null]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"UM - create group\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.name).to.eql('My Group');",
													"    pm.environment.set('groupUM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My Group\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create group 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"UM - create group 2\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.name).to.eql('My Group 2');",
													"    pm.environment.set('group2UM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My Group 2\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - name already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create group - uniqueness\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"A group [My Group] already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My Group\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Invalid request - group not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"UM - update group - unknown user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Group [wrong-id] can not be found.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My Group\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/wrong-id",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/{{groupUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"{{groupUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - update group\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.name).to.eql('My New Group');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My New Group\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/{{groupUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"{{groupUM}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Members",
							"item": [
								{
									"name": "Update group - member not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - update group - member not found\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.members).to.eql([]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My New Group\",\n\t\"members\": [\"wrong-member-id\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/{{groupUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"{{groupUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update group - member exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - update group - member found\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.members).to.eql([environment[\"userUM\"]]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My New Group\",\n\t\"members\": [\"{{userUM}}\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/{{groupUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"{{groupUM}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Assign roles",
							"item": [
								{
									"name": "Assign roles to group - role not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\"wrong-role-id\"]\n"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/{{groupUM}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"{{groupUM}}",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign roles to group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - assign roles to group\", function () {",
													"    let role = pm.environment.get(\"role2UM\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roles).to.eql([role]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[ \"{{role2UM}}\"]"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/{{groupUM}}/roles",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"{{groupUM}}",
												"roles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List",
							"item": [
								{
									"name": "List groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ace28d5f-a975-4430-ba47-29184cf01460",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - list groups\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currentPage).to.eql(0);",
													"    pm.expect(jsonData.totalCount).to.eql(2);",
													"    pm.expect(jsonData.data.length).to.eql(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Invalid request - group not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"UM - delete group - unknown group\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Group [wrong-id] can not be found.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/wrong-id",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups/{{group2UM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups",
												"{{group2UM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "List groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ace28d5f-a975-4430-ba47-29184cf01460",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - list groups - after delete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currentPage).to.eql(0);",
													"    pm.expect(jsonData.totalCount).to.eql(1);",
													"    pm.expect(jsonData.data.length).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"groups"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "35f0648e-0920-4673-98f8-09fd3bf1dd72",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "25349ed5-4030-41bc-a22b-2093961b43f4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configure application",
					"item": [
						{
							"name": "Create User Management application",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1195033-78b1-481b-acc9-845df5ddae80",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var body = JSON.parse(responseBody);",
											"pm.environment.set('clientUM', body.id);",
											"pm.environment.set('clientId', body.settings.oauth.clientId);",
											"pm.environment.set('clientSecret', body.settings.oauth.clientSecret);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"client-um\",\n  \"type\": \"WEB\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"applications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure User Management application",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c37cba72-91c2-4850-80cd-6fd3908e406e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 10000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b665041c-4138-4807-944d-1e278c44cfcb",
										"exec": [
											"let domain = pm.environment.get(\"domain\");",
											"let identityProvider = 'default-idp-'+domain;",
											"pm.environment.set(\"identityProvider\",identityProvider)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"settings\": {\n  \t\"oauth\": {\n  \t   \"grantTypes\": [\"password\"],\n       \"scopes\" : [\"openid\"],\n       \"enhanceScopesWithUserPermissions\": true\n  \t}\n  },\n  \"identities\" : [\"{{identityProvider}}\"]\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{clientUM}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"applications",
										"{{clientUM}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Authenticate User",
					"item": [
						{
							"name": "Authenticate - wrong user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"UM - authenticate - wrong user\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('invalid_grant');",
											"    pm.expect(jsonData.error_description).to.eql('Invalid or unknown user');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{clientId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{clientSecret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "username",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate - wrong credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"UM - authenticate - wrong credentials\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('invalid_grant');",
											"    pm.expect(jsonData.error_description).to.eql('The credentials you entered are invalid');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{clientId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{clientSecret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "jensen.barbara",
											"type": "text"
										},
										{
											"key": "password",
											"value": "wrong-password",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate - success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"UM - authenticate - success\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('read openid write');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{clientId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{clientSecret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "jensen.barbara",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user - disable user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"UM - update user\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.enabled).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"additionalInformation\": {\n\t\t\"profile\":\"https://my.profile.com\"\n\t},\n\t\"enabled\": false\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"users",
										"{{userUM}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate - user disabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"UM - authenticate - user disabled\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('invalid_grant');",
											"    pm.expect(jsonData.error_description).to.eql('Account is disabled for user jensen.barbara');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{clientId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{clientSecret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "jensen.barbara",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user - enable user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"UM - update user\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.enabled).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"additionalInformation\": {\n\t\t\"profile\":\"https://my.profile.com\"\n\t},\n\t\"enabled\": true\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"users",
										"{{userUM}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user - reset password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"myNewPassword\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}/resetPassword",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"users",
										"{{userUM}}",
										"resetPassword"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate - success after reset password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"UM - authenticate - success after reset password\", function () {",
											"     var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{clientId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{clientSecret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "jensen.barbara",
											"type": "text"
										},
										{
											"key": "password",
											"value": "myNewPassword",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid request - user not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"UM - delete user - unknown user\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"User [wrong-id] can not be found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/wrong-id",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"users",
										"wrong-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users/{{userUM}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"users",
										"{{userUM}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate - user not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"UM - authenticate - wrong user\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('invalid_grant');",
											"    pm.expect(jsonData.error_description).to.eql('Invalid or unknown user');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{clientId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{clientSecret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "username",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "abfa8366-3ee2-45b0-b658-0040b79d565c",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"organizations",
						"{{defaultOrganizationId}}",
						"environments",
						"{{defaultEnvironmentId}}",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}