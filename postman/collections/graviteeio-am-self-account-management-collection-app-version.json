{
	"info": {
		"_postman_id": "d0fdab08-fbf7-4671-8952-b41c118261cf",
		"name": "Gravitee.io - AM - Self Account Management - app version",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin api token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{management_url}}/management/auth/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create self account management domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set('domain', jsonData.id);",
									"pm.environment.set('domainHrid', jsonData.hrid);",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 5000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"self-account-management-test\", \n\t\"description\": \"test self-account-management impl\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('client', body.id);",
									"pm.environment.set('clientId', body.settings.oauth.clientId);",
									"pm.environment.set('clientSecret', body.settings.oauth.clientSecret);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"my-client\",\n  \"type\": \"WEB\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"settings\": {\n  \t\"oauth\": {\n  \t  \"redirectUris\": [\"https://auth-nightly.gravitee.io/myApp/callback\"],\n  \t  \"scopeSettings\": [{\"scope\" : \"openid\", \"defaultScope\": true}]\n  \t}\n  },\n  \"identityProviders\": [\n    { \"identity\": \"default-idp-{{domain}}\", \"priority\" : -1 }\n  ]\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{client}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{client}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"UM - create user\", function () {",
									"    var jsonData = pm.response.json();",
									"    let domain = pm.environment.get(\"domain\");",
									"    ",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.internal).to.eql(true);",
									"    pm.expect(jsonData.enabled).to.eql(true);",
									"    pm.expect(jsonData.preRegistration).to.eql(false);",
									"    pm.expect(jsonData.registrationCompleted).to.eql(true);",
									"    pm.expect(jsonData.source).to.eql('default-idp-'+domain)",
									"    pm.environment.set('userUM', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"password\": \"#CoMpL3X-P@SsW0Rd\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/users",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable self account management feature",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Self account management enabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.selfServiceAccountManagementSettings.enabled).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"selfServiceAccountManagementSettings\": {\n    \"enabled\": true\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body).to.have.property(\"authorization_endpoint\");",
									"    pm.expect(body).to.have.property(\"token_endpoint\");",
									"    pm.expect(body).to.have.property(\"revocation_endpoint\");",
									"    pm.expect(body).to.have.property(\"userinfo_endpoint\");",
									"    pm.expect(body).to.have.property(\"registration_endpoint\");",
									"    pm.expect(body).to.have.property(\"end_session_endpoint\");",
									"    pm.expect(body).to.have.property(\"introspection_endpoint\");",
									"",
									"    pm.environment.set('authorizationEndpoint', body.authorization_endpoint);",
									"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
									"    pm.environment.set('userinfoEndpoint', body.userinfo_endpoint);",
									"    pm.environment.set('revocationEndpoint', body.revocation_endpoint);",
									"    pm.environment.set('registrationEndpoint', body.registration_endpoint);",
									"    pm.environment.set('logoutEndpoint', body.end_session_endpoint);",
									"    pm.environment.set('introspectionEndpoint', body.introspection_endpoint);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/{{domainHrid}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domainHrid}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate gateway token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('access_token');",
									"    pm.expect(body).to.have.property('token_type');",
									"    pm.expect(body.token_type).to.eql('bearer');",
									"    pm.expect(body).to.have.property('expires_in');",
									"    // pm.expect(body).to.have.property('refresh_token');",
									"    pm.expect(body).to.have.property('scope');",
									"    pm.expect(body.scope).to.eql('openid');",
									"    ",
									"    pm.environment.set('access_token', body.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clientSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clientId}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "jensen.barbara",
									"type": "text"
								},
								{
									"key": "password",
									"value": "#CoMpL3X-P@SsW0Rd",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "scope1",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Invalid Case",
			"item": [
				{
					"name": "Factors",
					"item": [
						{
							"name": "Enroll Factor - Invalid request - malformed json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Enroll factor malformed json\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.http_status).to.eql(400);",
											"    pm.expect(jsonData.message).to.eql(\"Unable to parse body message\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/factors",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"factors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll Factor - Invalid request - factorId required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Enroll factor missing factorId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.http_status).to.eql(400);",
											"    pm.expect(jsonData.message).to.eql(\"Field [factorId] is required\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/factors",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"factors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll Factor - Invalid request - unknown factor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Enroll factor unknown factorId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.http_status).to.eql(404);",
											"    pm.expect(jsonData.message).to.eql(\"Factor [unknown] can not be found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"factorId\": \"unknown\"\n}"
								},
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/factors",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"factors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Factor - Invalid request - malformed json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Enroll factor malformed json\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.http_status).to.eql(400);",
											"    pm.expect(jsonData.message).to.eql(\"Unable to parse body message\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/factors/test/verify",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"factors",
										"test",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Factor - Invalid request - code required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Enroll factor missing factorId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.http_status).to.eql(400);",
											"    pm.expect(jsonData.message).to.eql(\"Field [code] is required\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/factors/test/verify",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"factors",
										"test",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Factor - Invalid request - unknown factor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Enroll factor unknown factorId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.http_status).to.eql(404);",
											"    pm.expect(jsonData.message).to.eql(\"Factor [unknown] can not be found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"123456\"\n}"
								},
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/factors/unknown/verify",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"factors",
										"unknown",
										"verify"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Profile",
					"item": [
						{
							"name": "Request Update Password - Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Fails if auto redirects are enabled",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"    var body = pm.response.json();",
											"    pm.expect(body.http_status).to.be.equals(400);",
											"    pm.expect(body.message).to.be.equals(\"Field [password] is invalid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\" : \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/changePassword",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"changePassword"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request Update Password - Body is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Fails if auto redirects are enabled",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"    var body = pm.response.json();",
											"    pm.expect(body.http_status).to.be.equals(400);",
											"    pm.expect(body.message).to.be.equals(\"Body is null or empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/changePassword",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"changePassword"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request Update Password - Body is Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Fails if auto redirects are enabled",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"    var body = pm.response.json();",
											"    pm.expect(body.http_status).to.be.equals(400);",
											"    pm.expect(body.message).to.be.equals(\"Body is null or empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/changePassword",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"changePassword"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Nominal Case",
			"item": [
				{
					"name": "Profile",
					"item": [
						{
							"name": "Get Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has proper response\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('username');",
											"    pm.expect(body).to.have.property('displayName');",
											"    pm.expect(body.username).to.eql('jensen.barbara');",
											"    pm.expect(body.displayName).to.eql('Jensen Barbara');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/profile",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has proper response\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('status');",
											"    pm.expect(body.status).to.eql('OK');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Donald Hope Courtney Jr\",\n  \"given_name\": \"Donald\",\n  \"family_name\": \"Courtney\",\n  \"middle_name\": \"Hope\",\n  \"nickname\": \"Dj\",\n  \"profile\": \"https://www.linkedin.com/in/donald-courtney-b98106190/\",\n  \"picture\": \"https://media-exp3.licdn.com/dms/image/C4E03AQFIFcQeELwSXg/profile-displayphoto-shrink_400_400/0/1604523349570?e=1631750400&v=beta&t=77yVpbv5xfu5pN-yaBqX0_B1NDdT1ovgtq9ZoKDXmEQ\",\n  \"website\": \"https://www.linkedin.com/in/donald-courtney-b98106190/\",\n  \"email\": \"donald.courtney@graviteesource.com\",\n  \"gender\": \"male\",\n  \"birthdate\": \"1992-12-13\",\n  \"zoneinfo\": \"UTC−05:00\",\n  \"locale\": \"en-US\",\n  \"phone_number\": \"+1 (352) 226-3641\",\n  \"address\": {\n      \"street_address\": \"19616 Wyndmill Cir\",\n      \"locality\": \"Odessa\",\n      \"region\": \"Florida\",\n      \"postal_code\": \"33556\",\n      \"country\": \"USA\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/profile",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Profile After Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has proper response\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('username');",
											"    pm.expect(body.username).to.eql('jensen.barbara');",
											"",
											"    pm.expect(body.additionalInformation['middle_name']).to.eql('Hope');",
											"",
											"    pm.expect(body).to.have.property('nickName');",
											"    pm.expect(body.nickName).to.eql('Dj');",
											"",
											"    pm.expect(body).to.have.property('profile');",
											"    pm.expect(body.additionalInformation.profile).to.eql('https://www.linkedin.com/in/donald-courtney-b98106190/');",
											"",
											"    pm.expect(body).to.have.property('picture');",
											"    pm.expect(body.picture).to.eql('https://media-exp3.licdn.com/dms/image/C4E03AQFIFcQeELwSXg/profile-displayphoto-shrink_400_400/0/1604523349570?e=1631750400&v=beta&t=77yVpbv5xfu5pN-yaBqX0_B1NDdT1ovgtq9ZoKDXmEQ');",
											"    pm.expect(body.additionalInformation.picture).to.eql('https://media-exp3.licdn.com/dms/image/C4E03AQFIFcQeELwSXg/profile-displayphoto-shrink_400_400/0/1604523349570?e=1631750400&v=beta&t=77yVpbv5xfu5pN-yaBqX0_B1NDdT1ovgtq9ZoKDXmEQ');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/profile",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Redirect URL for Change Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Fails if auto redirects are enabled",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(302);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/changePassword",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"changePassword"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has proper response\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('data');",
											"    pm.expect(body).to.have.property('currentPage');",
											"    pm.expect(body).to.have.property('totalCount');",
											"    pm.expect(body.currentPage).to.eql(0);",
											"    pm.expect(body.data).to.not.null",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/activity",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"activity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request Update Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\" : \"#CoMpL3X-P@SsW0Rd123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/changePassword",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"changePassword"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate gateway token After Password Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    // pm.expect(body).to.have.property('refresh_token');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('openid');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{clientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{clientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "jensen.barbara",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd123",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "scope1",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Factors",
					"item": [
						{
							"name": "Create factor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var body = JSON.parse(responseBody);",
											"pm.environment.set('factorId', body.id);",
											"pm.environment.set('factorType', body.factorType);",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\":\"otp-am-factor\",\n    \"factorType\":\"TOTP\",\n    \"configuration\":\"{\\\"issuer\\\":\\\"Gravitee.io\\\",\\\"algorithm\\\":\\\"HmacSHA1\\\",\\\"timeStep\\\":\\\"30\\\",\\\"returnDigits\\\":\\\"6\\\"}\",\n    \"name\":\"TOTP\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/factors",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"factors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get factors catalog",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has proper response\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.be.lengthOf(1)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/factors/catalog",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"factors",
										"catalog"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll Factor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"factorId\": \"{{factorId}}\"\n}"
								},
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/factors",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"factors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get enrolled factors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has proper response\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.be.lengthOf(1)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/factors",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"factors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove factor from user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/factors/{{factorId}}",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"factors",
										"{{factorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get enrolled factors (bis)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has proper response\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.be.lengthOf(0)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/factors",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"factors"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Recovery code",
					"item": [
						{
							"name": "prepare",
							"item": [
								{
									"name": "Create recovery code factor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var body = JSON.parse(responseBody);",
													"pm.environment.set('recoveryCodeFactorId', body.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"recovery-code-am-factor\",\n    \"factorType\": \"Recovery Code\",\n    \"configuration\": \"{\\\"digit\\\":8,\\\"count\\\":10}\",\n    \"name\": \"Recovery Code Factor\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/factors",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"factors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Enable recovery code factor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(function(){}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"factors\": [      \n       \"{{recoveryCodeFactorId}}\"\n    ],\n    \"settings\": {\n        \"mfa\": {}\n    }\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{client}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"applications",
												"{{client}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Enroll recovery code factor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/{{domainHrid}}/account/api/auth/recovery_code",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domainHrid}}",
												"account",
												"api",
												"auth",
												"recovery_code"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get recovery codes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has proper response\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.be.lengthOf(10)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/auth/recovery_code",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"auth",
										"recovery_code"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove recovery code form user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/auth/recovery_code",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"auth",
										"recovery_code"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get recovery codes - after deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has proper response\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.be.lengthOf(0)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{gateway_url}}/{{domainHrid}}/account/api/auth/recovery_code",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domainHrid}}",
										"account",
										"api",
										"auth",
										"recovery_code"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove recovery factor from app",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"factors\": [\n       \"{{mfaFactorId}}\"\n    ],\n    \"settings\": {\n        \"mfa\": {}\n    }\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{client}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"applications",
										"{{client}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete recovery Code factor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"recovery-code-am-factor\",\n    \"factorType\": \"Recovery Code\",\n    \"configuration\": \"{\\\"digit\\\":8,\\\"count\\\":10}\",\n    \"name\": \"Recovery Code Factor\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/factors/{{recoveryCodeFactorId}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"factors",
										"{{recoveryCodeFactorId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"organizations",
						"{{defaultOrganizationId}}",
						"environments",
						"{{defaultEnvironmentId}}",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		}
	]
}