{
	"info": {
		"_postman_id": "583cba4d-3351-44a3-a3e8-a99d88e2b448",
		"name": "Gravitee.io - AM - Openid DCR",
		"description": "Test openid connect dynamc client registration specifications: https://openid.net/specs/openid-connect-registration-1_0.html",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "571e9b59-b9e7-452c-9469-9786ded290a6",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{management_url}}/admin/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"admin",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create dcr domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b286f0fa-cfcc-45b9-863a-1dbc87fdf835",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"DCR disabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowLocalhostRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowHttpSchemeRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowWildCardRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isOpenDynamicClientRegistrationEnabled).to.eql(false);",
									"    ",
									"    pm.environment.set('domain', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"dcr\", \n\t\"description\": \"test dynamic client registration\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default identity provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e92f1ea-5d06-4aa3-9ddc-95b0359a8f20",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/identities/default-idp-{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"identities",
								"default-idp-{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create in-memory IDP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e92f1ea-5d06-4aa3-9ddc-95b0359a8f20",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('idp.inmemory', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/identities",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"identities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get default certificate ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e92f1ea-5d06-4aa3-9ddc-95b0359a8f20",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get default certificate id\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.environment.set('defaultCertificateId', body[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e92f1ea-5d06-4aa3-9ddc-95b0359a8f20",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/certificates/{{defaultCertificateId}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"certificates",
								"{{defaultCertificateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jks certificate rs256",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1ab79e9-b254-47f9-8af9-e6ab3e47ab58",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Extension Grant - create jks certificate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('certificateJks', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"javakeystore-am-certificate\",\n  \"configuration\": \"{\\\"jks\\\":\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"server.jks\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"size\\\\\\\":2237,\\\\\\\"content\\\\\\\":\\\\\\\"/u3+7QAAAAIAAAABAAAAAQAJbXl0ZXN0a2V5AAABYkPPuJkAAAUCMIIE/jAOBgorBgEEASoCEQEBBQAEggTqr5aJvYjZG/WQ8gGjoB2IzOwULJfXRbSwn0H9SP6vXE7TkFdVC6e7jOsPwwUVKwiTRCrNLL3G9OYyBvQEJv1NdPGYpqrD+4bzr5oVKQbwuXAs455phdjZ5jFlGjjowHBU7loxm5TJDncBfYoffptiStRSjzuuEWRPaRnUtL1PMidp4XdSOxzknBQ86zLz266y6pksmrSyCGxXiZwvnzq2TRvZOAT5haYA1wJOZwXAE4xk00C9Zr5NBIgyAZ0fsuZfquLhxpEgDg8XFsXAL7O4U9ocETktH4j5JnYWng6A90Ke2l4CUKjPvXTMYQr2ll26BjpE/TGyXRMNqqSzZ6tujn9wji1stGUS840AFye/HfZyQlkZBV/CyyDx/OkP0D9U5xO5jCnurGrMrbskIqcLchyb9xobr/RbnrpwMnK2XteCX9WRog064uYY8r722c81jFM6pL9Ue/Jm6h5fkHKZdJPJtMqdZf9fgb8VbxranRQDd3EIxx0yIXBddv6lqWMISXJCAni3MpBwiUAgzDdVVQYJlzu8t1x8cEpIrqD0sNQhGKmmDWwAE2mKJrYLaqaICKG9YaWy65ZPUOdQMUFzYOxpjNAvbDE/ZUs2jU1AbBpCk0HpgoBYckx0bIAN0buwaPUMwBgCzOjaQ6EQkNiORJoBdxqgI2GsN4j3TzUFSUIRZlFRxbn/f1Oo9SSznIfSzMRDEfoZYdLzwm01yBl5VwmCY5azrPGtAl+hmgBOdYM4O+svGTam+E4Iw2abX9T+B1im8ip4fEtn98Pgr//d+1cbYC2kcPMadfjMbp3d62z4DH9ABqTnEHBbfo1GgOpzpMRaKfrKvPap3PniP0YYqwDRJ4zn7OfYmrxVy8MENqGLveIksyvRj1K8Y3uexxZQ6CMAWbUuONJHHfBoTYsK+LdYxl7fCSuxqx9z0V3x5R3PCXchxNqR9f2tU1uDBqlXDESko0g9X0Qi1pLMk8A7wE5g8mChFhhrakrRMauwH0JkyLw+vcVpLqsyxsAcIm5bX3IWivPrbLZRW3lSLofdXj0XEuP2vnxdC82UPI3VQqqAI1UzL9sUl/cqhNGNztyRYAEv3FWttW2YTA1dlgq4DjPIRFAS4HyzgHeg8Jcgg/kRHbaLT4j2JVdqFG22CL+bayA6KqWeHos2bAA3ydw34y3QtJ0cqcH3iUZ0R0z++rG6iwDKPMkNW4osWP51UcFLXY/uNGSoverCQGJsD+wKvyi9KGDCsdjacgZJJtAsyOCxQssIPeB3GWt0rJi86SUqg0praNBXHKcbx5wSvp9i6uuaZhPzcvECPW/kgzPRaZLfneEZI+UPy31/jP8EUfQ9JT2hQ7w69jgVDE0WFhmNt8I/VrCMxFwCqYvA4m8xLmplZhCy+HUbLJMcwAx0yzbvH63kwcOASJC5JrnK0/P7UOc2NdAgXO/WrCZssRresxRNKaZvJTJtTrhElJKP9yD1zjiS4L5/PpGIW5md/qKX91zz0k5AzCqHdhBaRx7K7QVeWVEN8u4ZySbj9vCTLs1jTPcX7YpsPJBRGvqA4j9AYcBLzmhQa1huLVZTANE6j+vkgPvgPq4ToyTMKvUJwLbmIobX0ZyQKPGhe3LVorfM4uaSxq8+jMV4+0uddFNpLm9eJG+ZLbeVlu0157q45lxuQrO1VOvVLdqsrwAAAAEABVguNTA5AAADcTCCA20wggJVoAMCAQICBBCfcKYwDQYJKoZIhvcNAQELBQAwZzELMAkGA1UEBhMCVVMxDjAMBgNVBAgTBVN0YXRlMQ0wCwYDVQQHEwRDaXR5MRUwEwYDVQQKEwxPcmdhbml6YXRpb24xDTALBgNVBAsTBFVuaXQxEzARBgNVBAMTCldlYiBTZXJ2ZXIwHhcNMTgwMzIwMTQyODI5WhcNMTgwNjE4MTQyODI5WjBnMQswCQYDVQQGEwJVUzEOMAwGA1UECBMFU3RhdGUxDTALBgNVBAcTBENpdHkxFTATBgNVBAoTDE9yZ2FuaXphdGlvbjENMAsGA1UECxMEVW5pdDETMBEGA1UEAxMKV2ViIFNlcnZlcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKu+JWbf4oP3xTz33EgXnD0jgL/clO/9lV25GFwygaR8F7qzPaknaR/psyO1acRv3UfrcYdZ2/nnh7PcchjEFmxh11pT3di2KquxsIJBzcYyYUHXbRaBRZ+Oqy884xzPc/IXLfLD5csCI0PQ+XaW/wrp6Mm9/CZNGHLUMjk9Aa9FbPnsh2gLGNkTwf4uvv11z94WFy7oWSzFra26C/zq3I7fywD2/UvYIJCOypAvxOcwdsNXxqEYroBu/jcoyMdXq2AWE6EdzVrZhpgK0QjTIoofa3QreGsdHBR+Cq7hDnGpakGQQVfTlhbzKCtaK9d8PAaOpwzKIcRiVG8NytE/QmECAwEAAaMhMB8wHQYDVR0OBBYEFJTE/I9yfWZ8smIobMkV2dtfpdFhMA0GCSqGSIb3DQEBCwUAA4IBAQCqZhd8O5GUUw1uX6jQKLjqjfzt7dPKMhNSUKPLrBktiJa+ZM/M+mGnEH6/TYcwzazAfeV+JgbY1KpMq1UVOW6KdDga2yXj43mVz7yzVB3KPIdMGSI4pqZxptQ7LEGVtSDsgqpQPi3qpsWUMLMW6heOHKc66Bdf9RE0S1ds+yMg9dNQBkTEXJKR6S+koyDcGnrZgwwVJ5T5+5ZUiGxe2wdGs7DUQCdDVwRZwkWzdIXPnK98PwFh7ivYI6+tnV+AHZg02IDAZ49rwNtQsExeQepNh2IPwCe+7TlfZ8TeiwcxL2ngqKA9LFP2do8YDz9XZbfl9AfS3GXeZsq3ihR3nffqT6271mTSYWrugh9IagHGV2PT6mo=\\\\\\\"}\\\",\\\"storepass\\\":\\\"letmein\\\",\\\"alias\\\":\\\"mytestkey\\\",\\\"keypass\\\":\\\"changeme\\\"}\",\n  \"name\": \"Test\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jks certificate rs512",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1ab79e9-b254-47f9-8af9-e6ab3e47ab58",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Extension Grant - create jks certificate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('certificateJksRs512', jsonData.id);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"javakeystore-am-certificate\",\n  \"configuration\": \"{\\\"jks\\\":\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"server.jks\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"size\\\\\\\":2237,\\\\\\\"content\\\\\\\":\\\\\\\"/u3+7QAAAAIAAAABAAAAAQAJbXk0MDk2a2V5AAABaiMQHZ4AAAmFMIIJgTAOBgorBgEEASoCEQEBBQAEgglteC1CPhvSxMwR+diDjn+U3KUGveBpVwabrWiBGJi+eEGx+ijDJMq6DKiiedoOHIX2fEqoQU3EjGHEps/xbBYN482Qb2tgsWFN1uWn5LP4jhfuKGdsVAQj6KYzZWGZfNgJE8mfMP/yXONSlPRKanO/EI746C1paDGuAZHgSrsiFeTdlDN2od+6g+zwwjoPsWvVYZo8zWhA0gUwAysY+HjYFJulrjexq3EpOPE3s08Hnq+BN5qz/qNQCElbdeWNJ/Oh9xMLGEOSWDX+6TuO1wf53XH3lRlLEmMOoxw5WeW3pWQ3c0J36E6RjNhp9U54TenS7Aub6Rujud9/f5Veo6aDk7HOkmiMRr9fX5OXboFp5GDI1KOMHNOUO96mKzvYQOdbaIPrvaG4s8mZcv6pbwSceCiEGg8M2Sp+u03aIhjVZExgOkW8BzPI+bXtEKDBI/X9ce0wu74k1R3vIlrpkv3xGZQ5eKPzA9bpo1NJdZdOiTjhsjJFqi+OaPr4n79cMAtNChwRRdq4jj99hcBY4yzF1afLL8a1SguxctNgv8NsWNdzwee08PltRlKv8fLtnNikZGWmEvSjTYXLMCx77NSPpAf5jI0tldvmNsylLtzL9kR+irXE4lct6e7WPw8paGLxkLxKaLwEyAm4geod3IfIUVOV4Hmzij5FpeXk22gDikwDD4qp8/PEhvB0vgjz9sNEMEcQlKrG+SwyqcIp5KhHWmFSLofMmCAzTKWmexcadI57UfCRcoq61ZEGIoBfXAcFMKL7LgM4zHZS+RhOloNzniu1unq7mBAK+cPxZULOC+q0TVmWYzhUzf/ngS1A+VuOzDAGwa5SIdkWYbOKOgUUL/pt5hmGzsN6ck3Z4xftQlmAM/q3sRPJQciICurccyXJIqSMvWaJYxMZT9GwgPk6j1mi9DO34NM5KKjEszAQsObqVbQeW215AwzmlKq4BjKaZIMu0uW8yB53AdiEhoCDZReVxxoQWeFijdhgcgfSxhEPyZkMoCAhs8caArmrBAMl1GBVGLKnhRpcPFwTg7NjLsKSHKVTsok6ntvZ4Z1t70izr+qLiSI8gjcgCka3ujXrDLd7FJnkKaiDjyg2KU6ygmCl84Hj6fGDHew7abqjd9U70Lw+4v4cQZkO7mGrgolBi7PQ0OFeiUvwIzS5v6OwMLROfUrxAI376L6X3jeN41ncfWrjIVbPrUqQNRLTXrbdQKUZ3wUMqmqYjiIn82Idf8B+sX8PLduj/d7W+utbH0VElulmKaTS+7yV1AebeCiKcJwEQJsMw16UEdlVkYRd0JPd+tgthHETHzyao3HKEQfJIHwXVZ2UI96/U4YEj/07vU3yuweAdxvrRGQ+nZhNKSKLL5M6C1EAmPegsOd4thd+/htsi/9sZGz236iCeKIkpf8afL+y2AoTQAEFGtyA5l95//uj3GwjB3+A6Z1yc3C6O7K98/QNW0cbEG9TaXhS1ra24t10QECiv93cykXRpngtvpR+o/lhQ2d1vbZEaEjjUM92IXD2juEZqFOfrSKsYt6fWe6pew88MtcwthAS5i6DON25hS/rrwbRhUAgtOWt5ulu9r6R5bT8lz7J2FogxkK/UAFSDm7axd6gJ3G5P5Vv3GP6l72HRfeKK9QfDUe/ASwjbSHB5F+JmbJTGxo5tELur3+fWI3SUpTShn24nCpISsfS+N9N+QlwXHPAUlGca7EAMlDWuCWPpseZI1NAVDKTQpGxy/trl/Ff6r8WlJPrX5p1WRYss5KUU/1bWAnflGh6OTBR+hSNGgfi1xy27/BGiomMpD0rmBvHHQ5s3vejYLcBxUxYqgXfdljDk2ZHUjJJn8b26q61PVGI8AXPHGSvay4xVObTBQMhLthAWb6g0YCwAmWCBbbZdco6muPU7n5wu4dSSetmNh0ppL/36ZDvoasVwyCnQPiZdx5a4j5WUfskfNK6/OcnN1mAX0cylUXnlF/xTlsTt8RoGyyYXBT7yRK8KZnl5iyft/yRS9MOdroPpSy8tQrGxD0OqHFco+LOoZC4Ksd2JG75EOQ0Ieg5btqf9CTo+/kCLzO8DVHvAkVDKY21D2gEoCrq++4zXtPZeKEi8PFhHMHndIkCIDojQ3Qy5ozl9HVNaCb+w911MS8B+7CBBLSove7roWk9Os9WfO+kfMKjN3zyKSh43jp3CANJN6I44rS8WwS4O8OaaVevMZkjxt+APpXh6sOSp8IJYBiTqJRfHFkp7iVBx3xMCu68Xe2kGkUg3DSMTnObokzHlRcG1lsXpgm+WPpjbdHcpi6CU6d0QmByQ3XYdc3lECsBckZyMwoEH5qDWM0VWxoZwXiN1Uqbc25PTtSa2zX8uvC0ttt+H+dVuSTvATrWv/HetEyz5w7MzaOywppqR1CfBmek0cPqiUKkwL09SoX6gsW0rdT7f889cadNGFf5F8udjsgwKHeXhwiPXfe7PBZiBSixwZgFR38CxmMkN96pTHrx1rBKRAQRj+EGQ9YUuGf0fII4kRSiHvNp/KOKEZEOaD1iIln37S+ziGtOojkaFWFe4RJW8AxrONJNV5Pwd3s65mTlYrGukh2NSQ9e1tQMOW0KRgAEIMFfm7EjjmYFqObqfOFBvzDS8dMLSyYgdfx5aJlXEpxC3S1l9xVcSDuFiD7l/ogifrBeBLzLte/9Oc2HU0aA/zqOHVqUxOcNmSlYZdQOybV2uapLEb0Dr7WeoRCw1xYlbWAFkpVUUhLKM4YahSzCCRT/e86kYHWYd3/68hkU1W3z48tqPPnX2T0Eh05lPLhPzQrudp+ixpNEiMSz85pgvwb1pHx+qipm8+1wTVEi1cf8tKC9BTfJFzEl4FJbqjJfC+ksi/l7hPEqTmG88FkHeLdMBMvUvVwhtMFVLY70bthkGaDSl8vLerzv+AIso3htgz64B0x57880wcLRAz9GacJAbij28bcY2LKl3cOJ3e1dbfdXxOZC5D+bDSffW1njTWAdsnM5XIRovaBflHzNdQjMKz8Jc3hlEgUINSpbhDpzppqNW7NbQGNytvokI8LQf1GK1pAN7F16vXAFKxj+wh6eAY2R5Q8FBR2q2lQxOWuB/zO0tkEyBLaw8QyO11NC5jgHes8YVPTVP41raY/67m/J4fTgh4ZFfHi4qyq5fMGvKxRpXIq81QAb2G/W89PFcB/+ZE9L7koUAdW7RJB9i9WQzKgN72cSBAxMQlPaGVYZwgAAAAEABVguNTA5AAAFcTCCBW0wggNVoAMCAQICBDaavsowDQYJKoZIhvcNAQENBQAwZzELMAkGA1UEBhMCVVMxDjAMBgNVBAgTBVN0YXRlMQ0wCwYDVQQHEwRDaXR5MRUwEwYDVQQKEwxPcmdhbml6YXRpb24xDTALBgNVBAsTBFVuaXQxEzARBgNVBAMTCldlYiBTZXJ2ZXIwHhcNMTkwNDE1MjIxMzM5WhcNMTkwNzE0MjIxMzM5WjBnMQswCQYDVQQGEwJVUzEOMAwGA1UECBMFU3RhdGUxDTALBgNVBAcTBENpdHkxFTATBgNVBAoTDE9yZ2FuaXphdGlvbjENMAsGA1UECxMEVW5pdDETMBEGA1UEAxMKV2ViIFNlcnZlcjCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAJqJZpu675DKgGwcLka8dcio/QXOASncaiGTBxAxId/06DKCzUcOQUePt9PARIPtp+nbNxcfg7UdG28/pOpqD6Rj8LJizIXdC6Wpo++npXaJVttqIjxE7XW+rMc1G8WfxOpTzfKrASlOGh468b5sp7SW0wKeqPRmSfE8Lb9f7phxqGa2dtU+fzeriAqSIeFSrb/3P7o/0n5cUhTvirornrg/bHgMLBSEpQHWOZetJnUkZlCXV4faj1KpTPLrSU0umFdQKeEJFLDdMME1VkZcuC233Ny2hYA8AKIwhhGqzORyXrO9wScZTwPZ7p+03WLTsBtmxyk4nSkP4YHe5XX/voInDT6xZmlA8EE6u5rnayBUUO34GeWSmds1D7YzAUlQioUN7KRYQ3kzDE/+IKH63W22g6ootipMT4GDJXlEulSkv0E17vicAhaoZ/1j9XjKwdpc+tLL4tueDU+S/z9wz9uWkSMFDuG+EpLUoCM8YucIVDx7NJ/0dKECYyssUN7VHwP9iwruj0MkRYfLZXyM+CYQqDLQ/84DZviHyY2GmYoxtrkJxYvTqEB3OFzqoX5YTQKTIIawfltoWjbGDZa4xTgUBPM3O7ZWVJNfUVhCVYihsCTxlGd9ou84A+bVPv3FSboTt3QgZk/e3DjVmqB1HiB4TcW7eAVQ+nC3gaDqFJaNAgMBAAGjITAfMB0GA1UdDgQWBBTrAv63XW6wbcw3BxwFMyLuOadOezANBgkqhkiG9w0BAQ0FAAOCAgEAg+Yn44iaiFX55TLbZOT6cKVWtNd2NimPCjYGhEO/WMX316RM6p7sUfY731o0kxN2rUmrXUoPjgcLq+bw9Q53tN0b3aX8Yam1pewLwiPuoq38bOhl9/EpclWp5IqRyQjj/PxuGpoTmtBPuoMLGgpqlcS9gjxHdL06zXarZwHAXWn9Dy5ziHIX8YOXXXjCRcC72HxekcLWL/kjP5+bOmZydT1+TcNuTyQOX4XeqyNTXxvKwh632WyQVhmg8SBlOqJeJ0/BTv3YgUsl2U2zAcwVfTH91myAZIXRhr8KNYktLDRUb7k77UR5tWVRPyhLXOW8FYx8FaSY6GnmH5k4QMY1qRMjyJTjWc+Md+glnCkeZdEzPYFuW6ucuq4CVxt0AtvBgxc29eoenBYqpK43l8V3CpQ3rUrHj5XCjQpV/KbsA2BxTUnLCtCficq0eIFFyntNuRgLcTape5g7rJ6Z8rudwesfz8vnD9ej/iM3ZpvXjd9HW7BU3RzIqUfNb830ZNQTQ6hPIPtwzT3FXN1HijcPMjCPsreSIZ+KcpOxhL3na7m+qOr9Nv97SBJCUOs0H8JxMkrgBnD7rtD1eUQnuk8DoYbBc0fw+J/0dKk5EqI6kk0ThnJmCKVRLON1ftehOMEAJMZ9cb0uBDHSYILZgRKJoY9rLZaYTGvOvjSdf4qls+1Fx6JtUglbweIFy9Cv720G4PDtsQ==\\\\\\\"}\\\",\\\"storepass\\\":\\\"letmein\\\",\\\"alias\\\":\\\"my4096key\\\",\\\"keypass\\\":\\\"changeme\\\"}\",\n  \"name\": \"my4096key\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bfe78ac1-144a-4bbd-abf9-55e160e723bf",
								"exec": [
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5332b6f5-7419-4792-a30f-cce968d3d67e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body).to.have.property(\"authorization_endpoint\");",
									"    pm.expect(body).to.have.property(\"token_endpoint\");",
									"    pm.expect(body).to.have.property(\"revocation_endpoint\");",
									"    pm.expect(body).to.have.property(\"userinfo_endpoint\");",
									"    pm.expect(body).to.have.property(\"registration_endpoint\");",
									"    pm.expect(body).to.have.property(\"registration_renew_secret_endpoint\");",
									"",
									"    pm.environment.set('authorizationEndpoint', body.authorization_endpoint);",
									"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
									"    pm.environment.set('userinfoEndpoint', body.userinfo_endpoint);",
									"    pm.environment.set('revocationEndpoint', body.revocation_endpoint);",
									"    pm.environment.set('registrationEndpoint', body.registration_endpoint);",
									"    pm.environment.set('registrationRenewSecretEndpoint', body.registration_renew_secret_endpoint);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{gateway_url}}/{{domain}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domain}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - Non DCR domain",
			"item": [
				{
					"name": "Non DCR domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f14af8bd-e84e-480e-b4dc-2c110d1f3761",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Non DCR domain\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body.error).to.eql('registration_forbidden');",
									"    pm.expect(body.error_description).to.eql('Not allowed to access to this resource.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - open DCR",
			"item": [
				{
					"name": "Configure open DCR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "286df3a2-0e06-4b00-9614-3b0fd9ceecb9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR enabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isOpenDynamicClientRegistrationEnabled).to.eql(true);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oidc\": {\n    \"clientRegistrationSettings\": {\n      \"allowLocalhostRedirectUri\": false,\n      \"allowHttpSchemeRedirectUri\": false,\n      \"allowWildCardRedirectUri\": false,\n      \"isDynamicClientRegistrationEnabled\": true,\n      \"isOpenDynamicClientRegistrationEnabled\": true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register open client",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has default attributes\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('open_dcr_client');",
									"    pm.expect(body.application_type).to.eql('web');",
									"    pm.expect(body.grant_types[0]).to.eql('authorization_code');",
									"    pm.expect(body.response_types[0]).to.eql('code');",
									"    ",
									"    pm.environment.set('newClientForDCRTests', body.id);",
									"    pm.environment.set('newClientIdForDCRTests', body.client_id);",
									"    pm.environment.set('newClientSecretForDCRTests', body.client_secret);",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"client_name\": \"open_dcr_client\",\t\n   \"redirect_uris\":\n     [\"https://client.example.org/callback\",\n      \"https://client.example.org/callback2\"],\n   \"logo_uri\": \"https://client.example.org/logo.png\",\n   \"subject_type\": \"public\",\n   \"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n   \"request_uris\":\n     [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get open client - with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"redirect_uris\");",
									"    pm.expect(body).to.have.property(\"grant_types\");",
									"    pm.expect(body.response_types).to.eql([ 'code' ]);//default value",
									"    pm.expect(body.grant_types).to.eql([ 'authorization_code' ]);//default value",
									"    ",
									"    //The Authorization Server need not include the registration_access_token or registration_client_uri value in this response unless they have been updated.",
									"    pm.expect(body).to.not.have.property('registration_access_token');",
									"    pm.expect(body).to.not.have.property('registration_client_uri');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch open client - with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('Client patched via DCR');",
									"    pm.expect(body).to.have.property(\"response_types\");",
									"    pm.expect(body.response_types).to.eql(['token', 'code', 'code id_token']);",
									"    pm.expect(body).to.have.property(\"grant_types\");",
									"    pm.expect(body.grant_types).to.eql(['implicit', 'authorization_code']);",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"client_name\": \"Client patched via DCR\",\n   \"response_types\" : [\"token\", \"code\", \"code id_token\"]\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update open client - with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('Client name updated via DCR');",
									"    pm.expect(body).to.have.property(\"response_types\");",
									"    pm.expect(body.response_types).to.eql(['code']);",
									"    pm.expect(body).to.have.property(\"grant_types\");",
									"    pm.expect(body.grant_types).to.eql(['authorization_code']);",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"redirect_uris\": [\n        \"https://client.example.org/callback\",\n        \"https://client.example.org/callback2\"\n    ],\n    \"response_types\": [\n        \"code\"\n    ],\n    \"grant_types\": [\n        \"authorization_code\"\n    ],\n    \"application_type\": \"web\",\n    \"contacts\": [\n        \"marie@example.org\",\n        \"jeanne@example.org\"\n    ],\n\t\"client_name\": \"Client name updated via DCR\",\n    \"logo_uri\": \"https://client.example.org/logo.png\",\n    \"subject_type\": \"public\",\n    \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n    \"userinfo_encrypted_response_enc\": \"A128CBC-HS256\",\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"require_auth_time\": false,\n    \"request_uris\": [\n        \"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"\n    ],\n    \"scope\": \"openid\"\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Renew open client secret - with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_id).to.eql(pm.environment.get('newClientIdForDCRTests'));",
									"    pm.expect(body.client_secret).to.not.eql(pm.environment.get('newClientSecretForDCRTests'));",
									"",
									"    let renewSecretEndpoint = pm.environment.get('registrationClientUri')+'/renew_secret';",
									"    let discoveryRenewSecret = pm.environment.get('registrationRenewSecretEndpoint').replace(':client_id',pm.environment.get('newClientIdForDCRTests'));",
									"    pm.expect(renewSecretEndpoint).to.be.eql(discoveryRenewSecret);",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}/renew_secret",
							"host": [
								"{{registrationClientUri}}"
							],
							"path": [
								"renew_secret"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete open client - with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Enable DCR on domain",
			"item": [
				{
					"name": "Enable DCR - non open mode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "286df3a2-0e06-4b00-9614-3b0fd9ceecb9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR enabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(true);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oidc\": {\n    \"clientRegistrationSettings\": {\n      \"allowLocalhostRedirectUri\": false,\n      \"allowHttpSchemeRedirectUri\": false,\n      \"allowWildCardRedirectUri\": false,\n      \"isDynamicClientRegistrationEnabled\": true,\n      \"isOpenDynamicClientRegistrationEnabled\": false\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - non DCR Client",
			"item": [
				{
					"name": "Create client without DCR enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbe2362d-ad75-4baa-8825-b74218b047c7",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('clientDCR', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": \"dcr-client\",\n  \"clientSecret\": \"dcr-client-secret\",\n  \"clientName\": \"dcr-client-public-name\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/clients",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch client - enable client credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c063d6b-7120-4fd1-8aea-b04f7defc4d0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 5000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"authorizedGrantTypes\": [\"client_credentials\"],\n  \"responseTypes\": [],\n  \"applicationType\": \"server\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{clientDCR}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"clients",
								"{{clientDCR}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('access_token');",
									"    ",
									"    pm.environment.set('access_token', body.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "904f0113-b2b9-4645-9511-48bb10791506",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic ZGNyLWNsaWVudDpkY3ItY2xpZW50LXNlY3JldA=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Non DCR client",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Non DCR client\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body.error).to.eql('insufficient_scope');",
									"    pm.expect(body.error_description).to.eql('Invalid access token scopes. The access token should have at least \\'dcr_admin\\' scope');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Enable DCR on client",
			"item": [
				{
					"name": "Configure client with DCR enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "576263ed-f6e5-44e3-8519-998efca70a67",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR enabled for client\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.scopes).to.eql(['dcr_admin']);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 5000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"scopes\": [\"dcr_admin\"]\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{clientDCR}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"clients",
								"{{clientDCR}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('access_token');",
									"    pm.expect(body.scope).to.eql('dcr_admin');",
									"    ",
									"    pm.environment.set('access_token', body.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "904f0113-b2b9-4645-9511-48bb10791506",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic ZGNyLWNsaWVudDpkY3ItY2xpZW50LXNlY3JldA=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "dcr_admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - Invalid requests",
			"item": [
				{
					"name": "Invalid creation requests",
					"item": [
						{
							"name": "Invalid access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14381377-d0fe-4741-9c07-a53a31803ddd",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid bearer\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_token');",
											"    pm.expect(body.error_description).to.eql('The access token is invalid');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris are missing\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid redirect_uris.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - null - implicit grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris are missing\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid redirect_uris.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": null,\n  \"grant_types\": [\"implicit\"],\n  \"response_types\": [\"token\"],\n  \"client_name\": \"My implicit Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - empty - implicit grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris are missing\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid redirect_uris.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [],\n  \"grant_types\": [\"implicit\"],\n  \"response_types\": [\"token\"],\n  \"client_name\": \"My implicit Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - no scheme uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris localhost forbidden\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('redirect_uri : no_scheme is malformed');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\"no_scheme\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - malformed uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris localhost forbidden\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('redirect_uri : malformed:uri:exception is malformed');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\"malformed:uri:exception\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - localhost",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris localhost forbidden\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('localhost is forbidden');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://localhost/callback\",\n    \"https://localhost/callback2\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - wildcard",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris wildcard forbidden\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('Wildcard are forbidden');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/*/callback\",\n    \"https://client.example.org/*/callback2\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - http scheme",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris http scheme forbidden\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('Unsecured http scheme is forbidden');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"http://client.example.org/callback\",\n    \"http://client.example.org/callback2\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid response type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid response type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Invalid response type.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"response_types\": [\n\t\"unknown\"\n   ],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid grant type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid grant type.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"grant_types\": [\n\t\"unknown\"\n   ],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid grant type - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid grant type.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"grant_types\": [],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid grant type - refresh_token alone",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.include('refresh_token grant type must be associated with one of');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [],\n  \"response_types\": [],\n  \"grant_types\": [\"refresh_token\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid subject type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported subject type');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"application_type\": \"web\",\n   \"redirect_uris\":\n     [\"https://client.example.org/callback\",\n      \"https://client.example.org/callback2\"],\n   \"logo_uri\": \"https://client.example.org/logo.png\",\n   \"subject_type\": \"pairwise\",\n   \"token_endpoint_auth_method\": \"client_secret_basic\",\n   \"userinfo_encrypted_response_alg\": \"RSA1_5\",\n   \"userinfo_encrypted_response_enc\": \"A128CBC-HS256\",\n   \"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n   \"request_uris\":\n     [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid userinfo signing algorithm",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported userinfo signing algorithm');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"web\",\n\t\"redirect_uris\": [\n\t\t\"https://client.example.org/callback\",\n\t\t\"https://client.example.org/callback2\"\n\t],\n\t\"logo_uri\": \"https://client.example.org/logo.png\",\n\t\"token_endpoint_auth_method\": \"client_secret_basic\",\n\t\"userinfo_signed_response_alg\":\"unknown\",\n\t\"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n\t\"request_uris\": [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid userinfo response alg",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported userinfo_encrypted_response_alg value');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"web\",\n\t\"redirect_uris\": [\n\t\t\"https://client.example.org/callback\",\n\t\t\"https://client.example.org/callback2\"\n\t],\n\t\"logo_uri\": \"https://client.example.org/logo.png\",\n\t\"token_endpoint_auth_method\": \"client_secret_basic\",\n\t\"userinfo_encrypted_response_alg\":\"unknown\",\n\t\"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n\t\"request_uris\": [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid userinfo response enc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported userinfo_encrypted_response_enc value');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"web\",\n\t\"redirect_uris\": [\n\t\t\"https://client.example.org/callback\",\n\t\t\"https://client.example.org/callback2\"\n\t],\n\t\"logo_uri\": \"https://client.example.org/logo.png\",\n\t\"token_endpoint_auth_method\": \"client_secret_basic\",\n\t\"userinfo_encrypted_response_alg\":\"RSA-OAEP-256\",\n\t\"userinfo_encrypted_response_enc\":\"unknown\",\n\t\"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n\t\"request_uris\": [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid id_token signing algorithm",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported id_token signing algorithm');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"web\",\n\t\"redirect_uris\": [\n\t\t\"https://client.example.org/callback\",\n\t\t\"https://client.example.org/callback2\"\n\t],\n\t\"logo_uri\": \"https://client.example.org/logo.png\",\n\t\"token_endpoint_auth_method\": \"client_secret_basic\",\n\t\"id_token_signed_response_alg\":\"unknown\",\n\t\"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n\t\"request_uris\": [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid id_token response alg",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported id_token_encrypted_response_alg value');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"web\",\n\t\"redirect_uris\": [\n\t\t\"https://client.example.org/callback\",\n\t\t\"https://client.example.org/callback2\"\n\t],\n\t\"logo_uri\": \"https://client.example.org/logo.png\",\n\t\"token_endpoint_auth_method\": \"client_secret_basic\",\n\t\"id_token_encrypted_response_alg\":\"unknown\",\n\t\"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n\t\"request_uris\": [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing id_token response alg",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg MUST also be provided');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"web\",\n\t\"redirect_uris\": [\n\t\t\"https://client.example.org/callback\",\n\t\t\"https://client.example.org/callback2\"\n\t],\n\t\"logo_uri\": \"https://client.example.org/logo.png\",\n\t\"token_endpoint_auth_method\": \"client_secret_basic\",\n\t\"id_token_encrypted_response_enc\":\"unknown\",\n\t\"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n\t\"request_uris\": [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid id_token response enc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported id_token_encrypted_response_enc value');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"web\",\n\t\"redirect_uris\": [\n\t\t\"https://client.example.org/callback\",\n\t\t\"https://client.example.org/callback2\"\n\t],\n\t\"logo_uri\": \"https://client.example.org/logo.png\",\n\t\"token_endpoint_auth_method\": \"client_secret_basic\",\n\t\"id_token_encrypted_response_alg\":\"RSA-OAEP-256\",\n\t\"id_token_encrypted_response_enc\":\"unknown\",\n\t\"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n\t\"request_uris\": [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid request uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid request uri\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('request_uris: malformed_url is not valid.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"request_uris\": [\n\t\"malformed_url\"\n   ],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid scope\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('scope unkown-domain-scope is not valid.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"scope\": \"unkown-domain-scope\",\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid jwks",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid scope\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.include('Unable to parse jwks content');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"client_name\": \"My Example Client\",\n   \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n\t\t\t\t\"kty\":\"EC\",\n\t\t\t\t\"use\":\"enc\",\n\t\t\t\t\"crv\":\"P-521\",\n                \"kid\": \"elliptic-curve-encryption\",\n\t\t\t\t\"x\":\"l3X_aK4GSyoZ9TV8XXM9D3BaowFI4AQtrQyU39DWzxU\",\n\t\t\t\t\"y\":\"2J7zifgjRhLV7B-MPYVqIB-X1bLQAyVXvZmc9LTpcXM\"\n\t\t\t}\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid jwks_uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid scope\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.include('Unable to parse jwks from');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"client_name\": \"My Example Client\",\n   \"jwks_uri\": \"https://unbound/uri\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "duplicate jwk and jwks_uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid scope\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.be.eql('The jwks_uri and jwks parameters MUST NOT be used together.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"client_name\": \"My Example Client\",\n   \"jwks_uri\": \"https://unbound/uri\",\n   \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n                \"kty\": \"EC\",\n                \"use\": \"sig\",\n                \"crv\": \"P-256\",\n                \"kid\": \"elliptic-curve-signature\",\n                \"x\": \"R4JmPwezbzLuyGkonWIkezzplUfed5b6F5PL4j0zdf8\",\n                \"y\": \"QQRGKwRV9jHSlHjUhOQ0FqdQEddFBPCHZXpoFjvGmcY\"\n\t\t\t}\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6344fd45-5776-4bab-a90c-033893e6debb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "03904ca6-6d82-43ab-8190-f3210787a262",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Invalid update requests",
					"item": [
						{
							"name": "Register client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('response_types');",
											"    pm.expect(body).to.have.property('grant_types');",
											"    pm.expect(body).to.have.property('client_name');",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');",
											"    pm.expect(body.response_types).to.eql(['code']);",
											"    pm.expect(body.grant_types).to.eql(['authorization_code']);",
											"    pm.expect(body.client_name).to.eql('Unknown Client');",
											"    ",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"application_type\": \"web\",\n   \"redirect_uris\":\n     [\"https://client.example.org/callback\",\n      \"https://client.example.org/callback2\"],\n   \"logo_uri\": \"https://client.example.org/logo.png\",\n   \"token_endpoint_auth_method\": \"client_secret_basic\",\n   \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"userinfo_encrypted_response_enc\": \"A128CBC-HS256\",\n   \"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n   \"request_uris\":\n     [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid bearer\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_token');",
											"    pm.expect(body.error_description).to.eql('The access token is invalid');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer wrongToken"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris are missing\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid redirect_uris.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"client_name\": \"Should have not been updated\"\n}\n"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - can not be empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris are missing\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid redirect_uris.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"client_name\": \"Client with implicit flow should not allow empty redirect_uris\",\n   \"grant_types\": [\"implicit\"],\n   \"response_types\": [\"token\"],\n   \"redirect_uris\": []\n}\n"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid redirect uri - localhost",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris localhost forbidden\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('localhost is forbidden');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \"redirect_uris\": [\n    \"https://localhost/callback\",\n    \"https://localhost/callback2\"\n   ],\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid response type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid response type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Invalid response type.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"response_types\": [\n\t\"unknown\"\n   ],\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid grant type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid grant type.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"grant_types\": [\n\t\"unknown\"\n   ],\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid grant type - refresh_token alone",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.include('refresh_token grant type must be associated with one of');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [],\n  \"response_types\": [],\n  \"grant_types\": [\"refresh_token\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid subject  type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported subject type');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n   \"subject_type\": \"pairwise\",\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid userinfo signing algorithm",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid response type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported userinfo signing algorithm');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n   \"userinfo_signed_response_alg\":\"unknown\",\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing userinfo response alg",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('When userinfo_encrypted_response_enc is included, userinfo_encrypted_response_alg MUST also be provided');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n   \"userinfo_encrypted_response_enc\":\"unknown\",\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid userinfo response enc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported userinfo_encrypted_response_enc value');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"redirect_uris\": [\n    \t\"https://client.example.org/callback\",\n    \t\"https://client.example.org/callback2\"],\n\t\"userinfo_encrypted_response_alg\":\"RSA-OAEP-256\",\n\t\"userinfo_encrypted_response_enc\":\"unknown\",\n\t\"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid id_token signing algorithm",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid response type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported id_token signing algorithm');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n   \"id_token_signed_response_alg\":\"unknown\",\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing id_token response alg",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg MUST also be provided');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n   \"id_token_encrypted_response_enc\":\"unknown\",\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid id_token response alg",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported id_token_encrypted_response_alg value');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n   \"id_token_encrypted_response_alg\":\"unknown\",\n   \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid id_token response enc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('Unsupported id_token_encrypted_response_enc value');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"redirect_uris\": [\n    \t\"https://client.example.org/callback\",\n    \t\"https://client.example.org/callback2\"],\n\t\"id_token_encrypted_response_alg\":\"RSA-OAEP-256\",\n\t\"id_token_encrypted_response_enc\":\"unknown\",\n\t\"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid scope\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('scope unkown-domain-scope is not valid.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"scope\": \"unkown-domain-scope\",\n  \"client_name\": \"Should have not been updated\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Case - Nominal",
			"item": [
				{
					"name": "web application",
					"item": [
						{
							"name": "Register client - web application",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('application_type');",
											"    pm.expect(body).to.have.property('response_types');",
											"    pm.expect(body).to.have.property('grant_types');",
											"    pm.expect(body).to.have.property('client_name');",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');",
											"    pm.expect(body.application_type).to.eql('web');",
											"    pm.expect(body.response_types).to.eql(['code']);",
											"    pm.expect(body.grant_types).to.eql(['authorization_code']);",
											"    pm.expect(body.client_name).to.eql('Unknown Client');",
											"    ",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('newClientIdForDCRTests', body.client_id);",
											"    pm.environment.set('newClientSecretForDCRTests', body.client_secret);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"redirect_uris\":\n     [\"https://client.example.org/callback\",\n      \"https://client.example.org/callback2\"],\n   \"logo_uri\": \"https://client.example.org/logo.png\",\n   \"subject_type\": \"public\",\n   \"token_endpoint_auth_method\": \"client_secret_basic\",\n   \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"userinfo_encrypted_response_enc\": \"A128CBC-HS256\",\n   \"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n   \"request_uris\":\n     [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"redirect_uris\");",
											"    pm.expect(body).to.have.property(\"grant_types\");",
											"    pm.expect(body.response_types).to.eql([ 'code' ]);",
											"    pm.expect(body.grant_types).to.eql([ 'authorization_code' ]);",
											"    pm.expect(body.client_name).to.eql('Unknown Client');",
											"    ",
											"    //The Authorization Server need not include the registration_access_token or registration_client_uri value in this response unless they have been updated.",
											"    pm.expect(body).to.not.have.property('registration_access_token');",
											"    pm.expect(body).to.not.have.property('registration_client_uri');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.client_name).to.eql('Client patched via DCR');",
											"    pm.expect(body).to.have.property(\"response_types\");",
											"    pm.expect(body.response_types).to.eql(['token', 'code', 'code id_token']);",
											"    pm.expect(body.grant_types).to.eql([ 'implicit','authorization_code' ]);",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"client_name\": \"Client patched via DCR\",\n   \"response_types\" : [\"token\", \"code\", \"code id_token\"]\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.client_name).to.eql('Client name updated via DCR');",
											"    pm.expect(body).to.have.property(\"response_types\");",
											"    pm.expect(body.response_types).to.eql(['code']);",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"redirect_uris\": [\n        \"https://client.example.org/callback\",\n        \"https://client.example.org/callback2\"\n    ],\n    \"response_types\": [\n        \"code\"\n    ],\n    \"grant_types\": [\n        \"authorization_code\"\n    ],\n    \"application_type\": \"web\",\n    \"contacts\": [\n        \"marie@example.org\",\n        \"jeanne@example.org\"\n    ],\n\t\"client_name\": \"Client name updated via DCR\",\n    \"logo_uri\": \"https://client.example.org/logo.png\",\n    \"subject_type\": \"public\",\n    \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n    \"userinfo_encrypted_response_enc\": \"A128CBC-HS256\",\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"require_auth_time\": false,\n    \"request_uris\": [\n        \"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"\n    ],\n    \"scope\": \"openid\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Renew client secret - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.client_id).to.eql(pm.environment.get('newClientIdForDCRTests'));",
											"    pm.expect(body.client_secret).to.not.eql(pm.environment.get('newClientSecretForDCRTests'));",
											"",
											"    let renewSecretEndpoint = pm.environment.get('registrationClientUri')+'/renew_secret';",
											"    let discoveryRenewSecret = pm.environment.get('registrationRenewSecretEndpoint').replace(':client_id',pm.environment.get('newClientIdForDCRTests'));",
											"    pm.expect(renewSecretEndpoint).to.be.eql(discoveryRenewSecret);",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}/renew_secret",
									"host": [
										"{{registrationClientUri}}"
									],
									"path": [
										"renew_secret"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "client application",
					"item": [
						{
							"name": "Register client - client application",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('application_type');",
											"    pm.expect(body).to.have.property('response_types');",
											"    pm.expect(body).to.have.property('grant_types');",
											"    pm.expect(body).to.have.property('client_name');",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');",
											"    pm.expect(body.response_types).to.eql([]);",
											"    pm.expect(body.application_type).to.eql('server');",
											"    pm.expect(body.grant_types).to.eql(['client_credentials']);",
											"    pm.expect(body.client_name).to.eql('machina');",
											"    ",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('newClientIdForDCRTests', body.client_id);",
											"    pm.environment.set('newClientSecretForDCRTests', body.client_secret);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"server\",\n\t\"redirect_uris\": null,\n\t\"grant_types\": [\"client_credentials\"],\n\t\"response_types\": [],\n\t\"client_name\":\"machina\",\n\t\"scope\":null\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"grant_types\");",
											"    pm.expect(body.response_types).to.eql([]);",
											"    pm.expect(body.grant_types).to.eql([ 'client_credentials' ]);",
											"    ",
											"    //The Authorization Server need not include the registration_access_token or registration_client_uri value in this response unless they have been updated.",
											"    pm.expect(body).to.not.have.property('registration_access_token');",
											"    pm.expect(body).to.not.have.property('registration_client_uri');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch client - invalidRedirectUri",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Redirect uris are missing\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
											"    pm.expect(body.error_description).to.eql('Missing or invalid redirect_uris.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"client_name\": \"Adding code or token response type means a redirect_uri will be required.\",\n   \"response_types\" : [\"token\", \"code\", \"code id_token\"]\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"response_types\");",
											"    pm.expect(body.response_types).to.eql(['token', 'code', 'code id_token']);",
											"    pm.expect(body).to.have.property(\"grant_types\");",
											"    pm.expect(body.grant_types).to.eql(['implicit', 'client_credentials', 'authorization_code']);",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"client_name\": \"Do not block even if we add code/implicit in addition to client_credentials\",\n   \"response_types\" : [\"token\", \"code\", \"code id_token\"],\n   \"redirect_uris\": [\"https://callback\"]\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.client_name).to.eql('Client name updated via DCR');",
											"    pm.expect(body).not.to.have.property(\"response_types\");",
											"    pm.expect(body).to.have.property(\"grant_types\");",
											"    pm.expect(body.grant_types).to.eql([\"client_credentials\"]);",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"application_type\": \"server\",\n\t\"redirect_uris\": null,\n\t\"grant_types\": [\"client_credentials\"],\n\t\"response_types\": null,\n\t\n    \"contacts\": [\n        \"marie@example.org\",\n        \"jeanne@example.org\"\n    ],\n\t\"client_name\": \"Client name updated via DCR\",\n    \"logo_uri\": \"https://client.example.org/logo.png\",\n    \"subject_type\": \"public\",\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"require_auth_time\": false,\n    \"request_uris\": [\n        \"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"\n    ]\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Renew client secret - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.client_id).to.eql(pm.environment.get('newClientIdForDCRTests'));",
											"    pm.expect(body.client_secret).to.not.eql(pm.environment.get('newClientSecretForDCRTests'));",
											"",
											"    let renewSecretEndpoint = pm.environment.get('registrationClientUri')+'/renew_secret';",
											"    let discoveryRenewSecret = pm.environment.get('registrationRenewSecretEndpoint').replace(':client_id',pm.environment.get('newClientIdForDCRTests'));",
											"    pm.expect(renewSecretEndpoint).to.be.eql(discoveryRenewSecret);",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}/renew_secret",
									"host": [
										"{{registrationClientUri}}"
									],
									"path": [
										"renew_secret"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "case with all metadatas",
					"item": [
						{
							"name": "Register client - client application",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"    //Check expecting metadata",
											"    pm.expect(body).to.have.property('grant_types');",
											"    pm.expect(body).to.have.property('application_type');",
											"    pm.expect(body).to.have.property('client_name');",
											"    pm.expect(body).to.have.property('require_auth_time');",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body).to.have.property('registration_client_uri');",
											"    pm.expect(body).to.have.property('client_secret_expires_at');",
											"    ",
											"    //Check expecting values",
											"    pm.expect(body.application_type).to.eql('server');",
											"    pm.expect(body.grant_types).to.eql(['client_credentials']);",
											"    pm.expect(body.client_name).to.eql('test all metadatas');",
											"    pm.expect(body.require_auth_time).to.eql(false);",
											"    ",
											"    //Track just created client",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('newClientIdForDCRTests', body.client_id);",
											"    pm.environment.set('newClientSecretForDCRTests', body.client_secret);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"    ",
											"    //Expect null values to not be returned.",
											"    pm.expect(body).not.to.have.property('redirect_uris');",
											"    pm.expect(body).not.to.have.property(\"response_types\");",
											"    pm.expect(body).not.to.have.property('contacts');",
											"    pm.expect(body).not.to.have.property(\"logo_uri\");",
											"    pm.expect(body).not.to.have.property('client_uri');",
											"    pm.expect(body).not.to.have.property(\"policy_uri\");",
											"    pm.expect(body).not.to.have.property('tos_uri');",
											"    pm.expect(body).not.to.have.property(\"jwks_uri\");",
											"    pm.expect(body).not.to.have.property('sector_identifier_uri');",
											"    pm.expect(body).not.to.have.property(\"subject_type\");",
											"    pm.expect(body).not.to.have.property('id_token_signed_response_alg');",
											"    pm.expect(body).not.to.have.property(\"id_token_encrypted_response_alg\");",
											"    pm.expect(body).not.to.have.property('id_token_encrypted_response_enc');",
											"    pm.expect(body).not.to.have.property(\"userinfo_signed_response_alg\");",
											"    pm.expect(body).not.to.have.property('userinfo_encrypted_response_alg');",
											"    pm.expect(body).not.to.have.property(\"userinfo_encrypted_response_enc\");",
											"    pm.expect(body).not.to.have.property('request_object_signing_alg');",
											"    pm.expect(body).not.to.have.property(\"request_object_encryption_alg\");",
											"    pm.expect(body).not.to.have.property('request_object_encryption_enc');",
											"    pm.expect(body).not.to.have.property(\"token_endpoint_auth_method\");",
											"    pm.expect(body).not.to.have.property('token_endpoint_auth_signing_alg');",
											"    pm.expect(body).not.to.have.property(\"default_max_age\");",
											"    pm.expect(body).not.to.have.property(\"default_acr_values\");",
											"    pm.expect(body).not.to.have.property(\"initiate_login_uri\");",
											"    pm.expect(body).not.to.have.property('request_uris');",
											"    pm.expect(body).not.to.have.property(\"scope\");",
											"    pm.expect(body).not.to.have.property('software_id');",
											"    pm.expect(body).not.to.have.property(\"software_version\");",
											"    pm.expect(body).not.to.have.property(\"software_statement\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"redirect_uris\":null,\n   \"response_types\":null,\n   \"grant_types\":[\"client_credentials\"],\n   \"application_type\":\"server\",\n   \"contacts\":null,\n   \"client_name\":\"test all metadatas\",\n   \"logo_uri\":null,\n   \"client_uri\":null,\n   \"policy_uri\":null,\n   \"tos_uri\":null,\n   \"jwks_uri\":null,\n   \"sector_identifier_uri\":null,\n   \"subject_type\":null,\n   \"id_token_signed_response_alg\":null,\n   \"id_token_encrypted_response_alg\":null,\n   \"id_token_encrypted_response_enc\":null,\n   \"userinfo_signed_response_alg\":null,\n   \"userinfo_encrypted_response_alg\":null,\n   \"userinfo_encrypted_response_enc\":null,\n   \"request_object_signing_alg\":null,\n   \"request_object_encryption_alg\":null,\n   \"request_object_encryption_enc\":null,\n   \"token_endpoint_auth_method\":null,\n   \"token_endpoint_auth_signing_alg\":null,\n   \"default_max_age\":null,\n   \"require_auth_time\":null,\n   \"default_acr_values\":null,\n   \"initiate_login_uri\":null,\n   \"request_uris\":null,\n   \"scope\":null,\n   \"software_id\":null,\n   \"software_version\":null,\n   \"software_statement\":null\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"grant_types\");",
											"    pm.expect(body.grant_types).to.eql([ 'client_credentials' ]);",
											"    ",
											"    //The Authorization Server need not include the registration_access_token ",
											"    //or registration_client_uri value in this response unless they have been updated.",
											"    pm.expect(body).to.not.have.property('registration_access_token');",
											"    pm.expect(body).to.not.have.property('registration_client_uri');",
											"    ",
											"    //Expect null values to not be returned.",
											"    pm.expect(body).not.to.have.property('redirect_uris');",
											"    pm.expect(body).not.to.have.property(\"response_types\");",
											"    pm.expect(body).not.to.have.property('contacts');",
											"    pm.expect(body).not.to.have.property(\"logo_uri\");",
											"    pm.expect(body).not.to.have.property('client_uri');",
											"    pm.expect(body).not.to.have.property(\"policy_uri\");",
											"    pm.expect(body).not.to.have.property('tos_uri');",
											"    pm.expect(body).not.to.have.property(\"jwks_uri\");",
											"    pm.expect(body).not.to.have.property('sector_identifier_uri');",
											"    pm.expect(body).not.to.have.property(\"subject_type\");",
											"    pm.expect(body).not.to.have.property('id_token_signed_response_alg');",
											"    pm.expect(body).not.to.have.property(\"id_token_encrypted_response_alg\");",
											"    pm.expect(body).not.to.have.property('id_token_encrypted_response_enc');",
											"    pm.expect(body).not.to.have.property(\"userinfo_signed_response_alg\");",
											"    pm.expect(body).not.to.have.property('userinfo_encrypted_response_alg');",
											"    pm.expect(body).not.to.have.property(\"userinfo_encrypted_response_enc\");",
											"    pm.expect(body).not.to.have.property('request_object_signing_alg');",
											"    pm.expect(body).not.to.have.property(\"request_object_encryption_alg\");",
											"    pm.expect(body).not.to.have.property('request_object_encryption_enc');",
											"    pm.expect(body).not.to.have.property(\"token_endpoint_auth_method\");",
											"    pm.expect(body).not.to.have.property('token_endpoint_auth_signing_alg');",
											"    pm.expect(body).not.to.have.property(\"default_max_age\");",
											"    pm.expect(body).not.to.have.property(\"default_acr_values\");",
											"    pm.expect(body).not.to.have.property(\"initiate_login_uri\");",
											"    pm.expect(body).not.to.have.property('request_uris');",
											"    pm.expect(body).not.to.have.property(\"scope\");",
											"    pm.expect(body).not.to.have.property('software_id');",
											"    pm.expect(body).not.to.have.property(\"software_version\");",
											"    pm.expect(body).not.to.have.property(\"software_statement\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    //Check expecting metadata",
											"    pm.expect(body).to.have.property('grant_types');",
											"    pm.expect(body).to.have.property('application_type');",
											"    pm.expect(body).to.have.property('client_name');",
											"    pm.expect(body).to.have.property('require_auth_time');",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body).to.have.property('registration_client_uri');",
											"    pm.expect(body).to.have.property('client_secret_expires_at');",
											"    ",
											"    //Check expecting values",
											"    pm.expect(body.application_type).to.eql('server');",
											"    pm.expect(body.grant_types).to.eql(['client_credentials']);",
											"    pm.expect(body.client_name).to.eql('test');",
											"    pm.expect(body.require_auth_time).to.eql(false);",
											"    ",
											"    //Expect null values to not be returned.",
											"    pm.expect(body).not.to.have.property('redirect_uris');",
											"    pm.expect(body).not.to.have.property(\"response_types\");",
											"    pm.expect(body).not.to.have.property('contacts');",
											"    pm.expect(body).not.to.have.property(\"logo_uri\");",
											"    pm.expect(body).not.to.have.property('client_uri');",
											"    pm.expect(body).not.to.have.property(\"policy_uri\");",
											"    pm.expect(body).not.to.have.property('tos_uri');",
											"    pm.expect(body).not.to.have.property(\"jwks_uri\");",
											"    pm.expect(body).not.to.have.property('sector_identifier_uri');",
											"    pm.expect(body).not.to.have.property(\"subject_type\");",
											"    pm.expect(body).not.to.have.property('id_token_signed_response_alg');",
											"    pm.expect(body).not.to.have.property(\"id_token_encrypted_response_alg\");",
											"    pm.expect(body).not.to.have.property('id_token_encrypted_response_enc');",
											"    pm.expect(body).not.to.have.property(\"userinfo_signed_response_alg\");",
											"    pm.expect(body).not.to.have.property('userinfo_encrypted_response_alg');",
											"    pm.expect(body).not.to.have.property(\"userinfo_encrypted_response_enc\");",
											"    pm.expect(body).not.to.have.property('request_object_signing_alg');",
											"    pm.expect(body).not.to.have.property(\"request_object_encryption_alg\");",
											"    pm.expect(body).not.to.have.property('request_object_encryption_enc');",
											"    pm.expect(body).not.to.have.property(\"token_endpoint_auth_method\");",
											"    pm.expect(body).not.to.have.property('token_endpoint_auth_signing_alg');",
											"    pm.expect(body).not.to.have.property(\"default_max_age\");",
											"    pm.expect(body).not.to.have.property(\"default_acr_values\");",
											"    pm.expect(body).not.to.have.property(\"initiate_login_uri\");",
											"    pm.expect(body).not.to.have.property('request_uris');",
											"    pm.expect(body).not.to.have.property(\"scope\");",
											"    pm.expect(body).not.to.have.property('software_id');",
											"    pm.expect(body).not.to.have.property(\"software_version\");",
											"    pm.expect(body).not.to.have.property(\"software_statement\");",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"redirect_uris\":null,\n   \"response_types\":null,\n   \"grant_types\":[\"client_credentials\"],\n   \"application_type\":\"server\",\n   \"contacts\":null,\n   \"client_name\":\"test\",\n   \"logo_uri\":null,\n   \"client_uri\":null,\n   \"policy_uri\":null,\n   \"tos_uri\":null,\n   \"jwks_uri\":null,\n   \"sector_identifier_uri\":null,\n   \"subject_type\":null,\n   \"id_token_signed_response_alg\":null,\n   \"id_token_encrypted_response_alg\":null,\n   \"id_token_encrypted_response_enc\":null,\n   \"userinfo_signed_response_alg\":null,\n   \"userinfo_encrypted_response_alg\":null,\n   \"userinfo_encrypted_response_enc\":null,\n   \"request_object_signing_alg\":null,\n   \"request_object_encryption_alg\":null,\n   \"request_object_encryption_enc\":null,\n   \"token_endpoint_auth_method\":null,\n   \"token_endpoint_auth_signing_alg\":null,\n   \"default_max_age\":null,\n   \"require_auth_time\":null,\n   \"default_acr_values\":null,\n   \"initiate_login_uri\":null,\n   \"request_uris\":null,\n   \"scope\":null,\n   \"software_id\":null,\n   \"software_version\":null,\n   \"software_statement\":null\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    //Check expecting metadata",
											"    pm.expect(body).to.have.property('grant_types');",
											"    pm.expect(body).to.have.property('application_type');",
											"    pm.expect(body).to.have.property('client_name');",
											"    pm.expect(body).to.have.property('require_auth_time');",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body).to.have.property('registration_client_uri');",
											"    pm.expect(body).to.have.property('client_secret_expires_at');",
											"    ",
											"    //Check expecting values",
											"    pm.expect(body.application_type).to.eql('server');",
											"    pm.expect(body.grant_types).to.eql(['client_credentials']);",
											"    pm.expect(body.client_name).to.eql('test');",
											"    pm.expect(body.require_auth_time).to.eql(false);",
											"    ",
											"    //Expect null values to not be returned.",
											"    pm.expect(body).not.to.have.property('redirect_uris');",
											"    pm.expect(body).not.to.have.property(\"response_types\");",
											"    pm.expect(body).not.to.have.property('contacts');",
											"    pm.expect(body).not.to.have.property(\"logo_uri\");",
											"    pm.expect(body).not.to.have.property('client_uri');",
											"    pm.expect(body).not.to.have.property(\"policy_uri\");",
											"    pm.expect(body).not.to.have.property('tos_uri');",
											"    pm.expect(body).not.to.have.property(\"jwks_uri\");",
											"    pm.expect(body).not.to.have.property('sector_identifier_uri');",
											"    pm.expect(body).not.to.have.property(\"subject_type\");",
											"    pm.expect(body).not.to.have.property('id_token_signed_response_alg');",
											"    pm.expect(body).not.to.have.property(\"id_token_encrypted_response_alg\");",
											"    pm.expect(body).not.to.have.property('id_token_encrypted_response_enc');",
											"    pm.expect(body).not.to.have.property(\"userinfo_signed_response_alg\");",
											"    pm.expect(body).not.to.have.property('userinfo_encrypted_response_alg');",
											"    pm.expect(body).not.to.have.property(\"userinfo_encrypted_response_enc\");",
											"    pm.expect(body).not.to.have.property('request_object_signing_alg');",
											"    pm.expect(body).not.to.have.property(\"request_object_encryption_alg\");",
											"    pm.expect(body).not.to.have.property('request_object_encryption_enc');",
											"    pm.expect(body).not.to.have.property(\"token_endpoint_auth_method\");",
											"    pm.expect(body).not.to.have.property('token_endpoint_auth_signing_alg');",
											"    pm.expect(body).not.to.have.property(\"default_max_age\");",
											"    pm.expect(body).not.to.have.property(\"default_acr_values\");",
											"    pm.expect(body).not.to.have.property(\"initiate_login_uri\");",
											"    pm.expect(body).not.to.have.property('request_uris');",
											"    pm.expect(body).not.to.have.property(\"scope\");",
											"    pm.expect(body).not.to.have.property('software_id');",
											"    pm.expect(body).not.to.have.property(\"software_version\");",
											"    pm.expect(body).not.to.have.property(\"software_statement\");",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"redirect_uris\":null,\n   \"response_types\":null,\n   \"grant_types\":[\"client_credentials\"],\n   \"application_type\":\"server\",\n   \"contacts\":null,\n   \"client_name\":\"test\",\n   \"logo_uri\":null,\n   \"client_uri\":null,\n   \"policy_uri\":null,\n   \"tos_uri\":null,\n   \"jwks_uri\":null,\n   \"sector_identifier_uri\":null,\n   \"subject_type\":null,\n   \"id_token_signed_response_alg\":null,\n   \"id_token_encrypted_response_alg\":null,\n   \"id_token_encrypted_response_enc\":null,\n   \"userinfo_signed_response_alg\":null,\n   \"userinfo_encrypted_response_alg\":null,\n   \"userinfo_encrypted_response_enc\":null,\n   \"request_object_signing_alg\":null,\n   \"request_object_encryption_alg\":null,\n   \"request_object_encryption_enc\":null,\n   \"token_endpoint_auth_method\":null,\n   \"token_endpoint_auth_signing_alg\":null,\n   \"default_max_age\":null,\n   \"require_auth_time\":null,\n   \"default_acr_values\":null,\n   \"initiate_login_uri\":null,\n   \"request_uris\":null,\n   \"scope\":null,\n   \"software_id\":null,\n   \"software_version\":null,\n   \"software_statement\":null\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete client - with registration token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Case - Templates",
			"item": [
				{
					"name": "Enable templating on domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "286df3a2-0e06-4b00-9614-3b0fd9ceecb9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR enabled for domain with templating\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isOpenDynamicClientRegistrationEnabled).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isClientTemplateEnabled).to.be.eql(true);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oidc\": {\n    \"clientRegistrationSettings\": {\n\t\t\"isClientTemplateEnabled\": true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create client for templating",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbe2362d-ad75-4baa-8825-b74218b047c7",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('templateId', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": \"template-client-id\",\n  \"clientSecret\": \"template-client-secret\",\n  \"clientName\": \"template-client-public-name\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/clients",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch client to implicit template",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c063d6b-7120-4fd1-8aea-b04f7defc4d0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 5000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"redirectUris\": [\"https://gravitee.io/callback\"],\n  \"authorizedGrantTypes\": [\"implicit\"],\n  \"responseTypes\": [\"token\"],\n  \"applicationType\": \"Single Page App\",\n  \"template\": true\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{templateId}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"clients",
								"{{templateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Login Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c063d6b-7120-4fd1-8aea-b04f7defc4d0",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"template\":\"LOGIN\",\n\t\"enabled\":true,\n\t\"content\":\"// Custom template login form...\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{templateId}}/forms",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"clients",
								"{{templateId}}",
								"forms"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Error Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c063d6b-7120-4fd1-8aea-b04f7defc4d0",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"template\":\"ERROR\",\n\t\"enabled\":true,\n\t\"content\":\"// Custom template error form...\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{templateId}}/forms",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"clients",
								"{{templateId}}",
								"forms"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Registration Mail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c063d6b-7120-4fd1-8aea-b04f7defc4d0",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"template\":\"REGISTRATION_CONFIRMATION\",\n\t\"expiresAfter\":86400,\n\t\"enabled\":true,\n\t\"from\":\"a@b.c\",\n\t\"fromName\":\"sender name\",\n\t\"subject\":\"abc\",\n\t\"content\":\"// Custom template email...\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{templateId}}/emails",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"clients",
								"{{templateId}}",
								"emails"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get template endpoint from discovery",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5332b6f5-7419-4792-a30f-cce968d3d67e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body).to.have.property(\"registration_templates_endpoint\");",
									"    pm.environment.set('registrationTemplatesEndpoint', body.registration_templates_endpoint);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{gateway_url}}/{{domain}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domain}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get template from discovery",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5332b6f5-7419-4792-a30f-cce968d3d67e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.environment.set('software_id', body[0].software_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationTemplatesEndpoint}}",
							"host": [
								"{{registrationTemplatesEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register client from template",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has template attributes values\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.application_type).to.eql('Single Page App');",
									"    pm.expect(body.response_types).to.eql(['token']);",
									"    pm.expect(body.grant_types).to.eql(['implicit']);",
									"",
									"    //Has overrided metadata",
									"    pm.expect(body.client_name).to.eql('New client from template');",
									"    pm.expect(body.redirect_uris).to.eql(['https://client.example.org/callback']);",
									"    ",
									"    pm.expect(body).to.have.property(\"client_secret\");",
									"    ",
									"    pm.environment.set('newClientForDCRTests', body.id);",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"software_id\":\"{{software_id}}\",\n\t\"client_name\": \"New client from template\",\n\t\"redirect_uris\": [\"https://client.example.org/callback\"]\n}"
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Login Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c063d6b-7120-4fd1-8aea-b04f7defc4d0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has values from template\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.content).to.eql('// Custom template login form...');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{newClientForDCRTests}}/forms?template=LOGIN",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"clients",
								"{{newClientForDCRTests}}",
								"forms"
							],
							"query": [
								{
									"key": "template",
									"value": "LOGIN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Error Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c063d6b-7120-4fd1-8aea-b04f7defc4d0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has values from template\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.content).to.eql('// Custom template error form...');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{newClientForDCRTests}}/forms?template=ERROR",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"clients",
								"{{newClientForDCRTests}}",
								"forms"
							],
							"query": [
								{
									"key": "template",
									"value": "ERROR"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Consent Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c063d6b-7120-4fd1-8aea-b04f7defc4d0",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{newClientForDCRTests}}/forms?template=OAUTH2_USER_CONSENT",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"clients",
								"{{newClientForDCRTests}}",
								"forms"
							],
							"query": [
								{
									"key": "template",
									"value": "OAUTH2_USER_CONSENT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Registration Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c063d6b-7120-4fd1-8aea-b04f7defc4d0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has values from template\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.content).to.eql('// Custom template email...');",
									"    pm.expect(body.from).to.eql('a@b.c');",
									"    pm.expect(body.fromName).to.eql('sender name');",
									"    pm.expect(body.subject).to.eql('abc');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{newClientForDCRTests}}/emails?template=REGISTRATION_CONFIRMATION",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"clients",
								"{{newClientForDCRTests}}",
								"emails"
							],
							"query": [
								{
									"key": "template",
									"value": "REGISTRATION_CONFIRMATION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check access with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"redirect_uris\");",
									"    pm.expect(body).to.have.property(\"grant_types\");",
									"    pm.expect(body.response_types).to.eql([ 'token']);",
									"    pm.expect(body.grant_types).to.eql([ 'implicit']);",
									"    ",
									"    //The Authorization Server need not include the registration_access_token or registration_client_uri value in this response unless they have been updated.",
									"    pm.expect(body).to.not.have.property('registration_access_token');",
									"    pm.expect(body).to.not.have.property('registration_client_uri');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete client",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - Signing id_token",
			"item": [
				{
					"name": "Generate token - Case signing id_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('access_token');",
									"    pm.expect(body.scope).to.eql('dcr_admin');",
									"    ",
									"    pm.environment.set('access_token', body.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "904f0113-b2b9-4645-9511-48bb10791506",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic ZGNyLWNsaWVudDpkY3ItY2xpZW50LXNlY3JldA=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "dcr_admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register client - rs256 signed id_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has default attributes\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('client_rs256');",
									"",
									"    pm.expect(body).to.have.property('client_id');",
									"    pm.expect(body).to.have.property('client_secret');    ",
									"    var credentials = body.client_id + \":\" + body.client_secret;",
									"    var authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(credentials));",
									"    pm.environment.set('dcrClientAuthorization', authorization);",
									"    ",
									"    pm.environment.set('newClientForDCRTests', body.id);",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 2000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"client_name\":\"client_rs256\",\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"response_types\": [\"code\",\"token\",\"id_token\"],\n    \"grant_types\": [\"authorization_code\",\"implicit\",\"password\"],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"id_token_signed_response_alg\": \"RS256\"\n}"
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token - user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
								"exec": [
									"function parseJwtHeader (token) {",
									"    var base64Url = token.split('.')[0];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an id_token\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    ",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('id_token');",
									"    let header = parseJwtHeader(body.id_token);",
									"    tests['Contains kid claim'] = header.kid === 'mytestkey';",
									"    tests['Contains alg claim'] = header.alg === 'RS256';",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{dcrClientAuthorization}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch client - require RS512",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('client_rs512');",
									"    pm.expect(body.id_token_signed_response_alg).to.eql('RS512');",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_name\": \"client_rs512\",\n\t\"id_token_signed_response_alg\": \"RS512\"\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token - user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
								"exec": [
									"function parseJwtHeader (token) {",
									"    var base64Url = token.split('.')[0];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an id_token\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    ",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('id_token');",
									"    let header = parseJwtHeader(body.id_token);",
									"    tests['Contains kid claim'] = header.kid === 'my4096key';",
									"    tests['Contains alg claim'] = header.alg === 'RS512';",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{dcrClientAuthorization}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete client - with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - Encrypt id_token",
			"item": [
				{
					"name": "Case - invalid",
					"item": [
						{
							"name": "Generate token - client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body.scope).to.eql('dcr_admin');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGNyLWNsaWVudDpkY3ItY2xpZW50LXNlY3JldA=="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "dcr_admin",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "register client - with no keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0d09aa9-f196-4763-aac0-440f3bbe94ed",
										"exec": [
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"",
											"    pm.expect(body.id_token_encrypted_response_alg).to.eql('RSA-OAEP-256');",
											"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
											"",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');    ",
											"    var credentials = body.client_id + \":\" + body.client_secret;",
											"    var authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(credentials));",
											"    pm.environment.set('dcrClientAuthorization', authorization);",
											"    ",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"client_name\": \"Client test for JWE - no jwks\",\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"grant_types\": [\"authorization_code\",\"implicit\",\"password\"],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"request_uris\": [\"https://op-test:60001/requests/4472f1ee2cd34273a9b8bff4be1549418e5dd1b182639b7b2ae21d93e387467e#hNN9dc7MUCrZF0Jq\"],\n    \"response_types\": [\"code\",\"id_token\"],\n    \"token_endpoint_auth_method\": \"private_key_jwt\",\n    \"id_token_encrypted_response_alg\": \"RSA-OAEP-256\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate user token - no jwe key error",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid response type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('no matching key found to encrypt');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Set up - jwk keys",
					"item": [
						{
							"name": "register client - with jwks",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0d09aa9-f196-4763-aac0-440f3bbe94ed",
										"exec": [
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');    ",
											"    var credentials = body.client_id + \":\" + body.client_secret;",
											"    var authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(credentials));",
											"    pm.environment.set('dcrClientAuthorization', authorization);",
											"    ",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"client_name\": \"Client test for JWE - no jwks\",\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"grant_types\": [\"authorization_code\",\"implicit\",\"password\"],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"request_uris\": [\"https://op-test:60001/requests/4472f1ee2cd34273a9b8bff4be1549418e5dd1b182639b7b2ae21d93e387467e#hNN9dc7MUCrZF0Jq\"],\n    \"response_types\": [\"code\",\"id_token\"],\n    \"token_endpoint_auth_method\": \"private_key_jwt\",\n    \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n\t\t\t\t\"kty\": \"RSA\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"rsa-encryption-256\",\n\t\t\t\t\"e\": \"AQAB\",\n\t\t\t\t\"n\": \"lFAsvOm58TV5q9zyb3psQSESezZtYLZryGjq8LMnuqRt9cdPQCvMrnjcqdFWiXkD4ZXRO2Wp1iyzgprecx3dAnaD-KHlZR7vsFEmDh27DgNvEx5jKRSy5N2quI2LJw66Jb9JeMqoX6vtv_z3PRHb-zUhnIw6tBwZtuNE-AZSC6atr8ZCLXn6RPqJq_eoGgG-xaAzWPyRXDIqWPVO0RD3odjs6er7BcqVyHg54DyylrmRI4m6xERxpuNYI57bQN5_7a_3tR7hLeHJ8J1mNraMLH7H5_aAM_oSqKBEG9jHSTR7JsI3gSvsNOG-nP9jYxw7fH_c1XfRuTEJfBPEZxzD2Q\"\n\t\t\t},\n            {\n                \"kty\": \"RSA\",\n                \"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"e\": \"AQAB\",\n                \"n\": \"pRXXMvbZC4-I8nmeirMmr_wlo-lpZo2cyfXLPSduieEsfLeO38vIFdXbVTQ-OAeihFrvbxHELt2mNwCH3gbosd0P-pyYtUOaGmi7rLW9Wik8JcNCKA-v7q2JWmBeRFyRAuwf343gnxNL1mpUHfhqd4eswRiO55iwFT8a8gmxSOm8VXjg2aeUjkI3diT84rGR-wK77OcXeF2zJzjRDe0yFla0Tjb1RNTNkVQBJAQ3VQOOaNL7bXajR79ERlMKCjRFIZ0QCB7Nf6LtMwp9QWRdFrm7RXIPpN1V03E4v51gq82URjuQvEANe-VGRVSBij_GcOSLGjyZQi-yGVyPjNVl1Q\"\n            },\n            {\n                \"kty\": \"EC\",\n                \"use\": \"sig\",\n                \"crv\": \"P-256\",\n                \"kid\": \"elliptic-curve-signature\",\n                \"x\": \"R4JmPwezbzLuyGkonWIkezzplUfed5b6F5PL4j0zdf8\",\n                \"y\": \"QQRGKwRV9jHSlHjUhOQ0FqdQEddFBPCHZXpoFjvGmcY\"\n            },\n\t\t\t{  \n\t\t\t\t\"kty\":\"EC\",\n\t\t\t\t\"use\":\"enc\",\n\t\t\t\t\"crv\":\"P-521\",\n                \"kid\": \"elliptic-curve-encryption\",\n\t\t\t\t\"x\":\"AfEFyeYAr1TwmvCxvqgWPEg4Vvf50RC2OdkYfTS30dInZwX-Ebn6elp4fQ0GOdOBbYRq9b2gQ79Cd1AytQhdF6To\",\n\t\t\t\t\"y\":\"Abj0w4nSumQWtO6AV7ufQN6VpmJoKlWmz9KB6BUU0ANcj4aTJjBE9WNiGCqFpvaIdEWZWcSsZNYGKT3rJ71AfLdm\"\n\t\t\t},\n\t\t\t{  \n\t\t\t\t\"kty\":\"OKP\",\n\t\t\t\t\"use\":\"enc\",\n\t\t\t\t\"kid\":\"edwards-curve-encryption\",\n\t\t\t\t\"crv\":\"X25519\",\n\t\t\t\t\"x\":\"vBNW8f19leF79U4U6NrDDQaK_i5kL0iMKghB39AUT2I\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"128bits\",\n\t\t\t\t\"k\" : \"p94TA_PhiVUdi_yxPbviAw\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"192bits\",\n\t\t\t\t\"k\" : \"G9jUYv3b0-0wZWCGxAnIUH6gI0kjeXj4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"256bits\",\n\t\t\t\t\"k\" : \"pzx01XDfexcfxHWtk_MzjfCin5NMy3KBx2xtjrX1G-E\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"384bits\",\n\t\t\t\t\"k\" : \"MBNrGN8nwS7hlOVfqEy6qA98bzyo1BLGxr-kyN1E4UXYWQDkBg4L7AQRwpZdrKKS\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"512bits\",\n\t\t\t\t\"k\" : \"LfWisS5p-ohMbNbeWdiSapnHgA62XPu8DXzyzNZQHtQPglHf0Lb6NUM-8aQGj_YWErvODY5rQkpKeolrBKkcmg\"\n\t\t\t}\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - RSA",
					"item": [
						{
							"name": "RSA-OAEP-256",
							"item": [
								{
									"name": "patch client - RSA-OAEP-256 - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"RSA-OAEP-256\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - RSA-OAEP-256 - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - RSA-OAEP-256 - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - RSA-OAEP-256 - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - RSA-OAEP-256 - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - RSA-OAEP-256 - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - RSA-OAEP-256 - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - Curve",
					"item": [
						{
							"name": "Case - Elliptic Curve",
							"item": [
								{
									"name": "ECDH-ES",
									"item": [
										{
											"name": "patch client - ECDH-ES - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ECDH-ES+A128KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A128KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ECDH-ES+A192KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A192KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ECDH-ES+A256KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A256KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Edward Curve",
							"item": [
								{
									"name": "Set up - okp keys",
									"item": [
										{
											"name": "patch client - with OKP keys",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n\t\t\t\t\"kty\": \"RSA\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"rsa-encryption-256\",\n\t\t\t\t\"e\": \"AQAB\",\n\t\t\t\t\"n\": \"lFAsvOm58TV5q9zyb3psQSESezZtYLZryGjq8LMnuqRt9cdPQCvMrnjcqdFWiXkD4ZXRO2Wp1iyzgprecx3dAnaD-KHlZR7vsFEmDh27DgNvEx5jKRSy5N2quI2LJw66Jb9JeMqoX6vtv_z3PRHb-zUhnIw6tBwZtuNE-AZSC6atr8ZCLXn6RPqJq_eoGgG-xaAzWPyRXDIqWPVO0RD3odjs6er7BcqVyHg54DyylrmRI4m6xERxpuNYI57bQN5_7a_3tR7hLeHJ8J1mNraMLH7H5_aAM_oSqKBEG9jHSTR7JsI3gSvsNOG-nP9jYxw7fH_c1XfRuTEJfBPEZxzD2Q\"\n\t\t\t},\n            {\n                \"kty\": \"RSA\",\n                \"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"e\": \"AQAB\",\n                \"n\": \"pRXXMvbZC4-I8nmeirMmr_wlo-lpZo2cyfXLPSduieEsfLeO38vIFdXbVTQ-OAeihFrvbxHELt2mNwCH3gbosd0P-pyYtUOaGmi7rLW9Wik8JcNCKA-v7q2JWmBeRFyRAuwf343gnxNL1mpUHfhqd4eswRiO55iwFT8a8gmxSOm8VXjg2aeUjkI3diT84rGR-wK77OcXeF2zJzjRDe0yFla0Tjb1RNTNkVQBJAQ3VQOOaNL7bXajR79ERlMKCjRFIZ0QCB7Nf6LtMwp9QWRdFrm7RXIPpN1V03E4v51gq82URjuQvEANe-VGRVSBij_GcOSLGjyZQi-yGVyPjNVl1Q\"\n            },\n            {\n                \"kty\": \"EC\",\n                \"use\": \"sig\",\n                \"crv\": \"P-256\",\n                \"kid\": \"elliptic-curve-signature\",\n                \"x\": \"R4JmPwezbzLuyGkonWIkezzplUfed5b6F5PL4j0zdf8\",\n                \"y\": \"QQRGKwRV9jHSlHjUhOQ0FqdQEddFBPCHZXpoFjvGmcY\"\n            },\n\t\t\t{  \n\t\t\t\t\"kty\":\"EC\",\n\t\t\t\t\"use\":\"sig\",\n\t\t\t\t\"crv\":\"P-521\",\n                \"kid\": \"elliptic-curve-encryption\",\n\t\t\t\t\"x\":\"AfEFyeYAr1TwmvCxvqgWPEg4Vvf50RC2OdkYfTS30dInZwX-Ebn6elp4fQ0GOdOBbYRq9b2gQ79Cd1AytQhdF6To\",\n\t\t\t\t\"y\":\"Abj0w4nSumQWtO6AV7ufQN6VpmJoKlWmz9KB6BUU0ANcj4aTJjBE9WNiGCqFpvaIdEWZWcSsZNYGKT3rJ71AfLdm\"\n\t\t\t},\n\t\t\t{  \n\t\t\t\t\"kty\":\"OKP\",\n\t\t\t\t\"kid\":\"edwards-curve-encryption\",\n\t\t\t\t\"crv\":\"X25519\",\n\t\t\t\t\"x\":\"vBNW8f19leF79U4U6NrDDQaK_i5kL0iMKghB39AUT2I\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"128bits\",\n\t\t\t\t\"k\" : \"p94TA_PhiVUdi_yxPbviAw\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"192bits\",\n\t\t\t\t\"k\" : \"G9jUYv3b0-0wZWCGxAnIUH6gI0kjeXj4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"256bits\",\n\t\t\t\t\"k\" : \"pzx01XDfexcfxHWtk_MzjfCin5NMy3KBx2xtjrX1G-E\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"384bits\",\n\t\t\t\t\"k\" : \"MBNrGN8nwS7hlOVfqEy6qA98bzyo1BLGxr-kyN1E4UXYWQDkBg4L7AQRwpZdrKKS\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"512bits\",\n\t\t\t\t\"k\" : \"LfWisS5p-ohMbNbeWdiSapnHgA62XPu8DXzyzNZQHtQPglHf0Lb6NUM-8aQGj_YWErvODY5rQkpKeolrBKkcmg\"\n\t\t\t}\n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ECDH-ES",
									"item": [
										{
											"name": "patch client - ECDH-ES - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ECDH-ES+A128KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A128KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A128KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ECDH-ES+A192KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A192KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A192KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ECDH-ES+A256KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A256KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.id_token_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"id_token_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate token - ECDH-ES+A256KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an id_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    ",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id_token');",
															"    let header = parseJweHeader(body.id_token);",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC X25519 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - AES",
					"item": [
						{
							"name": "A128GCMKW",
							"item": [
								{
									"name": "patch client - A128GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128GCMKW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "A128KW",
							"item": [
								{
									"name": "patch client - A128KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A128KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A128KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "A192GCMKW",
							"item": [
								{
									"name": "patch client - A192GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192GCMKW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "A192KW",
							"item": [
								{
									"name": "patch client - A192KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A192KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A192KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "A256GCMKW",
							"item": [
								{
									"name": "patch client - A256GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256GCMKW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256GCMKW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "A256KW",
							"item": [
								{
									"name": "patch client - A256KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"A256KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - A256KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - Direct",
					"item": [
						{
							"name": "patch client - dir - default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.id_token_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"id_token_encrypted_response_alg\": \"dir\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - dir - default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an id_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    ",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('id_token');",
											"    let header = parseJweHeader(body.id_token);",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A128GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.id_token_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"id_token_encrypted_response_alg\": \"dir\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - dir - A128GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an id_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    ",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('id_token');",
											"    let header = parseJweHeader(body.id_token);",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A192GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.id_token_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"id_token_encrypted_response_alg\": \"dir\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - dir - A192GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an id_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    ",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('id_token');",
											"    let header = parseJweHeader(body.id_token);",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A192CBC-HS384",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.id_token_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"id_token_encrypted_response_alg\": \"dir\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - dir - A192CBC-HS384",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an id_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    ",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('id_token');",
											"    let header = parseJweHeader(body.id_token);",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A256GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.id_token_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"id_token_encrypted_response_alg\": \"dir\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - dir - A256GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an id_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    ",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('id_token');",
											"    let header = parseJweHeader(body.id_token);",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A256CBC-HS512",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.id_token_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"id_token_encrypted_response_alg\": \"dir\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - dir - A256CBC-HS512",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an id_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    ",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('id_token');",
											"    let header = parseJweHeader(body.id_token);",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - Password Based Encryption",
					"item": [
						{
							"name": "Set up - shared secret key",
							"item": [
								{
									"name": "patch client - with weak secret",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n\t\t\t\t\"kty\": \"RSA\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"rsa-encryption-256\",\n\t\t\t\t\"e\": \"AQAB\",\n\t\t\t\t\"n\": \"lFAsvOm58TV5q9zyb3psQSESezZtYLZryGjq8LMnuqRt9cdPQCvMrnjcqdFWiXkD4ZXRO2Wp1iyzgprecx3dAnaD-KHlZR7vsFEmDh27DgNvEx5jKRSy5N2quI2LJw66Jb9JeMqoX6vtv_z3PRHb-zUhnIw6tBwZtuNE-AZSC6atr8ZCLXn6RPqJq_eoGgG-xaAzWPyRXDIqWPVO0RD3odjs6er7BcqVyHg54DyylrmRI4m6xERxpuNYI57bQN5_7a_3tR7hLeHJ8J1mNraMLH7H5_aAM_oSqKBEG9jHSTR7JsI3gSvsNOG-nP9jYxw7fH_c1XfRuTEJfBPEZxzD2Q\"\n\t\t\t},\n            {\n                \"kty\": \"RSA\",\n                \"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"e\": \"AQAB\",\n                \"n\": \"pRXXMvbZC4-I8nmeirMmr_wlo-lpZo2cyfXLPSduieEsfLeO38vIFdXbVTQ-OAeihFrvbxHELt2mNwCH3gbosd0P-pyYtUOaGmi7rLW9Wik8JcNCKA-v7q2JWmBeRFyRAuwf343gnxNL1mpUHfhqd4eswRiO55iwFT8a8gmxSOm8VXjg2aeUjkI3diT84rGR-wK77OcXeF2zJzjRDe0yFla0Tjb1RNTNkVQBJAQ3VQOOaNL7bXajR79ERlMKCjRFIZ0QCB7Nf6LtMwp9QWRdFrm7RXIPpN1V03E4v51gq82URjuQvEANe-VGRVSBij_GcOSLGjyZQi-yGVyPjNVl1Q\"\n            },\n            {\n                \"kty\": \"EC\",\n                \"use\": \"sig\",\n                \"crv\": \"P-256\",\n                \"kid\": \"elliptic-curve-signature\",\n                \"x\": \"R4JmPwezbzLuyGkonWIkezzplUfed5b6F5PL4j0zdf8\",\n                \"y\": \"QQRGKwRV9jHSlHjUhOQ0FqdQEddFBPCHZXpoFjvGmcY\"\n            },\n\t\t\t{  \n\t\t\t\t\"kty\": \"EC\",\n\t\t\t\t\"use\": \"sig\",\n\t\t\t\t\"crv\": \"P-521\",\n                \"kid\": \"elliptic-curve-encryption\",\n\t\t\t\t\"x\": \"AfEFyeYAr1TwmvCxvqgWPEg4Vvf50RC2OdkYfTS30dInZwX-Ebn6elp4fQ0GOdOBbYRq9b2gQ79Cd1AytQhdF6To\",\n\t\t\t\t\"y\": \"Abj0w4nSumQWtO6AV7ufQN6VpmJoKlWmz9KB6BUU0ANcj4aTJjBE9WNiGCqFpvaIdEWZWcSsZNYGKT3rJ71AfLdm\"\n\t\t\t},\n\t\t\t{  \n\t\t\t\t\"kty\": \"OKP\",\n\t\t\t\t\"kid\": \"edwards-curve-encryption\",\n\t\t\t\t\"crv\": \"X25519\",\n\t\t\t\t\"x\": \"vBNW8f19leF79U4U6NrDDQaK_i5kL0iMKghB39AUT2I\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"use\": \"sig\",\n\t\t\t\t\"kid\": \"128bits\",\n\t\t\t\t\"k\" : \"p94TA_PhiVUdi_yxPbviAw\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"use\":\"sig\",\n\t\t\t\t\"kid\": \"192bits\",\n\t\t\t\t\"k\" : \"G9jUYv3b0-0wZWCGxAnIUH6gI0kjeXj4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"use\": \"sig\",\n\t\t\t\t\"kid\": \"256bits\",\n\t\t\t\t\"k\" : \"pzx01XDfexcfxHWtk_MzjfCin5NMy3KBx2xtjrX1G-E\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"shared-secret\",\n\t\t\t\t\"k\" : \"weak\"\n\t\t\t}\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "PBES2-HS256+A128KW",
							"item": [
								{
									"name": "patch client - PBES2-HS256+A128KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS256+A128KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS256+A128KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS256+A128KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS256+A128KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS256+A128KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS256+A128KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS256+A128KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "PBES2-HS384+A192KW",
							"item": [
								{
									"name": "patch client - PBES2-HS384+A192KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS384+A192KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS384+A192KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS384+A192KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS384+A192KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS384+A192KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS384+A192KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS384+A192KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "PBES2-HS512+A256KW",
							"item": [
								{
									"name": "patch client - PBES2-HS512+A256KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS512+A256KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS512+A256KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS512+A256KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS512+A256KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS512+A256KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS512+A256KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.id_token_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id_token_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"id_token_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - PBES2-HS512+A256KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJweHeader(body.id_token);",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete client",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - Signing userinfo",
			"item": [
				{
					"name": "Generate token - client",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('access_token');",
									"    pm.expect(body.scope).to.eql('dcr_admin');",
									"    ",
									"    pm.environment.set('access_token', body.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "904f0113-b2b9-4645-9511-48bb10791506",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic ZGNyLWNsaWVudDpkY3ItY2xpZW50LXNlY3JldA=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "dcr_admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register client - rs384 signed userinfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has default attributes\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('client_rs384');",
									"",
									"    pm.expect(body).to.have.property('client_id');",
									"    pm.expect(body).to.have.property('client_secret');    ",
									"    var credentials = body.client_id + \":\" + body.client_secret;",
									"    var authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(credentials));",
									"    pm.environment.set('dcrClientAuthorization', authorization);",
									"    ",
									"    pm.environment.set('newClientForDCRTests', body.id);",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"client_name\":\"client_rs384\",\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"grant_types\": [\"authorization_code\",\"implicit\",\"password\"],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"response_types\": [\"code\",\"token\"],\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"userinfo_signed_response_alg\": \"RS384\"\n}"
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token - user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('access_token');",
									"    pm.environment.set('access_token', body.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{dcrClientAuthorization}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Signed UserInfo default alg",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
								"exec": [
									"function parseJwtHeader (token) {",
									"    var base64Url = token.split('.')[0];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"function parseJwtpayload (token) {",
									"    var base64Url = token.split('.')[1];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/jwt');",
									"    ",
									"    var body = pm.response.text();",
									"    let header = parseJwtHeader(body);",
									"    pm.expect(header).to.have.property('kid');",
									"    pm.expect(header).to.have.property('alg');",
									"    let payload = parseJwtpayload(body);",
									"    pm.expect(payload).to.have.property('iss');",
									"    pm.expect(payload).to.have.property('sub');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{userinfoEndpoint}}",
							"host": [
								"{{userinfoEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Signed UserInfo default alg",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
								"exec": [
									"function parseJwtHeader (token) {",
									"    var base64Url = token.split('.')[0];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"function parseJwtpayload (token) {",
									"    var base64Url = token.split('.')[1];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/jwt');",
									"    ",
									"    var body = pm.response.text();",
									"    let header = parseJwtHeader(body);",
									"    pm.expect(header).to.have.property('kid');",
									"    pm.expect(header).to.have.property('alg');",
									"    let payload = parseJwtpayload(body);",
									"    pm.expect(payload).to.have.property('iss');",
									"    pm.expect(payload).to.have.property('sub');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{userinfoEndpoint}}",
							"host": [
								"{{userinfoEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch client - require RS512",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body.userinfo_signed_response_alg).to.eql('RS512');",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"client_name\": \"client_rs512\",\n\t\"userinfo_signed_response_alg\": \"RS512\"\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Signed UserInfo RS512",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
								"exec": [
									"function parseJwtHeader (token) {",
									"    var base64Url = token.split('.')[0];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"function parseJwtpayload (token) {",
									"    var base64Url = token.split('.')[1];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/jwt');",
									"    ",
									"    var body = pm.response.text();",
									"    let header = parseJwtHeader(body);",
									"    tests['Contains kid claim'] = header.kid === 'my4096key';",
									"    tests['Contains alg claim'] = header.alg === 'RS512';",
									"    let payload = parseJwtpayload(body);",
									"    pm.expect(payload).to.have.property('iss');",
									"    pm.expect(payload).to.have.property('sub');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{userinfoEndpoint}}",
							"host": [
								"{{userinfoEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Signed UserInfo RS512",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
								"exec": [
									"function parseJwtHeader (token) {",
									"    var base64Url = token.split('.')[0];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"function parseJwtpayload (token) {",
									"    var base64Url = token.split('.')[1];",
									"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
									"    return JSON.parse(atob(base64));",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/jwt');",
									"    ",
									"    var body = pm.response.text();",
									"    let header = parseJwtHeader(body);",
									"    tests['Contains kid claim'] = header.kid === 'my4096key';",
									"    tests['Contains alg claim'] = header.alg === 'RS512';",
									"    let payload = parseJwtpayload(body);",
									"    pm.expect(payload).to.have.property('iss');",
									"    pm.expect(payload).to.have.property('sub');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{userinfoEndpoint}}",
							"host": [
								"{{userinfoEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete client - with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - Encrypt userinfo",
			"item": [
				{
					"name": "Case - invalid",
					"item": [
						{
							"name": "Generate token - client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body.scope).to.eql('dcr_admin');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGNyLWNsaWVudDpkY3ItY2xpZW50LXNlY3JldA=="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "dcr_admin",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "register client - with no keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0d09aa9-f196-4763-aac0-440f3bbe94ed",
										"exec": [
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"",
											"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('RSA-OAEP-256');",
											"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
											"",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');    ",
											"    var credentials = body.client_id + \":\" + body.client_secret;",
											"    var authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(credentials));",
											"    pm.environment.set('dcrClientAuthorization', authorization);",
											"    ",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"client_name\": \"Client test for JWE - no jwks\",\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"grant_types\": [\"password\"],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"request_uris\": [\"https://op-test:60001/requests/4472f1ee2cd34273a9b8bff4be1549418e5dd1b182639b7b2ae21d93e387467e#hNN9dc7MUCrZF0Jq\"],\n    \"token_endpoint_auth_method\": \"private_key_jwt\",\n    \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Retrieve access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"access_token\");",
											"    pm.environment.set(\"user_access_token\",body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Userinfo - no jwe key error",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid response type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('no matching key found to encrypt');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{user_access_token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{userinfoEndpoint}}",
									"host": [
										"{{userinfoEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Userinfo - no jwe key error",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid response type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client_metadata');",
											"    pm.expect(body.error_description).to.eql('no matching key found to encrypt');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{user_access_token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{userinfoEndpoint}}?=",
									"host": [
										"{{userinfoEndpoint}}"
									],
									"query": [
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Set up - jwk keys",
					"item": [
						{
							"name": "register client - with jwks",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0d09aa9-f196-4763-aac0-440f3bbe94ed",
										"exec": [
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');    ",
											"    var credentials = body.client_id + \":\" + body.client_secret;",
											"    var authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(credentials));",
											"    pm.environment.set('dcrClientAuthorization', authorization);",
											"    ",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"client_name\": \"Client test for JWE - no jwks\",\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"grant_types\": [\"password\"],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"request_uris\": [\"https://op-test:60001/requests/4472f1ee2cd34273a9b8bff4be1549418e5dd1b182639b7b2ae21d93e387467e#hNN9dc7MUCrZF0Jq\"],\n    \"token_endpoint_auth_method\": \"private_key_jwt\",\n    \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n\t\t\t\t\"kty\": \"RSA\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"rsa-encryption-256\",\n\t\t\t\t\"e\": \"AQAB\",\n\t\t\t\t\"n\": \"lFAsvOm58TV5q9zyb3psQSESezZtYLZryGjq8LMnuqRt9cdPQCvMrnjcqdFWiXkD4ZXRO2Wp1iyzgprecx3dAnaD-KHlZR7vsFEmDh27DgNvEx5jKRSy5N2quI2LJw66Jb9JeMqoX6vtv_z3PRHb-zUhnIw6tBwZtuNE-AZSC6atr8ZCLXn6RPqJq_eoGgG-xaAzWPyRXDIqWPVO0RD3odjs6er7BcqVyHg54DyylrmRI4m6xERxpuNYI57bQN5_7a_3tR7hLeHJ8J1mNraMLH7H5_aAM_oSqKBEG9jHSTR7JsI3gSvsNOG-nP9jYxw7fH_c1XfRuTEJfBPEZxzD2Q\"\n\t\t\t},\n            {\n                \"kty\": \"RSA\",\n                \"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"e\": \"AQAB\",\n                \"n\": \"pRXXMvbZC4-I8nmeirMmr_wlo-lpZo2cyfXLPSduieEsfLeO38vIFdXbVTQ-OAeihFrvbxHELt2mNwCH3gbosd0P-pyYtUOaGmi7rLW9Wik8JcNCKA-v7q2JWmBeRFyRAuwf343gnxNL1mpUHfhqd4eswRiO55iwFT8a8gmxSOm8VXjg2aeUjkI3diT84rGR-wK77OcXeF2zJzjRDe0yFla0Tjb1RNTNkVQBJAQ3VQOOaNL7bXajR79ERlMKCjRFIZ0QCB7Nf6LtMwp9QWRdFrm7RXIPpN1V03E4v51gq82URjuQvEANe-VGRVSBij_GcOSLGjyZQi-yGVyPjNVl1Q\"\n            },\n            {\n                \"kty\": \"EC\",\n                \"use\": \"sig\",\n                \"crv\": \"P-256\",\n                \"kid\": \"elliptic-curve-signature\",\n                \"x\": \"R4JmPwezbzLuyGkonWIkezzplUfed5b6F5PL4j0zdf8\",\n                \"y\": \"QQRGKwRV9jHSlHjUhOQ0FqdQEddFBPCHZXpoFjvGmcY\"\n            },\n\t\t\t{  \n\t\t\t\t\"kty\":\"EC\",\n\t\t\t\t\"use\":\"enc\",\n\t\t\t\t\"crv\":\"P-521\",\n                \"kid\": \"elliptic-curve-encryption\",\n\t\t\t\t\"x\":\"AfEFyeYAr1TwmvCxvqgWPEg4Vvf50RC2OdkYfTS30dInZwX-Ebn6elp4fQ0GOdOBbYRq9b2gQ79Cd1AytQhdF6To\",\n\t\t\t\t\"y\":\"Abj0w4nSumQWtO6AV7ufQN6VpmJoKlWmz9KB6BUU0ANcj4aTJjBE9WNiGCqFpvaIdEWZWcSsZNYGKT3rJ71AfLdm\"\n\t\t\t},\n\t\t\t{  \n\t\t\t\t\"kty\":\"OKP\",\n\t\t\t\t\"use\":\"enc\",\n\t\t\t\t\"kid\":\"edwards-curve-encryption\",\n\t\t\t\t\"crv\":\"X25519\",\n\t\t\t\t\"x\":\"vBNW8f19leF79U4U6NrDDQaK_i5kL0iMKghB39AUT2I\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"128bits\",\n\t\t\t\t\"k\" : \"p94TA_PhiVUdi_yxPbviAw\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"192bits\",\n\t\t\t\t\"k\" : \"G9jUYv3b0-0wZWCGxAnIUH6gI0kjeXj4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"256bits\",\n\t\t\t\t\"k\" : \"pzx01XDfexcfxHWtk_MzjfCin5NMy3KBx2xtjrX1G-E\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"384bits\",\n\t\t\t\t\"k\" : \"MBNrGN8nwS7hlOVfqEy6qA98bzyo1BLGxr-kyN1E4UXYWQDkBg4L7AQRwpZdrKKS\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"512bits\",\n\t\t\t\t\"k\" : \"LfWisS5p-ohMbNbeWdiSapnHgA62XPu8DXzyzNZQHtQPglHf0Lb6NUM-8aQGj_YWErvODY5rQkpKeolrBKkcmg\"\n\t\t\t}\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - RSA",
					"item": [
						{
							"name": "RSA-OAEP-256",
							"item": [
								{
									"name": "patch client - RSA-OAEP-256 - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - RSA-OAEP-256 - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - RSA-OAEP-256 - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - RSA-OAEP-256 - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - RSA-OAEP-256 - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - RSA-OAEP-256 - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - RSA-OAEP-256 - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - RSA-OAEP-256 - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - Curve",
					"item": [
						{
							"name": "Case - Elliptic Curve",
							"item": [
								{
									"name": "ECDH-ES",
									"item": [
										{
											"name": "patch client - ECDH-ES - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ECDH-ES+A128KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A128KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ECDH-ES+A192KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A192KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ECDH-ES+A256KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A256KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'EC';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'P-521';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Edward Curve",
							"item": [
								{
									"name": "Set up - okp keys",
									"item": [
										{
											"name": "patch client - with OKP keys",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n\t\t\t\t\"kty\": \"RSA\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"rsa-encryption-256\",\n\t\t\t\t\"e\": \"AQAB\",\n\t\t\t\t\"n\": \"lFAsvOm58TV5q9zyb3psQSESezZtYLZryGjq8LMnuqRt9cdPQCvMrnjcqdFWiXkD4ZXRO2Wp1iyzgprecx3dAnaD-KHlZR7vsFEmDh27DgNvEx5jKRSy5N2quI2LJw66Jb9JeMqoX6vtv_z3PRHb-zUhnIw6tBwZtuNE-AZSC6atr8ZCLXn6RPqJq_eoGgG-xaAzWPyRXDIqWPVO0RD3odjs6er7BcqVyHg54DyylrmRI4m6xERxpuNYI57bQN5_7a_3tR7hLeHJ8J1mNraMLH7H5_aAM_oSqKBEG9jHSTR7JsI3gSvsNOG-nP9jYxw7fH_c1XfRuTEJfBPEZxzD2Q\"\n\t\t\t},\n            {\n                \"kty\": \"RSA\",\n                \"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"e\": \"AQAB\",\n                \"n\": \"pRXXMvbZC4-I8nmeirMmr_wlo-lpZo2cyfXLPSduieEsfLeO38vIFdXbVTQ-OAeihFrvbxHELt2mNwCH3gbosd0P-pyYtUOaGmi7rLW9Wik8JcNCKA-v7q2JWmBeRFyRAuwf343gnxNL1mpUHfhqd4eswRiO55iwFT8a8gmxSOm8VXjg2aeUjkI3diT84rGR-wK77OcXeF2zJzjRDe0yFla0Tjb1RNTNkVQBJAQ3VQOOaNL7bXajR79ERlMKCjRFIZ0QCB7Nf6LtMwp9QWRdFrm7RXIPpN1V03E4v51gq82URjuQvEANe-VGRVSBij_GcOSLGjyZQi-yGVyPjNVl1Q\"\n            },\n            {\n                \"kty\": \"EC\",\n                \"use\": \"sig\",\n                \"crv\": \"P-256\",\n                \"kid\": \"elliptic-curve-signature\",\n                \"x\": \"R4JmPwezbzLuyGkonWIkezzplUfed5b6F5PL4j0zdf8\",\n                \"y\": \"QQRGKwRV9jHSlHjUhOQ0FqdQEddFBPCHZXpoFjvGmcY\"\n            },\n\t\t\t{  \n\t\t\t\t\"kty\":\"EC\",\n\t\t\t\t\"use\":\"sig\",\n\t\t\t\t\"crv\":\"P-521\",\n                \"kid\": \"elliptic-curve-encryption\",\n\t\t\t\t\"x\":\"AfEFyeYAr1TwmvCxvqgWPEg4Vvf50RC2OdkYfTS30dInZwX-Ebn6elp4fQ0GOdOBbYRq9b2gQ79Cd1AytQhdF6To\",\n\t\t\t\t\"y\":\"Abj0w4nSumQWtO6AV7ufQN6VpmJoKlWmz9KB6BUU0ANcj4aTJjBE9WNiGCqFpvaIdEWZWcSsZNYGKT3rJ71AfLdm\"\n\t\t\t},\n\t\t\t{  \n\t\t\t\t\"kty\":\"OKP\",\n\t\t\t\t\"kid\":\"edwards-curve-encryption\",\n\t\t\t\t\"crv\":\"X25519\",\n\t\t\t\t\"x\":\"vBNW8f19leF79U4U6NrDDQaK_i5kL0iMKghB39AUT2I\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"128bits\",\n\t\t\t\t\"k\" : \"p94TA_PhiVUdi_yxPbviAw\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"192bits\",\n\t\t\t\t\"k\" : \"G9jUYv3b0-0wZWCGxAnIUH6gI0kjeXj4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"256bits\",\n\t\t\t\t\"k\" : \"pzx01XDfexcfxHWtk_MzjfCin5NMy3KBx2xtjrX1G-E\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"384bits\",\n\t\t\t\t\"k\" : \"MBNrGN8nwS7hlOVfqEy6qA98bzyo1BLGxr-kyN1E4UXYWQDkBg4L7AQRwpZdrKKS\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"512bits\",\n\t\t\t\t\"k\" : \"LfWisS5p-ohMbNbeWdiSapnHgA62XPu8DXzyzNZQHtQPglHf0Lb6NUM-8aQGj_YWErvODY5rQkpKeolrBKkcmg\"\n\t\t\t}\n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ECDH-ES",
									"item": [
										{
											"name": "patch client - ECDH-ES - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ECDH-ES+A128KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A128KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A128KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A128KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A128KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ECDH-ES+A192KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A192KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A192KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A192KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A192KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ECDH-ES+A256KW",
									"item": [
										{
											"name": "patch client - ECDH-ES+A256KW - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - default",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A128GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A192CBC-HS384",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256GCM",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "patch client - ECDH-ES+A256KW - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get client with response types\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('ECDH-ES+A256KW');",
															"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
															"});",
															"",
															"pm.test(\"One time Token\", function() {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('registration_access_token');",
															"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
															"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
															"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{registrationAccessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"userinfo_encrypted_response_alg\": \"ECDH-ES+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
												},
												"url": {
													"raw": "{{registrationClientUri}}",
													"host": [
														"{{registrationClientUri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Retrieve access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/json');",
															"    var body = pm.response.json();",
															"    ",
															"    pm.expect(body).to.have.property(\"access_token\");",
															"    pm.environment.set(\"user_access_token\",body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{dcrClientAuthorization}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Userinfo - ECDH-HS - A256CBC-HS512",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    pm.response.to.be.header('Content-Type', 'application/jwt');",
															"    ",
															"    var body = pm.response.text();",
															"    let header = parseJweHeader(body);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'ECDH-ES+A256KW';",
															"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
															"    tests['Use Elliptic curve'] = header.epk.kty === 'OKP';",
															"    tests['Use EC P-521 curve'] = header.epk.crv === 'X25519';",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{user_access_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{userinfoEndpoint}}",
													"host": [
														"{{userinfoEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - AES",
					"item": [
						{
							"name": "A128GCMKW",
							"item": [
								{
									"name": "patch client - A128GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128GCMKW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "A128KW",
							"item": [
								{
									"name": "patch client - A128KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A128KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A128KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "A192GCMKW",
							"item": [
								{
									"name": "patch client - A192GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192GCMKW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "A192KW",
							"item": [
								{
									"name": "patch client - A192KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A192KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A192KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "A256GCMKW",
							"item": [
								{
									"name": "patch client - A256GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256GCMKW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256GCMKW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256GCMKW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256GCMKW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256GCMKW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256GCMKW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256GCMKW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256GCMKW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256GCMKW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256GCMKW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "A256KW",
							"item": [
								{
									"name": "patch client - A256KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - A256KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - A256KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - Direct",
					"item": [
						{
							"name": "patch client - dir - default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"userinfo_encrypted_response_alg\": \"dir\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Retrieve access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"access_token\");",
											"    pm.environment.set(\"user_access_token\",body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Userinfo - dir - default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/jwt');",
											"    ",
											"    var body = pm.response.text();",
											"    let header = parseJweHeader(body);",
											"    ",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{user_access_token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{userinfoEndpoint}}",
									"host": [
										"{{userinfoEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A128GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"userinfo_encrypted_response_alg\": \"dir\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Retrieve access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"access_token\");",
											"    pm.environment.set(\"user_access_token\",body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Userinfo - dir - A128GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/jwt');",
											"    ",
											"    var body = pm.response.text();",
											"    let header = parseJweHeader(body);",
											"    ",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{user_access_token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{userinfoEndpoint}}",
									"host": [
										"{{userinfoEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A192GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"userinfo_encrypted_response_alg\": \"dir\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Retrieve access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"access_token\");",
											"    pm.environment.set(\"user_access_token\",body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Userinfo - dir - A192GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/jwt');",
											"    ",
											"    var body = pm.response.text();",
											"    let header = parseJweHeader(body);",
											"    ",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{user_access_token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{userinfoEndpoint}}",
									"host": [
										"{{userinfoEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A192CBC-HS384",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"userinfo_encrypted_response_alg\": \"dir\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Retrieve access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"access_token\");",
											"    pm.environment.set(\"user_access_token\",body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Userinfo - dir - A192CBC-HS384",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/jwt');",
											"    ",
											"    var body = pm.response.text();",
											"    let header = parseJweHeader(body);",
											"    ",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{user_access_token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{userinfoEndpoint}}",
									"host": [
										"{{userinfoEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A256GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"userinfo_encrypted_response_alg\": \"dir\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Retrieve access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"access_token\");",
											"    pm.environment.set(\"user_access_token\",body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Userinfo - dir - A256GCM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/jwt');",
											"    ",
											"    var body = pm.response.text();",
											"    let header = parseJweHeader(body);",
											"    ",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{user_access_token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{userinfoEndpoint}}",
									"host": [
										"{{userinfoEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch client - dir - A256CBC-HS512",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('dir');",
											"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"userinfo_encrypted_response_alg\": \"dir\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Retrieve access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"access_token\");",
											"    pm.environment.set(\"user_access_token\",body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{dcrClientAuthorization}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Userinfo - dir - A256CBC-HS512",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
										"exec": [
											"function parseJweHeader (token) {",
											"    var base64Url = token.split('.')[0];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/jwt');",
											"    ",
											"    var body = pm.response.text();",
											"    let header = parseJweHeader(body);",
											"    ",
											"    tests['Contains cty claim'] = header.cty === 'JWT';",
											"    tests['Contains alg claim'] = header.alg === 'dir';",
											"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{user_access_token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{userinfoEndpoint}}",
									"host": [
										"{{userinfoEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - Password Based Encryption",
					"item": [
						{
							"name": "Set up - shared secret key",
							"item": [
								{
									"name": "patch client - with weak secret",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n\t\t\t\t\"kty\": \"RSA\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"rsa-encryption-256\",\n\t\t\t\t\"e\": \"AQAB\",\n\t\t\t\t\"n\": \"lFAsvOm58TV5q9zyb3psQSESezZtYLZryGjq8LMnuqRt9cdPQCvMrnjcqdFWiXkD4ZXRO2Wp1iyzgprecx3dAnaD-KHlZR7vsFEmDh27DgNvEx5jKRSy5N2quI2LJw66Jb9JeMqoX6vtv_z3PRHb-zUhnIw6tBwZtuNE-AZSC6atr8ZCLXn6RPqJq_eoGgG-xaAzWPyRXDIqWPVO0RD3odjs6er7BcqVyHg54DyylrmRI4m6xERxpuNYI57bQN5_7a_3tR7hLeHJ8J1mNraMLH7H5_aAM_oSqKBEG9jHSTR7JsI3gSvsNOG-nP9jYxw7fH_c1XfRuTEJfBPEZxzD2Q\"\n\t\t\t},\n            {\n                \"kty\": \"RSA\",\n                \"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"e\": \"AQAB\",\n                \"n\": \"pRXXMvbZC4-I8nmeirMmr_wlo-lpZo2cyfXLPSduieEsfLeO38vIFdXbVTQ-OAeihFrvbxHELt2mNwCH3gbosd0P-pyYtUOaGmi7rLW9Wik8JcNCKA-v7q2JWmBeRFyRAuwf343gnxNL1mpUHfhqd4eswRiO55iwFT8a8gmxSOm8VXjg2aeUjkI3diT84rGR-wK77OcXeF2zJzjRDe0yFla0Tjb1RNTNkVQBJAQ3VQOOaNL7bXajR79ERlMKCjRFIZ0QCB7Nf6LtMwp9QWRdFrm7RXIPpN1V03E4v51gq82URjuQvEANe-VGRVSBij_GcOSLGjyZQi-yGVyPjNVl1Q\"\n            },\n            {\n                \"kty\": \"EC\",\n                \"use\": \"sig\",\n                \"crv\": \"P-256\",\n                \"kid\": \"elliptic-curve-signature\",\n                \"x\": \"R4JmPwezbzLuyGkonWIkezzplUfed5b6F5PL4j0zdf8\",\n                \"y\": \"QQRGKwRV9jHSlHjUhOQ0FqdQEddFBPCHZXpoFjvGmcY\"\n            },\n\t\t\t{  \n\t\t\t\t\"kty\": \"EC\",\n\t\t\t\t\"use\": \"sig\",\n\t\t\t\t\"crv\": \"P-521\",\n                \"kid\": \"elliptic-curve-encryption\",\n\t\t\t\t\"x\": \"AfEFyeYAr1TwmvCxvqgWPEg4Vvf50RC2OdkYfTS30dInZwX-Ebn6elp4fQ0GOdOBbYRq9b2gQ79Cd1AytQhdF6To\",\n\t\t\t\t\"y\": \"Abj0w4nSumQWtO6AV7ufQN6VpmJoKlWmz9KB6BUU0ANcj4aTJjBE9WNiGCqFpvaIdEWZWcSsZNYGKT3rJ71AfLdm\"\n\t\t\t},\n\t\t\t{  \n\t\t\t\t\"kty\": \"OKP\",\n\t\t\t\t\"kid\": \"edwards-curve-encryption\",\n\t\t\t\t\"crv\": \"X25519\",\n\t\t\t\t\"x\": \"vBNW8f19leF79U4U6NrDDQaK_i5kL0iMKghB39AUT2I\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"use\": \"sig\",\n\t\t\t\t\"kid\": \"128bits\",\n\t\t\t\t\"k\" : \"p94TA_PhiVUdi_yxPbviAw\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"use\":\"sig\",\n\t\t\t\t\"kid\": \"192bits\",\n\t\t\t\t\"k\" : \"G9jUYv3b0-0wZWCGxAnIUH6gI0kjeXj4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"use\": \"sig\",\n\t\t\t\t\"kid\": \"256bits\",\n\t\t\t\t\"k\" : \"pzx01XDfexcfxHWtk_MzjfCin5NMy3KBx2xtjrX1G-E\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"shared-secret\",\n\t\t\t\t\"k\" : \"weak\"\n\t\t\t}\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "PBES2-HS256+A128KW",
							"item": [
								{
									"name": "patch client - PBES2-HS256+A128KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS256+A128KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS256+A128KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS256+A128KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS256+A128KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS256+A128KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS256+A128KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS256+A128KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS256+A128KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS256+A128KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS256+A128KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS256+A128KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "PBES2-HS384+A192KW",
							"item": [
								{
									"name": "patch client - PBES2-HS384+A192KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS384+A192KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS384+A192KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS384+A192KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS384+A192KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS384+A192KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS384+A192KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS384+A192KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS384+A192KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS384+A192KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS384+A192KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS384+A192KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "PBES2-HS512+A256KW",
							"item": [
								{
									"name": "patch client - PBES2-HS512+A256KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS512+A256KW\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS512+A256KW - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A128GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A128GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS512+A256KW - A128GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A128GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A192GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS512+A256KW - A192GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A192CBC-HS384');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A192CBC-HS384\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS512+A256KW - A192CBC-HS384",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A192CBC-HS384';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256GCM');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A256GCM\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS512+A256KW - A256GCM",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256GCM';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "patch client - PBES2-HS512+A256KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_encrypted_response_alg).to.eql('PBES2-HS512+A256KW');",
													"    pm.expect(body.userinfo_encrypted_response_enc).to.eql('A256CBC-HS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"userinfo_encrypted_response_alg\": \"PBES2-HS512+A256KW\",\n   \"userinfo_encrypted_response_enc\": \"A256CBC-HS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate user token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"access_token\");",
													"    pm.environment.set(\"user_access_token\",body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Userinfo - PBES2-HS512+A256KW - A256CBC-HS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJweHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJweHeader(body);",
													"    ",
													"    pm.expect(header).to.have.property('p2s');",
													"    pm.expect(header).to.have.property('p2c');",
													"    tests['Contains cty claim'] = header.cty === 'JWT';",
													"    tests['Contains alg claim'] = header.alg === 'PBES2-HS512+A256KW';",
													"    tests['Contains enc claim'] = header.enc === 'A256CBC-HS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{user_access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete client",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - Default and Allowed Scopes",
			"item": [
				{
					"name": "Enable Default and Allowed scopes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bfe78ac1-144a-4bbd-abf9-55e160e723bf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR enabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isAllowedScopesEnabled).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowedScopes).to.eql([\"email\"]);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.defaultScopes).to.eql([\"openid\",\"profile\"]);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oidc\": {\n    \"clientRegistrationSettings\": {\n      \"isAllowedScopesEnabled\": true,\n      \"allowedScopes\" : [\n\t\t\"email\"\n\t  ],\n\t  \"defaultScopes\" : [\n\t\t\"openid\",\n\t\t\"profile\"\n\t  ]\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Allowed Scopes filter - scopes reduced",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has default attributes\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('scope');",
									"    pm.expect(body.scope).to.eql('email');//scopes have been filtered to keep only allowed ones",
									"",
									"    pm.environment.set('newClientForDCRTests', body.id);",
									"    pm.environment.set('newClientIdForDCRTests', body.client_id);",
									"    pm.environment.set('newClientSecretForDCRTests', body.client_secret);",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"redirect_uris\":\n     [\"https://client.example.org/callback\",\n      \"https://client.example.org/callback2\"],\n   \"scope\": \"phone email\"\n  }"
						},
						"url": {
							"raw": "{{registrationEndpoint}}",
							"host": [
								"{{registrationEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "All scopes rejected - Default scopes applied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"",
									"    pm.expect(body).to.have.property('scope');",
									"    pm.expect(body.scope).to.eql('openid profile');//no scopes retained, expecting default scopes.",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"scope\": \"phone address\"\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset scope to email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"",
									"    pm.expect(body).to.have.property('scope');",
									"    pm.expect(body.scope).to.eql('email');",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"scope\": \"email\"\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "No scopes - Default scopes applied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.expect(body.client_name).to.eql('Client name updated via DCR');",
									"    pm.expect(body.scope).to.eql('openid profile');//no scopes into the request, expecting default scopes.",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"redirect_uris\": [\n        \"https://client.example.org/callback\",\n        \"https://client.example.org/callback2\"\n    ],\n    \"response_types\": [\n        \"code\"\n    ],\n    \"grant_types\": [\n        \"authorization_code\"\n    ],\n    \"application_type\": \"web\",\n    \"contacts\": [\n        \"marie@example.org\",\n        \"jeanne@example.org\"\n    ],\n\t\"client_name\": \"Client name updated via DCR\",\n    \"logo_uri\": \"https://client.example.org/logo.png\",\n    \"subject_type\": \"public\",\n    \"userinfo_encrypted_response_alg\": \"RSA-OAEP-256\",\n    \"userinfo_encrypted_response_enc\": \"A128CBC-HS256\",\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"require_auth_time\": false,\n    \"request_uris\": [\n        \"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"\n    ]\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset scope to email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"",
									"    pm.expect(body).to.have.property('scope');",
									"    pm.expect(body.scope).to.eql('email');",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"scope\": \"email\"\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scopes null - Default scopes applied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get client with response types\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"",
									"    pm.expect(body).to.have.property('scope');",
									"    pm.expect(body.scope).to.eql('openid profile');//no scopes retained, expecting default scopes.",
									"});",
									"",
									"pm.test(\"One time Token\", function() {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('registration_access_token');",
									"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
									"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
									"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"scope\": null\n}"
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete client - with registration token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{registrationAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registrationClientUri}}",
							"host": [
								"{{registrationClientUri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "abfa8366-3ee2-45b0-b658-0040b79d565c",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{management_url}}/management/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		}
	]
}
