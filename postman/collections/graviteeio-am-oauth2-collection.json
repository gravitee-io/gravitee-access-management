{
	"info": {
		"_postman_id": "e0d8253e-152c-49aa-87f1-d85a19de3a63",
		"name": "Gravitee.io - AM - Oauth2",
		"description": "Test Oauth2 (RFC 6749) specifications",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c82ca94-a2f6-49a9-b4b8-b500a4bc686d",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{management_url}}/admin/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"admin",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create oauth2 domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26d31d2d-f1e0-451b-bd93-2e49ddd4db70",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set('domain', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"oauth2\", \n\t\"description\": \"test oauth2 authorization framework specifications\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch domain - allow localhost",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8135628-467c-47f0-a761-b854e031f29e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR disabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowLocalhostRedirectUri).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowHttpSchemeRedirectUri).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowWildCardRedirectUri).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isOpenDynamicClientRegistrationEnabled).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oidc\": {\n    \"clientRegistrationSettings\": {\n      \"allowLocalhostRedirectUri\": true,\n      \"allowHttpSchemeRedirectUri\": true,\n      \"allowWildCardRedirectUri\": true,\n      \"isDynamicClientRegistrationEnabled\": false,\n      \"isOpenDynamicClientRegistrationEnabled\": false\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default identity provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a0d8795-b253-4d98-81b0-3cd7d56fd448",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/identities/default-idp-{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"identities",
								"default-idp-{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create in-memory IDP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c83e8b22-02a3-4460-a690-f86916d5599b",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('idp.inmemory', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"},{\\\"firstname\\\":\\\"Jensen\\\",\\\"lastname\\\":\\\"Barbara\\\",\\\"username\\\":\\\"jensen.barbara\\\",\\\"email\\\":\\\"jensen.barbara@mail.com\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/identities",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"identities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create simple scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91f4b057-76e2-4506-93a7-42d623346557",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"key\": \"scope1\",\n  \"name\": \"scope1\",\n  \"description\": \"scope1\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/scopes",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"scopes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jks certificate rs256",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2734e707-20c7-4499-bf6f-ad3186d4e6a1",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Extension Grant - create jks certificate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('certificateJks', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"javakeystore-am-certificate\",\n  \"configuration\": \"{\\\"jks\\\":\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"server.jks\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"size\\\\\\\":2237,\\\\\\\"content\\\\\\\":\\\\\\\"/u3+7QAAAAIAAAABAAAAAQAJbXl0ZXN0a2V5AAABYkPPuJkAAAUCMIIE/jAOBgorBgEEASoCEQEBBQAEggTqr5aJvYjZG/WQ8gGjoB2IzOwULJfXRbSwn0H9SP6vXE7TkFdVC6e7jOsPwwUVKwiTRCrNLL3G9OYyBvQEJv1NdPGYpqrD+4bzr5oVKQbwuXAs455phdjZ5jFlGjjowHBU7loxm5TJDncBfYoffptiStRSjzuuEWRPaRnUtL1PMidp4XdSOxzknBQ86zLz266y6pksmrSyCGxXiZwvnzq2TRvZOAT5haYA1wJOZwXAE4xk00C9Zr5NBIgyAZ0fsuZfquLhxpEgDg8XFsXAL7O4U9ocETktH4j5JnYWng6A90Ke2l4CUKjPvXTMYQr2ll26BjpE/TGyXRMNqqSzZ6tujn9wji1stGUS840AFye/HfZyQlkZBV/CyyDx/OkP0D9U5xO5jCnurGrMrbskIqcLchyb9xobr/RbnrpwMnK2XteCX9WRog064uYY8r722c81jFM6pL9Ue/Jm6h5fkHKZdJPJtMqdZf9fgb8VbxranRQDd3EIxx0yIXBddv6lqWMISXJCAni3MpBwiUAgzDdVVQYJlzu8t1x8cEpIrqD0sNQhGKmmDWwAE2mKJrYLaqaICKG9YaWy65ZPUOdQMUFzYOxpjNAvbDE/ZUs2jU1AbBpCk0HpgoBYckx0bIAN0buwaPUMwBgCzOjaQ6EQkNiORJoBdxqgI2GsN4j3TzUFSUIRZlFRxbn/f1Oo9SSznIfSzMRDEfoZYdLzwm01yBl5VwmCY5azrPGtAl+hmgBOdYM4O+svGTam+E4Iw2abX9T+B1im8ip4fEtn98Pgr//d+1cbYC2kcPMadfjMbp3d62z4DH9ABqTnEHBbfo1GgOpzpMRaKfrKvPap3PniP0YYqwDRJ4zn7OfYmrxVy8MENqGLveIksyvRj1K8Y3uexxZQ6CMAWbUuONJHHfBoTYsK+LdYxl7fCSuxqx9z0V3x5R3PCXchxNqR9f2tU1uDBqlXDESko0g9X0Qi1pLMk8A7wE5g8mChFhhrakrRMauwH0JkyLw+vcVpLqsyxsAcIm5bX3IWivPrbLZRW3lSLofdXj0XEuP2vnxdC82UPI3VQqqAI1UzL9sUl/cqhNGNztyRYAEv3FWttW2YTA1dlgq4DjPIRFAS4HyzgHeg8Jcgg/kRHbaLT4j2JVdqFG22CL+bayA6KqWeHos2bAA3ydw34y3QtJ0cqcH3iUZ0R0z++rG6iwDKPMkNW4osWP51UcFLXY/uNGSoverCQGJsD+wKvyi9KGDCsdjacgZJJtAsyOCxQssIPeB3GWt0rJi86SUqg0praNBXHKcbx5wSvp9i6uuaZhPzcvECPW/kgzPRaZLfneEZI+UPy31/jP8EUfQ9JT2hQ7w69jgVDE0WFhmNt8I/VrCMxFwCqYvA4m8xLmplZhCy+HUbLJMcwAx0yzbvH63kwcOASJC5JrnK0/P7UOc2NdAgXO/WrCZssRresxRNKaZvJTJtTrhElJKP9yD1zjiS4L5/PpGIW5md/qKX91zz0k5AzCqHdhBaRx7K7QVeWVEN8u4ZySbj9vCTLs1jTPcX7YpsPJBRGvqA4j9AYcBLzmhQa1huLVZTANE6j+vkgPvgPq4ToyTMKvUJwLbmIobX0ZyQKPGhe3LVorfM4uaSxq8+jMV4+0uddFNpLm9eJG+ZLbeVlu0157q45lxuQrO1VOvVLdqsrwAAAAEABVguNTA5AAADcTCCA20wggJVoAMCAQICBBCfcKYwDQYJKoZIhvcNAQELBQAwZzELMAkGA1UEBhMCVVMxDjAMBgNVBAgTBVN0YXRlMQ0wCwYDVQQHEwRDaXR5MRUwEwYDVQQKEwxPcmdhbml6YXRpb24xDTALBgNVBAsTBFVuaXQxEzARBgNVBAMTCldlYiBTZXJ2ZXIwHhcNMTgwMzIwMTQyODI5WhcNMTgwNjE4MTQyODI5WjBnMQswCQYDVQQGEwJVUzEOMAwGA1UECBMFU3RhdGUxDTALBgNVBAcTBENpdHkxFTATBgNVBAoTDE9yZ2FuaXphdGlvbjENMAsGA1UECxMEVW5pdDETMBEGA1UEAxMKV2ViIFNlcnZlcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKu+JWbf4oP3xTz33EgXnD0jgL/clO/9lV25GFwygaR8F7qzPaknaR/psyO1acRv3UfrcYdZ2/nnh7PcchjEFmxh11pT3di2KquxsIJBzcYyYUHXbRaBRZ+Oqy884xzPc/IXLfLD5csCI0PQ+XaW/wrp6Mm9/CZNGHLUMjk9Aa9FbPnsh2gLGNkTwf4uvv11z94WFy7oWSzFra26C/zq3I7fywD2/UvYIJCOypAvxOcwdsNXxqEYroBu/jcoyMdXq2AWE6EdzVrZhpgK0QjTIoofa3QreGsdHBR+Cq7hDnGpakGQQVfTlhbzKCtaK9d8PAaOpwzKIcRiVG8NytE/QmECAwEAAaMhMB8wHQYDVR0OBBYEFJTE/I9yfWZ8smIobMkV2dtfpdFhMA0GCSqGSIb3DQEBCwUAA4IBAQCqZhd8O5GUUw1uX6jQKLjqjfzt7dPKMhNSUKPLrBktiJa+ZM/M+mGnEH6/TYcwzazAfeV+JgbY1KpMq1UVOW6KdDga2yXj43mVz7yzVB3KPIdMGSI4pqZxptQ7LEGVtSDsgqpQPi3qpsWUMLMW6heOHKc66Bdf9RE0S1ds+yMg9dNQBkTEXJKR6S+koyDcGnrZgwwVJ5T5+5ZUiGxe2wdGs7DUQCdDVwRZwkWzdIXPnK98PwFh7ivYI6+tnV+AHZg02IDAZ49rwNtQsExeQepNh2IPwCe+7TlfZ8TeiwcxL2ngqKA9LFP2do8YDz9XZbfl9AfS3GXeZsq3ihR3nffqT6271mTSYWrugh9IagHGV2PT6mo=\\\\\\\"}\\\",\\\"storepass\\\":\\\"letmein\\\",\\\"alias\\\":\\\"mytestkey\\\",\\\"keypass\\\":\\\"changeme\\\"}\",\n  \"name\": \"Test\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fba7fc5-b1dc-45fa-bdd8-f204113d628c",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('client1', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": \"my-client\",\n  \"clientSecret\": \"my-client-secret\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/clients",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08b9fcc3-826e-47e0-af5a-751d8e9feb74",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"redirectUris\": [],\n  \"authorizedGrantTypes\": [\n    \"authorization_code\",\n    \"client_credentials\",\n    \"password\",\n    \"refresh_token\"\n  ],\n  \"scopes\": [\"scope1\", \"openid\"],\n  \"accessTokenValiditySeconds\": 7200,\n  \"refreshTokenValiditySeconds\": 14400,\n  \"idTokenValiditySeconds\": 14400,\n  \"enabled\": true,\n  \"identities\": [\n    \"{{idp.inmemory}}\"\n  ],\n  \"enhanceScopesWithUserPermissions\": false\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{client1}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"clients",
								"{{client1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create client 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ecbe523-acdd-4857-afd7-a5e767dab4f0",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('client2', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": \"my-client2\",\n  \"clientSecret\": \"my-client-secret2\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/clients",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure client 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "684b7c6a-420f-4d8f-951d-d943b7e290ba",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"redirectUris\": [\"http://localhost:4000/\"],\n  \"authorizedGrantTypes\": [\n    \"authorization_code\",\n    \"client_credentials\",\n    \"implicit\",\n    \"password\"\n  ],\n  \"scopes\": [\"scope1\"],\n  \"accessTokenValiditySeconds\": 7200,\n  \"refreshTokenValiditySeconds\": 14400,\n  \"idTokenValiditySeconds\": 14400,\n  \"enabled\": true,\n  \"identities\": [\n    \"{{idp.inmemory}}\"\n  ],\n  \"enhanceScopesWithUserPermissions\": false\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{client2}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}",
								"clients",
								"{{client2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e43ad0df-dff9-4109-9bbe-376627382185",
								"exec": [
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b66b2d34-81ef-4ebe-9d89-e8fb6c7529f6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body).to.have.property(\"authorization_endpoint\");",
									"    pm.expect(body).to.have.property(\"token_endpoint\");",
									"    pm.expect(body).to.have.property(\"revocation_endpoint\");",
									"    pm.expect(body).to.have.property(\"userinfo_endpoint\");",
									"    pm.expect(body).to.have.property(\"registration_endpoint\");",
									"    pm.expect(body).to.have.property(\"end_session_endpoint\");",
									"    pm.expect(body).to.have.property(\"introspection_endpoint\");",
									"",
									"    pm.environment.set('authorizationEndpoint', body.authorization_endpoint);",
									"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
									"    pm.environment.set('userinfoEndpoint', body.userinfo_endpoint);",
									"    pm.environment.set('revocationEndpoint', body.revocation_endpoint);",
									"    pm.environment.set('registrationEndpoint', body.registration_endpoint);",
									"    pm.environment.set('logoutEndpoint', body.end_session_endpoint);",
									"    pm.environment.set('introspectionEndpoint', body.introspection_endpoint);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/{{domain}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domain}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "OAuth2 - RFC 6749",
			"item": [
				{
					"name": "Invalid requests",
					"item": [
						{
							"name": "Invalid grant type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "777c3260-d06c-4fe6-bea2-99f637abfda1",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Unsupported grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('unsupported_grant_type');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad340232-d5a8-4d9a-82c3-50532ebb1b5b",
										"exec": [
											"setTimeout(function() {}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "unknown",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "70c47b43-da03-4476-9238-efff5a560fca",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "78af21cc-7e72-4763-be60-61fc86396fd5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Resource Owner Password Credentials Grant",
					"item": [
						{
							"name": "Invalid client - base64 error",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5fa4cd9-5fdd-4e93-9e22-416df2087b76",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic invalid"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "adminadmin",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4062b276-ac82-475a-b5f2-3947db0a2bd3",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktdW5rbm93bi1jbGllbnQ6bXktdW5rbm93bi1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "adminadmin",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "No scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9149618-e065-47e1-9799-2f7cde229c91",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Does not contain scope\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    // There is a default scope asscoiated to the client 1",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('scope1');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "70148f89-26c7-41da-9389-1848580db277",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "126785ae-f7c2-4d94-938a-7439e875050e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid scope\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_scope');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "12bed79c-e9f5-4a1e-9574-c56949e226d0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "unknown",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdfa4f93-7d64-4532-bff0-1abf9d4f8827",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3413367a-d217-4e04-b62b-d5138b2e41ee",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8890536-09be-42c2-982e-c6d404d01112",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_grant');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "adminadmin",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - client 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "991fafd3-9bb9-481c-af00-17beabb6a9ff",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    pm.expect(body).to.have.property('refresh_token');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('scope1');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "scope1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - client 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5daf4a40-de16-478d-b7c9-cbd0574f7a51",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token without refresh token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('scope1');",
											"    pm.expect(body).to.not.have.property('refresh_token');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "scope1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3342263c-d640-46a9-97f1-f6535118d518",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7b4061d0-3b37-493f-9f24-5795b91c322e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Client Credentials Grant",
					"item": [
						{
							"name": "Case - renew client secret",
							"item": [
								{
									"name": "Create client 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebb3cc01-558b-454c-912a-f5e6c3d573f7",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var body = JSON.parse(responseBody);",
													"pm.environment.set('client3', body.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"clientId\": \"my-client-3\",\n  \"clientSecret\": \"my-client-secret-3\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/{{domain}}/clients",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"{{domain}}",
												"clients"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure client 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ff6e97f-daed-456c-bc04-865b77d2ca08",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}} ",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"authorizedGrantTypes\": [\n    \"client_credentials\"\n  ]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{client3}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"{{domain}}",
												"clients",
												"{{client3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af3f0c68-1492-4235-a8cf-561df303d51c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token without refresh token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.not.have.property('refresh_token');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "05c42de7-f269-47e3-bae2-d2479501386f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50LTM6bXktY2xpZW50LXNlY3JldC0z"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Renew client 3 secret",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26687a51-05db-4b7d-8e31-5ae406a02196",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var body = JSON.parse(responseBody);",
													"pm.environment.set('client3Secret', body.clientSecret);",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}} "
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{client3}}/secret/_renew",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"{{domain}}",
												"clients",
												"{{client3}}",
												"secret",
												"_renew"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - wrong secret",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79a7ce41-7f4b-4c07-9bd9-5c125c596063",
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "793095e7-aba9-484b-9c18-d8ecf8cccbee",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50LTM6bXktY2xpZW50LXNlY3JldC0z"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - new secret",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00137288-d9a0-4024-bed3-cc74e9805aae",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cdb76ed9-3fbd-4480-b532-b8702fb058a2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client-3",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client3Secret}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete client 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "515e5007-0bc6-4196-9286-7dd18175bc7a",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}} "
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{client3}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"{{domain}}",
												"clients",
												"{{client3}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invalid client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3db4de76-bdd3-4fd9-9287-13bd9a31f9f2",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c0c180b6-2523-4f1f-87fb-f91322bad6fe",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic dW5rbm93bi1jbGllbnQ6dW5rbm93bi1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "No scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5321604e-f820-4547-91ae-b014f3a0cd98",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Does not contain scope\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    ",
											"    // There is a default scope asscoiated to the client 1",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('scope1');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f8c0fefb-ed74-448a-ae58-af3f085fe5f7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2b94413-bb2c-43bf-8429-8e118a69cf7b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9742acc0-2bc6-4d9a-8af0-c62d4b1b0011",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a60e327-b1df-465c-85ec-a2cbfbac1721",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Has an access_token without refresh token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    pm.expect(body).to.not.have.property('refresh_token');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('scope1');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "612614b1-6ed0-41e3-a9d0-60d404046c56",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "scope1",
											"type": "text"
										},
										{
											"key": "example_parameter",
											"value": "example_value",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "415123f0-c8ab-4713-9893-cdccec4fe3e7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0294db78-c580-4a3b-9f27-aed57da8d840",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Authorization Code Grant",
					"item": [
						{
							"name": "Case - Unknown scope",
							"item": [
								{
									"name": "Unknown scope - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ab24873-b09a-45eb-ab03-55a99ee61d1e",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client2');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "28d3218c-5c37-4a64-a050-6fbd60428ed9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&scope=unknown-scope",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "scope",
													"value": "unknown-scope"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "016ef8f7-59f6-463d-a219-46e2be6d6d1c",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bdc9c9b3-b555-450d-8985-5571d92d5268",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d91882e1-9244-4208-888b-82763cf6b070",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dab0de9-6fe5-4856-8edd-f86379101e15",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92fd4ded-5614-4510-b3d9-874797daadcd",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    ",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Contains an error query-parameter'] = location.includes('error=invalid_scope');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=Invalid+scope%2528s%2529%253A+unknown-scope');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "22f05511-8767-4365-b891-681ecf1c3f90",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91ad9e7c-d6de-43cf-bb55-3b4fb8a79b72",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b9dbd254-5315-449e-9c0a-48431b0bfa27",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cfcd3a61-28b9-4a9f-bf4d-06790eef2e08",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f138e5eb-3d3e-4e23-868e-77f33789304a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - With consent",
							"item": [
								{
									"name": "With consent - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a479853-6230-4fd3-9415-61df9b7fb916",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client2');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2d2ef152-607e-4409-acac-2be0b61ac192",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "615f5e8c-6d1e-4eae-9a4d-40c040e0e074",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e89e2596-5935-45d7-a327-8959fba9514f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f157eaf-41c6-4bb4-9e81-3e15713f9e60",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e3a56748-d57f-49ca-a9e9-0b8157ca97a1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74b23c9f-76d7-48a7-8891-feb2756047b9",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    ",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be redirected to confirm_access page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/' + domain + '/oauth/confirm_access';",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a1c919f3-2bee-4301-875b-a9c718dbe785",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Redirect to confirm access page",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2082dcb-55d9-479c-b6fe-f0189aed61a5",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9c87be66-e03d-40b0-ac91-b8c6d25401ff",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post authorize form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b73c3f6f-6b0b-4254-b878-290becd51f56",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a3825385-b298-41a8-90ba-cc699ee977b1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "scope.scope1",
													"value": "true",
													"type": "text"
												},
												{
													"key": "user_oauth_approval",
													"value": "true",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{authorizationEndpoint}}",
											"host": [
												"{{authorizationEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b7d9ccb-a288-4a20-bdf6-fb044725ff88",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ee4d69bb-faff-4454-9440-20ee787ac7be",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3835aaa4-8023-42b7-89c2-05fc42f58d4b",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2a804ef-6683-423c-ba13-704f9a0b4672",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "27cf6f2a-1702-400d-8b43-5f83e236e6f6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f517f1af-cbd2-4b9b-b800-08f7c30a586c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - With consent - scope expiry",
							"item": [
								{
									"name": "Create scope with expiry",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6cda1117-883d-4feb-89c2-089777d0f05b",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"key\": \"test\",\n  \"name\": \"Test\",\n  \"description\": \"Scope test description\",\n  \"expiresIn\": 2\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/{{domain}}/scopes",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"{{domain}}",
												"scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update client 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0a744bc-db27-4a10-9b32-ee61bb7421a9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scopes\": [\"scope1\", \"openid\", \"test\"],\n\t\"scopeApprovals\": {\n\t\t\"openid\": 2\n\t}\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{client2}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"{{domain}}",
												"clients",
												"{{client2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope expiry - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "301e71a0-4cfb-4502-adf9-473ddd0cda08",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client2');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "38c8f03a-21a2-4b40-8519-1ca18e85c596",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e94ffc85-03cb-47bf-8898-9888141d7d30",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "123e09df-682e-4be5-bd37-8ce7dd14bc22",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31122890-6e28-41ad-91fd-56e8b125964b",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c4b5ed77-3e3a-45ff-b341-4b33cb61f973",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15b88eb0-7f75-4024-9275-d31695a61aea",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    ",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be redirected to confirm_access page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/' + domain + '/oauth/confirm_access';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "71ba70e4-c235-42c2-837b-5999b59431da",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Redirect to confirm access page",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31fa4b91-a9ba-4b49-a929-27d2653295dc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    ",
													"    var scope1 = responseHTML.find('[name=\"scope.scope1\"]').val();",
													"    var openid = responseHTML.find('[name=\"scope.openid\"]').val();",
													"    var test = responseHTML.find('[name=\"scope.test\"]').val();",
													"    tests[\"Scope 1 is already approved\"] = scope1 === undefined;",
													"    pm.expect(openid).not.equal(null);",
													"    pm.expect(test).not.equal(null);",
													"    ",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eaef3aaa-14ba-4cad-8108-145180589a43",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post authorize form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ccedc07-91aa-4d0c-8359-ba96bb8abe40",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d0177042-9b3d-4e15-8e74-f706ce1ec831",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "scope.openid",
													"value": "true",
													"type": "text"
												},
												{
													"key": "scope.test",
													"value": "true",
													"type": "text"
												},
												{
													"key": "user_oauth_approval",
													"value": "true",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{authorizationEndpoint}}",
											"host": [
												"{{authorizationEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b68f029-96d4-433e-9a94-cdc9854540a6",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    ",
													"    // wait for until scope approvals expire",
													"    setTimeout(function(){}, 5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bfadb2ed-3987-4e67-8df1-3677b32222c4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Initiate the flow (bis)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "969b4165-d715-457e-9177-94a7d34fd76f",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be redirected to confirm_access page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/' + domain + '/oauth/confirm_access';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2e199e9d-5ecb-48c2-862f-e0deb99e0395",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to confirm access page (bis)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac0d7110-1509-4c49-8c36-be4d197574c8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    ",
													"    var scope1 = responseHTML.find('[name=\"scope.scope1\"]').val();",
													"    var openid = responseHTML.find('[name=\"scope.openid\"]').val();",
													"    var test = responseHTML.find('[name=\"scope.test\"]').val();",
													"    tests[\"Scope 1 is already approved\"] = scope1 === undefined;",
													"    pm.expect(openid).not.equal(null);",
													"    pm.expect(test).not.equal(null);",
													"    ",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c9379e65-4f40-460d-bfb2-fd68acf69323",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ce09688-c416-4f83-9a3b-51e661b46ae2",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "759b6f7a-f1fd-435f-80d3-024a31b99948",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Reset client 2 scope options",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a3b4893-0091-4665-a3bb-1e1f4876960c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scopes\": [\"scope1\"],\n\t\"scopeApprovals\": {}\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{client2}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"{{domain}}",
												"clients",
												"{{client2}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a3222f00-2531-43dd-8cbe-fc689c3ab962",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d001aba4-42ae-4ff8-9e56-72d1a59e47af",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Get token - Invalid Client",
							"item": [
								{
									"name": "Invalid client - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3af211da-93d4-4716-917f-1defdc13ed72",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client2');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "76774224-dbdc-40c2-8a1f-920f72a76049",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36b6c378-2602-4975-bd67-b0a95ca09fa0",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6e58c0b2-c141-420a-9373-95499cfe83d7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eefb462b-d230-484c-92e9-d12a99a5f2d7",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9853d1e0-b776-4a84-ad28-ad6175fb0d19",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b596cbe5-9b45-4317-931f-f7efc0db6486",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5);",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7e57fe82-f6ef-4c42-9f81-d68f07509462",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token - Bad client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd6c8565-6b1c-4de0-93e8-d7eba51f7a25",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_grant');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0d416001-d608-4e0f-8582-9ab2355757a6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{tokenEndpoint}}?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:4000/",
											"host": [
												"{{tokenEndpoint}}"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9f3016c-20e0-47b7-9039-351da2329c55",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "645909c8-ea45-47dc-beaa-46aa4fae1d04",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "86c150c7-6391-40ab-b296-67f759e91e9e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "79698d7e-e6bc-41e9-b565-103533a33c7c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Get token - Invalid Redirect URI",
							"item": [
								{
									"name": "Invalid redirect_uri - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1864a0c2-6c02-41de-8c67-e58e3262bc26",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client2');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2e4db6a7-3048-42f9-ba5f-a7233bf24813",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a8aaf94-a3ce-4790-81c5-c3bc22c79608",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "43528481-e8de-4c75-aa69-f2e3a87cf8a1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f7b4f33-b046-4c69-9604-36a186d49934",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d63c5e83-1c8b-4591-9652-39e0da13035e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec5d7e67-7ef8-4b60-8d1b-8317e0ffbb13",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5);",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "113b34ec-1098-4807-a5af-90d92ea946c5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token - Bad redirect URI",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d61c2fa7-b645-472c-b872-43b2f99c16a6",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_grant');",
													"    pm.expect(body.error_description).to.eql('Redirect URI mismatch.');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "90898aa1-a29d-45d1-a868-41889430c202",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{tokenEndpoint}}?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:5000/",
											"host": [
												"{{tokenEndpoint}}"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:5000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d431a79-c592-413e-b1f0-499fa5bf2385",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2b2ea77-52d2-48af-b6c6-73e43f52b477",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9e957037-cbfe-4922-9891-f58817667b31",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca36e9b8-0cd6-48a1-8b9b-0750715bec72",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - With state parameter",
							"item": [
								{
									"name": "With state - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a0457a6-d8ee-422f-a34a-2e9e012ae805",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client2');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6228936a-fe80-4986-ac0b-7dd45cdfdf85",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "138e8854-dc4d-4599-be55-3c94e8529c23",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c56bc006-df1b-4ba7-a9c2-e4eb1ed8b6bc",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "477f3924-d4fb-468b-81aa-6f383c8d3826",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "101a5187-18af-47a7-b313-0e824f7bc4ca",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6fa5c4a3-d47a-4610-bbed-ba87ada9f091",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5, location.indexOf('state='));",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "97532da1-0238-4eff-b1c7-9dd03b33d987",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68de7343-c4a7-4dd1-8bec-ba94c78f37d0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('scope');",
													"    pm.expect(body.scope).to.eql('scope1');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4f705c12-d406-42a9-8e7d-2198140e2327",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{tokenEndpoint}}?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:4000/",
											"host": [
												"{{tokenEndpoint}}"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7457cf9d-b00e-44b9-8242-e672a8136ba8",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "449b1d7b-39e8-4ff1-9fed-f5c5a179fe3b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "57ccf99c-1b43-4feb-a840-67566f45b698",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1f97a890-848e-476f-8bbb-fb06b72811da",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - With state parameter - Multiple clients",
							"item": [
								{
									"name": "Initiate the flow - Client 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a0383da-15a1-4c82-ac8c-0c54a3b07e0a",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client2');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7f6a3c78-5058-469f-abf8-91a337b12f42",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form - Client 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6329919a-a9c4-45c1-8974-2e68b52270f5",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e5af9fd1-d73a-49e1-8f8e-8b9ab10d6cf6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form - Client 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11ef0fc6-b6d2-4867-b5fc-f8e9a1620b33",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1aed5644-3482-49b8-9cf0-0613b689c70c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection - Client 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f388e7b5-7822-46ef-8615-3aebab1a2ca5",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5, location.indexOf('state='));",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8c0db9fa-6024-4d3b-bfc5-5ded56b0c818",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Initiate the flow - Client 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99228890-7460-4e11-81f1-15eb4b17860d",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/' + domain + '/oauth/confirm_access';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ed999e89-fc10-43f7-8dc8-1e0bc79104e5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client&redirect_uri=http://localhost:4000/&state=9876-5678-1234",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "9876-5678-1234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to confirm access page - Client 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65669b55-20c5-4298-bbc7-76080c147188",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cebfd04e-cbfd-49d5-b504-e7f8801f811b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post authorize form - Client 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "531dc3a3-86ea-402f-b9f9-d2cfc869ed15",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "28fefda9-1205-4070-9458-6be860ac172a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "scope.scope1",
													"value": "true",
													"type": "text"
												},
												{
													"key": "scope.openid",
													"value": "true",
													"type": "text"
												},
												{
													"key": "user_oauth_approval",
													"value": "true",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{authorizationEndpoint}}",
											"host": [
												"{{authorizationEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection - Client 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7e8db91-83aa-420c-9d09-9a6d06af082d",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=9876-5678-1234');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5, location.indexOf('state='));",
													"    pm.environment.set('authorization_code', code);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "12362cf8-1c5a-49ed-9553-8cd47560d7ec",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7106d1ef-9aa6-4e81-8a9f-28904f0f0231",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9e2f7270-f5be-4882-8ab6-a3132ba56d1b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a66499b2-74ef-4d5c-8f7d-761b82580c4e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fc6db65c-28ce-4165-a06d-fe0e40661737",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - PKCE S256 - Missing Code Verifier",
							"item": [
								{
									"name": "PKCE S256 missing code - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffc2cd66-c583-448e-90cf-6bea29b31f3b",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client2');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0df3fa2b-b2a1-4990-a06f-e2c385c9a17e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876&code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM&code_challenge_method=S256",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "code_challenge",
													"value": "E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM"
												},
												{
													"key": "code_challenge_method",
													"value": "S256"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebebdea5-728b-48b3-833a-590aec198146",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "aa5da97b-b695-45fb-a926-9ebb684852cd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b5c08dc-d9eb-436a-8f89-fa6e51e33549",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "968fe0d4-7711-4326-8bb3-27adc51ec2bd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98e67d62-8f9e-471f-ab57-b9fde90f7e52",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5);",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6f96cc72-3d94-4f66-b26c-9b1b35a216dd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "159bf592-ca7d-4296-8073-e0228b46f5c2",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_grant');",
													"    pm.expect(body.error_description).to.eql('Missing parameter: code_verifier');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1b0ff38f-3b9a-4cfb-853f-d72f00a354cc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{tokenEndpoint}}?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:4000/",
											"host": [
												"{{tokenEndpoint}}"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48ba25b8-85ba-4490-9b56-726bf9f4062d",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c864f771-d1af-48d4-aabf-ec1601c7043c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7f7d923e-a543-484f-ac4d-c45679332578",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fb48237a-f652-40b4-a957-ac307164c22f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - PKCE PLAIN - Missing Code Verifier",
							"item": [
								{
									"name": "PKCE PLAIN missing code - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f84fd34-7f18-41a9-8a00-66ea45169cc7",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client2');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6c0ede80-3d1c-4d2c-8ea4-cb5fc2d637ea",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876&code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM&code_challenge_method=plain",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "code_challenge",
													"value": "E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM"
												},
												{
													"key": "code_challenge_method",
													"value": "plain"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa60dd4a-d208-4619-8d96-b605b3d08eca",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b8adfffa-f933-4e8f-a188-2e8f8fa350ca",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c39aa92-2683-4544-b3a2-a709c29ce9fb",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5abb4be4-7ec3-4c0c-a261-324381ced28e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b681007-33be-4883-b873-3307708f7234",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5);",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c58ea1fa-ac9b-460c-aac8-38e17b5a5d03",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21c1107b-75bc-42b6-9367-03e9ff0c06aa",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_grant');",
													"    pm.expect(body.error_description).to.eql('Missing parameter: code_verifier');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8a3bcc8a-8bfa-497a-8a29-7e188e08bc5f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{tokenEndpoint}}?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:4000/",
											"host": [
												"{{tokenEndpoint}}"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ff6cbe8-91dc-40b9-ae78-dc6598489b07",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2f5da294-ab3b-4292-a6b9-8a1ef7c90081",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2629d3ec-c100-43fb-85fd-1f5573e85f17",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "26a7bb1d-ebb5-4ad8-bdd1-99d872069fb8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - PKCE S256 - Invalid Code Verifier",
							"item": [
								{
									"name": "PKCE S256 invalid code - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f614946e-f270-4592-a5c4-723e491fcf89",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client2');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "99c5bcb4-d65a-4621-aba6-b00d3b684466",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876&code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM&code_challenge_method=S256",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "code_challenge",
													"value": "E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM"
												},
												{
													"key": "code_challenge_method",
													"value": "S256"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5109d9fb-3c12-4e50-92c9-b0c7b63e105f",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d3ad5f44-0dd0-4565-bdfb-26c01532c3ae",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f79ed329-437a-488f-871b-0dbc4e3dacb0",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f0544d13-1d58-4b1b-9153-49511209957c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38fe04b8-d558-4ee1-9ee8-1b5922baec0d",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5);",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3706721f-bbc2-46f5-8bf3-f0a300460658",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ce5f7b0-4f41-4891-9859-8e8607d76a40",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_grant');",
													"    pm.expect(body.error_description).to.eql('Invalid parameter: code_verifier');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5eddd547-7b69-4339-b2f0-30f2bfc895d8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{tokenEndpoint}}?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:4000/&code_verifier=qsdqsdqsdqsqsd",
											"host": [
												"{{tokenEndpoint}}"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "code_verifier",
													"value": "qsdqsdqsdqsqsd"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42a42d0b-eb19-4a4a-a407-2d0560515214",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "46c8bbe1-fc39-49c6-8c50-40e3a435d1a9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2a7d052c-4d89-493c-89c6-94a48121da15",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "beea20f9-9819-43b0-9e0d-423a462a83bc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - PKCE PLAIN - Invalid Code Verifier",
							"item": [
								{
									"name": "PKCE PLAIN invalid code - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1116a81-a88d-4e69-b02d-45f161e6677c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client2');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eb4bb3bc-c6cb-4f85-ba4b-9e2ac96c6b6e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876&code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM&code_challenge_method=plain",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "code_challenge",
													"value": "E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM"
												},
												{
													"key": "code_challenge_method",
													"value": "plain"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "333b3e2c-cbdc-4745-bc1c-a547a7470087",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "91e0645a-49b0-4fab-9e59-ee2a96de4c2e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1832c9a2-bad6-4cc2-a22f-c16d3bb0615e",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7dcd9c04-12b1-4793-8847-b1b95b240a3c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c62b18d-f95e-4a8d-858b-1f47e1e7402e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5);",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6fc8525a-5b0f-48ef-977c-6ce3be0eb7d3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8b5e070-d28b-4f78-96c0-6b6c1e758089",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_grant');",
													"    pm.expect(body.error_description).to.eql('Invalid parameter: code_verifier');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5b3ad61a-05ce-4a14-886a-2c17670a9153",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{tokenEndpoint}}?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:4000/&code_verifier=qsdqsdqsdqsqsd",
											"host": [
												"{{tokenEndpoint}}"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "code_verifier",
													"value": "qsdqsdqsdqsqsd"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aae56eee-65e9-48c1-9c5e-06bba3a963a3",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5b23ce1f-3a07-4518-aab5-65f70b86fa1e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ffb40434-1cc1-4d9d-87de-990c326098b5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "296ec380-a833-4352-b3f3-3d7ab0889ec2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - PKCE S256 - Valid Code Verifier",
							"item": [
								{
									"name": "PKCE S256 - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b024d512-4f2c-475f-a883-2a67d5fea005",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client2');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dd137a46-19e7-4e42-ad3e-ad8ae69d8428",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876&code_challenge=qjrzSW9gMiUgpUvqgEPE4_-8swvyCtfOVvg55o5S_es&code_challenge_method=S256",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "code_challenge",
													"value": "qjrzSW9gMiUgpUvqgEPE4_-8swvyCtfOVvg55o5S_es"
												},
												{
													"key": "code_challenge_method",
													"value": "S256"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eab5a5cd-f089-48fa-81f9-b20413b47458",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5b69652a-f206-405f-90be-5cb086662602",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75bd3d8f-26a6-4c7f-b35d-1d6fad78e9c6",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "27187fb2-400e-4d13-a507-4ea55f8b4c4c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adf2e349-c333-4bbc-ba01-823d821283b4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5);",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "124784c3-d23b-4662-bce7-cdf78ef4e90f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f2e7ca8-3c59-466e-9d19-ed8d13bba1fb",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('scope');",
													"    pm.expect(body.scope).to.eql('scope1');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b69be677-43ae-4eb4-be0e-e713f83cc4e0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{tokenEndpoint}}?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:4000/&code_verifier=M25iVXpKU3puUjFaYWg3T1NDTDQtcW1ROUY5YXlwalNoc0hhakxifmZHag",
											"host": [
												"{{tokenEndpoint}}"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "code_verifier",
													"value": "M25iVXpKU3puUjFaYWg3T1NDTDQtcW1ROUY5YXlwalNoc0hhakxifmZHag"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44fa5fcc-9109-4698-be44-4b58e1adc320",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f382cf30-70a9-45fe-b350-7a558b8af5dd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f06654d8-853e-4973-b43d-ba5b6798082f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e853bdea-e46a-4805-b7c4-7f7f06ada692",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - PKCE PLAIN - Valid Code Verifier",
							"item": [
								{
									"name": "PKCE PLAIN - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b32f6f41-fc9c-45e9-89ed-b073bcbefe61",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client2');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7afe6c09-e7ec-4306-89fa-863eca2d2fd0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876&code_challenge=qjrzSW9gMiUgpUvqgEPE4_-8swvyCtfOVvg55o5S_es&code_challenge_method=plain",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "code_challenge",
													"value": "qjrzSW9gMiUgpUvqgEPE4_-8swvyCtfOVvg55o5S_es"
												},
												{
													"key": "code_challenge_method",
													"value": "plain"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1f5a1af-bd7e-4d2a-bdd5-c7bea5ae7c9e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "26d64955-e86b-4588-bca8-4f4f49e91e2f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec1cc897-ee27-4621-a016-86436f65a75d",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7f98d31c-b899-4a82-b223-55749d25aeac",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44d41a92-b62e-4177-ba89-ee3007dec643",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5);",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9fd31ae8-43a8-4f8d-b69b-83d98be1ebdd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9be3f2b2-54fd-4fe1-91c5-a166e25519d5",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('scope');",
													"    pm.expect(body.scope).to.eql('scope1');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4f3ad41e-f531-4b5c-ae5e-67bd9df51601",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{tokenEndpoint}}?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:4000/&code_verifier=qjrzSW9gMiUgpUvqgEPE4_-8swvyCtfOVvg55o5S_es",
											"host": [
												"{{tokenEndpoint}}"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "code_verifier",
													"value": "qjrzSW9gMiUgpUvqgEPE4_-8swvyCtfOVvg55o5S_es"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "681efe4d-69f5-418c-bdaf-94118b9d68cf",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c2862b3c-a589-4a2a-9f52-f477bd4e4ac6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e74d420d-62ee-4781-b3c8-d0e4abf7f4a8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ec832830-0b7b-4a78-9336-bfabde98b807",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Authorize - Invalid requests",
							"item": [
								{
									"name": "Unsupported response type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c06217ff-e24d-4827-a4aa-c1f2808d9f0f",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to error page'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/oauth/error');",
													"    tests['Contains an error query-parameter'] = location.includes('error=unsupported_response_type');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=Unsupported+response+type%253A+unknown_response_type');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2cd441fb-46c0-489c-8425-0f4e6f3035a8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dW5rbm93bi1jbGllbnQ6dW5rbm93bi1zZWNyZXQ="
											}
										],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=unknown_response_type",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "unknown_response_type"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Duplicated query parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce78951c-29ff-42eb-b62c-ade1f6bd925b",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    //TODO: A valider avec Titouan",
													"    //pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to error page'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/oauth/error');",
													"    tests['Contains an error query-parameter'] = location.includes('error=invalid_request');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=Parameter+%255Bresponse_type%255D+is+included+more+than+once');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9965e7b6-43ad-4d56-aa54-17d0905241a2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dW5rbm93bi1jbGllbnQ6dW5rbm93bi1zZWNyZXQ="
											}
										],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=unknown_response_type&response_type=unknown_response_type",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "unknown_response_type"
												},
												{
													"key": "response_type",
													"value": "unknown_response_type"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing client_id parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4325483-e93a-4c02-b505-f4a3be9d43ed",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to error page'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/oauth/error');",
													"    tests['Contains an error query-parameter'] = location.includes('?error=invalid_request');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=Missing+parameter%253A+client_id');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e2928f4a-92f9-4727-a21a-0499162736db",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid client_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bd59309-d7e7-46d4-9380-79f00057fc18",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to error page'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/oauth/error');",
													"    tests['Contains an error query-parameter'] = location.includes('error=invalid_request');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=No+client+found+for+client_id+unknownclient');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "41a8cbb9-7a69-4dc9-af98-afc32bbdcc9e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=unknownclient",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "unknownclient"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "No redirect_uri",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1452cbf4-e4b9-41fe-8075-0d2769b29913",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to error page'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/oauth/error');",
													"    tests['Contains an error query-parameter'] = location.includes('error=invalid_request');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=A+redirect_uri+must+be+supplied');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "240c2a06-db45-4d53-9309-a710142ce29d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Send an unknown redirect_uri and no redirect_uri defined",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b10eb742-5300-44e6-aa40-2a6cc6cecf1a",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be redirected to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78be08ad-19f3-41db-8ee2-1fc5f26426e8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client&redirect_uri=http://localhost:4000",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000"
												}
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Send a redirect_uri not configured in the client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf941bd1-b427-4f28-b5d0-fafb8a3bcac1",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Contains an error query-parameter'] = location.includes('error=redirect_uri_mismatch');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d09063af-3fd9-4e57-a2cf-181df9d212d3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client2&redirect_uri=http://my_bad_host:4000",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://my_bad_host:4000"
												}
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Patch domain",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a10d5af9-fe58-4391-bdad-c81400338aa7",
												"exec": [
													"// wait for sync process",
													"setTimeout(function(){}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"oidc\": {\n  \t\"redirectUriStrictMatching\": true\n  }\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/{{domain}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send a bad redirect_uri strict matching",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "651393e4-1659-4785-8d46-e72d2c279359",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Contains an error query-parameter'] = location.includes('error=redirect_uri_mismatch');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dd63e222-fc6d-4209-b5c9-72a52e1eff2f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000?extraParam=test",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000?extraParam=test"
												}
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Error with state parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37a00a5e-a308-433e-8d45-070361b4c3b4",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Contains an error query-parameter'] = location.includes('error=redirect_uri_mismatch');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application');",
													"    tests['Contains the initial state parameter'] = location.includes('state=xxx-yyy-zzz');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d894c41a-12b1-4d42-b30d-1bbab97e1580",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client2&redirect_uri=http://my_bad_host:4000&state=xxx-yyy-zzz",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://my_bad_host:4000"
												},
												{
													"key": "state",
													"value": "xxx-yyy-zzz"
												}
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1ea4f7db-f3ee-4c01-b927-55ea5e17feff",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "132a741a-6735-4ad6-b3b2-2073e53f2473",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Token - Invalid requests",
							"item": [
								{
									"name": "Get token - No code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db57de82-dbd7-4afb-9650-7bc4f040782d",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_request');",
													"    pm.expect(body.error_description).to.eql('Missing parameter: code');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f8491068-b239-413b-8f9c-812e007e807d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{tokenEndpoint}}?grant_type=authorization_code&redirect_uri=http://localhost:5000/",
											"host": [
												"{{tokenEndpoint}}"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:5000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get token - No client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f51997b8-011a-43df-b134-c1dd2893be3a",
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Invalid grant\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client');",
													"    pm.expect(body.error_description).to.eql('Invalid client: missing or unsupported authentication method');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fc1ce58f-c30b-4df0-808a-b5af48f0d4ce",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{tokenEndpoint}}?grant_type=authorization_code&redirect_uri=http://localhost:5000/",
											"host": [
												"{{tokenEndpoint}}"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:5000/"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "740527e9-6634-427e-b99f-726738e7f68d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b75b60d0-201e-4ee6-b8e2-61b7f36ab4a7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9a51b9a6-f07a-47c7-a4cb-30b91803ba6f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccbb1342-3faa-4744-994b-72f9a21ad89d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Implicit Grant",
					"item": [
						{
							"name": "Authorize - Invalid requests",
							"item": [
								{
									"name": "Missing client_id parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bb6a2fa-003d-4079-b824-0f0c304fe6fd",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to error page'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/oauth/error');",
													"    tests['Contains an error query-parameter'] = location.includes('?error=invalid_request');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=Missing+parameter%253A+client_id');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7fda7076-49ef-4fab-9a73-42bbc5ee59cb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=token",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "token"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Unknown scope",
							"item": [
								{
									"name": "Unknown scope - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99127478-5fb4-47c6-8ed6-c7bff5dd6f37",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client2');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2d73d537-ce7a-4b7a-b8e4-25aa47b9f30a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=token&client_id=my-client2&redirect_uri=http://localhost:4000/&scope=unknown-scope",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "token"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "scope",
													"value": "unknown-scope"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c4c48bd-ab5e-452f-9117-b3dc0a296907",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "37f9b1fb-069b-45d6-981f-878ff4ae784c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b0bfc8b-4e2a-4b5f-8f90-5fe237baa0f2",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b4487262-beda-4bf7-b6af-1385053b8d65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47bf2124-b4c1-416b-9182-0c77254eeb75",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    ",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Contains an error fragment-parameter'] = location.includes('#');",
													"    tests['Contains an error fragment-error-parameter'] = location.includes('error=invalid_scope');",
													"    tests['Contains an error description fragment-parameter'] = location.includes('error_description=Invalid+scope%2528s%2529%253A+unknown-scope');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "797334bb-12d8-425b-9d3b-1104cf3fb9b8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ba24e16-0e84-42cb-a661-e44096f8767a",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "32c90c59-c0f2-4e81-bb02-a656c1341ffd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4d081b56-8de4-4804-832b-3a2cb6e36262",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "78f157b0-df0e-46c5-84aa-a94ca0a36515",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Get Access Token",
							"item": [
								{
									"name": "Access token - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6359174e-8241-4350-bbe9-212cb2110022",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client2');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "872bf478-030a-472b-b449-1fcad51d93c9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=token&client_id=my-client2&redirect_uri=http://localhost:4000/",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "token"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58c45d65-5e60-4ad0-af29-c2bdf6a6bd40",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7c03c2c3-f386-4cd5-a42e-b0ff427dcdc2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2160b50f-94a4-45ad-9041-a9ab3f0532fc",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bba4275e-3847-4ca8-ac14-c86f76b10517",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec7198c4-1003-4b20-b48b-556f0780ef5f",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/#');",
													"    ",
													"    tests['Contains an access_token param'] = location.includes('access_token=');",
													"    tests['Contains a token_type param'] = location.includes('token_type=bearer');",
													"    tests['Contains an expires_in param'] = location.includes('expires_in=');",
													"    tests['Contains a scope param'] = location.includes('scope=scope1');",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "41fe4e19-04e5-49b6-9b29-0dc5dc61e3cb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cf8a5d8-054b-4df5-a69b-3f4fbe9bf335",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "209b4520-d536-4109-a301-162170303da8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fb3eb680-420a-4cc7-b949-9b4453ecae17",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bc935da7-70bd-4cb9-b38b-5f72d6b7029e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - With state parameter",
							"item": [
								{
									"name": "State parameter - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a15a570-36b7-466a-8786-25e7416d3ee6",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client2');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a1b4ebd4-a643-4f45-b1fc-b4383cae7981",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=token&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "token"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1cb4733-09d3-497b-aebc-607edf337157",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5031777a-efb3-4723-a9b7-fd76f1e99224",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8002c4e8-d4d5-4ac2-8ba8-3f87298cc5d6",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c5b0207a-5674-4005-b6f8-9a2d4a00c3e3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80f34e39-4635-45e5-8af0-6a2a0e59519b",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/#');",
													"    ",
													"    tests['Contains an access_token param'] = location.includes('access_token=');",
													"    tests['Contains a token_type param'] = location.includes('token_type=bearer');",
													"    tests['Contains an expires_in param'] = location.includes('expires_in=');",
													"    tests['Contains a scope param'] = location.includes('scope=scope1');",
													"    tests['Contains a state param'] = location.includes('state=1234-5678-9876');",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d146cc67-94b7-407a-abef-02a4765e6294",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61b24011-8974-486f-a63c-41418687857d",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dbb20b05-05bf-479b-8bda-de6770310a87",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b2b5968c-e561-42dd-8dc9-3d98bbdeebf4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5e23c25a-4482-4370-91fa-743417158432",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - revoke consent",
							"item": [
								{
									"name": "Revoke consent - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da649423-67b7-4c19-93a5-2cc3763ff8b2",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=my-client2');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f237cb60-a35b-4fd1-85fb-927923bf2540",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=token&client_id=my-client2&redirect_uri=http://localhost:4000/",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "token"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7ede985-d13a-4e30-9436-2039f28e82fb",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f0c33e35-d812-4648-b0fb-8ddc8cea892b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01035f70-72f1-424f-b394-32d6b1b05c02",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "77b16b63-cc76-4ac6-a4d9-758d7372640f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bec1090d-18b0-4218-8ee5-777a82ce7f55",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with implicit response\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/#');",
													"    ",
													"    tests['Contains an access_token param'] = location.includes('access_token=');",
													"    tests['Contains a token_type param'] = location.includes('token_type=bearer');",
													"    tests['Contains an expires_in param'] = location.includes('expires_in=');",
													"    tests['Contains a scope param'] = location.includes('scope=scope1');",
													"    ",
													"    // get user id",
													"    const paramsString = location.split('#')[1];",
													"    const eachParamArray = paramsString.split('&');",
													"    ",
													"    let params = {};",
													"    eachParamArray.forEach((param) => {",
													"        const key = param.split('=')[0];",
													"        const value = param.split('=')[1];",
													"        Object.assign(params, {[key]: value});",
													"    });",
													"    ",
													"    let jwt = jwt_decode(params['access_token']);",
													"    pm.environment.set('consentUserId', jwt.sub);",
													"    pm.environment.set('consentAccessToken', params['access_token']);",
													"});",
													"",
													"function jwt_decode(jwt) {",
													"    var parts = jwt.split('.'); // header, payload, signature",
													"    return JSON.parse(atob(parts[1]));",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "10c9925f-1c51-43f9-b46f-e8827197d0a9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Revoke user consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ecff4894-9007-40fc-9839-6a3cc4a5f625",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{consentAccessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/users/{{consentUserId}}/consents",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"users",
												"{{consentUserId}}",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initiate the flow (after consent revocation)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06a89357-240b-45d9-b5b3-b1870b4bf10e",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    ",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be redirected to confirm_access page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/' + domain + '/oauth/confirm_access';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b4e4e66f-08c5-4891-a024-3f72f304661f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=token&client_id=my-client2&redirect_uri=http://localhost:4000/",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "token"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to confirm access page",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "331c5c31-61cb-4eb5-99b9-4ee4e786a065",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c6200d0-200c-4e67-b36c-41bcc5ee103c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post authorize form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e6836d5-61c9-42b1-89c4-89a2b7d894eb",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c4e091e0-e8cc-4c61-9e7a-50fcf0f9f24a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "scope.scope1",
													"value": "true",
													"type": "text"
												},
												{
													"key": "user_oauth_approval",
													"value": "true",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{authorizationEndpoint}}",
											"host": [
												"{{authorizationEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8bf1cb40-11a6-4220-8ed6-17545d27bc8a",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with implicit response\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/#');",
													"    ",
													"    tests['Contains an access_token param'] = location.includes('access_token=');",
													"    tests['Contains a token_type param'] = location.includes('token_type=bearer');",
													"    tests['Contains an expires_in param'] = location.includes('expires_in=');",
													"    tests['Contains a scope param'] = location.includes('scope=scope1');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a38e65ee-058a-4ce7-a8f7-d4b0eb2f4c34",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ba9b0a2-768e-4428-873f-c5f50e26da44",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6850faca-f9bf-4855-9405-ac9005764b15",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Extension grant",
					"item": [
						{
							"name": "JWT Bearer",
							"item": [
								{
									"name": "Create extension grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e20987a5-5a7e-4385-8863-70c162dd4fc0",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Extension Grant - create jwt bearer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    ",
													"    tests['Identity provider'] = jsonData.identityProvider === pm.environment.get(\"idp.inmemory\");",
													"    ",
													"    pm.environment.set('jwtBearerExtensionGrant', jsonData.id);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"type\": \"jwtbearer-am-extension-grant\",\n  \"configuration\": \"{\\\"publicKey\\\":\\\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDI6xahwspOwhzSHrga3SFif04FITcAhyygXoeS+GwUSx6HaMCMkULTQVMgQoU/7VAUf32uoiVgLDo1FI6vWvBGbp1Zbf7MRVpqK98PvhTK4PN5py2OAmpd3i3z5SgGZCP1oxJE/uF+mMUkvtQOJ+RL32pU8oaAwzPuBLKX/jA5OZPouq6Y5e7abrgValYyGCI8aZK5SfukZTMq14mDc84Y2t4IvwS/GqSUiRsTp7r6aj5F+lwD0vyUBo3eH5v5J1R+t7F8T/B2Jl+oJQTPLFxBwcN/2AGC5aqrn7BDoGUG2NZtb6WTolZsBUYjgL7MdYEQHMz/N4WoPCXCEbUQU5rZ test@test.com\\\",\\\"claimsMapper\\\":[{\\\"assertion_claim\\\":\\\"email\\\",\\\"token_claim\\\":\\\"email\\\"}]}\",\n  \"name\": \"JWT BEARER\",\n  \"userExists\": true,\n  \"identityProvider\": \"{{idp.inmemory}}\",\n  \"grantType\": \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/{{domain}}/extensionGrants",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"{{domain}}",
												"extensionGrants"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create jwt bearer client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98efad4d-1489-4feb-b869-c34f3d974cba",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var body = JSON.parse(responseBody);",
													"pm.environment.set('clientJwtBearer', body.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"clientId\": \"client-jwt-bearer\",\n  \"clientSecret\": \"client-jwt-bearer-secret\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/{{domain}}/clients",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"{{domain}}",
												"clients"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure jwt bearer client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9b84afc-3bae-4a02-add6-505449859f89",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c6cbdf7a-ce0c-4a40-9eb9-21abc4b34bc4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"authorizedGrantTypes\": [\"urn:ietf:params:oauth:grant-type:jwt-bearer\"],\n  \"scopes\": [\"openid\"],\n  \"certificate\": \"{{certificateJks}}\",\n  \"identities\": [\"{{idp.inmemory}}\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{clientJwtBearer}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"{{domain}}",
												"clients",
												"{{clientJwtBearer}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "JWT Bearer extension grant - Unknow User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01d5a49c-1e7a-4dea-91b7-893c49871161",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Unknown user\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_grant');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a757abfb-725a-4465-8617-83170802b8e6",
												"exec": [
													"pm.environment.set('assertionToken', 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhbm9ueW1vdXMtdXNlciIsIm5hbWUiOiJKb2huIERvZSIsImFkbWluIjp0cnVlLCJpYXQiOjE1MTYyMzkwMjJ9.ALneslMoGJc4l0EEaH4JDHkZeG6nneBe1tD0IOyo9xXC6zs8HPd6RVr3lYgMsQxRVg8V1pZMvfxCHqqopHoirCgoklpnsM7Kcjve8c4KROrWMk5nbcjG5rozsO1hhJWWEtSCZeZ14GpDewM41StUSliOb9c-j5khSxJ-AD-F1zpOM1O7HwxzflOUvO_7BbYSOv1K768EBljXTIeVojniLa0griDMIzlX4YxF-OR1qoANtA6Bpj5jlGi722LsSKKJ-bldy2pURf-Z8-vk5RYcGvcTBjXp2ulMU_S8X0QKzMJ0wjLFofoZ-kY12WgoOejAF1cVTUGZ8KHSA1b8GRKCcQ');",
													"",
													"// Private key",
													"/*",
													"-----BEGIN PRIVATE KEY-----",
													"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDI6xahwspOwhzS",
													"Hrga3SFif04FITcAhyygXoeS+GwUSx6HaMCMkULTQVMgQoU/7VAUf32uoiVgLDo1",
													"FI6vWvBGbp1Zbf7MRVpqK98PvhTK4PN5py2OAmpd3i3z5SgGZCP1oxJE/uF+mMUk",
													"vtQOJ+RL32pU8oaAwzPuBLKX/jA5OZPouq6Y5e7abrgValYyGCI8aZK5SfukZTMq",
													"14mDc84Y2t4IvwS/GqSUiRsTp7r6aj5F+lwD0vyUBo3eH5v5J1R+t7F8T/B2Jl+o",
													"JQTPLFxBwcN/2AGC5aqrn7BDoGUG2NZtb6WTolZsBUYjgL7MdYEQHMz/N4WoPCXC",
													"EbUQU5rZAgMBAAECggEBAL+ZOEbgPA7pG5TgyI6Nq8WDQ0KvDwWI4my4WK82CdM8",
													"Y4ubwGsMJ17QH9ZWuT1iMIirn44GgH/7DTMLPJpKrXFtEM50j5P62yL+XURk7u0d",
													"ofG0FEQlV4vWUZoRQJ7/pi8b6FM1gJI6W14UQKKTNimIj50cflmSTRZBEpLRSul1",
													"pTlsPypRgtj9clUgPBt1iKehoJmUu9S9nYAJFJo9wn97QKd6erkkqhJfEmXPWoXQ",
													"X5O2BJTTappN7SxLoP2Dhdss4zbvwZJD10Q5dDj3KH4vWjR4W3LuoH64ug74H2lh",
													"oFTT/xrWDCFFfWpjfkAXWzCh83DNI7z3c54sQXU2YGUCgYEA+qCRwmvwyf4+8wW0",
													"0AdsuQ0TDwZEf8LayPUchiILGKGCX5I9Qtfwm2XCsfOVtbX6FiEGPVIYT5i3S4le",
													"GMl7uO35/LsYPWX6MVGLeMnAQxkorxVM6iqZQu8fF1pcvxfVgvxpmPEko+veLTBq",
													"XPJ7HLiTkuuq+5P0YYZxW5iJ25MCgYEAzTm4BVHhzRKM1Hb+Cs2C4OhqTV7fNAkv",
													"melZt70jRGCd7ZXslNFUc3uju7JnaJVBqdNThOUevnk8n6EV0sMvP+483vNNSMqW",
													"u7KgR36DMNVMYHqr/f8YY9TLxHvSQoI53jPQFQ2X+GzrJZUtq6u1hX4UpySIlZbP",
													"GCMIh5GWK2MCgYABowLQrjvIVey7UZI4uZOwMbGqK3RPEUq0fUVOavJ/mq5rSV01",
													"Dov3t9ZpqxmTMjkL4/NSezLFck3gJGmE5+vy7Trwt5gU7pGPuOScSVUEGyn02sLB",
													"1L1jfoRJdsGcTd+LF3LpGMoQd/3fda18Jek/6sSr9PYM5o52BJbA7mIYGQKBgCo3",
													"131wrMztJf+HQxeh02zFIykrfStNQHefI4/C3wBwB80abILo1UC0jKhOOSuwmMOA",
													"78uE/uAcPLZyAvVKpeu27NrInnt9Aak3Q/WxNvfSyVWHpt4nnjLbUdfnyQdZluH5",
													"MrNCCqNWdMFUgQKx3jPKDiGcSGTNk2jZvCV3c7cVAoGBALoOfXLssZW7Kp5CcY/q",
													"60JP8QHm889KykmBvda5MZySENt42i5Bp6a8rNTR6TmJkKGiY780I16+JDhPoQHd",
													"+pJeVNzWPoTAdg5ftvMoYr95wOqsraUtd+4wQcpjMKC4+FxAuSChhqfBrOktoigf",
													"TaAE0xuL1DO9Fqp1nNZY0q1m",
													"-----END PRIVATE KEY-----",
													"*/",
													"",
													"// Public key",
													"/*",
													"-----BEGIN PUBLIC KEY-----",
													"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyOsWocLKTsIc0h64Gt0h",
													"Yn9OBSE3AIcsoF6HkvhsFEseh2jAjJFC00FTIEKFP+1QFH99rqIlYCw6NRSOr1rw",
													"Rm6dWW3+zEVaaivfD74UyuDzeactjgJqXd4t8+UoBmQj9aMSRP7hfpjFJL7UDifk",
													"S99qVPKGgMMz7gSyl/4wOTmT6LqumOXu2m64FWpWMhgiPGmSuUn7pGUzKteJg3PO",
													"GNreCL8EvxqklIkbE6e6+mo+RfpcA9L8lAaN3h+b+SdUfrexfE/wdiZfqCUEzyxc",
													"QcHDf9gBguWqq5+wQ6BlBtjWbW+lk6JWbAVGI4C+zHWBEBzM/zeFqDwlwhG1EFOa",
													"2QIDAQAB",
													"-----END PUBLIC KEY-----",
													"*/",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic Y2xpZW50LWp3dC1iZWFyZXI6Y2xpZW50LWp3dC1iZWFyZXItc2VjcmV0",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{assertionToken}}",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "JWT Bearer extension grant - Valid User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5af2519f-7201-4bad-8aaa-93f025e2ab5b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Extension grant - jwt bearer grant - success\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.not.have.property('refresh_token');",
													"    var claims = jwt_decode(body.id_token);",
													"    pm.expect(claims).to.have.property('email');",
													"});",
													"",
													"function jwt_decode(jwt) {",
													"    var parts = jwt.split('.'); // header, payload, signature",
													"    return JSON.parse(atob(parts[1]));",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a91a7ee5-afa1-4119-88cd-488544060067",
												"exec": [
													"pm.environment.set('assertionToken', 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqZW5zZW4uYmFyYmFyYSIsIm5hbWUiOiJKb2huIERvZSIsImFkbWluIjp0cnVlLCJtYWlsIjoiamVuc2VuLmJhcmJhcmFAbWFpbC5jb20iLCJpYXQiOjE1MTYyMzkwMjJ9.oUvmrRITBVrrWBRQAIKSkDbpwwombEbDp24PXrx9s111o3M2dTQ7bcrIkXWhgiWGdoIYVhZEaYV3bTXmv2fHH80DLAOstq-ibkiKmPkoPWn7ea1VpLixcVCft_YSO_mtf4YMxdY-WFFB896z0Y_5M5S2iMvx4HKj7OCxKZqF1jkxeNCSMqI1KbMketk7SZxFlycgTXJBx5ysQ-z9VfGck3Vnf_pGV_RYPMgOMp0zqvPBPIbtOj1viFQ3lSNBss98OInnsecsaCQcFJGshVG-MNLGWDwljsz5-Rozckveg9g5orWTS86jjEqrNTQmA0alvLEnXnmJVaGJyTrW_2Qwng');",
													"",
													"// Private key",
													"/*",
													"-----BEGIN PRIVATE KEY-----",
													"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDI6xahwspOwhzS",
													"Hrga3SFif04FITcAhyygXoeS+GwUSx6HaMCMkULTQVMgQoU/7VAUf32uoiVgLDo1",
													"FI6vWvBGbp1Zbf7MRVpqK98PvhTK4PN5py2OAmpd3i3z5SgGZCP1oxJE/uF+mMUk",
													"vtQOJ+RL32pU8oaAwzPuBLKX/jA5OZPouq6Y5e7abrgValYyGCI8aZK5SfukZTMq",
													"14mDc84Y2t4IvwS/GqSUiRsTp7r6aj5F+lwD0vyUBo3eH5v5J1R+t7F8T/B2Jl+o",
													"JQTPLFxBwcN/2AGC5aqrn7BDoGUG2NZtb6WTolZsBUYjgL7MdYEQHMz/N4WoPCXC",
													"EbUQU5rZAgMBAAECggEBAL+ZOEbgPA7pG5TgyI6Nq8WDQ0KvDwWI4my4WK82CdM8",
													"Y4ubwGsMJ17QH9ZWuT1iMIirn44GgH/7DTMLPJpKrXFtEM50j5P62yL+XURk7u0d",
													"ofG0FEQlV4vWUZoRQJ7/pi8b6FM1gJI6W14UQKKTNimIj50cflmSTRZBEpLRSul1",
													"pTlsPypRgtj9clUgPBt1iKehoJmUu9S9nYAJFJo9wn97QKd6erkkqhJfEmXPWoXQ",
													"X5O2BJTTappN7SxLoP2Dhdss4zbvwZJD10Q5dDj3KH4vWjR4W3LuoH64ug74H2lh",
													"oFTT/xrWDCFFfWpjfkAXWzCh83DNI7z3c54sQXU2YGUCgYEA+qCRwmvwyf4+8wW0",
													"0AdsuQ0TDwZEf8LayPUchiILGKGCX5I9Qtfwm2XCsfOVtbX6FiEGPVIYT5i3S4le",
													"GMl7uO35/LsYPWX6MVGLeMnAQxkorxVM6iqZQu8fF1pcvxfVgvxpmPEko+veLTBq",
													"XPJ7HLiTkuuq+5P0YYZxW5iJ25MCgYEAzTm4BVHhzRKM1Hb+Cs2C4OhqTV7fNAkv",
													"melZt70jRGCd7ZXslNFUc3uju7JnaJVBqdNThOUevnk8n6EV0sMvP+483vNNSMqW",
													"u7KgR36DMNVMYHqr/f8YY9TLxHvSQoI53jPQFQ2X+GzrJZUtq6u1hX4UpySIlZbP",
													"GCMIh5GWK2MCgYABowLQrjvIVey7UZI4uZOwMbGqK3RPEUq0fUVOavJ/mq5rSV01",
													"Dov3t9ZpqxmTMjkL4/NSezLFck3gJGmE5+vy7Trwt5gU7pGPuOScSVUEGyn02sLB",
													"1L1jfoRJdsGcTd+LF3LpGMoQd/3fda18Jek/6sSr9PYM5o52BJbA7mIYGQKBgCo3",
													"131wrMztJf+HQxeh02zFIykrfStNQHefI4/C3wBwB80abILo1UC0jKhOOSuwmMOA",
													"78uE/uAcPLZyAvVKpeu27NrInnt9Aak3Q/WxNvfSyVWHpt4nnjLbUdfnyQdZluH5",
													"MrNCCqNWdMFUgQKx3jPKDiGcSGTNk2jZvCV3c7cVAoGBALoOfXLssZW7Kp5CcY/q",
													"60JP8QHm889KykmBvda5MZySENt42i5Bp6a8rNTR6TmJkKGiY780I16+JDhPoQHd",
													"+pJeVNzWPoTAdg5ftvMoYr95wOqsraUtd+4wQcpjMKC4+FxAuSChhqfBrOktoigf",
													"TaAE0xuL1DO9Fqp1nNZY0q1m",
													"-----END PRIVATE KEY-----",
													"*/",
													"",
													"// Public key",
													"/*",
													"-----BEGIN PUBLIC KEY-----",
													"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyOsWocLKTsIc0h64Gt0h",
													"Yn9OBSE3AIcsoF6HkvhsFEseh2jAjJFC00FTIEKFP+1QFH99rqIlYCw6NRSOr1rw",
													"Rm6dWW3+zEVaaivfD74UyuDzeactjgJqXd4t8+UoBmQj9aMSRP7hfpjFJL7UDifk",
													"S99qVPKGgMMz7gSyl/4wOTmT6LqumOXu2m64FWpWMhgiPGmSuUn7pGUzKteJg3PO",
													"GNreCL8EvxqklIkbE6e6+mo+RfpcA9L8lAaN3h+b+SdUfrexfE/wdiZfqCUEzyxc",
													"QcHDf9gBguWqq5+wQ6BlBtjWbW+lk6JWbAVGI4C+zHWBEBzM/zeFqDwlwhG1EFOa",
													"2QIDAQAB",
													"-----END PUBLIC KEY-----",
													"*/",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic Y2xpZW50LWp3dC1iZWFyZXI6Y2xpZW50LWp3dC1iZWFyZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{assertionToken}}",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure jwt bearer client - new format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a6ef02f-76e8-464d-8a25-ae87da6124c0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ed3e6666-4971-410e-b13d-5c30832be727",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"authorizedGrantTypes\": [\"urn:ietf:params:oauth:grant-type:jwt-bearer~{{jwtBearerExtensionGrant}}\"],\n  \"scopes\": [\"openid\"],\n  \"certificate\": \"{{certificateJks}}\",\n  \"identities\": [\"{{idp.inmemory}}\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{clientJwtBearer}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"{{domain}}",
												"clients",
												"{{clientJwtBearer}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "JWT Bearer extension grant - Valid User - new format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e0025f9-9e82-448f-9896-314384bd6018",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Extension grant - jwt bearer grant - success\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.not.have.property('refresh_token');",
													"    var claims = jwt_decode(body.id_token);",
													"    pm.expect(claims).to.have.property('email');",
													"});",
													"",
													"function jwt_decode(jwt) {",
													"    var parts = jwt.split('.'); // header, payload, signature",
													"    return JSON.parse(atob(parts[1]));",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "454fccf1-caec-4e2c-becd-30bb5dfa2c28",
												"exec": [
													"pm.environment.set('assertionToken', 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqZW5zZW4uYmFyYmFyYSIsIm5hbWUiOiJKb2huIERvZSIsImFkbWluIjp0cnVlLCJtYWlsIjoiamVuc2VuLmJhcmJhcmFAbWFpbC5jb20iLCJpYXQiOjE1MTYyMzkwMjJ9.oUvmrRITBVrrWBRQAIKSkDbpwwombEbDp24PXrx9s111o3M2dTQ7bcrIkXWhgiWGdoIYVhZEaYV3bTXmv2fHH80DLAOstq-ibkiKmPkoPWn7ea1VpLixcVCft_YSO_mtf4YMxdY-WFFB896z0Y_5M5S2iMvx4HKj7OCxKZqF1jkxeNCSMqI1KbMketk7SZxFlycgTXJBx5ysQ-z9VfGck3Vnf_pGV_RYPMgOMp0zqvPBPIbtOj1viFQ3lSNBss98OInnsecsaCQcFJGshVG-MNLGWDwljsz5-Rozckveg9g5orWTS86jjEqrNTQmA0alvLEnXnmJVaGJyTrW_2Qwng');",
													"",
													"// Private key",
													"/*",
													"-----BEGIN PRIVATE KEY-----",
													"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDI6xahwspOwhzS",
													"Hrga3SFif04FITcAhyygXoeS+GwUSx6HaMCMkULTQVMgQoU/7VAUf32uoiVgLDo1",
													"FI6vWvBGbp1Zbf7MRVpqK98PvhTK4PN5py2OAmpd3i3z5SgGZCP1oxJE/uF+mMUk",
													"vtQOJ+RL32pU8oaAwzPuBLKX/jA5OZPouq6Y5e7abrgValYyGCI8aZK5SfukZTMq",
													"14mDc84Y2t4IvwS/GqSUiRsTp7r6aj5F+lwD0vyUBo3eH5v5J1R+t7F8T/B2Jl+o",
													"JQTPLFxBwcN/2AGC5aqrn7BDoGUG2NZtb6WTolZsBUYjgL7MdYEQHMz/N4WoPCXC",
													"EbUQU5rZAgMBAAECggEBAL+ZOEbgPA7pG5TgyI6Nq8WDQ0KvDwWI4my4WK82CdM8",
													"Y4ubwGsMJ17QH9ZWuT1iMIirn44GgH/7DTMLPJpKrXFtEM50j5P62yL+XURk7u0d",
													"ofG0FEQlV4vWUZoRQJ7/pi8b6FM1gJI6W14UQKKTNimIj50cflmSTRZBEpLRSul1",
													"pTlsPypRgtj9clUgPBt1iKehoJmUu9S9nYAJFJo9wn97QKd6erkkqhJfEmXPWoXQ",
													"X5O2BJTTappN7SxLoP2Dhdss4zbvwZJD10Q5dDj3KH4vWjR4W3LuoH64ug74H2lh",
													"oFTT/xrWDCFFfWpjfkAXWzCh83DNI7z3c54sQXU2YGUCgYEA+qCRwmvwyf4+8wW0",
													"0AdsuQ0TDwZEf8LayPUchiILGKGCX5I9Qtfwm2XCsfOVtbX6FiEGPVIYT5i3S4le",
													"GMl7uO35/LsYPWX6MVGLeMnAQxkorxVM6iqZQu8fF1pcvxfVgvxpmPEko+veLTBq",
													"XPJ7HLiTkuuq+5P0YYZxW5iJ25MCgYEAzTm4BVHhzRKM1Hb+Cs2C4OhqTV7fNAkv",
													"melZt70jRGCd7ZXslNFUc3uju7JnaJVBqdNThOUevnk8n6EV0sMvP+483vNNSMqW",
													"u7KgR36DMNVMYHqr/f8YY9TLxHvSQoI53jPQFQ2X+GzrJZUtq6u1hX4UpySIlZbP",
													"GCMIh5GWK2MCgYABowLQrjvIVey7UZI4uZOwMbGqK3RPEUq0fUVOavJ/mq5rSV01",
													"Dov3t9ZpqxmTMjkL4/NSezLFck3gJGmE5+vy7Trwt5gU7pGPuOScSVUEGyn02sLB",
													"1L1jfoRJdsGcTd+LF3LpGMoQd/3fda18Jek/6sSr9PYM5o52BJbA7mIYGQKBgCo3",
													"131wrMztJf+HQxeh02zFIykrfStNQHefI4/C3wBwB80abILo1UC0jKhOOSuwmMOA",
													"78uE/uAcPLZyAvVKpeu27NrInnt9Aak3Q/WxNvfSyVWHpt4nnjLbUdfnyQdZluH5",
													"MrNCCqNWdMFUgQKx3jPKDiGcSGTNk2jZvCV3c7cVAoGBALoOfXLssZW7Kp5CcY/q",
													"60JP8QHm889KykmBvda5MZySENt42i5Bp6a8rNTR6TmJkKGiY780I16+JDhPoQHd",
													"+pJeVNzWPoTAdg5ftvMoYr95wOqsraUtd+4wQcpjMKC4+FxAuSChhqfBrOktoigf",
													"TaAE0xuL1DO9Fqp1nNZY0q1m",
													"-----END PRIVATE KEY-----",
													"*/",
													"",
													"// Public key",
													"/*",
													"-----BEGIN PUBLIC KEY-----",
													"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyOsWocLKTsIc0h64Gt0h",
													"Yn9OBSE3AIcsoF6HkvhsFEseh2jAjJFC00FTIEKFP+1QFH99rqIlYCw6NRSOr1rw",
													"Rm6dWW3+zEVaaivfD74UyuDzeactjgJqXd4t8+UoBmQj9aMSRP7hfpjFJL7UDifk",
													"S99qVPKGgMMz7gSyl/4wOTmT6LqumOXu2m64FWpWMhgiPGmSuUn7pGUzKteJg3PO",
													"GNreCL8EvxqklIkbE6e6+mo+RfpcA9L8lAaN3h+b+SdUfrexfE/wdiZfqCUEzyxc",
													"QcHDf9gBguWqq5+wQ6BlBtjWbW+lk6JWbAVGI4C+zHWBEBzM/zeFqDwlwhG1EFOa",
													"2QIDAQAB",
													"-----END PUBLIC KEY-----",
													"*/",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic Y2xpZW50LWp3dC1iZWFyZXI6Y2xpZW50LWp3dC1iZWFyZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{assertionToken}}",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure jwt bearer client - Add Refresh Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8fbc5f0-4025-4dba-b897-caec7127b7e0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"authorizedGrantTypes\": [\"refresh_token\", \"urn:ietf:params:oauth:grant-type:jwt-bearer\"],\n  \"scopes\": [\"openid\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{clientJwtBearer}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"{{domain}}",
												"clients",
												"{{clientJwtBearer}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "JWT Bearer extension grant - Valid User - With Refresh Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02dbf62e-3e9a-4192-b931-e782b605a6a3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Extension grant - jwt bearer grant - success\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('refresh_token');",
													"    var claims = jwt_decode(body.id_token);",
													"    pm.expect(claims).to.have.property('email');",
													"});",
													"",
													"function jwt_decode(jwt) {",
													"    var parts = jwt.split('.'); // header, payload, signature",
													"    return JSON.parse(atob(parts[1]));",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ee799b5e-0233-4c46-b1e4-8c5b443e4718",
												"exec": [
													"pm.environment.set('assertionToken', 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqZW5zZW4uYmFyYmFyYSIsIm5hbWUiOiJKb2huIERvZSIsImFkbWluIjp0cnVlLCJtYWlsIjoiamVuc2VuLmJhcmJhcmFAbWFpbC5jb20iLCJpYXQiOjE1MTYyMzkwMjJ9.oUvmrRITBVrrWBRQAIKSkDbpwwombEbDp24PXrx9s111o3M2dTQ7bcrIkXWhgiWGdoIYVhZEaYV3bTXmv2fHH80DLAOstq-ibkiKmPkoPWn7ea1VpLixcVCft_YSO_mtf4YMxdY-WFFB896z0Y_5M5S2iMvx4HKj7OCxKZqF1jkxeNCSMqI1KbMketk7SZxFlycgTXJBx5ysQ-z9VfGck3Vnf_pGV_RYPMgOMp0zqvPBPIbtOj1viFQ3lSNBss98OInnsecsaCQcFJGshVG-MNLGWDwljsz5-Rozckveg9g5orWTS86jjEqrNTQmA0alvLEnXnmJVaGJyTrW_2Qwng');",
													"",
													"// Private key",
													"/*",
													"-----BEGIN PRIVATE KEY-----",
													"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDI6xahwspOwhzS",
													"Hrga3SFif04FITcAhyygXoeS+GwUSx6HaMCMkULTQVMgQoU/7VAUf32uoiVgLDo1",
													"FI6vWvBGbp1Zbf7MRVpqK98PvhTK4PN5py2OAmpd3i3z5SgGZCP1oxJE/uF+mMUk",
													"vtQOJ+RL32pU8oaAwzPuBLKX/jA5OZPouq6Y5e7abrgValYyGCI8aZK5SfukZTMq",
													"14mDc84Y2t4IvwS/GqSUiRsTp7r6aj5F+lwD0vyUBo3eH5v5J1R+t7F8T/B2Jl+o",
													"JQTPLFxBwcN/2AGC5aqrn7BDoGUG2NZtb6WTolZsBUYjgL7MdYEQHMz/N4WoPCXC",
													"EbUQU5rZAgMBAAECggEBAL+ZOEbgPA7pG5TgyI6Nq8WDQ0KvDwWI4my4WK82CdM8",
													"Y4ubwGsMJ17QH9ZWuT1iMIirn44GgH/7DTMLPJpKrXFtEM50j5P62yL+XURk7u0d",
													"ofG0FEQlV4vWUZoRQJ7/pi8b6FM1gJI6W14UQKKTNimIj50cflmSTRZBEpLRSul1",
													"pTlsPypRgtj9clUgPBt1iKehoJmUu9S9nYAJFJo9wn97QKd6erkkqhJfEmXPWoXQ",
													"X5O2BJTTappN7SxLoP2Dhdss4zbvwZJD10Q5dDj3KH4vWjR4W3LuoH64ug74H2lh",
													"oFTT/xrWDCFFfWpjfkAXWzCh83DNI7z3c54sQXU2YGUCgYEA+qCRwmvwyf4+8wW0",
													"0AdsuQ0TDwZEf8LayPUchiILGKGCX5I9Qtfwm2XCsfOVtbX6FiEGPVIYT5i3S4le",
													"GMl7uO35/LsYPWX6MVGLeMnAQxkorxVM6iqZQu8fF1pcvxfVgvxpmPEko+veLTBq",
													"XPJ7HLiTkuuq+5P0YYZxW5iJ25MCgYEAzTm4BVHhzRKM1Hb+Cs2C4OhqTV7fNAkv",
													"melZt70jRGCd7ZXslNFUc3uju7JnaJVBqdNThOUevnk8n6EV0sMvP+483vNNSMqW",
													"u7KgR36DMNVMYHqr/f8YY9TLxHvSQoI53jPQFQ2X+GzrJZUtq6u1hX4UpySIlZbP",
													"GCMIh5GWK2MCgYABowLQrjvIVey7UZI4uZOwMbGqK3RPEUq0fUVOavJ/mq5rSV01",
													"Dov3t9ZpqxmTMjkL4/NSezLFck3gJGmE5+vy7Trwt5gU7pGPuOScSVUEGyn02sLB",
													"1L1jfoRJdsGcTd+LF3LpGMoQd/3fda18Jek/6sSr9PYM5o52BJbA7mIYGQKBgCo3",
													"131wrMztJf+HQxeh02zFIykrfStNQHefI4/C3wBwB80abILo1UC0jKhOOSuwmMOA",
													"78uE/uAcPLZyAvVKpeu27NrInnt9Aak3Q/WxNvfSyVWHpt4nnjLbUdfnyQdZluH5",
													"MrNCCqNWdMFUgQKx3jPKDiGcSGTNk2jZvCV3c7cVAoGBALoOfXLssZW7Kp5CcY/q",
													"60JP8QHm889KykmBvda5MZySENt42i5Bp6a8rNTR6TmJkKGiY780I16+JDhPoQHd",
													"+pJeVNzWPoTAdg5ftvMoYr95wOqsraUtd+4wQcpjMKC4+FxAuSChhqfBrOktoigf",
													"TaAE0xuL1DO9Fqp1nNZY0q1m",
													"-----END PRIVATE KEY-----",
													"*/",
													"",
													"// Public key",
													"/*",
													"-----BEGIN PUBLIC KEY-----",
													"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyOsWocLKTsIc0h64Gt0h",
													"Yn9OBSE3AIcsoF6HkvhsFEseh2jAjJFC00FTIEKFP+1QFH99rqIlYCw6NRSOr1rw",
													"Rm6dWW3+zEVaaivfD74UyuDzeactjgJqXd4t8+UoBmQj9aMSRP7hfpjFJL7UDifk",
													"S99qVPKGgMMz7gSyl/4wOTmT6LqumOXu2m64FWpWMhgiPGmSuUn7pGUzKteJg3PO",
													"GNreCL8EvxqklIkbE6e6+mo+RfpcA9L8lAaN3h+b+SdUfrexfE/wdiZfqCUEzyxc",
													"QcHDf9gBguWqq5+wQ6BlBtjWbW+lk6JWbAVGI4C+zHWBEBzM/zeFqDwlwhG1EFOa",
													"2QIDAQAB",
													"-----END PUBLIC KEY-----",
													"*/",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic Y2xpZW50LWp3dC1iZWFyZXI6Y2xpZW50LWp3dC1iZWFyZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{assertionToken}}",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure jwt bearer client - Add Refresh Token - new format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6504b71-526f-4170-820d-46b07816cf7c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"authorizedGrantTypes\": [\"refresh_token\", \"urn:ietf:params:oauth:grant-type:jwt-bearer~{{jwtBearerExtensionGrant}}\"],\n  \"scopes\": [\"openid\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{clientJwtBearer}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"{{domain}}",
												"clients",
												"{{clientJwtBearer}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "JWT Bearer extension grant - Valid User - With Refresh Token - new format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8221ee6a-48ef-464c-8ee1-a6bbba1c07d6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Extension grant - jwt bearer grant - success\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('refresh_token');",
													"    var claims = jwt_decode(body.id_token);",
													"    pm.expect(claims).to.have.property('email');",
													"});",
													"",
													"function jwt_decode(jwt) {",
													"    var parts = jwt.split('.'); // header, payload, signature",
													"    return JSON.parse(atob(parts[1]));",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "be510693-fa28-4216-a43d-cdabf106bbf1",
												"exec": [
													"pm.environment.set('assertionToken', 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqZW5zZW4uYmFyYmFyYSIsIm5hbWUiOiJKb2huIERvZSIsImFkbWluIjp0cnVlLCJtYWlsIjoiamVuc2VuLmJhcmJhcmFAbWFpbC5jb20iLCJpYXQiOjE1MTYyMzkwMjJ9.oUvmrRITBVrrWBRQAIKSkDbpwwombEbDp24PXrx9s111o3M2dTQ7bcrIkXWhgiWGdoIYVhZEaYV3bTXmv2fHH80DLAOstq-ibkiKmPkoPWn7ea1VpLixcVCft_YSO_mtf4YMxdY-WFFB896z0Y_5M5S2iMvx4HKj7OCxKZqF1jkxeNCSMqI1KbMketk7SZxFlycgTXJBx5ysQ-z9VfGck3Vnf_pGV_RYPMgOMp0zqvPBPIbtOj1viFQ3lSNBss98OInnsecsaCQcFJGshVG-MNLGWDwljsz5-Rozckveg9g5orWTS86jjEqrNTQmA0alvLEnXnmJVaGJyTrW_2Qwng');",
													"",
													"// Private key",
													"/*",
													"-----BEGIN PRIVATE KEY-----",
													"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDI6xahwspOwhzS",
													"Hrga3SFif04FITcAhyygXoeS+GwUSx6HaMCMkULTQVMgQoU/7VAUf32uoiVgLDo1",
													"FI6vWvBGbp1Zbf7MRVpqK98PvhTK4PN5py2OAmpd3i3z5SgGZCP1oxJE/uF+mMUk",
													"vtQOJ+RL32pU8oaAwzPuBLKX/jA5OZPouq6Y5e7abrgValYyGCI8aZK5SfukZTMq",
													"14mDc84Y2t4IvwS/GqSUiRsTp7r6aj5F+lwD0vyUBo3eH5v5J1R+t7F8T/B2Jl+o",
													"JQTPLFxBwcN/2AGC5aqrn7BDoGUG2NZtb6WTolZsBUYjgL7MdYEQHMz/N4WoPCXC",
													"EbUQU5rZAgMBAAECggEBAL+ZOEbgPA7pG5TgyI6Nq8WDQ0KvDwWI4my4WK82CdM8",
													"Y4ubwGsMJ17QH9ZWuT1iMIirn44GgH/7DTMLPJpKrXFtEM50j5P62yL+XURk7u0d",
													"ofG0FEQlV4vWUZoRQJ7/pi8b6FM1gJI6W14UQKKTNimIj50cflmSTRZBEpLRSul1",
													"pTlsPypRgtj9clUgPBt1iKehoJmUu9S9nYAJFJo9wn97QKd6erkkqhJfEmXPWoXQ",
													"X5O2BJTTappN7SxLoP2Dhdss4zbvwZJD10Q5dDj3KH4vWjR4W3LuoH64ug74H2lh",
													"oFTT/xrWDCFFfWpjfkAXWzCh83DNI7z3c54sQXU2YGUCgYEA+qCRwmvwyf4+8wW0",
													"0AdsuQ0TDwZEf8LayPUchiILGKGCX5I9Qtfwm2XCsfOVtbX6FiEGPVIYT5i3S4le",
													"GMl7uO35/LsYPWX6MVGLeMnAQxkorxVM6iqZQu8fF1pcvxfVgvxpmPEko+veLTBq",
													"XPJ7HLiTkuuq+5P0YYZxW5iJ25MCgYEAzTm4BVHhzRKM1Hb+Cs2C4OhqTV7fNAkv",
													"melZt70jRGCd7ZXslNFUc3uju7JnaJVBqdNThOUevnk8n6EV0sMvP+483vNNSMqW",
													"u7KgR36DMNVMYHqr/f8YY9TLxHvSQoI53jPQFQ2X+GzrJZUtq6u1hX4UpySIlZbP",
													"GCMIh5GWK2MCgYABowLQrjvIVey7UZI4uZOwMbGqK3RPEUq0fUVOavJ/mq5rSV01",
													"Dov3t9ZpqxmTMjkL4/NSezLFck3gJGmE5+vy7Trwt5gU7pGPuOScSVUEGyn02sLB",
													"1L1jfoRJdsGcTd+LF3LpGMoQd/3fda18Jek/6sSr9PYM5o52BJbA7mIYGQKBgCo3",
													"131wrMztJf+HQxeh02zFIykrfStNQHefI4/C3wBwB80abILo1UC0jKhOOSuwmMOA",
													"78uE/uAcPLZyAvVKpeu27NrInnt9Aak3Q/WxNvfSyVWHpt4nnjLbUdfnyQdZluH5",
													"MrNCCqNWdMFUgQKx3jPKDiGcSGTNk2jZvCV3c7cVAoGBALoOfXLssZW7Kp5CcY/q",
													"60JP8QHm889KykmBvda5MZySENt42i5Bp6a8rNTR6TmJkKGiY780I16+JDhPoQHd",
													"+pJeVNzWPoTAdg5ftvMoYr95wOqsraUtd+4wQcpjMKC4+FxAuSChhqfBrOktoigf",
													"TaAE0xuL1DO9Fqp1nNZY0q1m",
													"-----END PRIVATE KEY-----",
													"*/",
													"",
													"// Public key",
													"/*",
													"-----BEGIN PUBLIC KEY-----",
													"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyOsWocLKTsIc0h64Gt0h",
													"Yn9OBSE3AIcsoF6HkvhsFEseh2jAjJFC00FTIEKFP+1QFH99rqIlYCw6NRSOr1rw",
													"Rm6dWW3+zEVaaivfD74UyuDzeactjgJqXd4t8+UoBmQj9aMSRP7hfpjFJL7UDifk",
													"S99qVPKGgMMz7gSyl/4wOTmT6LqumOXu2m64FWpWMhgiPGmSuUn7pGUzKteJg3PO",
													"GNreCL8EvxqklIkbE6e6+mo+RfpcA9L8lAaN3h+b+SdUfrexfE/wdiZfqCUEzyxc",
													"QcHDf9gBguWqq5+wQ6BlBtjWbW+lk6JWbAVGI4C+zHWBEBzM/zeFqDwlwhG1EFOa",
													"2QIDAQAB",
													"-----END PUBLIC KEY-----",
													"*/",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic Y2xpZW50LWp3dC1iZWFyZXI6Y2xpZW50LWp3dC1iZWFyZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{assertionToken}}",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update extension grant - Uncheck userExists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1562bd8-6a87-4203-9498-f19eec0c1289",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Extension Grant - update jwt bearer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.environment.set('jwtBearerExtensionGrant', jsonData.id);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"JWT BEARER\",\n  \"configuration\": \"{\\\"publicKey\\\":\\\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDI6xahwspOwhzSHrga3SFif04FITcAhyygXoeS+GwUSx6HaMCMkULTQVMgQoU/7VAUf32uoiVgLDo1FI6vWvBGbp1Zbf7MRVpqK98PvhTK4PN5py2OAmpd3i3z5SgGZCP1oxJE/uF+mMUkvtQOJ+RL32pU8oaAwzPuBLKX/jA5OZPouq6Y5e7abrgValYyGCI8aZK5SfukZTMq14mDc84Y2t4IvwS/GqSUiRsTp7r6aj5F+lwD0vyUBo3eH5v5J1R+t7F8T/B2Jl+oJQTPLFxBwcN/2AGC5aqrn7BDoGUG2NZtb6WTolZsBUYjgL7MdYEQHMz/N4WoPCXCEbUQU5rZ test@test.com\\\",\\\"claimsMapper\\\":[{\\\"assertion_claim\\\":\\\"email\\\",\\\"token_claim\\\":\\\"email\\\"}]}\",\n  \"grantType\": \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n  \"identityProvider\": \"{{idp.inmemory}}\",\n  \"createUser\": false,\n  \"userExists\": false\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/{{domain}}/extensionGrants/{{jwtBearerExtensionGrant}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"{{domain}}",
												"extensionGrants",
												"{{jwtBearerExtensionGrant}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "JWT Bearer extension grant - Unknow User is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd95051a-8ca8-42f8-a9c0-02417b3a2d2a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Extension grant - jwt bearer grant - success\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.not.have.property('refresh_token');",
													"    var claims = jwt_decode(body.id_token);",
													"    pm.expect(claims).to.have.property('email');",
													"});",
													"",
													"function jwt_decode(jwt) {",
													"    var parts = jwt.split('.'); // header, payload, signature",
													"    return JSON.parse(atob(parts[1]));",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "51affc56-de35-444b-b092-e26b32ec3f02",
												"exec": [
													"pm.environment.set('assertionToken', 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhbm9ueW1vdXMtdXNlciIsIm5hbWUiOiJKb2huIERvZSIsImFkbWluIjp0cnVlLCJpYXQiOjE1MTYyMzkwMjIsImVtYWlsIjoiam9obi5kb2VAZ21haWwuY29tIn0.dDmLFEfCDtxHUF771Q8AWQs4AoImZSZKlnlEp91iT2K0d7glZHMasE8HsfU7ozL-T9SATSQi_xvsc3Uitabna95v_nbOmu9fLeodmzYkPgXoD4Fxk8wPtHqTETHNN_kDbCxBXX0iqGhB-Et-9QJ2rGUDmMCXcj-K1PwsuBYYch0G3Zc60HM8hM3mm51pH8j1vKUr1pBSrAudPANhhQof_sOwohRiiubJIT4qDpjKxp6IvqmVusAU4SDeAPaoQDdr3KH2Hd29TWviB8OGw8pj3SLxKkaMKG0u94HBPcOaC-v0p-afq7N0jgoS2KfO9CtpmEMiItfLKWqkEFggWJtL4w');",
													"",
													"// Private key",
													"/*",
													"-----BEGIN PRIVATE KEY-----",
													"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDI6xahwspOwhzS",
													"Hrga3SFif04FITcAhyygXoeS+GwUSx6HaMCMkULTQVMgQoU/7VAUf32uoiVgLDo1",
													"FI6vWvBGbp1Zbf7MRVpqK98PvhTK4PN5py2OAmpd3i3z5SgGZCP1oxJE/uF+mMUk",
													"vtQOJ+RL32pU8oaAwzPuBLKX/jA5OZPouq6Y5e7abrgValYyGCI8aZK5SfukZTMq",
													"14mDc84Y2t4IvwS/GqSUiRsTp7r6aj5F+lwD0vyUBo3eH5v5J1R+t7F8T/B2Jl+o",
													"JQTPLFxBwcN/2AGC5aqrn7BDoGUG2NZtb6WTolZsBUYjgL7MdYEQHMz/N4WoPCXC",
													"EbUQU5rZAgMBAAECggEBAL+ZOEbgPA7pG5TgyI6Nq8WDQ0KvDwWI4my4WK82CdM8",
													"Y4ubwGsMJ17QH9ZWuT1iMIirn44GgH/7DTMLPJpKrXFtEM50j5P62yL+XURk7u0d",
													"ofG0FEQlV4vWUZoRQJ7/pi8b6FM1gJI6W14UQKKTNimIj50cflmSTRZBEpLRSul1",
													"pTlsPypRgtj9clUgPBt1iKehoJmUu9S9nYAJFJo9wn97QKd6erkkqhJfEmXPWoXQ",
													"X5O2BJTTappN7SxLoP2Dhdss4zbvwZJD10Q5dDj3KH4vWjR4W3LuoH64ug74H2lh",
													"oFTT/xrWDCFFfWpjfkAXWzCh83DNI7z3c54sQXU2YGUCgYEA+qCRwmvwyf4+8wW0",
													"0AdsuQ0TDwZEf8LayPUchiILGKGCX5I9Qtfwm2XCsfOVtbX6FiEGPVIYT5i3S4le",
													"GMl7uO35/LsYPWX6MVGLeMnAQxkorxVM6iqZQu8fF1pcvxfVgvxpmPEko+veLTBq",
													"XPJ7HLiTkuuq+5P0YYZxW5iJ25MCgYEAzTm4BVHhzRKM1Hb+Cs2C4OhqTV7fNAkv",
													"melZt70jRGCd7ZXslNFUc3uju7JnaJVBqdNThOUevnk8n6EV0sMvP+483vNNSMqW",
													"u7KgR36DMNVMYHqr/f8YY9TLxHvSQoI53jPQFQ2X+GzrJZUtq6u1hX4UpySIlZbP",
													"GCMIh5GWK2MCgYABowLQrjvIVey7UZI4uZOwMbGqK3RPEUq0fUVOavJ/mq5rSV01",
													"Dov3t9ZpqxmTMjkL4/NSezLFck3gJGmE5+vy7Trwt5gU7pGPuOScSVUEGyn02sLB",
													"1L1jfoRJdsGcTd+LF3LpGMoQd/3fda18Jek/6sSr9PYM5o52BJbA7mIYGQKBgCo3",
													"131wrMztJf+HQxeh02zFIykrfStNQHefI4/C3wBwB80abILo1UC0jKhOOSuwmMOA",
													"78uE/uAcPLZyAvVKpeu27NrInnt9Aak3Q/WxNvfSyVWHpt4nnjLbUdfnyQdZluH5",
													"MrNCCqNWdMFUgQKx3jPKDiGcSGTNk2jZvCV3c7cVAoGBALoOfXLssZW7Kp5CcY/q",
													"60JP8QHm889KykmBvda5MZySENt42i5Bp6a8rNTR6TmJkKGiY780I16+JDhPoQHd",
													"+pJeVNzWPoTAdg5ftvMoYr95wOqsraUtd+4wQcpjMKC4+FxAuSChhqfBrOktoigf",
													"TaAE0xuL1DO9Fqp1nNZY0q1m",
													"-----END PRIVATE KEY-----",
													"*/",
													"",
													"// Public key",
													"/*",
													"-----BEGIN PUBLIC KEY-----",
													"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyOsWocLKTsIc0h64Gt0h",
													"Yn9OBSE3AIcsoF6HkvhsFEseh2jAjJFC00FTIEKFP+1QFH99rqIlYCw6NRSOr1rw",
													"Rm6dWW3+zEVaaivfD74UyuDzeactjgJqXd4t8+UoBmQj9aMSRP7hfpjFJL7UDifk",
													"S99qVPKGgMMz7gSyl/4wOTmT6LqumOXu2m64FWpWMhgiPGmSuUn7pGUzKteJg3PO",
													"GNreCL8EvxqklIkbE6e6+mo+RfpcA9L8lAaN3h+b+SdUfrexfE/wdiZfqCUEzyxc",
													"QcHDf9gBguWqq5+wQ6BlBtjWbW+lk6JWbAVGI4C+zHWBEBzM/zeFqDwlwhG1EFOa",
													"2QIDAQAB",
													"-----END PUBLIC KEY-----",
													"*/",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic Y2xpZW50LWp3dC1iZWFyZXI6Y2xpZW50LWp3dC1iZWFyZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{assertionToken}}",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - custom claims",
					"item": [
						{
							"name": "Configure client 1 - custom claims access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d9a5904-2bec-4f47-8b4a-3665cb44ace2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tokenCustomClaims\" : [\n  \t{\n  \t\t\"tokenType\": \"ACCESS_TOKEN\",\n  \t\t\"claimName\": \"custom-claim\",\n  \t\t\"claimValue\": \"{#context.attributes['user'].username}\"\n  \t}\n  ]\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{client1}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"{{domain}}",
										"clients",
										"{{client1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - client 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cecfce1d-f3b5-4495-bfc4-e18a700dd9a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    pm.expect(body).to.have.property('refresh_token');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('openid');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"    ",
											"    let jwt = parseJwt(body.access_token);",
											"    let origin = pm.environment.get(\"gateway_url\");",
											"    let domain = pm.environment.get(\"domain\");",
											"    ",
											"    tests['Contains an iss claim'] = jwt.iss === origin + '/' + domain + '/oidc';",
											"    tests['Contains a sub claim'] = jwt.sub !== undefined;",
											"    tests['Contains an aud claim'] = jwt.aud === 'my-client';",
											"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
											"    tests['Contains an iat claim'] = jwt.iat !== undefined;",
											"    tests['Contains a custom claim'] = jwt['custom-claim'] === 'user';",
											"    ",
											"    let refreshJwt = parseJwt(body.refresh_token);",
											"    tests['Refresh token - contains a custom claim'] = refreshJwt['custom-claim'] === 'user';",
											"});",
											"",
											"function parseJwt (token) {",
											"    var base64Url = token.split('.')[1];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure client 1 - custom claims ID token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2c1b1b4-ac2d-4ec7-b414-3a87ce077cb2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tokenCustomClaims\" : [\n  \t{\n  \t\t\"tokenType\": \"ID_TOKEN\",\n  \t\t\"claimName\": \"custom-claim\",\n  \t\t\"claimValue\": \"{#context.attributes['user'].username}\"\n  \t}\n  ]\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{client1}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"{{domain}}",
										"clients",
										"{{client1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - client 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cfffd6cd-36eb-459c-88cc-2c18696c9e9c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    pm.expect(body).to.have.property('refresh_token');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('openid');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"    ",
											"    let jwt = parseJwt(body.id_token);",
											"    let origin = pm.environment.get(\"gateway_url\");",
											"    let domain = pm.environment.get(\"domain\");",
											"    ",
											"    tests['Contains an iss claim'] = jwt.iss === origin + '/' + domain + '/oidc';",
											"    tests['Contains a sub claim'] = jwt.sub !== undefined;",
											"    tests['Contains an aud claim'] = jwt.aud === 'my-client';",
											"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
											"    tests['Contains an iat claim'] = jwt.iat !== undefined;",
											"    tests['Contains a custom claim'] = jwt['custom-claim'] === 'user';",
											"});",
											"",
											"function parseJwt (token) {",
											"    var base64Url = token.split('.')[1];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure client 1 - client metadata",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37e0fe91-c778-4b09-8ae3-8287ca1705b7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"metadata\": {\n  \t\"test\": \"client-test-metadata\"\n  },\n  \"tokenCustomClaims\" : [\n  \t{\n  \t\t\"tokenType\": \"ID_TOKEN\",\n  \t\t\"claimName\": \"custom-claim\",\n  \t\t\"claimValue\": \"{#context.attributes['client'].metadata['test']}\"\n  \t}\n  ]\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{client1}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"{{domain}}",
										"clients",
										"{{client1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - client 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c841fdbb-0446-4553-b511-8329e6cdef05",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    pm.expect(body).to.have.property('refresh_token');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('openid');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"    ",
											"    let jwt = parseJwt(body.id_token);",
											"    let origin = pm.environment.get(\"gateway_url\");",
											"    let domain = pm.environment.get(\"domain\");",
											"    ",
											"    tests['Contains an iss claim'] = jwt.iss === origin + '/' + domain + '/oidc';",
											"    tests['Contains a sub claim'] = jwt.sub !== undefined;",
											"    tests['Contains an aud claim'] = jwt.aud === 'my-client';",
											"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
											"    tests['Contains an iat claim'] = jwt.iat !== undefined;",
											"    tests['Contains a custom claim - client metadata'] = jwt['custom-claim'] === 'client-test-metadata';",
											"    ",
											"    pm.environment.set('memberId', jwt.sub);",
											"});",
											"",
											"function parseJwt (token) {",
											"    var base64Url = token.split('.')[1];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17c6a890-ff71-4ab3-8562-3e0a15167a1e",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    ",
											"    var body = pm.response.json();",
											"    pm.environment.set('groupId', body.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"ADMINISTRATORS\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{management_url}}/management/domains/{{domain}}/groups",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"{{domain}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group - add member",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2e55e20-4d7e-4fdd-aa73-fc8f950719c0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"ADMINISTRATORS\", \n\t\"members\": [ \"{{memberId}}\" ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{management_url}}/management/domains/{{domain}}/groups/{{groupId}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"{{domain}}",
										"groups",
										"{{groupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure client 1 - user groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4edce5ba-7521-4cfd-9e64-2eaccc78e893",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tokenCustomClaims\" : [\n  \t{\n  \t\t\"tokenType\": \"ID_TOKEN\",\n  \t\t\"claimName\": \"custom-claim\",\n  \t\t\"claimValue\": \"{#context.attributes['user'].groups}\"\n  \t}\n  ]\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{client1}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"{{domain}}",
										"clients",
										"{{client1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - client 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d8900d1-8969-4c77-97f8-a2a2a4c1a8de",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    pm.expect(body).to.have.property('refresh_token');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('openid');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"    ",
											"    let jwt = parseJwt(body.id_token);",
											"    let origin = pm.environment.get(\"gateway_url\");",
											"    let domain = pm.environment.get(\"domain\");",
											"    ",
											"    tests['Contains an iss claim'] = jwt.iss === origin + '/' + domain + '/oidc';",
											"    tests['Contains a sub claim'] = jwt.sub !== undefined;",
											"    tests['Contains an aud claim'] = jwt.aud === 'my-client';",
											"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
											"    tests['Contains an iat claim'] = jwt.iat !== undefined;",
											"    tests['Contains a custom claim - user groups'] = jwt['custom-claim'].includes('ADMINISTRATORS');",
											"    ",
											"    pm.environment.set('memberId', jwt.sub);",
											"});",
											"",
											"function parseJwt (token) {",
											"    var base64Url = token.split('.')[1];",
											"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"    return JSON.parse(atob(base64));",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Template client",
					"item": [
						{
							"name": "Create client template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93be2779-8c26-4d44-be72-5f06340ad416",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var body = JSON.parse(responseBody);",
											"pm.environment.set('templateId', body.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": \"my-client-template\",\n  \"clientSecret\": \"my-client-secret-template\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/{{domain}}/clients",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"{{domain}}",
										"clients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure template - client_credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc379d90-b9b0-44d9-9f7f-833cb336acbd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"is server\", function () {",
											"    var body = JSON.parse(responseBody);",
											"    pm.expect(body).to.have.property('template');",
											"    pm.expect(body.template).to.eql(true);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}} "
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirectUris\": [],\n  \"authorizedGrantTypes\": [\"client_credentials\"],\n  \"responseTypes\": [],\n  \"applicationType\": \"server\",\n  \"scopes\": [\"openid\"],\n  \"template\": true\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{templateId}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"{{domain}}",
										"clients",
										"{{templateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Template - Can not generate token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba53569f-947c-4efb-98a0-138be93f81c1",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Template can not be used.\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('error');",
											"    pm.expect(body).to.have.property('error_description');",
											"    ",
											"    pm.expect(body.error).to.eql('invalid_client');",
											"    pm.expect(body.error_description).to.eql('Client authentication failed due to unknown or invalid client');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4ee11b83-ee5a-4c8c-a419-e448bab960bb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50LXRlbXBsYXRlOm15LWNsaWVudC1zZWNyZXQtdGVtcGxhdGU="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ceac42a3-166f-4749-9f91-1f61d65debd3",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}} "
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{templateId}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"{{domain}}",
										"clients",
										"{{templateId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Oauth2 Token Introspection - RFC 7662",
			"item": [
				{
					"name": "Invalid requests",
					"item": [
						{
							"name": "Introspect Token - No token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9522c49b-679e-44a7-b136-676a55a113e2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is not active\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('active');",
											"    pm.expect(body.active).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{introspectionEndpoint}}",
									"host": [
										"{{introspectionEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token - Invalid authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4516cdce-eef7-4d6e-b54c-df52d69b895d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid client\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client');",
											"    pm.expect(body.error_description).to.eql('Invalid client: unable to parse authentication method');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic invalid-auth"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{introspectionEndpoint}}",
									"host": [
										"{{introspectionEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - Nominal case 1",
					"item": [
						{
							"name": "Generate token - client 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66751014-ec9e-4839-9c74-7c0918eb3a63",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    pm.expect(body).to.have.property('refresh_token');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('scope1');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "scope1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token - client 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0866630c-c716-47ea-9868-44f3c1ff4805",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is token active\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('active');",
											"    pm.expect(body.active).to.eql(true);",
											"    pm.expect(body.scope).to.eql(\"scope1\");",
											"    pm.expect(body.client_id).to.eql(\"my-client\");",
											"    pm.expect(body.username).to.eql(\"user\");",
											"    pm.expect(body.token_type).to.eql(\"bearer\");",
											"    pm.expect(body).to.not.have.property('aud');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{introspectionEndpoint}}",
									"host": [
										"{{introspectionEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - Nominal case 2",
					"item": [
						{
							"name": "Generate token - client 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fafae984-0a37-4b70-acde-5a0fc1508182",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token without refresh token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('scope1');",
											"    pm.expect(body).to.not.have.property('refresh_token');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "scope1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token - client 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29b6da2f-d51b-4fc7-a580-0954f4b17b91",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is token active\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('active');",
											"    pm.expect(body.active).to.eql(true);",
											"    pm.expect(body.scope).to.eql(\"scope1\");",
											"    pm.expect(body.client_id).to.eql(\"my-client2\");",
											"    pm.expect(body.username).to.eql(\"user\");",
											"    pm.expect(body.token_type).to.eql(\"bearer\");",
											"    pm.expect(body).to.not.have.property('aud');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{introspectionEndpoint}}",
									"host": [
										"{{introspectionEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - Cross domains",
					"item": [
						{
							"name": "Create cross domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0cfd0481-26e5-4ce5-bf1c-635f421cedbe",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set('crossDomain', jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"cross\", \n\t\"description\": \"test cross domain authorization framework specifications\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create cross client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c55fd98-9898-43d1-b54c-3d3ae57d9e13",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var body = JSON.parse(responseBody);",
											"pm.environment.set('crossClient', body.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": \"my-cross-client\",\n  \"clientSecret\": \"my-cross-client-secret\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/{{crossDomain}}/clients",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"{{crossDomain}}",
										"clients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure cross client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1dc119b-38c5-46b3-8823-79ddbec3819c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirectUris\": [],\n  \"authorizedGrantTypes\": [\n    \"client_credentials\"\n  ],\n  \"scopes\": [],\n  \"accessTokenValiditySeconds\": 7200,\n  \"refreshTokenValiditySeconds\": 14400,\n  \"idTokenValiditySeconds\": 14400,\n  \"enabled\": true,\n  \"identities\": [],\n  \"enhanceScopesWithUserPermissions\": false\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/{{crossDomain}}/clients/{{crossClient}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"{{crossDomain}}",
										"clients",
										"{{crossClient}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start cross domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a36151f1-9e7d-4fd5-9a7a-cc1fe17efd60",
										"exec": [
											"// wait for sync process",
											"setTimeout(function(){}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"enabled\": true\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/{{crossDomain}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"{{crossDomain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "well-known/openid-configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23a405bf-fc58-4381-87aa-3f0171af56a6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check discovery endpoints\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"authorization_endpoint\");",
											"    pm.expect(body).to.have.property(\"token_endpoint\");",
											"    pm.expect(body).to.have.property(\"revocation_endpoint\");",
											"    pm.expect(body).to.have.property(\"userinfo_endpoint\");",
											"    pm.expect(body).to.have.property(\"registration_endpoint\");",
											"    pm.expect(body).to.have.property(\"end_session_endpoint\");",
											"    pm.expect(body).to.have.property(\"introspection_endpoint\");",
											"",
											"    pm.environment.set('crossDomainTokenEndpoint', body.token_endpoint);",
											"    pm.environment.set('crossDomainIntrospectionEndpoint', body.introspection_endpoint);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{crossDomain}}/oidc/.well-known/openid-configuration",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{crossDomain}}",
										"oidc",
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - client cross domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05608f9b-c19e-49cd-9227-65269cc792e6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "my-cross-client",
											"type": "string"
										},
										{
											"key": "password",
											"value": "my-cross-client-secret",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{crossDomainTokenEndpoint}}",
									"host": [
										"{{crossDomainTokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token - client cross domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbcd0e43-b85e-4e65-ba52-f0c551128b6b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is token active\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('active');",
											"    pm.expect(body.active).to.eql(true);",
											"    pm.expect(body.client_id).to.eql(\"my-cross-client\");",
											"    pm.expect(body.token_type).to.eql(\"bearer\");",
											"    pm.expect(body).to.not.have.property('aud');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "my-cross-client",
											"type": "string"
										},
										{
											"key": "password",
											"value": "my-cross-client-secret",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{crossDomainIntrospectionEndpoint}}",
									"host": [
										"{{crossDomainIntrospectionEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token - client cross - first domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c8f8239-8f46-4ad1-b656-b6a9f1afb4e9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is token active\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('active');",
											"    pm.expect(body.active).to.eql(true);",
											"    pm.expect(body.client_id).to.eql(\"my-cross-client\");",
											"    pm.expect(body.token_type).to.eql(\"bearer\");",
											"    pm.expect(body).to.not.have.property('aud');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{introspectionEndpoint}}",
									"host": [
										"{{introspectionEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get default certificate - cross domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfbfa5e7-f5ca-4c58-9ac6-a114d3021da3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set('crossCertificate', jsonData[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{management_url}}/management/domains/{{crossDomain}}/certificates",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"{{crossDomain}}",
										"certificates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure cross client - default certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a70937a0-bcfa-4a74-bafc-0a4dabb87ca7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"certificate\": \"{{crossCertificate}}\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/{{crossDomain}}/clients/{{crossClient}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"{{crossDomain}}",
										"clients",
										"{{crossClient}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - client cross domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "30ba9537-384a-4c0e-891e-b1630b4908c1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "my-cross-client",
											"type": "string"
										},
										{
											"key": "password",
											"value": "my-cross-client-secret",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{crossDomainTokenEndpoint}}",
									"host": [
										"{{crossDomainTokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token - client cross domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "674f9c23-ecad-49a3-90e4-08cbc4fbb188",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is token active\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('active');",
											"    pm.expect(body.active).to.eql(true);",
											"    pm.expect(body.client_id).to.eql(\"my-cross-client\");",
											"    pm.expect(body.token_type).to.eql(\"bearer\");",
											"    pm.expect(body).to.not.have.property('aud');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "my-cross-client",
											"type": "string"
										},
										{
											"key": "password",
											"value": "my-cross-client-secret",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{crossDomainIntrospectionEndpoint}}",
									"host": [
										"{{crossDomainIntrospectionEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token - client cross - first domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eded2246-bdca-4860-9d52-ba794e5e5293",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is token active\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('active');",
											"    pm.expect(body.active).to.eql(true);",
											"    pm.expect(body.client_id).to.eql(\"my-cross-client\");",
											"    pm.expect(body.token_type).to.eql(\"bearer\");",
											"    pm.expect(body).to.not.have.property('aud');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{introspectionEndpoint}}",
									"host": [
										"{{introspectionEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete cross domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9365204b-a0a5-4a88-a498-c4db318f7bbf",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{management_url}}/management/domains/{{crossDomain}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"{{crossDomain}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - Custom claims",
					"item": [
						{
							"name": "Configure client 1 - custom claims access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5551ed9a-efa8-41e4-9c76-72232ac7eed9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tokenCustomClaims\" : [\n  \t{\n  \t\t\"tokenType\": \"ACCESS_TOKEN\",\n  \t\t\"claimName\": \"custom-claim\",\n  \t\t\"claimValue\": \"test\"\n  \t}\n  ]\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/{{domain}}/clients/{{client1}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"{{domain}}",
										"clients",
										"{{client1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - client 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01943a83-3b4d-44d8-b3ce-3a8e1fa0c9c7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    pm.expect(body).to.have.property('refresh_token');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('openid');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token - client 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85ab2a48-594f-493d-9dc5-45c4f8a8e468",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is token active with custom claims\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('active');",
											"    pm.expect(body.active).to.eql(true);",
											"    pm.expect(body.client_id).to.eql(\"my-client\");",
											"    pm.expect(body.username).to.eql(\"user\");",
											"    pm.expect(body.token_type).to.eql(\"bearer\");",
											"    pm.expect(body).to.have.property('custom-claim');",
											"    pm.expect(body['custom-claim']).to.eql(\"test\");",
											"    pm.expect(body).to.not.have.property('aud');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{introspectionEndpoint}}",
									"host": [
										"{{introspectionEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6d915300-ed80-463e-8489-d8127f147e17",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c78895ca-b0df-4431-a13d-dc00b601421b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Oauth2 Token Revocation - RFC7009",
			"item": [
				{
					"name": "Invalid requests",
					"item": [
						{
							"name": "Revoke Token - Unknown token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a7ce21e-2861-4030-ba95-8acb369de53d",
										"exec": [
											"function parseJwt (token) {",
											"            var base64Url = token.split('.')[1];",
											"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"            return JSON.parse(atob(base64));",
											"        }",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d8b8bb5-9923-4b20-9271-4f01c0cac93b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "my-unknown-token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{revocationEndpoint}}",
									"host": [
										"{{revocationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke Token - No client authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b73352d-969a-4dba-8a87-e2e23363d958",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid client\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client');",
											"    pm.expect(body.error_description).to.eql('Invalid client: missing or unsupported authentication method');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "acc1a9b9-dd1c-4c14-b64c-f2ca675ab914",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "my-unknown-token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{revocationEndpoint}}",
									"host": [
										"{{revocationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke Token - Invalid client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e099cf2-9e55-4ccf-8899-60bb3d1962aa",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Invalid client\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_client');",
											"    pm.expect(body.error_description).to.eql('Client authentication failed due to unknown or invalid client');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d0d294a9-5b49-4a32-bbb0-ff630d681694",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktdW5rbm93bi1jbGllbnQ6bXktdW5rbm93bi1zZWNyZXQ=",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "my-unknown-token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{revocationEndpoint}}",
									"host": [
										"{{revocationEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - Nominal case",
					"item": [
						{
							"name": "Generate token - client 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23309bdd-623b-448f-bf57-634d1da23018",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    pm.expect(body).to.have.property('refresh_token');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('scope1');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "scope1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke Token - client 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73ff78cc-dab9-4d04-94f9-4fd8214c6b5e",
										"exec": [
											"function parseJwt (token) {",
											"            var base64Url = token.split('.')[1];",
											"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
											"            return JSON.parse(atob(base64));",
											"        }",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1e7b8c8b-1b27-4c06-8223-32321f60d08c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{revocationEndpoint}}",
									"host": [
										"{{revocationEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - Bad client",
					"item": [
						{
							"name": "Generate token - client 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b103e5b7-bc0e-46b9-81d2-5d8cff655848",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    pm.expect(body).to.have.property('refresh_token');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('scope1');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 10500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "scope1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke Token - client 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0d1904a-5afb-4176-a7b8-ea3a01ab0da2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid client\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_grant');",
											"    pm.expect(body.error_description).to.eql('Cannot revoke tokens issued to other clients.');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "66f847f0-6b42-455d-bffe-8e84cf851251",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{revocationEndpoint}}",
									"host": [
										"{{revocationEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "949416f9-a500-4127-bab1-845677befdb6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1fd45d6f-f481-40cf-9612-eaac5f0de858",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "de708d93-918c-4044-83df-dd9791f412dc",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{management_url}}/management/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}