{
	"info": {
		"_postman_id": "3e8971ea-d292-42f6-8466-eb7b3cc29223",
		"name": "Gravitee.io - AM - Openid Core - app version",
		"description": "Test Openid core specifications: https://openid.net/specs/openid-connect-core-1_0.html",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31343100"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{management_url}}/management/auth/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create oidc-core domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set('domain', jsonData.id);",
									"pm.environment.set('domainHrid', jsonData.hrid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"oidc-core-app-version\", \n\t\"description\": \"test openid connect core specifications\", \n\t\"dataPlaneId\": \"default\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch domain - allow localhost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR disabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowLocalhostRedirectUri).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowHttpSchemeRedirectUri).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowWildCardRedirectUri).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isOpenDynamicClientRegistrationEnabled).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oidc\": {\n    \"clientRegistrationSettings\": {\n      \"allowLocalhostRedirectUri\": true,\n      \"allowHttpSchemeRedirectUri\": true,\n      \"allowWildCardRedirectUri\": true,\n      \"isDynamicClientRegistrationEnabled\": false,\n      \"isOpenDynamicClientRegistrationEnabled\": false\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default identity provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"#CoMpL3X-P@SsW0Rd\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities/default-idp-{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities",
								"default-idp-{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create in-memory IDP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('idp.inmemory', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"domainWhitelist\" : [],\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"#CoMpL3X-P@SsW0Rd\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create simple scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"key\": \"scope1\",\n  \"name\": \"scope1\",\n  \"description\": \"scope1\", \n \"parameterized\": true \n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/scopes",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"scopes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create application 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('client1', body.id);",
									"pm.environment.set('clientId1', body.settings.oauth.clientId);",
									"pm.environment.set('clientSecret1', body.settings.oauth.clientSecret);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"my-client\",\n  \"type\": \"WEB\",\n  \"redirectUris\": [\"https://domain/callback\",\"https://another/callback\"]\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure application 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"settings\": {\n  \t\"oauth\": {\n  \t  \"redirectUris\": [\"https://domain/callback\",\"https://another/callback\"],\n  \t  \"grantTypes\": [\"authorization_code\", \"password\", \"implicit\", \"refresh_token\"],\n  \t  \"scopeSettings\": [{\"scope\" : \"openid\", \"defaultScope\": true}, {\"scope\" : \"scope1\", \"defaultScope\": true}] \t}\n  },\n  \"identityProviders\": [\n    { \"identity\": \"{{idp.inmemory}}\", \"priority\" : -1 }\n  ]\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{client1}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{client1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create application 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('client2', body.id);",
									"pm.environment.set('clientId2', body.settings.oauth.clientId);",
									"pm.environment.set('clientSecret2', body.settings.oauth.clientSecret);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"my-client2\",\n  \"type\": \"WEB\",\n  \"redirectUris\": [\"http://localhost:4000/\"]\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure application 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"settings\": {\n  \t\"oauth\": {\n  \t  \"redirectUris\": [\"http://localhost:4000/\"],\n  \t  \"grantTypes\": [\"authorization_code\", \"password\", \"implicit\"],\n  \t  \"scopeSettings\": [ { \"scope\": \"scope1\", \"defaultScope\": true } ]\n  \t}\n  },\n  \"identityProviders\": [\n    { \"identity\": \"{{idp.inmemory}}\", \"priority\" : -1 }\n  ]\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{client2}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{client2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body).to.have.property(\"authorization_endpoint\");",
									"    pm.expect(body).to.have.property(\"token_endpoint\");",
									"    pm.expect(body).to.have.property(\"revocation_endpoint\");",
									"    pm.expect(body).to.have.property(\"userinfo_endpoint\");",
									"    pm.expect(body).to.have.property(\"registration_endpoint\");",
									"    pm.expect(body).to.have.property(\"end_session_endpoint\");",
									"",
									"    pm.environment.set('authorizationEndpoint', body.authorization_endpoint);",
									"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
									"    pm.environment.set('userinfoEndpoint', body.userinfo_endpoint);",
									"    pm.environment.set('revocationEndpoint', body.revocation_endpoint);",
									"    pm.environment.set('registrationEndpoint', body.registration_endpoint);",
									"    pm.environment.set('logoutEndpoint', body.end_session_endpoint);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/{{domainHrid}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domainHrid}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "OIDC Core",
			"item": [
				{
					"name": "ID Token",
					"item": [
						{
							"name": "Case - No openid scope",
							"item": [
								{
									"name": "Generate token - client 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "            var atob = require('atob');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"    ",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.not.have.property('refresh_token');",
													"    pm.expect(body).to.not.have.property('id_token');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret2}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Case - Nominal Case",
							"item": [
								{
									"name": "Get Token - Simple request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "            var atob = require('atob');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"    ",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('refresh_token');",
													"    pm.expect(body).to.have.property('id_token');",
													"    ",
													"    let jwt = parseJwt(body.id_token);",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    pm.expect(jwt.iss).to.eql(origin + '/' + domain + '/oidc');",
													"    pm.expect(jwt.sub).not.eql(undefined);",
													"    pm.expect(jwt.aud).to.eql(pm.environment.get('clientId1'));",
													"    pm.expect(jwt.exp).not.eql(undefined);",
													"    pm.expect(jwt.iat).not.eql(undefined);",
													"    pm.expect(jwt.auth_time).not.eql(undefined);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret1}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "            var atob = require('atob');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret1}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{revocationEndpoint}}",
											"host": [
												"{{revocationEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Case - With max_age",
							"item": [
								{
									"name": "Get Token - Define max_age",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "            var atob = require('atob');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"    ",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('refresh_token');",
													"    pm.expect(body).to.have.property('id_token');",
													"    ",
													"    let jwt = parseJwt(body.id_token);",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    pm.expect(jwt.iss).to.eql(origin + '/' + domain + '/oidc');",
													"    pm.expect(jwt.sub).not.eql(undefined);",
													"    pm.expect(jwt.aud).to.eql(pm.environment.get('clientId1'));",
													"    pm.expect(jwt.exp).not.eql(undefined);",
													"    pm.expect(jwt.iat).not.eql(undefined);",
													"    pm.expect(jwt.auth_time).not.eql(undefined);",
                                                    "    pm.expect(jwt.exp - jwt.iat).to.greaterThan(10000)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret1}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												},
												{
													"key": "max_age",
													"value": "10000",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "            var atob = require('atob');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret1}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{revocationEndpoint}}",
											"host": [
												"{{revocationEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Case - Nonce",
							"item": [
								{
									"name": "Get token - Define nonce",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "            var atob = require('atob');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"    ",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('refresh_token');",
													"    pm.expect(body).to.have.property('id_token');",
													"    ",
													"    let jwt = parseJwt(body.id_token);",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    pm.expect(jwt.iss).to.eql(origin + '/' + domain + '/oidc');",
													"    pm.expect(jwt.sub).not.eql(undefined);",
													"    pm.expect(jwt.aud).to.eql(pm.environment.get('clientId1'));",
													"    pm.expect(jwt.exp).not.eql(undefined);",
                                                    "    pm.expect(jwt.iat).not.eql(undefined);",
                                                    "    pm.expect(jwt.auth_time).not.eql(undefined);",
                                                    "    pm.expect(jwt.nonce).to.eql('n-0S6_WzA2Mj');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret1}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "            var atob = require('atob');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret1}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{revocationEndpoint}}",
											"host": [
												"{{revocationEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Case - Nonce - Multiple get token requests",
							"item": [
								{
									"name": "Get token - Define nonce 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "            var atob = require('atob');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    ",
													"    pm.environment.set('nonce1.access_token', body.access_token);",
													"    ",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('refresh_token');",
													"    pm.expect(body).to.have.property('id_token');",
													"    ",
													"    let jwt = parseJwt(body.id_token);",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    pm.expect(jwt.iss).to.eql(origin + '/' + domain + '/oidc');",
													"    pm.expect(jwt.sub).not.eql(undefined);",
													"    pm.expect(jwt.aud).to.eql(pm.environment.get('clientId1'));",
													"    pm.expect(jwt.exp).not.eql(undefined);",
													"    pm.expect(jwt.iat).not.eql(undefined);",
													"    pm.expect(jwt.auth_time).not.eql(undefined);",
                                                    "    pm.expect(jwt.nonce).to.eql('nonce1');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret1}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												},
												{
													"key": "nonce",
													"value": "nonce1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get token - Define nonce 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "            var atob = require('atob');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    ",
													"    pm.environment.set('nonce2.access_token', body.access_token);",
													"    ",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('refresh_token');",
													"    pm.expect(body).to.have.property('id_token');",
													"    ",
													"    let jwt = parseJwt(body.id_token);",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    pm.expect(jwt.iss).to.eql(origin + '/' + domain + '/oidc');",
													"    pm.expect(jwt.sub).not.eql(undefined);",
													"    pm.expect(jwt.aud).to.eql(pm.environment.get('clientId1'));",
													"    pm.expect(jwt.exp).not.eql(undefined);",
													"    pm.expect(jwt.iat).not.eql(undefined);",
													"    pm.expect(jwt.auth_time).not.eql(undefined);",
                                                    "    pm.expect(jwt.nonce).to.eql('nonce2')",
													"    ",
													"    // Access token is not the same as the previous request with nonce 1",
                                                    "    pm.expect(pm.environment.get('nonce1.access_token')).not.eql(pm.environment.get('nonce2.access_token'))",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret1}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												},
												{
													"key": "nonce",
													"value": "nonce2",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke Token 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "            var atob = require('atob');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret1}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{nonce1.access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{revocationEndpoint}}",
											"host": [
												"{{revocationEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke Token 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "            var atob = require('atob');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret1}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{nonce2.access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{revocationEndpoint}}",
											"host": [
												"{{revocationEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "UserInfo",
					"item": [
						{
							"name": "Invalid requests",
							"item": [
								{
									"name": "No authorization header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"No access_token\", function () {",
													"    pm.response.to.have.header('WWW-Authenticate');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Basic authorization header ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"No bearer authorization header\", function () {",
													"    pm.response.to.have.header('WWW-Authenticate');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic a basic-header-value",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid access_token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Invalid bearer\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_token');",
													"    pm.expect(body.error_description).to.eql('The access token is invalid');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer a bearer-header-value"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Case - Nominal case",
							"item": [
								{
									"name": "Generate token - application 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "            var atob = require('atob');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"    ",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('refresh_token');",
													"    pm.expect(body).to.have.property('id_token');",
													"    ",
													"    let jwt = parseJwt(body.id_token);",
													"    ",
													"    pm.expect(jwt.aud).to.eql(pm.environment.get('clientId1'));",
													"    pm.expect(jwt.sub).not.eql(undefined);",
													"    pm.environment.set('id_token.sub', jwt.sub);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret1}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserInfo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "            var atob = require('atob');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('sub');",
													"",
													"    pm.expect(body.sub).to.eql(pm.environment.get('id_token.sub'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserInfo - query param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "            var atob = require('atob');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('sub');",
													"",
													"    pm.expect(body.sub).to.eql(pm.environment.get('id_token.sub'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{userinfoEndpoint}}?access_token={{access_token}}",
											"host": [
												"{{userinfoEndpoint}}"
											],
											"query": [
												{
													"key": "access_token",
													"value": "{{access_token}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Post UserInfo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "            var atob = require('atob');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('sub');",
													"",
													"    pm.expect(body.sub).to.eql(pm.environment.get('id_token.sub'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "access_token",
													"value": "{{access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "            var atob = require('atob');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret1}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{revocationEndpoint}}",
											"host": [
												"{{revocationEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Case - No openid scope",
							"item": [
								{
									"name": "Generate token - application 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "            var atob = require('atob');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"    ",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.not.have.property('refresh_token');",
													"    pm.expect(body).to.not.have.property('id_token');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret2}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserInfo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Invalid scope\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('insufficient_scope');",
													"    pm.expect(body.error_description).to.eql('Invalid access token scopes. The access token should have at least \\'openid\\' scope');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post UserInfo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Invalid scope\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('insufficient_scope');",
													"    pm.expect(body.error_description).to.eql('Invalid access token scopes. The access token should have at least \\'openid\\' scope');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Consent scope1",
					"item": [
						{
							"name": "Consent scope1 - Initiate the flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"});",
											"",
											"pm.test(\"Should be a redirection to login page\", function() {",
											"    var location = pm.response.headers.get('Location');",
											"    let domain = pm.environment.get(\"domainHrid\");",
											"    ",
											"    pm.expect(location).to.include(pm.environment.get('gateway_url') + '/' + domain + '/login');",
                                                    "    pm.expect(location).to.include('client_id=' + pm.environment.get('clientId2'));",
											"    ",
											"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorizationEndpoint}}?response_type=token&client_id={{clientId2}}&redirect_uri=http://localhost:4000/&nonce=n-0S6_WzA2Mj",
									"host": [
										"{{authorizationEndpoint}}"
									],
									"query": [
										{
											"key": "response_type",
											"value": "token"
										},
										{
											"key": "client_id",
											"value": "{{clientId2}}"
										},
										{
											"key": "redirect_uri",
											"value": "http://localhost:4000/"
										},
										{
											"key": "nonce",
											"value": "n-0S6_WzA2Mj"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Redirect to login form",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should be ok\", function () {",
											"    pm.response.to.be.ok;",
											"    ",
											"    // Extract the XSRF token to send it with the next request.",
											"    var cheerio = require('cheerio');",
									        "    var responseHTML = cheerio.load(pm.response.text());",
											"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
											"    const action = responseHTML('form').attr('action');",
											"    pm.environment.set('xsrf', xsrfToken);",
											"    pm.environment.set('action', action);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{redirection}}",
									"host": [
										"{{redirection}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Post login form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"",
											"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "X-XSRF-TOKEN",
											"value": "{{xsrf}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{clientId2}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{action}}",
									"host": [
										"{{action}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Follow redirection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    ",
											"    pm.response.to.be.header('Content-Length', '0');",
											"    pm.response.to.have.header('Location');",
											"    pm.response.to.have.header('Set-Cookie');",
											"});",
											"",
											"pm.test(\"Should be redirected to consent page\", function() {",
											"    var location = pm.response.headers.get('Location');",
											"    let domain = pm.environment.get(\"domainHrid\");",
											"    ",
											"    pm.expect(location).to.include(pm.environment.get('gateway_url') + '/' + domain + '/oauth/consent');",
											"    ",
											"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{redirection}}",
									"host": [
										"{{redirection}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Redirect to confirm access page",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should be ok\", function () {",
											"    pm.response.to.be.ok;",
											"    ",
											"    // Extract the XSRF token to send it with the next request.",
											"    var cheerio = require('cheerio');",
									        "    var responseHTML = cheerio.load(pm.response.text());",
											"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
											"    const action = responseHTML('form').attr('action');",
											"    pm.environment.set('xsrf', xsrfToken);",
											"    pm.environment.set('action', action);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{redirection}}",
									"host": [
										"{{redirection}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Post authorize form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"    ",
											"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "X-XSRF-TOKEN",
											"value": "{{xsrf}}",
											"type": "text"
										},
										{
											"key": "scope.scope1",
											"value": "true",
											"type": "text"
										},
										{
											"key": "user_oauth_approval",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{action}}",
									"host": [
										"{{action}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Follow redirection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"});",
											"",
											"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
											"    var location = pm.response.headers.get('Location');",
											"    pm.expect(location).to.include('http://localhost:4000/#');",
											"    ",
											"    pm.expect(location).to.include('#access_token=');",
											"    pm.expect(location).to.include('token_type=bearer');",
											"    pm.expect(location).to.include('expires_in=');",
											"    pm.expect(location).to.include('scope=scope1');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{redirection}}",
									"host": [
										"{{redirection}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Logout user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"    ",
											"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{logoutEndpoint}}",
									"host": [
										"{{logoutEndpoint}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Consent parameterized scope1",
					"item": [
						{
							"name": "Consent scope1:param - Initiate the flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"});",
											"",
											"pm.test(\"Should be a redirection to login page\", function() {",
											"    var location = pm.response.headers.get('Location');",
											"    let domain = pm.environment.get(\"domainHrid\");",
											"    ",
											"    pm.expect(location).to.include(pm.environment.get('gateway_url') + '/' + domain + '/login');",
                                                    "    pm.expect(location).to.include('client_id=' + pm.environment.get('clientId2'));",
											"    ",
											"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorizationEndpoint}}?response_type=token&client_id={{clientId2}}&redirect_uri=http://localhost:4000/&nonce=n-0S6_WzA2Mj&scope=scope1:param",
									"host": [
										"{{authorizationEndpoint}}"
									],
									"query": [
										{
											"key": "response_type",
											"value": "token"
										},
										{
											"key": "client_id",
											"value": "{{clientId2}}"
										},
										{
											"key": "redirect_uri",
											"value": "http://localhost:4000/"
										},
										{
											"key": "nonce",
											"value": "n-0S6_WzA2Mj"
										},
										{
											"key": "scope",
											"value": "scope1:param"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Redirect to login form",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should be ok\", function () {",
											"    pm.response.to.be.ok;",
											"    ",
											"    // Extract the XSRF token to send it with the next request.",
											"    var cheerio = require('cheerio');",
									        "    var responseHTML = cheerio.load(pm.response.text());",
											"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
											"    const action = responseHTML('form').attr('action');",
											"    pm.environment.set('xsrf', xsrfToken);",
											"    pm.environment.set('action', action);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{redirection}}",
									"host": [
										"{{redirection}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Post login form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"",
											"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "X-XSRF-TOKEN",
											"value": "{{xsrf}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{clientId2}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "#CoMpL3X-P@SsW0Rd",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{action}}",
									"host": [
										"{{action}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Follow redirection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    ",
											"    pm.response.to.be.header('Content-Length', '0');",
											"    pm.response.to.have.header('Location');",
											"    pm.response.to.have.header('Set-Cookie');",
											"});",
											"",
											"pm.test(\"Should be redirected to consent page\", function() {",
											"    var location = pm.response.headers.get('Location');",
											"    let domain = pm.environment.get(\"domainHrid\");",
											"    ",
											"    pm.expect(location).to.include(pm.environment.get('gateway_url') + '/' + domain + '/oauth/consent');",
											"    ",
											"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{redirection}}",
									"host": [
										"{{redirection}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Redirect to confirm access page",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should be ok\", function () {",
											"    pm.response.to.be.ok;",
											"    ",
											"    // Extract the XSRF token to send it with the next request.",
											"    var cheerio = require('cheerio');",
									        "    var responseHTML = cheerio.load(pm.response.text());",
											"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
											"    const action = responseHTML('form').attr('action');",
											"    pm.environment.set('xsrf', xsrfToken);",
											"    pm.environment.set('action', action);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{redirection}}",
									"host": [
										"{{redirection}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Post authorize form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"    ",
											"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "X-XSRF-TOKEN",
											"value": "{{xsrf}}",
											"type": "text"
										},
										{
											"key": "scope.scope1:param",
											"value": "true",
											"type": "text"
										},
										{
											"key": "user_oauth_approval",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{action}}",
									"host": [
										"{{action}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Follow redirection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"});",
											"",
											"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
											"    var location = pm.response.headers.get('Location');",
											"    pm.expect(location).to.include('http://localhost:4000/#');",
											"    ",
											"    pm.expect(location).to.include('#access_token=');",
											"    pm.expect(location).to.include('token_type=bearer');",
											"    pm.expect(location).to.include('expires_in=');",
											"    pm.expect(location).to.include('scope=scope1:param');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{redirection}}",
									"host": [
										"{{redirection}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Logout user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"    ",
											"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{logoutEndpoint}}",
									"host": [
										"{{logoutEndpoint}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Implicit Flow",
					"item": [
						{
							"name": "Authorize - Invalid requests",
							"item": [
								{
									"name": "Missing client_id parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    pm.expect(location).to.include(pm.environment.get('gateway_url') + '/' + domain + '/oauth/error');",
													"    pm.expect(location).to.include('?error=invalid_request');",
													"    pm.expect(location).to.include('error_description=Missing+parameter%3A+client_id');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token token",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token token"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing nonce parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    pm.expect(location).to.include('http://localhost:4000');",
													"    pm.expect(location).to.include('error=invalid_request');",
													"    pm.expect(location).to.include('error_description=Missing+parameter%3A+nonce+is+required+for+Implicit+and+Hybrid+Flow');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token token&client_id={{clientId2}}&redirect_uri=http://localhost:4000/",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token token"
												},
												{
													"key": "client_id",
													"value": "{{clientId2}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing redirect_uri parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    pm.expect(location).to.include(pm.environment.get('gateway_url') + '/' + domain + '/oauth/error');",
													"    pm.expect(location).to.include('error=invalid_request');",
													"    pm.expect(location).to.include('a+redirect_uri+must+be+supplied');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token token&client_id={{clientId1}}&nonce=n-0S6_WzA2Mj",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token token"
												},
												{
													"key": "client_id",
													"value": "{{clientId1}}"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Case - Get id_token token",
							"item": [
								{
									"name": "Case id_token token - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    pm.expect(location).to.include(pm.environment.get('gateway_url') + '/' + domain + '/login');",
                                                    "    pm.expect(location).to.include('client_id=' + pm.environment.get('clientId2'));",
													"    ",
													"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token token&client_id={{clientId2}}&redirect_uri=http://localhost:4000/&nonce=n-0S6_WzA2Mj",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token token"
												},
												{
													"key": "client_id",
													"value": "{{clientId2}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var cheerio = require('cheerio');",
									                "    var responseHTML = cheerio.load(pm.response.text());",
													"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
													"    const action = responseHTML('form').attr('action');",
													"    pm.environment.set('xsrf', xsrfToken);",
													"    pm.environment.set('action', action);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{clientId2}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{action}}",
											"host": [
												"{{action}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "    var atob = require('atob');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with implicit\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    pm.expect(location).to.include('http://localhost:4000/#');",
													"    ",
													"    pm.expect(location).to.include('#access_token=');",
													"    pm.expect(location).to.include('token_type=bearer');",
													"    pm.expect(location).to.include('expires_in=');",
													"    pm.expect(location).to.include('scope=scope1');",
													"    pm.expect(location).to.include('id_token=');",
													"    ",
													"    let id_token = location.substring(location.indexOf('id_token=')+9);",
													"    let jwt = parseJwt(id_token);",
													"    console.log(jwt);",
													"    pm.expect(jwt.nonce).to.eql('n-0S6_WzA2Mj');",
													"    ",
													"    // TODO: find a way to check the value: https://openid.net/specs/openid-connect-core-1_0.html#ImplicitIDToken",
													"    pm.expect(jwt.at_hash).not.eql(undefined);",
													"    pm.expect(jwt.s_hash).to.eql(undefined);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Case - Get id_token",
							"item": [
								{
									"name": "Case id_token - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    pm.expect(location).to.include(pm.environment.get('gateway_url') + '/' + domain + '/login');",
                                                    "    pm.expect(location).to.include('client_id=' + pm.environment.get('clientId2'));",
													"    ",
													"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token&client_id={{clientId2}}&redirect_uri=http://localhost:4000/&nonce=n-0S6_WzA2Mj",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token"
												},
												{
													"key": "client_id",
													"value": "{{clientId2}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var cheerio = require('cheerio');",
									                "    var responseHTML = cheerio.load(pm.response.text());",
													"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
													"    const action = responseHTML('form').attr('action');",
													"    pm.environment.set('xsrf', xsrfToken);",
													"    pm.environment.set('action', action);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{clientId2}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{action}}",
											"host": [
												"{{action}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "    var atob = require('atob');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with implicit\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    pm.expect(location).to.include('http://localhost:4000/#');",
													"    ",
													"    pm.expect(location).not.include('access_token=');",
													"    pm.expect(location).not.include('token_type=bearer');",
													"    pm.expect(location).not.include('expires_in=');",
													"    pm.expect(location).not.include('scope=scope1');",
													"    pm.expect(location).to.include('#id_token=');",
													"    ",
													"    let id_token = location.substring(location.indexOf('id_token=')+9);",
													"    let jwt = parseJwt(id_token);",
													"    ",
													"    pm.expect(jwt.nonce).to.eql('n-0S6_WzA2Mj');",
													"    pm.expect(jwt.at_hash).to.eql(undefined);",
													"    pm.expect(jwt.s_hash).to.eql(undefined);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Case - Get id_token - twice",
							"item": [
								{
									"name": "Case id_token - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    pm.expect(location).to.include(pm.environment.get('gateway_url') + '/' + domain + '/login');",
                                                    "    pm.expect(location).to.include('client_id=' + pm.environment.get('clientId2'));",
													"    ",
													"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token&client_id={{clientId2}}&redirect_uri=http://localhost:4000/&nonce=n-0S6_WzA2Mj",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token"
												},
												{
													"key": "client_id",
													"value": "{{clientId2}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var cheerio = require('cheerio');",
									                "    var responseHTML = cheerio.load(pm.response.text());",
													"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
													"    const action = responseHTML('form').attr('action');",
													"    pm.environment.set('xsrf', xsrfToken);",
													"    pm.environment.set('action', action);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{clientId2}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{action}}",
											"host": [
												"{{action}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "    var atob = require('atob');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with id_token\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    pm.expect(location).to.include('http://localhost:4000/#');",
													"    ",
													"    pm.expect(location).not.include('access_token=');",
													"    pm.expect(location).not.include('token_type=bearer');",
													"    pm.expect(location).not.include('expires_in=');",
													"    pm.expect(location).not.include('scope=scope1');",
													"    pm.expect(location).to.include('#id_token=');",
													"    ",
													"    let id_token = location.substring(location.indexOf('id_token=')+9);",
													"    let jwt = parseJwt(id_token);",
													"    ",
													"    pm.expect(jwt.nonce).to.eql('n-0S6_WzA2Mj');",
													"    pm.expect(jwt.at_hash).to.eql(undefined);",
													"    ",
													"    // set values in environment for the test : Verifies that the same authentication was used twice in the flow",
													"    pm.environment.set('storedSub', jwt.sub);",
													"    pm.environment.set('storedAuthtime', jwt.auth_time);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Case id_token - second time",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "    var atob = require('atob');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with id_token (second time)\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    pm.expect(location).to.include('http://localhost:4000/#');",
													"    ",
													"    pm.expect(location).not.include('access_token=');",
													"    pm.expect(location).not.include('token_type=bearer');",
													"    pm.expect(location).not.include('expires_in=');",
													"    pm.expect(location).not.include('scope=scope1');",
													"    pm.expect(location).to.include('#id_token=');",
													"    ",
													"    let id_token = location.substring(location.indexOf('id_token=')+9);",
													"    let jwt = parseJwt(id_token);",
													"    ",
													"    pm.expect(jwt.nonce).to.eql('n-0S6_WzA2Mh');",
													"    pm.expect(jwt.at_hash).to.eql(undefined);",
													"    ",
													"    // Verifies that the same authentication was used twice in the flow",
                                                    "    pm.test(\"Verifies that the same authentication was used twice in the flow (same sub)\", function() {",
                                                    "       pm.expect(jwt.sub).to.equal(pm.environment.get('storedSub'));",
                                                    "    });",

                                                    "    pm.test(\"Verifies that the same authentication was used twice in the flow (same auth_time)\", function() {",
                                                    "       pm.expect(jwt.auth_time).to.equal(pm.environment.get('storedAuthtime'));",
                                                    "    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token&client_id={{clientId2}}&redirect_uri=http://localhost:4000/&nonce=n-0S6_WzA2Mh",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token"
												},
												{
													"key": "client_id",
													"value": "{{clientId2}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mh"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Case - Get id_token - With state",
							"item": [
								{
									"name": "Case id_token state - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    pm.expect(location).to.include(pm.environment.get('gateway_url') + '/' + domain + '/login');",
                                                    "    pm.expect(location).to.include('client_id=' + pm.environment.get('clientId2'));",
													"    ",
													"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token&client_id={{clientId2}}&redirect_uri=http://localhost:4000/&nonce=n-0S6_WzA2Mj&state=af0ifjsldkj",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token"
												},
												{
													"key": "client_id",
													"value": "{{clientId2}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj"
												},
												{
													"key": "state",
													"value": "af0ifjsldkj"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var cheerio = require('cheerio');",
									                "    var responseHTML = cheerio.load(pm.response.text());",
													"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
													"    const action = responseHTML('form').attr('action');",
													"    pm.environment.set('xsrf', xsrfToken);",
													"    pm.environment.set('action', action);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{clientId2}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{action}}",
											"host": [
												"{{action}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "    var atob = require('atob');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with implicit\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    pm.expect(location).to.include('http://localhost:4000/#');",
													"    ",
													"    pm.expect(location).not.include('access_token=');",
													"    pm.expect(location).not.include('token_type=bearer');",
													"    pm.expect(location).not.include('expires_in=');",
													"    pm.expect(location).not.include('scope=scope1');",
													"    pm.expect(location).to.include('#id_token=');",
													"    pm.expect(location).to.include('state=af0ifjsldkj');",
													"    ",
													"    let id_token = location.substring(location.indexOf('id_token=')+9);",
													"    let jwt = parseJwt(id_token);",
													"    ",
													"    pm.expect(jwt.nonce).to.eql('n-0S6_WzA2Mj');",
													"    pm.expect(jwt.at_hash).to.eql(undefined);",
													"    pm.expect(jwt.s_hash).to.eql('bOhtX8F73IMjSPeVAqxyTQ');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Case - Get id_token token - With state",
							"item": [
								{
									"name": "Case id_token token state - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "    var atob = require('atob');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    pm.expect(location).to.include(pm.environment.get('gateway_url') + '/' + domain + '/login');",
                                                    "    pm.expect(location).to.include('client_id=' + pm.environment.get('clientId2'));",
													"    ",
													"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token token&client_id={{clientId2}}&redirect_uri=http://localhost:4000/&nonce=n-0S6_WzA2Mj&state=af0ifjsldkj",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token token"
												},
												{
													"key": "client_id",
													"value": "{{clientId2}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj"
												},
												{
													"key": "state",
													"value": "af0ifjsldkj"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var cheerio = require('cheerio');",
									                "    var responseHTML = cheerio.load(pm.response.text());",
													"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
													"    const action = responseHTML('form').attr('action');",
													"    pm.environment.set('xsrf', xsrfToken);",
													"    pm.environment.set('action', action);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{clientId2}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{action}}",
											"host": [
												"{{action}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
                                                    "    var atob = require('atob');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with implicit\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    pm.expect(location).to.include('http://localhost:4000/#');",
													"    ",
													"    pm.expect(location).to.include('#access_token=');",
													"    pm.expect(location).to.include('token_type=bearer');",
													"    pm.expect(location).to.include('expires_in=');",
													"    pm.expect(location).to.include('scope=scope1');",
													"    pm.expect(location).to.include('state=af0ifjsldkj');",
													"    pm.expect(location).to.include('id_token=');",
													"    ",
													"    let id_token = location.substring(location.indexOf('id_token=')+9);",
													"    let jwt = parseJwt(id_token);",
													"    ",
													"    pm.expect(jwt.nonce).to.eql('n-0S6_WzA2Mj');",
													"    pm.expect(jwt.at_hash).not.eql(undefined);",
													"    pm.expect(jwt.s_hash).to.eql('bOhtX8F73IMjSPeVAqxyTQ');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Authorization Code Flow",
					"item": [
						{
							"name": "Authorize - Invalid requests",
							"item": [
								{
									"name": "Missing client_id parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    pm.expect(location).to.include('?error=invalid_request');",
													"    pm.expect(location).to.include('error_description=Missing+parameter%3A+client_id');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing redirect_uri parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    pm.expect(location).to.include(pm.environment.get('gateway_url') + '/' + domain + '/oauth/error');",
													"    pm.expect(location).to.include('error=invalid_request');",
													"    pm.expect(location).to.include('a+redirect_uri+must+be+supplied');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{clientId1}}",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "{{clientId1}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Authorize - id_token_hint",
							"item": [
								{
									"name": "Configure application - enable silent re-auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"settings\": {\n    \"oauth\": {\n        \"silentReAuthentication\": true\n    }, \n  \t\"advanced\": {\n      \"skipConsent\": true\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{client1}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"organizations",
												"{{defaultOrganizationId}}",
												"environments",
												"{{defaultEnvironmentId}}",
												"domains",
												"{{domain}}",
												"applications",
												"{{client1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate id token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');    ",
													"    pm.environment.set('id_token', body.id_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret1}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get authorization code - invalid id token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to app with login_required\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    pm.expect(location).to.include('https://domain/callback?error=login_required&error_description=Login+required');",
													"    ",
													"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{clientId1}}&redirect_uri=https://domain/callback&prompt=none&id_token_hint=invalidToken",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "{{clientId1}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://domain/callback"
												},
												{
													"key": "prompt",
													"value": "none"
												},
												{
													"key": "id_token_hint",
													"value": "invalidToken"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get authorization code - valid id token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to app with authorization code\", function() {",
													"    var location = pm.response.headers.get('Location');",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    pm.expect(location).to.include('https://domain/callback?code=');",
													"    ",
													"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{clientId1}}&redirect_uri=https://domain/callback&prompt=none&id_token_hint={{id_token}}",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "{{clientId1}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://domain/callback"
												},
												{
													"key": "prompt",
													"value": "none"
												},
												{
													"key": "id_token_hint",
													"value": "{{id_token}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"organizations",
						"{{defaultOrganizationId}}",
						"environments",
						"{{defaultEnvironmentId}}",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		}
	]
}
