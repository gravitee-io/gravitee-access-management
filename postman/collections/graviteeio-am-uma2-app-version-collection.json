{
	"info": {
		"_postman_id": "c0f86198-e034-434d-a3f1-ee329d72f0ec",
		"name": "Gravitee.io - AM - UMA 2.0 - app version",
		"description": "Test openid connect discovery specifications: https://openid.net/specs/openid-connect-discovery-1_0.html",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cfdbb2cc-b3a5-4f6b-af5f-afe2b33e0b50",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/auth/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create uma 2.0  domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cdcd1ac-c5fa-41a2-a658-13905db7845e",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set('domain', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"uma2_postman\", \n\t\"description\": \"test user-managed access specifications\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default identity provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8eded863-ec42-4cd3-ab64-9c2fa454afd8",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities/default-idp-{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities",
								"default-idp-{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create in-memory IDP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18ab8aac-9aa2-4bdb-91ad-d80b3fb1bc85",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('idp.inmemory', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"Alice\\\",\\\"lastname\\\":\\\"Doe\\\",\\\"username\\\":\\\"alice\\\",\\\"password\\\":\\\"password\\\"},{\\\"firstname\\\":\\\"Bob\\\",\\\"lastname\\\":\\\"Doe\\\",\\\"username\\\":\\\"bob\\\",\\\"email\\\":\\\"bob.doe@mail.com\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create RS application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f052c5b-98ab-4456-bde7-89e54a1c05aa",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Saving credentials\", function () {",
									"    let body = JSON.parse(responseBody);",
									"",
									"    let client_id = body.settings.oauth.clientId;",
									"    let secret = body.settings.oauth.clientSecret;",
									"    let authentication = btoa(client_id + \":\" + secret);  ",
									"",
									"    //Save fields",
									"    pm.environment.set('rs_app', body.id);",
									"    pm.environment.set('rs_client_id', client_id);",
									"    pm.environment.set('rs_client_secret', secret);",
									"    pm.environment.set('rs_client_authentication', authentication);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"RS-client\",\n  \"type\": \"RESOURCE_SERVER\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure RS application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64d8e544-8c23-442d-97ab-7a077c7607ef",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check grant\", function () {",
									"    let body = JSON.parse(responseBody);",
									"    pm.expect(body.settings.oauth.grantTypes).to.eql([\"password\",\"client_credentials\"]);",
									"    pm.expect(body.settings.oauth.scopes).to.eql([\"uma_protection\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"identities\": [\n    \"{{idp.inmemory}}\"\n  ],\n  \"settings\": {\n  \t\"oauth\": {\n  \t\t\"scopes\": [\"uma_protection\"],\n  \t\t\"redirectUris\": [],\n\t\t\"grantTypes\": [\"password\"]\n\t}\n  }\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{rs_app}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{rs_app}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create RqP application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70a231e3-c560-48f9-a358-910a1a3978f6",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Saving credentials\", function () {",
									"    let body = JSON.parse(responseBody);",
									"",
									"    let client_id = body.settings.oauth.clientId;",
									"    let secret = body.settings.oauth.clientSecret;",
									"    let authentication = btoa(client_id + \":\" + secret);  ",
									"",
									"    //Save fields",
									"    pm.environment.set('rqp_app', body.id);",
									"    pm.environment.set('rqp_client_id', client_id);",
									"    pm.environment.set('rqp_client_secret', secret);",
									"    pm.environment.set('rqp_client_authentication', authentication);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"RS-client\",\n  \"type\": \"WEB\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure RqP application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35127d2b-1370-4cbf-9dfb-1a330dcf71aa",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check grant\", function () {",
									"    let body = JSON.parse(responseBody);",
									"    pm.expect(body.settings.oauth.grantTypes).to.have.members([\"password\",\"refresh_token\",\"urn:ietf:params:oauth:grant-type:uma-ticket\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"identities\": [\n    \"{{idp.inmemory}}\"\n  ],\n  \"settings\": {\n  \t\"oauth\": {\n  \t\t\"redirectUris\": [],\n\t\t\"grantTypes\": [\"password\",\"refresh_token\",\"urn:ietf:params:oauth:grant-type:uma-ticket\"],\n\t\t\"scopes\": [\"openid\",\"profile\",\"email\",\"phone\",\"address\"]\n\t}\n  }\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{rqp_app}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{rqp_app}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abb56ca7-4ec2-4948-adea-95154edf1698",
								"exec": [
									"// wait for sync process",
									"setTimeout(function(){}, 5000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "UMA_2.0",
			"item": [
				{
					"name": "Case - UMA disabled",
					"item": [
						{
							"name": "Discovery",
							"item": [
								{
									"name": "Gravitee AM .well-known",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3aca9ea8-669f-444b-b4f7-a227a802a5cd",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check discovery endpoints\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"openid-configuration\");",
													"    pm.expect(body).to.not.have.property(\"uma2-configuration\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/.well-known",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												".well-known"
											]
										}
									},
									"response": []
								},
								{
									"name": "Gravitee UMA .well-known disabled",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91f47ca5-0a26-41ed-ab63-5b43bd54d09b",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/uma/.well-known/uma2-configuration",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"uma",
												".well-known",
												"uma2-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Token Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70ddef0a-6143-4da1-83ff-1a114227ec05",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check uma 2.0 discovery endpoint\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"",
													"    //Oauth 2.0 endpoints",
													"    pm.expect(body).to.have.property(\"token_endpoint\");",
													"    pm.environment.set('oidcTokenEndpoint', body.token_endpoint);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/oidc/.well-known/openid-configuration",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"oidc",
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "Token endpoint - Unsupported UMA grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d3f1ef1-1e0f-42ab-a743-8590eeb6a302",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Grant type must not be supported when UMA is disabled",
													"pm.test(\"Check grant type is not supported\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"    ",
													"    pm.expect(body.error).to.eql(\"unsupported_grant_type\");",
													"    pm.expect(body.error_description).to.eql(\"Unsupported grant type: urn:ietf:params:oauth:grant-type:uma-ticket\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic {{rs_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "must_fail_before",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{oidcTokenEndpoint}}",
											"host": [
												"{{oidcTokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Enable UMA 2.0",
					"item": [
						{
							"name": "Enable UMA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3876f74-cba3-490a-9e9d-2a123174c36f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"UMA enabled for domain\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.uma.enabled).to.eql(true);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"uma\": {\n    \"enabled\": true\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gravitee AM .well-known",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6b6f7e0-2cc5-4757-898c-062f96b28246",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check uma is enabled\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    let body = pm.response.json();",
											"    let expected_endpoint = pm.environment.get('gateway_url') + \"/\" + pm.environment.get('domain') + \"/uma/.well-known/uma2-configuration\";",
											"",
											"    pm.expect(body).to.have.property(\"openid-configuration\");",
											"    pm.expect(body).to.have.property(\"uma2-configuration\");",
											"",
											"    pm.expect(body['uma2-configuration']).to.eql(expected_endpoint);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/.well-known",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										".well-known"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gravitee UMA .well-known enabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d914b3d-4eda-49c3-8eee-ca1fd56b4814",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check uma 2.0 discovery endpoint\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"",
											"    //Specific uma 2.0 endpoints",
											"    pm.expect(body).to.have.property(\"resource_registration_endpoint\");",
											"    pm.expect(body).to.have.property(\"permission_endpoint\");",
											"    pm.expect(body).to.have.property(\"uma_profiles_supported\");",
											"    pm.expect(body).to.have.property(\"claims_interaction_endpoint\");",
											"    pm.environment.set('resource_registration_endpoint', body.resource_registration_endpoint);",
											"    pm.environment.set('permission_endpoint', body.permission_endpoint);",
											"",
											"    //Check UMA Grant is available",
											"    pm.expect(body.grant_types_supported).to.include('urn:ietf:params:oauth:grant-type:uma-ticket');",
											"",
											"    //Oauth 2.0 endpoints",
											"    pm.expect(body).to.have.property(\"token_endpoint\");",
											"    pm.expect(body).to.have.property(\"introspection_endpoint\");",
											"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
											"    pm.environment.set('introspectionEndpoint', body.introspection_endpoint);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/uma/.well-known/uma2-configuration",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"uma",
										".well-known",
										"uma2-configuration"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UMA Protection API",
					"item": [
						{
							"name": "Invalid cases",
							"item": [
								{
									"name": "Not a PAT (Protection Api Token)",
									"item": [
										{
											"name": "Login without UMA scope",
											"item": [
												{
													"name": "Login without - Not PAT",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "591ef3f4-db79-4208-b3c2-ff9ae1649898",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Has an access_token\", function () {",
																	"    var body = pm.response.json();",
																	"    pm.expect(body).to.have.property('access_token');",
																	"    pm.expect(body).to.have.property('token_type');",
																	"    pm.expect(body.token_type).to.eql('bearer');",
																	"    pm.expect(body).to.have.property('expires_in');",
																	"    ",
																	"    pm.environment.set('access_token', body.access_token);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{rqp_client_authentication}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "alice",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "password",
																	"type": "text"
																}
															],
															"options": {
																"urlencoded": {}
															}
														},
														"url": {
															"raw": "{{tokenEndpoint}}",
															"host": [
																"{{tokenEndpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Resource Registration",
											"item": [
												{
													"name": "Not Authenticated",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "3942871f-2f33-4352-9693-9d069cc44155",
																"exec": [
																	"pm.test(\"Status code is 401\", function () {",
																	"    pm.response.to.have.status(401);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Not Supported method",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "73c586cb-410d-4e7a-94ef-24c461f872b1",
																"exec": [
																	"pm.test(\"Status code is 405\", function () {",
																	"    pm.response.to.have.status(405);",
																	"});",
																	"",
																	"pm.test(\"Check 405 response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"    ",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"unsupported_method_type\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Missing scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a529667a-b7a4-4f8f-b862-c8956793eef6",
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Check 403 response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"insufficient_scope\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{access_token}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Permission Ticket",
											"item": [
												{
													"name": "Not Authenticated",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6144be41-f434-40a2-b12b-a3851a766ec8",
																"exec": [
																	"pm.test(\"Status code is 401\", function () {",
																	"    pm.response.to.have.status(401);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Not Supported method",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "4f06ded3-48d3-4977-ba49-f2f7d323f23f",
																"exec": [
																	"pm.test(\"Status code is 405\", function () {",
																	"    pm.response.to.have.status(405);",
																	"});",
																	"",
																	"pm.test(\"Check 405 response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"unsupported_method_type\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Not A Client PAT",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "507c8419-8fe7-4272-9d8a-fe179a72987b",
																"exec": [
																	"pm.test(\"Status code is 401\", function () {",
																	"    pm.response.to.have.status(401);",
																	"});",
																	"",
																	"pm.test(\"Check 401 response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body).to.have.property(\"error_description\");",
																	"    pm.expect(body.error).to.eql(\"invalid_token\");",
																	"    pm.expect(body.error_description).to.eql(\"The access token was not issued for a Client\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "With a PAT (Protection Api Token)",
									"item": [
										{
											"name": "Prepare - Login with UMA scope",
											"item": [
												{
													"name": "Alice Login - PAT bearer",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "76976fb3-dd6a-4f8a-9d9a-b613b4ced6de",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Has an access_token\", function () {",
																	"    var body = pm.response.json();",
																	"    pm.expect(body).to.have.property('access_token');",
																	"    pm.expect(body).to.have.property('token_type');",
																	"    pm.expect(body.token_type).to.eql('bearer');",
																	"    pm.expect(body).to.have.property('expires_in');",
																	"    pm.expect(body).to.have.property('scope');",
																	"    pm.expect(body.scope).to.eql('uma_protection');",
																	"",
																	"    pm.environment.set('protection_api_token', body.access_token);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{rs_client_authentication}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "alice",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "scope",
																	"value": "uma_protection",
																	"type": "text"
																}
															],
															"options": {
																"urlencoded": {}
															}
														},
														"url": {
															"raw": "{{tokenEndpoint}}",
															"host": [
																"{{tokenEndpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Resource Registration",
											"item": [
												{
													"name": "Icon Uri malformed",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "848928d0-c07d-4761-b8e1-eefdc93792fd",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Has a location\", function () {",
																	"    var body = pm.response.json();",
																	"    //Check body",
																	"    pm.expect(body).to.have.property('error');",
																	"    pm.expect(body).to.have.property('error_description');",
																	"    pm.expect(body.error).to.eql(\"invalid_request\");",
																	"    pm.expect(body.error_description).to.include(\"Icon uri claim is malformed\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_scopes\":[  \n      \"profile\"\n   ],\n   \"description\":\"Should fail due to malformed icon_uri\",\n   \"name\":\"Should fail\",\n   \"icon_uri\":\"trigger_malformed_icon_uri\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scope not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5d3604cd-0893-4394-8b0e-00914909273a",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Has a location\", function () {",
																	"    var body = pm.response.json();",
																	"    //Check body",
																	"    pm.expect(body).to.have.property('error');",
																	"    pm.expect(body).to.have.property('error_description');",
																	"    pm.expect(body.error).to.eql(\"invalid_request\");",
																	"    pm.expect(body.error_description).to.include(\"Scope [not_foud] can not be found.\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_scopes\":[  \n      \"not_foud\"\n   ],\n   \"description\":\"Should fail due to missing scope\",\n   \"name\":\"Should fail\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Permission Ticket",
											"item": [
												{
													"name": "RS Login - PAT bearer",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "432e2f16-28a0-4089-a549-6fefc7494dcd",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Has an access_token\", function () {",
																	"    var body = pm.response.json();",
																	"    pm.expect(body).to.have.property('access_token');",
																	"    pm.expect(body).to.have.property('token_type');",
																	"    pm.expect(body.token_type).to.eql('bearer');",
																	"    pm.expect(body).to.have.property('expires_in');",
																	"    pm.expect(body).to.have.property('scope');",
																	"    pm.expect(body.scope).to.eql('uma_protection');",
																	"",
																	"    pm.environment.set('rs_pat', body.access_token);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{rs_client_authentication}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "client_credentials",
																	"type": "text"
																},
																{
																	"key": "scope",
																	"value": "uma_protection",
																	"type": "text"
																}
															],
															"options": {
																"urlencoded": {}
															}
														},
														"url": {
															"raw": "{{tokenEndpoint}}",
															"host": [
																"{{tokenEndpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Parsing Error",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "baa1d554-2248-4d72-ba2e-175ccb0d1a37",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Check 405 response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"invalid_request\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_id_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile:read\",\n\t\t\t\"email:read\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_id_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"avatar:write\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_scopes\":[  \n\t\t\t\"avatar:write\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_id_two}}\",\n\t}\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Simple Request - Invalid Request",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "9b13b09b-c1c6-4214-9af7-3bf39f582082",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Check response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"invalid_request\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_id\":\"test\",\n   \"resource_scopes\":[  \n      \"valide one\",\n      \"\"\n   ]\n   \n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Extended Permission - Invalid Request",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "bd32492d-569f-4b4b-97c3-4c57c82da380",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Check response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"invalid_request\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile:read\",\n\t\t\t\"email:read\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"avatar:write\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_scopes\":[  \n\t\t\t\"avatar:write\"\n\t\t]\n\t}\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Resource",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "4d965971-9bf2-4474-8264-ae8339974297",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Has an access_token\", function () {",
																	"    var body = pm.response.json();",
																	"    //Check headers",
																	"    pm.response.to.have.header(\"Content-Type\");",
																	"    pm.response.to.have.header('Location');",
																	"    //Check body",
																	"    pm.expect(body).to.have.property('_id');",
																	"    pm.expect(body).to.have.property('resource_scopes');",
																	"    ",
																	"    //Save values",
																	"    pm.environment.set('resource_location', pm.response.headers.get('Location'));",
																	"    pm.environment.set('resource_id', body._id);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_scopes\":[  \n      \"profile\"\n   ],\n   \"description\":\"desc\",\n   \"name\":\"name\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Simple Request - Invalid resource scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "00daa7a3-be41-47ad-99b9-be75120fb814",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Check response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"invalid_scope\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_id\":\"{{resource_id}}\",\n   \"resource_scopes\":[\n   \t  \"profile\",\n      \"not found\"\n   ]\n   \n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Resource",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "166e8d4a-2aef-49e9-9ec8-baa896485a19",
																"exec": [
																	"pm.test(\"Status code is 204\", function () {",
																	"    pm.response.to.have.status(204);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "DELETE",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"url": {
															"raw": "{{resource_location}}",
															"host": [
																"{{resource_location}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Simple Request - Invalid resource id",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a85fe21d-6d10-4dac-a1b4-ccab9d0e493f",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Check response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"invalid_resource_id\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_id\":\"{{resource_id}}\",\n   \"resource_scopes\":[  \n      \"email\"\n   ]\n   \n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "Case when user bearer called Protected Access Token (PAT) does not contains uma_protected scope.",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Nominal case",
							"item": [
								{
									"name": "Prepare - Login with UMA scope",
									"item": [
										{
											"name": "Alice Login - PAT bearer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "334434dc-58b6-412e-b1ba-bc66bb342a2c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.have.property('scope');",
															"    pm.expect(body.scope).to.eql('uma_protection');",
															"",
															"    pm.environment.set('protection_api_token', body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rs_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "alice",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "uma_protection",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Resource Registration",
									"item": [
										{
											"name": "List",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3aecfbe8-61e3-4106-9fb0-a219315f4edb",
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"host": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{protection_api_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{resource_registration_endpoint}}",
													"host": [
														"{{resource_registration_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e1e00bb1-a7fb-47d6-9040-ffdf663f99c1",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Has a location\", function () {",
															"    var body = pm.response.json();",
															"    //Check headers",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.response.to.have.header('Location');",
															"    //Check body",
															"    pm.expect(body).to.have.property('_id');",
															"    pm.expect(body).to.have.property('resource_scopes');",
															"",
															"    //Save values",
															"    pm.environment.set('resource_location', pm.response.headers.get('Location'));",
															"    pm.environment.set('resource_id', body._id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"resource_scopes\":[  \n      \"phone\"\n   ],\n   \"description\":\"photo1\",\n   \"icon_uri\":\"http://www.example.com/icons/picture.png\",\n   \"name\":\"Photo access\",\n   \"type\":\"http://www.example.com/resource/photo\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{resource_registration_endpoint}}",
													"host": [
														"{{resource_registration_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8887f858-ea04-4ba0-b34e-c7d0f7c8171a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Is able to fetch resource_set\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('_id');",
															"    pm.expect(body).to.have.property('resource_scopes');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"url": {
													"raw": "{{resource_location}}",
													"host": [
														"{{resource_location}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "080f28bb-a005-4227-94b1-20cb3b3dbdca",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Is able to update resource_set\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('_id');",
															"    pm.expect(body).to.have.property('resource_scopes');",
															"    pm.expect(body).to.have.property('name');",
															"",
															"    pm.expect(body.name).to.eql('updated');",
															"    pm.expect(body.resource_scopes).to.eql([\"profile\"]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"resource_scopes\":[  \n      \"profile\"\n   ],\n   \"name\":\"updated\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{resource_location}}",
													"host": [
														"{{resource_location}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "List",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "30d1cc85-e590-4c79-8d92-348f4884f4e7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Can find resource_set in list\", function () {",
															"    var body = pm.response.json();",
															"    console.log(body[0]);",
															"    console.log(pm.environment.get('resource_id'));",
															"    pm.expect(body[0]).to.eql(pm.environment.get('resource_id'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"host": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"url": {
													"raw": "{{resource_registration_endpoint}}",
													"host": [
														"{{resource_registration_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0fd5e544-f1c7-4e60-a110-0efcab9a0660",
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"url": {
													"raw": "{{resource_location}}",
													"host": [
														"{{resource_location}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Permission Ticket",
									"item": [
										{
											"name": "Create New Resource One",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "38c71e33-40ba-4c09-b7d1-27ba37b204a4",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    //Check headers",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.response.to.have.header('Location');",
															"    //Check body",
															"    pm.expect(body).to.have.property('_id');",
															"    pm.expect(body).to.have.property('resource_scopes');",
															"",
															"    //Save values",
															"    pm.environment.set('resource_location_one', pm.response.headers.get('Location'));",
															"    pm.environment.set('resource_set_one', body._id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"resource_scopes\":[  \n      \"profile\"\n   ],\n   \"description\":\"Give access to profile information\",\n   \"icon_uri\": null,\n   \"name\":\"Profile access\",\n   \"type\":null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{resource_registration_endpoint}}",
													"host": [
														"{{resource_registration_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create New Resource Two",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d560816-b34b-475f-8357-624cfac55030",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    //Check headers",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.response.to.have.header('Location');",
															"    //Check body",
															"    pm.expect(body).to.have.property('_id');",
															"    pm.expect(body).to.have.property('resource_scopes');",
															"",
															"    //Save values",
															"    pm.environment.set('resource_location_two', pm.response.headers.get('Location'));",
															"    pm.environment.set('resource_set_two', body._id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"resource_scopes\":[  \n      \"phone\",\n      \"email\",\n      \"address\"\n   ],\n   \"description\":\"Phone, email and address access\",\n   \"name\":\"Contact access\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{resource_registration_endpoint}}",
													"host": [
														"{{resource_registration_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RS Login - PAT bearer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1dc8dc05-1d3c-4237-a737-ed3766dc8eee",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.have.property('scope');",
															"    pm.expect(body.scope).to.eql('uma_protection');",
															"",
															"    pm.environment.set('rs_pat', body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rs_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "uma_protection",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Simple Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "751731d8-c24f-4591-8480-57658ab7c8e4",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_simple', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{rs_pat}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"resource_id\":\"{{resource_set_one}}\",\n   \"resource_scopes\":[  \n      \"profile\"\n   ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Extended Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6e48af3b-99f4-49dc-ac93-c372e2314c8c",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_extended', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{rs_pat}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UMA Grant",
					"item": [
						{
							"name": "Prepare",
							"item": [
								{
									"name": "Bob Login - to RqP Client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ac3b65f-0155-492f-bdc7-ed0656b4a6c1",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('scope');",
													"    pm.expect(body.scope).to.eql('openid');",
													"    pm.expect(body).to.have.property('id_token');",
													"",
													"    pm.environment.set('bob_id_token', body.id_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "bob",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RS Login - PAT bearer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9add952a-78e6-4cff-ac11-9e8658166776",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('scope');",
													"    pm.expect(body.scope).to.eql('uma_protection');",
													"",
													"    pm.environment.set('rs_pat', body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rs_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "uma_protection",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Extended Request Permission Ticket",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d70e6ec1-6af1-4b91-aaae-6f679fb4368b",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Ticket successfully created\", function () {",
													"    var body = pm.response.json();",
													"    //Check body",
													"    pm.expect(body).to.have.property('ticket');",
													"    //Save values",
													"    pm.environment.set('permission_ticket_extended', body.ticket);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{rs_pat}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{permission_endpoint}}",
											"host": [
												"{{permission_endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invalid Case",
							"item": [
								{
									"name": "RPT Request - without ticket",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2acae5b6-ddaf-4356-bfef-09cec2fd08c0",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"",
													"    pm.expect(body.error).to.eql(\"invalid_grant\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - invalid ticket",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "922a631b-c96d-4853-bbbb-35efc436408f",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"",
													"    pm.expect(body.error).to.eql(\"invalid_grant\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "notfound",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - missing claim_token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78bf20db-251f-40c7-aa86-cd618f952901",
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('ticket');",
													"",
													"    pm.expect(body.error).to.eql(\"need_info\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "notfound",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "missingClaimToken",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - missing claim_token_format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81902ff0-09ce-42d0-923f-389216224c6a",
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('ticket');",
													"",
													"    pm.expect(body.error).to.eql(\"need_info\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "notfound",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "missingClaimTokenFormat",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - invalid claim_token_format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8f0a8f0-1b2a-4428-b10a-34336bfa1353",
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('ticket');",
													"",
													"    pm.expect(body.error).to.eql(\"need_info\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "notfound",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "invalidFormat",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "missingClaimTokenFormat",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - invalid claim_token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8b7980b-770d-4133-844f-b4e0f33be8fa",
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('ticket');",
													"",
													"    pm.expect(body.error).to.eql(\"need_info\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "{{permission_ticket_simple}}",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "urn:ietf:params:oauth:token-type:id_token",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "malformedClaimToken",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - invalid_scope unknown",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be695a22-3482-4355-88d7-84d0ab6104e6",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"",
													"    //Test with a scope that has not been pre-registered into the application scopes settings.",
													"    pm.expect(body.error).to.eql(\"invalid_scope\");",
													"    pm.expect(body.error_description).to.eql(\"At least one of the scopes included in the request does not match client pre-registered scopes\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "{{permission_ticket_extended}}",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "{{bob_id_token}}",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "urn:ietf:params:oauth:token-type:id_token",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "profile:unknown",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - invalid_scope unbound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2284c8d1-de70-47df-9334-c3ab428dfdaa",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"",
													"    //Test with a scope that has been pre-registered into the application scopes settings, but not on the resource_set",
													"    pm.expect(body.error).to.eql(\"invalid_scope\");",
													"    pm.expect(body.error_description).to.eql(\"At least one of the scopes included in the request does not match client pre-registered scopes\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "{{permission_ticket_extended}}",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "{{bob_id_token}}",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "urn:ietf:params:oauth:token-type:id_token",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "phone:write",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - with RPT expired",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2cefc0f1-e5aa-4a5a-a588-f0f86758fdfa",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"",
													"    //Test with expired RPT",
													"    pm.expect(body.error).to.eql(\"invalid_grant\");",
													"    pm.expect(body.error_description).to.eql(\"Requesting Party Token (rpt) not valid\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "{{permission_ticket_extended}}",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "{{bob_id_token}}",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "urn:ietf:params:oauth:token-type:id_token",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "phone",
													"type": "text"
												},
												{
													"key": "rpt",
													"value": "eyJraWQiOiJkZWZhdWx0LWdyYXZpdGVlLUFNLWtleSIsImFsZyI6IkhTMjU2In0.eyJzdWIiOiIwMzQ4NDFmNC00ZjAwLTQwODYtODg0MS1mNDRmMDA2MDg2ODEiLCJhdWQiOiI5ZjA5Yzc1Ni00MjhkLTQ5MTgtODljNy01NjQyOGRhOTE4NmYiLCJwZXJtaXNzaW9ucyI6W3sicmVzb3VyY2VJZCI6Ijc3ZWEwZTk2LTBiMGMtNDBlNy1hYTBlLTk2MGIwYzQwZTcxNiIsInJlc291cmNlU2NvcGVzIjpbInZpZXciLCJkb3dubG9hZCJdfSx7InJlc291cmNlSWQiOiJhMzE5MjcwOC04NDllLTQwNDgtOTkyNy0wODg0OWVlMDQ4YWEiLCJyZXNvdXJjZVNjb3BlcyI6WyJ2aWV3IiwiZG93bmxvYWQiLCJlZGl0Il19XSwiZG9tYWluIjoidW1hMl9wb3N0bWFuIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDkyL3VtYTJfcG9zdG1hbi9vaWRjIiwiZXhwIjoxNTkxMDM3NDkwLCJpYXQiOjE1OTEwMzAyOTAsImp0aSI6Im5nR2FqbHVqaVF3cTVSQlJSaWF5LVJfeFJJOVBPSVliWmplNy16Ri14YlUifQ.xINS0vIiVAQ3bKl09SdrFiJIwBCl6B0sY5k31fWXVnU",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Valid Cases",
							"item": [
								{
									"name": "Requesting Party - User",
									"item": [
										{
											"name": "Simple Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8a6ddaf2-8271-4073-8673-8100caa12670",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_simple', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{rs_pat}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - no additional scope",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ee26b1ac-e837-45b8-a25a-e26266d2d088",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    ",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"",
															"    //Save it, will be used to extend RPT",
															"    pm.environment.set('rqp_token', body.access_token);",
															"});",
															"",
															"pm.test(\"Has a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('refresh_token');",
															"   ",
															"    let payload = parseJwtPayload(body.refresh_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"",
															"    pm.environment.set('rqp_refresh_token', body.refresh_token);",
															"});",
															"",
															"// wait for sync process",
															"setTimeout(function(){}, 5000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														},
														{
															"key": "claim_token",
															"value": "{{bob_id_token}}",
															"type": "text"
														},
														{
															"key": "claim_token_format",
															"value": "urn:ietf:params:oauth:token-type:id_token",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Introspection - Validate RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aaa15bdf-f507-4789-a453-58bdd83d9b89",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has permissions\", function () {",
															"    pm.response.to.be.json;",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('sub');",
															"    pm.expect(body).to.have.property('client_id');",
															"    pm.expect(body).to.have.property('permissions');",
															"",
															"    //Is user access_token",
															"    pm.expect(body.sub).to.not.eql(body.client_id);",
															"",
															"    const rs_one = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "token",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{introspectionEndpoint}}",
													"host": [
														"{{introspectionEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Refresh Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "73149393-8831-4c17-a0f2-e278ba42c2db",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Has a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('refresh_token');",
															"   ",
															"    let payload = parseJwtPayload(body.refresh_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"",
															"    pm.environment.set('rqp_refresh_token', body.refresh_token);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "refresh_token",
															"type": "text"
														},
														{
															"key": "refresh_token",
															"value": "{{rqp_refresh_token}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Extended Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fee8c3cf-5a4a-4e3f-8f81-ebf3290af3ec",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_extended', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{rs_pat}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - additional scope",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d7c6451e-e3b8-4b4e-8958-d87f931704c5",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.not.have.property('upgraded');",
															"",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"",
															"",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    const rs_two = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(3);//ensure no duplicated keys",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\",\"address\"]);",
															"});",
															"",
															"pm.test(\"Has a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('refresh_token');",
															"   ",
															"    let payload = parseJwtPayload(body.refresh_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_extended}}",
															"type": "text"
														},
														{
															"key": "claim_token",
															"value": "{{bob_id_token}}",
															"type": "text"
														},
														{
															"key": "claim_token_format",
															"value": "urn:ietf:params:oauth:token-type:id_token",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone address",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Simple Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1b44b28b-7b2b-4c8e-8573-0d1dc6c031dc",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_simple', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{rs_pat}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - with RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8c59e41c-bcf3-44b0-b2e2-5f844240446d",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"/* ",
															" * In this test, I do expect to have : ",
															" *  - rpt previous permission (ressource_set_one)",
															" *  - resource_set_two with scope \"email\" coming from the ticket",
															" *  - additional scope \"phone\" on matching resource_set as requested into the body.",
															"*/",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.have.property('upgraded');",
															"",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"    pm.expect(body.upgraded).to.eql(true);",
															"",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    const rs_two = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(2);//ensure no duplicated keys",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\"]);",
															"",
															"    //Save it, will be used to check introspection",
															"    pm.environment.set('extended_rpt', body.access_token);",
															"});",
															"",
															"pm.test(\"Has a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('refresh_token');",
															"   ",
															"    let payload = parseJwtPayload(body.refresh_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														},
														{
															"key": "claim_token",
															"value": "{{bob_id_token}}",
															"type": "text"
														},
														{
															"key": "claim_token_format",
															"value": "urn:ietf:params:oauth:token-type:id_token",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone",
															"type": "text"
														},
														{
															"key": "rpt",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Introspection - Validate extended RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a8d006c2-d393-4cf8-88f0-a80255a49208",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has permissions\", function () {",
															"    pm.response.to.be.json;",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('sub');",
															"    pm.expect(body).to.have.property('client_id');",
															"    pm.expect(body).to.have.property('permissions');",
															"",
															"    //Is user access_token",
															"    pm.expect(body.sub).to.not.eql(body.client_id);",
															"",
															"    const rs_one = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"",
															"    const rs_two = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(2);",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\"]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "token",
															"value": "{{extended_rpt}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{introspectionEndpoint}}",
													"host": [
														"{{introspectionEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - Check one time permission ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f20e63da-2784-4f58-8501-f14d8276fc4d",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Has an error\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('error');",
															"    pm.expect(body).to.have.property('error_description');",
															"",
															"    pm.expect(body.error).to.eql(\"invalid_grant\");",
															"    pm.expect(body.error_description).to.eql(\"Missing or invalid permission ticket.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														},
														{
															"key": "claim_token",
															"value": "{{bob_id_token}}",
															"type": "text"
														},
														{
															"key": "claim_token_format",
															"value": "urn:ietf:params:oauth:token-type:id_token",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone",
															"type": "text"
														},
														{
															"key": "rpt",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Requesting Party - Client",
									"item": [
										{
											"name": "Simple Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "88128705-266b-4849-8af6-b437e736c873",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_simple', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{rs_pat}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - no additional scope",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4c785ede-25ad-4566-91a3-c298873bedb6",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    ",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"",
															"    //Is not an end user bearer",
															"    pm.expect(payload.aud).to.eql(payload.sub);",
															"",
															"    //Save it, will be used to extend RPT",
															"    pm.environment.set('rqp_token', body.access_token);",
															"});",
															"",
															"pm.test(\"Has not a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.not.have.property('refresh_token');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Introspection - Validate RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e37b04aa-13a3-4d3f-900d-f661cfbaa0e3",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has permissions\", function () {",
															"    pm.response.to.be.json;",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('sub');",
															"    pm.expect(body).to.have.property('client_id');",
															"    pm.expect(body).to.have.property('permissions');",
															"",
															"    //Is client access_token",
															"    pm.expect(body.sub).to.eql(body.client_id);",
															"",
															"    const rs_one = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "token",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{introspectionEndpoint}}",
													"host": [
														"{{introspectionEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Extended Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "39c6f248-db7f-4ada-a7dc-5f441c9a3fb1",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_extended', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{rs_pat}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - additional scope",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "968e8fe7-afa9-4c43-8492-2e79018223f6",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.not.have.property('upgraded');",
															"",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"",
															"",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    const rs_two = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(3);//ensure no duplicated keys",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\",\"address\"]);",
															"",
															"    //Is not an end user bearer",
															"    pm.expect(payload.aud).to.eql(payload.sub);",
															"});",
															"",
															"pm.test(\"Has not a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.not.have.property('refresh_token');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_extended}}",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone address",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Simple Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "60297c90-9230-4b48-932b-77fe0faeb725",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_simple', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{rs_pat}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - with RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a9f63e99-2134-44be-92b3-fe7622c65fd4",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"/* ",
															" * In this test, I do expect to have : ",
															" *  - rpt previous permission (ressource_set_one)",
															" *  - resource_set_two with scope \"email\" coming from the ticket",
															" *  - additional scope \"phone\" on matching resource_set as requested into the body.",
															"*/",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.have.property('upgraded');",
															"",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"    pm.expect(body.upgraded).to.eql(true);",
															"",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    const rs_two = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(2);//ensure no duplicated keys",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\"]);",
															"    ",
															"    //Is not an end user bearer",
															"    pm.expect(payload.aud).to.eql(payload.sub);",
															"",
															"    //Save it, will be used to check introspection",
															"    pm.environment.set('extended_rpt', body.access_token);",
															"});",
															"",
															"pm.test(\"Has not a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.not.have.property('refresh_token');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone",
															"type": "text"
														},
														{
															"key": "rpt",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Introspection - Validate extended RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ee62c2c8-915a-4eac-a5f8-7b6605a4afd6",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has permissions\", function () {",
															"    pm.response.to.be.json;",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('sub');",
															"    pm.expect(body).to.have.property('client_id');",
															"    pm.expect(body).to.have.property('permissions');",
															"",
															"    //Is user access_token",
															"    pm.expect(body.sub).to.eql(body.client_id);",
															"",
															"    const rs_one = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"",
															"    const rs_two = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(2);",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\"]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "token",
															"value": "{{extended_rpt}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{introspectionEndpoint}}",
													"host": [
														"{{introspectionEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - Check one time permission ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3dbe57fe-fa5f-4a39-878a-9a326c0b374e",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Has an error\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('error');",
															"    pm.expect(body).to.have.property('error_description');",
															"",
															"    pm.expect(body.error).to.eql(\"invalid_grant\");",
															"    pm.expect(body.error_description).to.eql(\"Missing or invalid permission ticket.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone",
															"type": "text"
														},
														{
															"key": "rpt",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Duplicated resource_id Request",
									"item": [
										{
											"name": "Extended Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c833168d-8418-4649-9dec-bae0331e2fa2",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_extended', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{rs_pat}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"phone\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da004178-d78c-417d-9e9c-01aea3c76ca5",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.not.have.property('upgraded');",
															"",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"",
															"",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    const rs_two = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(2);//ensure no duplicated keys",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\"]);",
															"",
															"    //Save it, will be used to extend RPT",
															"    pm.environment.set('rqp_token', body.access_token);",
															"});",
															"",
															"pm.test(\"Has a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('refresh_token');",
															"   ",
															"    let payload = parseJwtPayload(body.refresh_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_extended}}",
															"type": "text"
														},
														{
															"key": "claim_token",
															"value": "{{bob_id_token}}",
															"type": "text"
														},
														{
															"key": "claim_token_format",
															"value": "urn:ietf:params:oauth:token-type:id_token",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Introspection - Validate RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "50e78872-1afa-4a8a-9c32-2123e4ab9d3c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has permissions\", function () {",
															"    pm.response.to.be.json;",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('sub');",
															"    pm.expect(body).to.have.property('client_id');",
															"    pm.expect(body).to.have.property('permissions');",
															"",
															"    //Is user access_token",
															"    pm.expect(body.sub).to.not.eql(body.client_id);",
															"",
															"    const rs_one = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"",
															"    const rs_two = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(2);",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\"]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "token",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{introspectionEndpoint}}",
													"host": [
														"{{introspectionEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d44db401-9c6f-42ab-b710-07524695b4ba",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"organizations",
						"{{defaultOrganizationId}}",
						"environments",
						"{{defaultEnvironmentId}}",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "439d3dde-57b0-4b35-848d-107494ee0f56",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "283f5c18-cb3f-43d9-bc4e-4bd47e5341bb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}