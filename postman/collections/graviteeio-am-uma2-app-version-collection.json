{
	"info": {
		"_postman_id": "78829fa9-f25d-4bc4-a5e5-25d2be553326",
		"name": "Gravitee.io - AM - UMA 2.0 - app version",
		"description": "Test openid connect discovery specifications: https://openid.net/specs/openid-connect-discovery-1_0.html",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8269bc6c-ab4a-4550-a3d4-db871af015ed",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{management_url}}/management/auth/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create uma 2.0  domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e9084b5-69cf-4055-8ff4-006dbb5f4603",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set('domain', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"uma2_postman\", \n\t\"description\": \"test user-managed access specifications\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default identity provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3b5cbcb-6a14-4697-bac3-5b3d7114c7c5",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities/default-idp-{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities",
								"default-idp-{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create in-memory IDP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b7d27fa-7b27-4075-8004-519996e0c1ba",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('idp.inmemory', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"Alice\\\",\\\"lastname\\\":\\\"Doe\\\",\\\"username\\\":\\\"alice\\\",\\\"password\\\":\\\"password\\\"},{\\\"firstname\\\":\\\"Bob\\\",\\\"lastname\\\":\\\"Doe\\\",\\\"username\\\":\\\"bob\\\",\\\"email\\\":\\\"bob.doe@mail.com\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create RS application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3469181-69d6-49bf-a9f9-e8344c76116c",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Saving credentials\", function () {",
									"    let body = JSON.parse(responseBody);",
									"",
									"    let client_id = body.settings.oauth.clientId;",
									"    let secret = body.settings.oauth.clientSecret;",
									"    let authentication = btoa(client_id + \":\" + secret);  ",
									"",
									"    //Save fields",
									"    pm.environment.set('rs_app', body.id);",
									"    pm.environment.set('rs_client_id', client_id);",
									"    pm.environment.set('rs_client_secret', secret);",
									"    pm.environment.set('rs_client_authentication', authentication);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"RS-client\",\n  \"type\": \"WEB\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure RS application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0c3acf2-4284-40db-b7f5-ccc694141883",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check grant\", function () {",
									"    let body = JSON.parse(responseBody);",
									"    pm.expect(body.settings.oauth.grantTypes).to.eql([\"password\"]);",
									"    pm.expect(body.settings.oauth.scopes).to.eql([\"uma_protection\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"identities\": [\n    \"{{idp.inmemory}}\"\n  ],\n  \"settings\": {\n  \t\"oauth\": {\n  \t\t\"scopes\": [\"uma_protection\"],\n  \t\t\"redirectUris\": [],\n\t\t\"grantTypes\": [\"password\"]\n\t}\n  }\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{rs_app}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{rs_app}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create RqP application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f531fa60-2202-4819-8087-4c91269a03ca",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Saving credentials\", function () {",
									"    let body = JSON.parse(responseBody);",
									"",
									"    let client_id = body.settings.oauth.clientId;",
									"    let secret = body.settings.oauth.clientSecret;",
									"    let authentication = btoa(client_id + \":\" + secret);  ",
									"",
									"    //Save fields",
									"    pm.environment.set('rqp_app', body.id);",
									"    pm.environment.set('rqp_client_id', client_id);",
									"    pm.environment.set('rqp_client_secret', secret);",
									"    pm.environment.set('rqp_client_authentication', authentication);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"RS-client\",\n  \"type\": \"WEB\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure RqP application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4b502ea-627e-4e38-9a42-1a2f838cf338",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check grant\", function () {",
									"    let body = JSON.parse(responseBody);",
									"    pm.expect(body.settings.oauth.grantTypes).to.have.members([\"password\",\"refresh_token\",\"urn:ietf:params:oauth:grant-type:uma-ticket\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"identities\": [\n    \"{{idp.inmemory}}\"\n  ],\n  \"settings\": {\n  \t\"oauth\": {\n  \t\t\"redirectUris\": [],\n\t\t\"grantTypes\": [\"password\",\"refresh_token\",\"urn:ietf:params:oauth:grant-type:uma-ticket\"],\n\t\t\"scopes\": [\"openid\",\"profile\",\"email\",\"phone\",\"address\"]\n\t}\n  }\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{rqp_app}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{rqp_app}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9e674a8-8d83-423f-a9b9-a9725032a449",
								"exec": [
									"// wait for sync process",
									"setTimeout(function(){}, 5000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "UMA_2.0",
			"item": [
				{
					"name": "Case - UMA disabled",
					"item": [
						{
							"name": "Discovery",
							"item": [
								{
									"name": "Gravitee AM .well-known",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9cda6ad7-48c4-46e5-bcbb-76f6ca91b7c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check discovery endpoints\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"openid-configuration\");",
													"    pm.expect(body).to.not.have.property(\"uma2-configuration\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/.well-known",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												".well-known"
											]
										}
									},
									"response": []
								},
								{
									"name": "Gravitee UMA .well-known disabled",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3582dbb-dda0-4ad1-908e-ab0a98847033",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/uma/.well-known/uma2-configuration",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"uma",
												".well-known",
												"uma2-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Token Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e9144bc-709f-4b77-a03c-fd6e1475ee80",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check uma 2.0 discovery endpoint\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"",
													"    //Oauth 2.0 endpoints",
													"    pm.expect(body).to.have.property(\"token_endpoint\");",
													"    pm.environment.set('oidcTokenEndpoint', body.token_endpoint);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/oidc/.well-known/openid-configuration",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"oidc",
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "Token endpoint - Unsupported UMA grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7c3e7fb-23a4-437c-97a4-39183cb65733",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Grant type must not be supported when UMA is disabled",
													"pm.test(\"Check grant type is not supported\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"    ",
													"    pm.expect(body.error).to.eql(\"unsupported_grant_type\");",
													"    pm.expect(body.error_description).to.eql(\"Unsupported grant type: urn:ietf:params:oauth:grant-type:uma-ticket\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic {{rs_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "must_fail_before",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{oidcTokenEndpoint}}",
											"host": [
												"{{oidcTokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Enable UMA 2.0",
					"item": [
						{
							"name": "Enable UMA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c750db02-f76c-49b9-97d8-a60ccaa41592",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"UMA enabled for domain\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.uma.enabled).to.eql(true);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"uma\": {\n    \"enabled\": true\n  }\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gravitee AM .well-known",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1138501-038e-41c9-885a-a3c55acf88f4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check uma is enabled\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    let body = pm.response.json();",
											"    let expected_endpoint = pm.environment.get('gateway_url') + \"/\" + pm.environment.get('domain') + \"/uma/.well-known/uma2-configuration\";",
											"",
											"    pm.expect(body).to.have.property(\"openid-configuration\");",
											"    pm.expect(body).to.have.property(\"uma2-configuration\");",
											"",
											"    pm.expect(body['uma2-configuration']).to.eql(expected_endpoint);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/.well-known",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										".well-known"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gravitee UMA .well-known enabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7690a6de-10ee-408d-94d9-e57c62695de5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check uma 2.0 discovery endpoint\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"",
											"    //Specific uma 2.0 endpoints",
											"    pm.expect(body).to.have.property(\"resource_registration_endpoint\");",
											"    pm.expect(body).to.have.property(\"permission_endpoint\");",
											"    pm.expect(body).to.have.property(\"uma_profiles_supported\");",
											"    pm.expect(body).to.have.property(\"claims_interaction_endpoint\");",
											"    pm.environment.set('resource_registration_endpoint', body.resource_registration_endpoint);",
											"    pm.environment.set('permission_endpoint', body.permission_endpoint);",
											"",
											"    //Check UMA Grant is available",
											"    pm.expect(body.grant_types_supported).to.include('urn:ietf:params:oauth:grant-type:uma-ticket');",
											"",
											"    //Oauth 2.0 endpoints",
											"    pm.expect(body).to.have.property(\"token_endpoint\");",
											"    pm.expect(body).to.have.property(\"introspection_endpoint\");",
											"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
											"    pm.environment.set('introspectionEndpoint', body.introspection_endpoint);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/uma/.well-known/uma2-configuration",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"uma",
										".well-known",
										"uma2-configuration"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UMA Protection API",
					"item": [
						{
							"name": "Invalid cases",
							"item": [
								{
									"name": "Not a PAT (Protection Api Token)",
									"item": [
										{
											"name": "Login without UMA scope",
											"item": [
												{
													"name": "Login without - Not PAT",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "508e35d2-f7e2-4ab4-82ee-345ed84e9a7b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Has an access_token\", function () {",
																	"    var body = pm.response.json();",
																	"    pm.expect(body).to.have.property('access_token');",
																	"    pm.expect(body).to.have.property('token_type');",
																	"    pm.expect(body.token_type).to.eql('bearer');",
																	"    pm.expect(body).to.have.property('expires_in');",
																	"    ",
																	"    pm.environment.set('access_token', body.access_token);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{rqp_client_authentication}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "alice",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "password",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{tokenEndpoint}}",
															"host": [
																"{{tokenEndpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Resource Registration",
											"item": [
												{
													"name": "Not Authenticated",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "47317ea0-8cb5-4f14-876d-a17e849d5d35",
																"exec": [
																	"pm.test(\"Status code is 401\", function () {",
																	"    pm.response.to.have.status(401);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Not Supported method",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d8860abe-5d83-4e6c-b829-6df438cd3b61",
																"exec": [
																	"pm.test(\"Status code is 405\", function () {",
																	"    pm.response.to.have.status(405);",
																	"});",
																	"",
																	"pm.test(\"Check 405 response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"    ",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"unsupported_method_type\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Missing scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "0817c732-cfe3-4526-8759-66e5f309d9a3",
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Check 403 response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"insufficient_scope\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{access_token}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Permission Ticket",
											"item": [
												{
													"name": "Not Authenticated",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b8454d7f-9a40-49c3-b7a9-a7475f21e119",
																"exec": [
																	"pm.test(\"Status code is 401\", function () {",
																	"    pm.response.to.have.status(401);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Not Supported method",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "51e8b780-fb66-44db-b5e1-af77d35081cc",
																"exec": [
																	"pm.test(\"Status code is 405\", function () {",
																	"    pm.response.to.have.status(405);",
																	"});",
																	"",
																	"pm.test(\"Check 405 response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"unsupported_method_type\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Missing scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "bb83f35b-8220-4cb2-8232-d81899c3572f",
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Check 403 response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"insufficient_scope\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{access_token}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "With a PAT (Protection Api Token)",
									"item": [
										{
											"name": "Prepare - Login with UMA scope",
											"item": [
												{
													"name": "Alice Login - PAT bearer",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c91b28fc-2958-49c2-98b3-a1c592009d97",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Has an access_token\", function () {",
																	"    var body = pm.response.json();",
																	"    pm.expect(body).to.have.property('access_token');",
																	"    pm.expect(body).to.have.property('token_type');",
																	"    pm.expect(body.token_type).to.eql('bearer');",
																	"    pm.expect(body).to.have.property('expires_in');",
																	"    pm.expect(body).to.have.property('scope');",
																	"    pm.expect(body.scope).to.eql('uma_protection');",
																	"",
																	"    pm.environment.set('protection_api_token', body.access_token);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{rs_client_authentication}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "alice",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "scope",
																	"value": "uma_protection",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{tokenEndpoint}}",
															"host": [
																"{{tokenEndpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Resource Registration",
											"item": [
												{
													"name": "Icon Uri malformed",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "e09dba34-645d-44a4-8361-70a97cd6f541",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Has a location\", function () {",
																	"    var body = pm.response.json();",
																	"    //Check body",
																	"    pm.expect(body).to.have.property('error');",
																	"    pm.expect(body).to.have.property('error_description');",
																	"    pm.expect(body.error).to.eql(\"invalid_request\");",
																	"    pm.expect(body.error_description).to.include(\"Icon uri claim is malformed\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_scopes\":[  \n      \"profile\"\n   ],\n   \"description\":\"Should fail due to malformed icon_uri\",\n   \"name\":\"Should fail\",\n   \"icon_uri\":\"trigger_malformed_icon_uri\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scope not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "806bdec0-6103-4ea9-8b0c-d7d7cf39cd42",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Has a location\", function () {",
																	"    var body = pm.response.json();",
																	"    //Check body",
																	"    pm.expect(body).to.have.property('error');",
																	"    pm.expect(body).to.have.property('error_description');",
																	"    pm.expect(body.error).to.eql(\"invalid_request\");",
																	"    pm.expect(body.error_description).to.include(\"Scope [not_foud] can not be found.\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_scopes\":[  \n      \"not_foud\"\n   ],\n   \"description\":\"Should fail due to missing scope\",\n   \"name\":\"Should fail\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Permission Ticket",
											"item": [
												{
													"name": "Parsing Error",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b7be9c5d-5603-4269-a604-77ed9c42b29f",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Check 405 response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"invalid_request\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_id_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile:read\",\n\t\t\t\"email:read\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_id_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"avatar:write\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_scopes\":[  \n\t\t\t\"avatar:write\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_id_two}}\",\n\t}\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Simple Request - Invalid Request",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "2366c974-bc83-41ea-aedb-686fd89dfca6",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Check response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"invalid_request\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_id\":\"test\",\n   \"resource_scopes\":[  \n      \"valide one\",\n      \"\"\n   ]\n   \n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Extended Permission - Invalid Request",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6201ddd9-e4f1-4cda-8450-6356fb2fee1d",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Check response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"invalid_request\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile:read\",\n\t\t\t\"email:read\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"avatar:write\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_scopes\":[  \n\t\t\t\"avatar:write\"\n\t\t]\n\t}\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Resource",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "1c51145a-321f-4bb7-a3eb-fe92adfe0669",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Has an access_token\", function () {",
																	"    var body = pm.response.json();",
																	"    //Check headers",
																	"    pm.response.to.have.header(\"Content-Type\");",
																	"    pm.response.to.have.header('Location');",
																	"    //Check body",
																	"    pm.expect(body).to.have.property('_id');",
																	"    pm.expect(body).to.have.property('resource_scopes');",
																	"    ",
																	"    //Save values",
																	"    pm.environment.set('resource_location', pm.response.headers.get('Location'));",
																	"    pm.environment.set('resource_id', body._id);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_scopes\":[  \n      \"profile\"\n   ],\n   \"description\":\"desc\",\n   \"name\":\"name\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Simple Request - Invalid resource scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "63d0d171-f4db-4fd7-84af-2f6ab4b3d97b",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Check response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"invalid_scope\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_id\":\"{{resource_id}}\",\n   \"resource_scopes\":[\n   \t  \"profile\",\n      \"not found\"\n   ]\n   \n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Resource",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "59856016-8dc9-4d78-8e04-e9de5f8e28ef",
																"exec": [
																	"pm.test(\"Status code is 204\", function () {",
																	"    pm.response.to.have.status(204);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "DELETE",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"url": {
															"raw": "{{resource_location}}",
															"host": [
																"{{resource_location}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Simple Request - Invalid resource id",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "8d3a2b51-7621-4944-ae8f-c325acedc423",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Check response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"invalid_resource_id\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_id\":\"{{resource_id}}\",\n   \"resource_scopes\":[  \n      \"email\"\n   ]\n   \n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "Case when user bearer called Protected Access Token (PAT) does not contains uma_protected scope.",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Nominal case",
							"item": [
								{
									"name": "Prepare - Login with UMA scope",
									"item": [
										{
											"name": "Alice Login - PAT bearer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e68a19a5-581c-4f10-93bd-59c4bf55dce7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.have.property('scope');",
															"    pm.expect(body.scope).to.eql('uma_protection');",
															"",
															"    pm.environment.set('protection_api_token', body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rs_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "alice",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "uma_protection",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Resource Registration",
									"item": [
										{
											"name": "List",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "662206b4-c7e7-46c8-ac5b-20b615e8d755",
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"host": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{protection_api_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{resource_registration_endpoint}}",
													"host": [
														"{{resource_registration_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8790eebd-c6d2-4d2f-b2b0-04ee4d82c221",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Has a location\", function () {",
															"    var body = pm.response.json();",
															"    //Check headers",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.response.to.have.header('Location');",
															"    //Check body",
															"    pm.expect(body).to.have.property('_id');",
															"    pm.expect(body).to.have.property('resource_scopes');",
															"",
															"    //Save values",
															"    pm.environment.set('resource_location', pm.response.headers.get('Location'));",
															"    pm.environment.set('resource_id', body._id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"resource_scopes\":[  \n      \"phone\"\n   ],\n   \"description\":\"photo1\",\n   \"icon_uri\":\"http://www.example.com/icons/picture.png\",\n   \"name\":\"Photo access\",\n   \"type\":\"http://www.example.com/resource/photo\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{resource_registration_endpoint}}",
													"host": [
														"{{resource_registration_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "46389cff-9459-4e6a-9f54-2e290b0c15f3",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Is able to fetch resource_set\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('_id');",
															"    pm.expect(body).to.have.property('resource_scopes');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"url": {
													"raw": "{{resource_location}}",
													"host": [
														"{{resource_location}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5a27afdf-fc23-4bd8-ad96-4c22d8800de8",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Is able to update resource_set\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('_id');",
															"    pm.expect(body).to.have.property('resource_scopes');",
															"    pm.expect(body).to.have.property('name');",
															"",
															"    pm.expect(body.name).to.eql('updated');",
															"    pm.expect(body.resource_scopes).to.eql([\"profile\"]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"resource_scopes\":[  \n      \"profile\"\n   ],\n   \"name\":\"updated\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{resource_location}}",
													"host": [
														"{{resource_location}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "List",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "25bf844f-ded5-41e2-b16b-fc29aa0d76f0",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Can find resource_set in list\", function () {",
															"    var body = pm.response.json();",
															"    console.log(body[0]);",
															"    console.log(pm.environment.get('resource_id'));",
															"    pm.expect(body[0]).to.eql(pm.environment.get('resource_id'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"host": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"url": {
													"raw": "{{resource_registration_endpoint}}",
													"host": [
														"{{resource_registration_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "042fc2b1-aed0-47ad-a9ee-fee89c2fe29d",
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"url": {
													"raw": "{{resource_location}}",
													"host": [
														"{{resource_location}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Permission Ticket",
									"item": [
										{
											"name": "Create New Resource One",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "79ca7e13-f9dd-4c5b-8ad7-37992897584a",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    //Check headers",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.response.to.have.header('Location');",
															"    //Check body",
															"    pm.expect(body).to.have.property('_id');",
															"    pm.expect(body).to.have.property('resource_scopes');",
															"",
															"    //Save values",
															"    pm.environment.set('resource_location_one', pm.response.headers.get('Location'));",
															"    pm.environment.set('resource_set_one', body._id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"resource_scopes\":[  \n      \"profile\"\n   ],\n   \"description\":\"Give access to profile information\",\n   \"icon_uri\": null,\n   \"name\":\"Profile access\",\n   \"type\":null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{resource_registration_endpoint}}",
													"host": [
														"{{resource_registration_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create New Resource Two",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d3f1e6fe-1462-4d44-aafd-1ad3a5fcc0ca",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    //Check headers",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.response.to.have.header('Location');",
															"    //Check body",
															"    pm.expect(body).to.have.property('_id');",
															"    pm.expect(body).to.have.property('resource_scopes');",
															"",
															"    //Save values",
															"    pm.environment.set('resource_location_two', pm.response.headers.get('Location'));",
															"    pm.environment.set('resource_set_two', body._id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"resource_scopes\":[  \n      \"phone\",\n      \"email\",\n      \"address\"\n   ],\n   \"description\":\"Phone, email and address access\",\n   \"name\":\"Contact access\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{resource_registration_endpoint}}",
													"host": [
														"{{resource_registration_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Simple Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1f209afe-a3ac-456b-b498-715d51d30a61",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_simple', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{protection_api_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"resource_id\":\"{{resource_set_one}}\",\n   \"resource_scopes\":[  \n      \"profile\"\n   ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Extended Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b29dc897-5d74-4a5b-b38d-039bf396fa35",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_extended', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UMA Grant",
					"item": [
						{
							"name": "Prepare",
							"item": [
								{
									"name": "Bob Login - to RqP Client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3e40ac8-ee66-4114-8391-244502e3565b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('scope');",
													"    pm.expect(body.scope).to.eql('openid');",
													"    pm.expect(body).to.have.property('id_token');",
													"",
													"    pm.environment.set('bob_id_token', body.id_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "bob",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Extended Request Permission Ticket",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55ff682a-bc4a-44d7-8105-d580001fb6bd",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Ticket successfully created\", function () {",
													"    var body = pm.response.json();",
													"    //Check body",
													"    pm.expect(body).to.have.property('ticket');",
													"    //Save values",
													"    pm.environment.set('permission_ticket_extended', body.ticket);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{protection_api_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{permission_endpoint}}",
											"host": [
												"{{permission_endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invalid Case",
							"item": [
								{
									"name": "RPT Request - without ticket",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "102d51ea-675a-440f-b5c1-06903f501ab9",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"",
													"    pm.expect(body.error).to.eql(\"invalid_grant\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - invalid ticket",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4347b0a2-47ae-4f40-bcce-831e02a565aa",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"",
													"    pm.expect(body.error).to.eql(\"invalid_grant\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "notfound",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - missing claim_token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32e938a4-cbc7-42d5-af84-bd4c3174374f",
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('ticket');",
													"",
													"    pm.expect(body.error).to.eql(\"need_info\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "notfound",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "missingClaimToken",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - missing claim_token_format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72e7a938-cfeb-4f74-9ee6-fff9182644e3",
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('ticket');",
													"",
													"    pm.expect(body.error).to.eql(\"need_info\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "notfound",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "missingClaimTokenFormat",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - invalid claim_token_format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8760346-d002-48da-8f90-86c28b902fbf",
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('ticket');",
													"",
													"    pm.expect(body.error).to.eql(\"need_info\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "notfound",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "invalidFormat",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "missingClaimTokenFormat",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - invalid claim_token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "383d64af-4064-4b47-92f8-e6169693393c",
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('ticket');",
													"",
													"    pm.expect(body.error).to.eql(\"need_info\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "{{permission_ticket_simple}}",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "urn:ietf:params:oauth:token-type:id_token",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "malformedClaimToken",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - invalid_scope unknown",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1948c2ff-c9e4-4ec3-819f-f210dad0fad0",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"",
													"    //Test with a scope that has not been pre-registered into the application scopes settings.",
													"    pm.expect(body.error).to.eql(\"invalid_scope\");",
													"    pm.expect(body.error_description).to.eql(\"At least one of the scopes included in the request does not match client pre-registered scopes\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "{{permission_ticket_extended}}",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "{{bob_id_token}}",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "urn:ietf:params:oauth:token-type:id_token",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "profile:unknown",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - invalid_scope unbound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba3610e1-e739-479c-8916-4f8da77a9432",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"",
													"    //Test with a scope that has been pre-registered into the application scopes settings, but not on the resource_set",
													"    pm.expect(body.error).to.eql(\"invalid_scope\");",
													"    pm.expect(body.error_description).to.eql(\"At least one of the scopes included in the request does not match client pre-registered scopes\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "{{permission_ticket_extended}}",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "{{bob_id_token}}",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "urn:ietf:params:oauth:token-type:id_token",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "phone:write",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - with RPT expired",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7087f3a0-5736-4d24-beb8-cbabbddef24f",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"",
													"    //Test with expired RPT",
													"    pm.expect(body.error).to.eql(\"invalid_grant\");",
													"    pm.expect(body.error_description).to.eql(\"Requesting Party Token (rpt) not valid\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "{{permission_ticket_extended}}",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "{{bob_id_token}}",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "urn:ietf:params:oauth:token-type:id_token",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "phone",
													"type": "text"
												},
												{
													"key": "rpt",
													"value": "eyJraWQiOiJkZWZhdWx0LWdyYXZpdGVlLUFNLWtleSIsImFsZyI6IkhTMjU2In0.eyJzdWIiOiIwMzQ4NDFmNC00ZjAwLTQwODYtODg0MS1mNDRmMDA2MDg2ODEiLCJhdWQiOiI5ZjA5Yzc1Ni00MjhkLTQ5MTgtODljNy01NjQyOGRhOTE4NmYiLCJwZXJtaXNzaW9ucyI6W3sicmVzb3VyY2VJZCI6Ijc3ZWEwZTk2LTBiMGMtNDBlNy1hYTBlLTk2MGIwYzQwZTcxNiIsInJlc291cmNlU2NvcGVzIjpbInZpZXciLCJkb3dubG9hZCJdfSx7InJlc291cmNlSWQiOiJhMzE5MjcwOC04NDllLTQwNDgtOTkyNy0wODg0OWVlMDQ4YWEiLCJyZXNvdXJjZVNjb3BlcyI6WyJ2aWV3IiwiZG93bmxvYWQiLCJlZGl0Il19XSwiZG9tYWluIjoidW1hMl9wb3N0bWFuIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDkyL3VtYTJfcG9zdG1hbi9vaWRjIiwiZXhwIjoxNTkxMDM3NDkwLCJpYXQiOjE1OTEwMzAyOTAsImp0aSI6Im5nR2FqbHVqaVF3cTVSQlJSaWF5LVJfeFJJOVBPSVliWmplNy16Ri14YlUifQ.xINS0vIiVAQ3bKl09SdrFiJIwBCl6B0sY5k31fWXVnU",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Valid Cases",
							"item": [
								{
									"name": "Requesting Party - User",
									"item": [
										{
											"name": "Simple Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c1cdea79-feff-41e4-9eae-fe23766e6fe9",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_simple', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - no additional scope",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "055282fc-f09a-4c60-bf3a-d63fe8d460bd",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    ",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"",
															"    //Save it, will be used to extend RPT",
															"    pm.environment.set('rqp_token', body.access_token);",
															"});",
															"",
															"pm.test(\"Has a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('refresh_token');",
															"   ",
															"    let payload = parseJwtPayload(body.refresh_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"",
															"    pm.environment.set('rqp_refresh_token', body.refresh_token);",
															"});",
															"",
															"// wait for sync process",
															"setTimeout(function(){}, 5000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														},
														{
															"key": "claim_token",
															"value": "{{bob_id_token}}",
															"type": "text"
														},
														{
															"key": "claim_token_format",
															"value": "urn:ietf:params:oauth:token-type:id_token",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Introspection - Validate RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8f013b03-a40e-45f4-95e4-48f93a25eb4a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has permissions\", function () {",
															"    pm.response.to.be.json;",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('sub');",
															"    pm.expect(body).to.have.property('client_id');",
															"    pm.expect(body).to.have.property('permissions');",
															"",
															"    //Is user access_token",
															"    pm.expect(body.sub).to.not.eql(body.client_id);",
															"",
															"    const rs_one = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "token",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{introspectionEndpoint}}",
													"host": [
														"{{introspectionEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Refresh Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5d9b7de2-0183-4150-81f5-c44f3903bb36",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Has a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('refresh_token');",
															"   ",
															"    let payload = parseJwtPayload(body.refresh_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"",
															"    pm.environment.set('rqp_refresh_token', body.refresh_token);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "refresh_token",
															"type": "text"
														},
														{
															"key": "refresh_token",
															"value": "{{rqp_refresh_token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Extended Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "710366f7-a5d4-4c65-a15e-b5e2f736484e",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_extended', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - additional scope",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2c5f2760-8c5c-4c32-ac81-bc79726cb909",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.not.have.property('upgraded');",
															"",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"",
															"",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    const rs_two = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(3);//ensure no duplicated keys",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\",\"address\"]);",
															"});",
															"",
															"pm.test(\"Has a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('refresh_token');",
															"   ",
															"    let payload = parseJwtPayload(body.refresh_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_extended}}",
															"type": "text"
														},
														{
															"key": "claim_token",
															"value": "{{bob_id_token}}",
															"type": "text"
														},
														{
															"key": "claim_token_format",
															"value": "urn:ietf:params:oauth:token-type:id_token",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone address",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Simple Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9ab1c0b4-0c28-4887-9239-0c40529d32cf",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_simple', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - with RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8f32f772-d3c2-4394-a96b-74c3cbfac818",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"/* ",
															" * In this test, I do expect to have : ",
															" *  - rpt previous permission (ressource_set_one)",
															" *  - resource_set_two with scope \"email\" coming from the ticket",
															" *  - additional scope \"phone\" on matching resource_set as requested into the body.",
															"*/",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.have.property('upgraded');",
															"",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"    pm.expect(body.upgraded).to.eql(true);",
															"",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    const rs_two = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(2);//ensure no duplicated keys",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\"]);",
															"",
															"    //Save it, will be used to check introspection",
															"    pm.environment.set('extended_rpt', body.access_token);",
															"});",
															"",
															"pm.test(\"Has a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('refresh_token');",
															"   ",
															"    let payload = parseJwtPayload(body.refresh_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														},
														{
															"key": "claim_token",
															"value": "{{bob_id_token}}",
															"type": "text"
														},
														{
															"key": "claim_token_format",
															"value": "urn:ietf:params:oauth:token-type:id_token",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone",
															"type": "text"
														},
														{
															"key": "rpt",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Introspection - Validate extended RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "141eb626-b743-48e6-92c8-158ed4ba4f4a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has permissions\", function () {",
															"    pm.response.to.be.json;",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('sub');",
															"    pm.expect(body).to.have.property('client_id');",
															"    pm.expect(body).to.have.property('permissions');",
															"",
															"    //Is user access_token",
															"    pm.expect(body.sub).to.not.eql(body.client_id);",
															"",
															"    const rs_one = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"",
															"    const rs_two = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(2);",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\"]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "token",
															"value": "{{extended_rpt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{introspectionEndpoint}}",
													"host": [
														"{{introspectionEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - Check one time permission ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fa43d143-8223-4b25-8f8d-4818fbac17d2",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Has an error\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('error');",
															"    pm.expect(body).to.have.property('error_description');",
															"",
															"    pm.expect(body.error).to.eql(\"invalid_grant\");",
															"    pm.expect(body.error_description).to.eql(\"Missing or invalid permission ticket.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														},
														{
															"key": "claim_token",
															"value": "{{bob_id_token}}",
															"type": "text"
														},
														{
															"key": "claim_token_format",
															"value": "urn:ietf:params:oauth:token-type:id_token",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone",
															"type": "text"
														},
														{
															"key": "rpt",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Requesting Party - Client",
									"item": [
										{
											"name": "Simple Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "57d67933-bdf2-4e43-b9a2-13f026854238",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_simple', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - no additional scope",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c70819de-ba37-48a7-b2dc-6e982b004e1c",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    ",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"",
															"    //Is not an end user bearer",
															"    pm.expect(payload.aud).to.eql(payload.sub);",
															"",
															"    //Save it, will be used to extend RPT",
															"    pm.environment.set('rqp_token', body.access_token);",
															"});",
															"",
															"pm.test(\"Has not a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.not.have.property('refresh_token');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Introspection - Validate RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "42f6acfb-4a24-4701-b135-79552cea6f5e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has permissions\", function () {",
															"    pm.response.to.be.json;",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('sub');",
															"    pm.expect(body).to.have.property('client_id');",
															"    pm.expect(body).to.have.property('permissions');",
															"",
															"    //Is client access_token",
															"    pm.expect(body.sub).to.eql(body.client_id);",
															"",
															"    const rs_one = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "token",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{introspectionEndpoint}}",
													"host": [
														"{{introspectionEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Extended Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3895eaf1-3f0a-4cec-9eab-1ea705ec1849",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_extended', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - additional scope",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6b7767e8-a4ce-44ca-a4ab-58a23246a2f5",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.not.have.property('upgraded');",
															"",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"",
															"",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    const rs_two = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(3);//ensure no duplicated keys",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\",\"address\"]);",
															"",
															"    //Is not an end user bearer",
															"    pm.expect(payload.aud).to.eql(payload.sub);",
															"});",
															"",
															"pm.test(\"Has not a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.not.have.property('refresh_token');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_extended}}",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone address",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Simple Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b66c4631-2be7-4066-a17f-27e71faebc73",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_simple', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - with RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "13ae062f-945a-4085-a8a7-00901821ca39",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"/* ",
															" * In this test, I do expect to have : ",
															" *  - rpt previous permission (ressource_set_one)",
															" *  - resource_set_two with scope \"email\" coming from the ticket",
															" *  - additional scope \"phone\" on matching resource_set as requested into the body.",
															"*/",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.have.property('upgraded');",
															"",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"    pm.expect(body.upgraded).to.eql(true);",
															"",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    const rs_two = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(2);//ensure no duplicated keys",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\"]);",
															"    ",
															"    //Is not an end user bearer",
															"    pm.expect(payload.aud).to.eql(payload.sub);",
															"",
															"    //Save it, will be used to check introspection",
															"    pm.environment.set('extended_rpt', body.access_token);",
															"});",
															"",
															"pm.test(\"Has not a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.not.have.property('refresh_token');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone",
															"type": "text"
														},
														{
															"key": "rpt",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Introspection - Validate extended RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1e1a681c-70ce-4b79-83ac-07024647aa40",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has permissions\", function () {",
															"    pm.response.to.be.json;",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('sub');",
															"    pm.expect(body).to.have.property('client_id');",
															"    pm.expect(body).to.have.property('permissions');",
															"",
															"    //Is user access_token",
															"    pm.expect(body.sub).to.eql(body.client_id);",
															"",
															"    const rs_one = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"",
															"    const rs_two = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(2);",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\"]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "token",
															"value": "{{extended_rpt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{introspectionEndpoint}}",
													"host": [
														"{{introspectionEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - Check one time permission ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d95466fd-2fe7-4a0a-8017-0d7933cb873f",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Has an error\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('error');",
															"    pm.expect(body).to.have.property('error_description');",
															"",
															"    pm.expect(body.error).to.eql(\"invalid_grant\");",
															"    pm.expect(body.error_description).to.eql(\"Missing or invalid permission ticket.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone",
															"type": "text"
														},
														{
															"key": "rpt",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5dbcbd1d-a7fa-4614-92db-2b36d808f511",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"organizations",
						"{{defaultOrganizationId}}",
						"environments",
						"{{defaultEnvironmentId}}",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4bf95fa9-634e-4cf7-801f-110566d4f850",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "961c4c1d-661b-4121-b2f2-c74f776c31bf",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}
