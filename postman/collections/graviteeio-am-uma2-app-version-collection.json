{
	"info": {
		"_postman_id": "721037fe-e84d-4321-ba2e-fe4f8f2b8ac0",
		"name": "Gravitee.io - AM - UMA 2.0 - app version",
		"description": "Test openid connect discovery specifications: https://openid.net/specs/openid-connect-discovery-1_0.html",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ed5e423-7918-4d55-8469-4770bdc5a8a3",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/auth/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create uma 2.0  domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3552b80-9704-44e1-859c-763c91318276",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set('domain', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"uma2_postman\", \n\t\"description\": \"test user-managed access specifications\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default identity provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0fbd02e-178c-4477-94de-205c7ccccbf9",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities/default-idp-{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities",
								"default-idp-{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create in-memory IDP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "804cf20e-4360-4723-b446-84c0155ee898",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('idp.inmemory', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"Alice\\\",\\\"lastname\\\":\\\"Doe\\\",\\\"username\\\":\\\"alice\\\",\\\"password\\\":\\\"password\\\"},{\\\"firstname\\\":\\\"Bob\\\",\\\"lastname\\\":\\\"Doe\\\",\\\"username\\\":\\\"bob\\\",\\\"email\\\":\\\"bob.doe@mail.com\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create RS application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2009540a-f82a-4070-b9e3-618dbc51ce52",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Saving credentials\", function () {",
									"    let body = JSON.parse(responseBody);",
									"",
									"    let client_id = body.settings.oauth.clientId;",
									"    let secret = body.settings.oauth.clientSecret;",
									"    let authentication = btoa(client_id + \":\" + secret);  ",
									"",
									"    //Save fields",
									"    pm.environment.set('rs_app', body.id);",
									"    pm.environment.set('rs_client_id', client_id);",
									"    pm.environment.set('rs_client_secret', secret);",
									"    pm.environment.set('rs_client_authentication', authentication);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"RS-client\",\n  \"type\": \"RESOURCE_SERVER\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure RS application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d60572a-01d8-4f87-8d2b-6ae400519a91",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check grant\", function () {",
									"    let body = JSON.parse(responseBody);",
									"    pm.expect(body.settings.oauth.grantTypes).to.eql([\"password\",\"client_credentials\"]);",
									"    pm.expect(body.settings.oauth.scopes).to.eql([\"uma_protection\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"identities\": [\n    \"{{idp.inmemory}}\"\n  ],\n  \"settings\": {\n  \t\"oauth\": {\n  \t\t\"scopes\": [\"uma_protection\"],\n  \t\t\"redirectUris\": [],\n\t\t\"grantTypes\": [\"password\"]\n\t}\n  }\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{rs_app}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{rs_app}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create RqP application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c72f67a-1630-4a93-b293-b3ab75759a4c",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Saving credentials\", function () {",
									"    let body = JSON.parse(responseBody);",
									"",
									"    let client_id = body.settings.oauth.clientId;",
									"    let secret = body.settings.oauth.clientSecret;",
									"    let authentication = btoa(client_id + \":\" + secret);  ",
									"",
									"    //Save fields",
									"    pm.environment.set('rqp_app', body.id);",
									"    pm.environment.set('rqp_client_id', client_id);",
									"    pm.environment.set('rqp_client_secret', secret);",
									"    pm.environment.set('rqp_client_authentication', authentication);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"RQP-client\",\n  \"type\": \"WEB\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure RqP application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d76c8ad6-55b6-4b07-aacc-6823efa3a067",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check grant\", function () {",
									"    let body = JSON.parse(responseBody);",
									"    pm.expect(body.settings.oauth.grantTypes).to.have.members([\"password\",\"refresh_token\",\"urn:ietf:params:oauth:grant-type:uma-ticket\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"identities\": [\n    \"{{idp.inmemory}}\"\n  ],\n  \"settings\": {\n  \t\"oauth\": {\n  \t\t\"redirectUris\": [],\n\t\t\"grantTypes\": [\"password\",\"refresh_token\",\"urn:ietf:params:oauth:grant-type:uma-ticket\"],\n\t\t\"scopes\": [\"openid\",\"profile\",\"email\",\"phone\",\"address\"]\n\t}\n  }\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{rqp_app}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{rqp_app}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d3c0b46-1bc6-431b-a23b-12038111c03c",
								"exec": [
									"// wait for sync process",
									"setTimeout(function () { }, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "UMA_2.0",
			"item": [
				{
					"name": "Case - UMA disabled",
					"item": [
						{
							"name": "Discovery",
							"item": [
								{
									"name": "Gravitee AM .well-known",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35cdbd9f-12d5-42fe-ba24-c3410deb6148",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check discovery endpoints\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    ",
													"    pm.expect(body).to.have.property(\"openid-configuration\");",
													"    pm.expect(body).to.not.have.property(\"uma2-configuration\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/.well-known",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												".well-known"
											]
										}
									},
									"response": []
								},
								{
									"name": "Gravitee UMA .well-known disabled",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5372fb1f-54fd-4ed2-9426-2349a468672f",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/uma/.well-known/uma2-configuration",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"uma",
												".well-known",
												"uma2-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Token Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f3b1f1f-4696-4a1f-8f5e-c098df67e283",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check uma 2.0 discovery endpoint\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"",
													"    //Oauth 2.0 endpoints",
													"    pm.expect(body).to.have.property(\"token_endpoint\");",
													"    pm.environment.set('oidcTokenEndpoint', body.token_endpoint);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/oidc/.well-known/openid-configuration",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"oidc",
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "Token endpoint - Unsupported UMA grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cb78219-bf3e-4011-b55f-5543dc1bc772",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Grant type must not be supported when UMA is disabled",
													"pm.test(\"Check grant type is not supported\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"    ",
													"    pm.expect(body.error).to.eql(\"unsupported_grant_type\");",
													"    pm.expect(body.error_description).to.eql(\"Unsupported grant type: urn:ietf:params:oauth:grant-type:uma-ticket\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic {{rs_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "must_fail_before",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{oidcTokenEndpoint}}",
											"host": [
												"{{oidcTokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Enable UMA 2.0",
					"item": [
						{
							"name": "Enable UMA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80afe5ef-0b06-424d-9da7-be805dbcdf50",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"UMA enabled for domain\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.uma.enabled).to.eql(true);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function () { }, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"uma\": {\n    \"enabled\": true\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gravitee AM .well-known",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332ce953-5ce9-468a-9c5e-6f53c9904eae",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check uma is enabled\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    let body = pm.response.json();",
											"    let expected_endpoint = pm.environment.get('gateway_url') + \"/\" + pm.environment.get('domain') + \"/uma/.well-known/uma2-configuration\";",
											"",
											"    pm.expect(body).to.have.property(\"openid-configuration\");",
											"    pm.expect(body).to.have.property(\"uma2-configuration\");",
											"",
											"    pm.expect(body['uma2-configuration']).to.eql(expected_endpoint);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/.well-known",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										".well-known"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gravitee UMA .well-known enabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ae6a9fd-12ea-4cb9-81f5-479a9dd1e031",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check uma 2.0 discovery endpoint\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"",
											"    //Specific uma 2.0 endpoints",
											"    pm.expect(body).to.have.property(\"resource_registration_endpoint\");",
											"    pm.expect(body).to.have.property(\"permission_endpoint\");",
											"    pm.expect(body).to.have.property(\"uma_profiles_supported\");",
											"    pm.expect(body).to.have.property(\"claims_interaction_endpoint\");",
											"    pm.environment.set('resource_registration_endpoint', body.resource_registration_endpoint);",
											"    pm.environment.set('permission_endpoint', body.permission_endpoint);",
											"",
											"    //Check UMA Grant is available",
											"    pm.expect(body.grant_types_supported).to.include('urn:ietf:params:oauth:grant-type:uma-ticket');",
											"",
											"    //Oauth 2.0 endpoints",
											"    pm.expect(body).to.have.property(\"token_endpoint\");",
											"    pm.expect(body).to.have.property(\"introspection_endpoint\");",
											"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
											"    pm.environment.set('introspectionEndpoint', body.introspection_endpoint);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/uma/.well-known/uma2-configuration",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"uma",
										".well-known",
										"uma2-configuration"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UMA Protection API",
					"item": [
						{
							"name": "Invalid cases",
							"item": [
								{
									"name": "Not a PAT (Protection Api Token)",
									"item": [
										{
											"name": "Login without UMA scope",
											"item": [
												{
													"name": "Login without - Not PAT",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "396fcf8c-b88f-4149-bda0-f856ead2464b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Has an access_token\", function () {",
																	"    var body = pm.response.json();",
																	"    pm.expect(body).to.have.property('access_token');",
																	"    pm.expect(body).to.have.property('token_type');",
																	"    pm.expect(body.token_type).to.eql('bearer');",
																	"    pm.expect(body).to.have.property('expires_in');",
																	"    ",
																	"    pm.environment.set('access_token', body.access_token);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{rqp_client_authentication}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "alice",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "password",
																	"type": "text"
																}
															],
															"options": {
																"urlencoded": {}
															}
														},
														"url": {
															"raw": "{{tokenEndpoint}}",
															"host": [
																"{{tokenEndpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Resource Registration",
											"item": [
												{
													"name": "Not Authenticated",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "79aba7e5-1b48-4ba4-ac5d-d7b4e839f211",
																"exec": [
																	"pm.test(\"Status code is 401\", function () {",
																	"    pm.response.to.have.status(401);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Not Supported method",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d4f146b5-437d-4caa-8c52-bc6f4edbd109",
																"exec": [
																	"pm.test(\"Status code is 405\", function () {",
																	"    pm.response.to.have.status(405);",
																	"});",
																	"",
																	"pm.test(\"Check 405 response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"    ",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"unsupported_method_type\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Missing scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "e1028c87-f30d-4d6f-bce6-30ff88fc2be1",
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Check 403 response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"insufficient_scope\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{access_token}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Permission Ticket",
											"item": [
												{
													"name": "Not Authenticated",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "96fc8a1a-002c-40cc-8cea-6b00ae8762b5",
																"exec": [
																	"pm.test(\"Status code is 401\", function () {",
																	"    pm.response.to.have.status(401);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Not Supported method",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "61b1f0d9-84e1-44b5-a194-cf7f3e5bbedd",
																"exec": [
																	"pm.test(\"Status code is 405\", function () {",
																	"    pm.response.to.have.status(405);",
																	"});",
																	"",
																	"pm.test(\"Check 405 response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"unsupported_method_type\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Not A Client PAT",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "95da5a50-c2b3-4363-aef6-5f098e8dc490",
																"exec": [
																	"pm.test(\"Status code is 401\", function () {",
																	"    pm.response.to.have.status(401);",
																	"});",
																	"",
																	"pm.test(\"Check 401 response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body).to.have.property(\"error_description\");",
																	"    pm.expect(body.error).to.eql(\"invalid_token\");",
																	"    pm.expect(body.error_description).to.eql(\"The access token was not issued for a Client\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "With a PAT (Protection Api Token)",
									"item": [
										{
											"name": "Prepare - Login with UMA scope",
											"item": [
												{
													"name": "Alice Login - PAT bearer",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "22c65180-b986-4510-ad42-618600d27ded",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Has an access_token\", function () {",
																	"    var body = pm.response.json();",
																	"    pm.expect(body).to.have.property('access_token');",
																	"    pm.expect(body).to.have.property('token_type');",
																	"    pm.expect(body.token_type).to.eql('bearer');",
																	"    pm.expect(body).to.have.property('expires_in');",
																	"    pm.expect(body).to.have.property('scope');",
																	"    pm.expect(body.scope).to.eql('uma_protection');",
																	"",
																	"    pm.environment.set('protection_api_token', body.access_token);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{rs_client_authentication}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "alice",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "scope",
																	"value": "uma_protection",
																	"type": "text"
																}
															],
															"options": {
																"urlencoded": {}
															}
														},
														"url": {
															"raw": "{{tokenEndpoint}}",
															"host": [
																"{{tokenEndpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Resource Registration",
											"item": [
												{
													"name": "Icon Uri malformed",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ad72ee6b-79d1-458e-8043-ef6e311c70f0",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Has a location\", function () {",
																	"    var body = pm.response.json();",
																	"    //Check body",
																	"    pm.expect(body).to.have.property('error');",
																	"    pm.expect(body).to.have.property('error_description');",
																	"    pm.expect(body.error).to.eql(\"invalid_request\");",
																	"    pm.expect(body.error_description).to.include(\"Icon uri claim is malformed\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_scopes\":[  \n      \"profile\"\n   ],\n   \"description\":\"Should fail due to malformed icon_uri\",\n   \"name\":\"Should fail\",\n   \"icon_uri\":\"trigger_malformed_icon_uri\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Scope not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d54e038d-b628-4c12-9a57-eeabc236b04d",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Has a location\", function () {",
																	"    var body = pm.response.json();",
																	"    //Check body",
																	"    pm.expect(body).to.have.property('error');",
																	"    pm.expect(body).to.have.property('error_description');",
																	"    pm.expect(body.error).to.eql(\"invalid_request\");",
																	"    pm.expect(body.error_description).to.include(\"Scope [not_found] can not be found.\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_scopes\":[  \n      \"not_found\"\n   ],\n   \"description\":\"Should fail due to missing scope\",\n   \"name\":\"Should fail\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Permission Ticket",
											"item": [
												{
													"name": "RS Login - PAT bearer",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "21fd4201-562f-4fb7-aba4-7e1bb9297a46",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Has an access_token\", function () {",
																	"    var body = pm.response.json();",
																	"    pm.expect(body).to.have.property('access_token');",
																	"    pm.expect(body).to.have.property('token_type');",
																	"    pm.expect(body.token_type).to.eql('bearer');",
																	"    pm.expect(body).to.have.property('expires_in');",
																	"    pm.expect(body).to.have.property('scope');",
																	"    pm.expect(body.scope).to.eql('uma_protection');",
																	"",
																	"    pm.environment.set('rs_pat', body.access_token);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{rs_client_authentication}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "client_credentials",
																	"type": "text"
																},
																{
																	"key": "scope",
																	"value": "uma_protection",
																	"type": "text"
																}
															],
															"options": {
																"urlencoded": {}
															}
														},
														"url": {
															"raw": "{{tokenEndpoint}}",
															"host": [
																"{{tokenEndpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Parsing Error",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "55768af4-9909-4ab0-ba05-058447af6b42",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Check 405 response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"invalid_request\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_id_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile:read\",\n\t\t\t\"email:read\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_id_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"avatar:write\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_scopes\":[  \n\t\t\t\"avatar:write\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_id_two}}\",\n\t}\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Simple Request - Invalid Request",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "8cc2f75d-f6be-49b6-9ed8-94ba813a99ca",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Check response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"invalid_request\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_id\":\"test\",\n   \"resource_scopes\":[  \n      \"valide one\",\n      \"\"\n   ]\n   \n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Extended Permission - Invalid Request",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "e72a770a-85aa-4103-b90a-11775b9c4657",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Check response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"invalid_request\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile:read\",\n\t\t\t\"email:read\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"avatar:write\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_scopes\":[  \n\t\t\t\"avatar:write\"\n\t\t]\n\t}\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Resource",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "1867bb4f-cb32-4ea6-8104-6726f82f573f",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Has an access_token\", function () {",
																	"    var body = pm.response.json();",
																	"    //Check headers",
																	"    pm.response.to.have.header(\"Content-Type\");",
																	"    pm.response.to.have.header('Location');",
																	"    //Check body",
																	"    pm.expect(body).to.have.property('_id');",
																	"    pm.expect(body).to.have.property('resource_scopes');",
																	"    ",
																	"    //Save values",
																	"    pm.environment.set('resource_location', pm.response.headers.get('Location'));",
																	"    pm.environment.set('resource_id', body._id);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_scopes\":[  \n      \"profile\"\n   ],\n   \"description\":\"desc\",\n   \"name\":\"name\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{resource_registration_endpoint}}",
															"host": [
																"{{resource_registration_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Simple Request - Invalid resource scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d4cd085a-0b6b-48e1-a522-941ee47f0d25",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Check response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"invalid_scope\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_id\":\"{{resource_id}}\",\n   \"resource_scopes\":[\n   \t  \"profile\",\n      \"not found\"\n   ]\n   \n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Resource",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "362b576b-f7dd-43d7-b498-c24f2617b195",
																"exec": [
																	"pm.test(\"Status code is 204\", function () {",
																	"    pm.response.to.have.status(204);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "DELETE",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"url": {
															"raw": "{{resource_location}}",
															"host": [
																"{{resource_location}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Simple Request - Invalid resource id",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "92cf3775-397f-4adb-9d3e-e96035285080",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Check response\", function () {",
																	"    pm.response.to.be.header('Content-Type', 'application/json');",
																	"    var body = pm.response.json();",
																	"",
																	"    //Requested uma 2.0 response",
																	"    pm.expect(body).to.have.property(\"error\");",
																	"    pm.expect(body.error).to.eql(\"invalid_resource_id\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{  \n   \"resource_id\":\"{{resource_id}}\",\n   \"resource_scopes\":[  \n      \"email\"\n   ]\n   \n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "Case when user bearer called Protected Access Token (PAT) does not contains uma_protected scope.",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Nominal case",
							"item": [
								{
									"name": "Prepare - Login with UMA scope",
									"item": [
										{
											"name": "Alice Login - PAT bearer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7ded48b4-aade-402a-8a79-b552b5d34094",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.have.property('scope');",
															"    pm.expect(body.scope).to.eql('uma_protection');",
															"",
															"    pm.environment.set('protection_api_token', body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rs_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "alice",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "uma_protection",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Resource Registration",
									"item": [
										{
											"name": "List",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f537e99-cd2e-4c70-871b-c4c7ee0a789d",
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"host": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{protection_api_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{resource_registration_endpoint}}",
													"host": [
														"{{resource_registration_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "07c4c6b7-1661-4520-be21-afe4b61f8f71",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Has a location\", function () {",
															"    var body = pm.response.json();",
															"    //Check headers",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.response.to.have.header('Location');",
															"    //Check body",
															"    pm.expect(body).to.have.property('_id');",
															"    pm.expect(body).to.have.property('resource_scopes');",
															"",
															"    //Save values",
															"    pm.environment.set('resource_location', pm.response.headers.get('Location'));",
															"    pm.environment.set('resource_id', body._id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"resource_scopes\":[  \n      \"phone\"\n   ],\n   \"description\":\"photo1\",\n   \"icon_uri\":\"http://www.example.com/icons/picture.png\",\n   \"name\":\"Photo access\",\n   \"type\":\"http://www.example.com/resource/photo\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{resource_registration_endpoint}}",
													"host": [
														"{{resource_registration_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "328db8e3-f003-48c2-b234-0fb17d625404",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Is able to fetch resource_set\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('_id');",
															"    pm.expect(body).to.have.property('resource_scopes');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"url": {
													"raw": "{{resource_location}}",
													"host": [
														"{{resource_location}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "383fa4d2-610c-46b9-9240-9af7342b97e9",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Is able to update resource_set\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('_id');",
															"    pm.expect(body).to.have.property('resource_scopes');",
															"    pm.expect(body).to.have.property('name');",
															"",
															"    pm.expect(body.name).to.eql('updated');",
															"    pm.expect(body.resource_scopes).to.eql([\"profile\"]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"resource_scopes\":[  \n      \"profile\"\n   ],\n   \"name\":\"updated\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{resource_location}}",
													"host": [
														"{{resource_location}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "List",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f4426382-8732-4a60-bba0-896c32f542e8",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Can find resource_set in list\", function () {",
															"    var body = pm.response.json();",
															"    console.log(body[0]);",
															"    console.log(pm.environment.get('resource_id'));",
															"    pm.expect(body[0]).to.eql(pm.environment.get('resource_id'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"host": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"url": {
													"raw": "{{resource_registration_endpoint}}",
													"host": [
														"{{resource_registration_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "834774a9-b611-48db-94df-c07de4b4cf28",
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"url": {
													"raw": "{{resource_location}}",
													"host": [
														"{{resource_location}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Resource Access Policies",
									"item": [
										{
											"name": "Create resource",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a0a729e9-0f33-427c-a204-57bd36be0f49",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    var body = pm.response.json();",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set('resource_location', pm.response.headers.get('Location'));",
															"    pm.environment.set('resource_id', body._id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"resource_scopes\":[  \n      \"phone\"\n   ],\n   \"description\":\"photo1\",\n   \"icon_uri\":\"http://www.example.com/icons/picture.png\",\n   \"name\":\"Photo access\",\n   \"type\":\"http://www.example.com/resource/photo\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{resource_registration_endpoint}}",
													"host": [
														"{{resource_registration_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "List policies",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6fc10fa7-f382-4c4e-9bf3-b93b178a9107",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Can find default policy\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body[0]).not.equal(null);",
															"    pm.environment.set('policy_id', body[0]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"host": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{protection_api_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{resource_location}}/policies",
													"host": [
														"{{resource_location}}"
													],
													"path": [
														"policies"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete default policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0c35dfbb-4349-4b60-8719-d294cd859a9e",
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"url": {
													"raw": "{{resource_location}}/policies/{{policy_id}}",
													"host": [
														"{{resource_location}}"
													],
													"path": [
														"policies",
														"{{policy_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "460851f4-cc74-4bb3-8eeb-dcddca9466f9",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Has a location\", function () {",
															"    var body = pm.response.json();",
															"    //Check headers",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.response.to.have.header('Location');",
															"    //Check body",
															"    pm.expect(body).to.have.property('id');",
															"    pm.expect(body).to.have.property('condition');",
															"",
															"    //Save values",
															"    pm.environment.set('policy_location', pm.response.headers.get('Location'));",
															"    pm.environment.set('policy_id', body.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\": \"policy-name\",\n\t\"enabled\": true,\n\t\"description\": \"policy-description\",\n\t\"type\": \"groovy\",\n\t\"condition\": {\n\t\t\"onRequestScript\": \"import io.gravitee.policy.groovy.PolicyResult.State\\\\nresult.state = State.SUCCESS;\"\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{resource_location}}/policies",
													"host": [
														"{{resource_location}}"
													],
													"path": [
														"policies"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "30082c06-d479-410e-b8ff-bd7b2d827c7d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Is able to fetch policy\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id');",
															"    pm.expect(body).to.have.property('condition');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"url": {
													"raw": "{{policy_location}}",
													"host": [
														"{{policy_location}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f7aa1ead-7159-4b27-89c6-739db7b478e2",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Is able to update resource_set\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('id');",
															"    pm.expect(body).to.have.property('name');",
															"    pm.expect(body).to.have.property('condition');",
															"    pm.expect(body.name).to.eql('policy-name-updated');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\": \"policy-name-updated\",\n\t\"enabled\": true,\n\t\"description\": \"policy-description\",\n\t\"type\": \"groovy\",\n\t\"condition\": {\n\t\t\"onRequestScript\": \"import io.gravitee.policy.groovy.PolicyResult.State\\\\nresult.state = State.FAILURE;\"\n\t}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{policy_location}}",
													"host": [
														"{{policy_location}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "List policies",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d138baf8-934a-4da2-8283-1f7820f00912",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Can find policies\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body[0]).to.eql(pm.environment.get('policy_id'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"host": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"url": {
													"raw": "{{resource_location}}/policies",
													"host": [
														"{{resource_location}}"
													],
													"path": [
														"policies"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4d6eeaaa-dc0f-40ca-ab4d-340b6a339c96",
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"url": {
													"raw": "{{policy_location}}",
													"host": [
														"{{policy_location}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete resource",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8e3eb9d1-4119-478b-8377-bd5f81235d81",
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"url": {
													"raw": "{{resource_location}}",
													"host": [
														"{{resource_location}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Permission Ticket",
									"item": [
										{
											"name": "Create New Resource One",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "526cb85d-fec9-4293-82a8-20fcbbbc661b",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    //Check headers",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.response.to.have.header('Location');",
															"    //Check body",
															"    pm.expect(body).to.have.property('_id');",
															"    pm.expect(body).to.have.property('resource_scopes');",
															"",
															"    //Save values",
															"    pm.environment.set('resource_location_one', pm.response.headers.get('Location'));",
															"    pm.environment.set('resource_set_one', body._id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"resource_scopes\":[  \n      \"profile\"\n   ],\n   \"description\":\"Give access to profile information\",\n   \"icon_uri\": null,\n   \"name\":\"Profile access\",\n   \"type\":null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{resource_registration_endpoint}}",
													"host": [
														"{{resource_registration_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "List policies",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a1cb0b1b-905c-4e25-a8e2-67165968fac3",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Can find default policy\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body[0]).not.equal(null);",
															"    pm.environment.set('policy_id', body[0]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"host": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{protection_api_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{resource_location_one}}/policies",
													"host": [
														"{{resource_location_one}}"
													],
													"path": [
														"policies"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete default policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ada6e376-cfae-4a0a-ada9-a8c443204aff",
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"url": {
													"raw": "{{resource_location_one}}/policies/{{policy_id}}",
													"host": [
														"{{resource_location_one}}"
													],
													"path": [
														"policies",
														"{{policy_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create New Resource Two",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cb17e4a1-3ea1-43d5-b9e2-ad46704d7e1c",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    //Check headers",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.response.to.have.header('Location');",
															"    //Check body",
															"    pm.expect(body).to.have.property('_id');",
															"    pm.expect(body).to.have.property('resource_scopes');",
															"",
															"    //Save values",
															"    pm.environment.set('resource_location_two', pm.response.headers.get('Location'));",
															"    pm.environment.set('resource_set_two', body._id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"resource_scopes\":[  \n      \"phone\",\n      \"email\",\n      \"address\"\n   ],\n   \"description\":\"Phone, email and address access\",\n   \"name\":\"Contact access\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{resource_registration_endpoint}}",
													"host": [
														"{{resource_registration_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "List policies",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2c4cfdcb-13db-4b79-8697-f254c8cc2e20",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Can find default policy\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body[0]).not.equal(null);",
															"    pm.environment.set('policy_id', body[0]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"host": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{protection_api_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{resource_location_two}}/policies",
													"host": [
														"{{resource_location_two}}"
													],
													"path": [
														"policies"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete default policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "699d6d2b-d329-4c1f-94a4-d7fb01a4bff4",
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{protection_api_token}}"
													}
												],
												"url": {
													"raw": "{{resource_location_two}}/policies/{{policy_id}}",
													"host": [
														"{{resource_location_two}}"
													],
													"path": [
														"policies",
														"{{policy_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RS Login - PAT bearer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6528c793-79aa-4e1c-9cac-73139c10a6ba",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.have.property('scope');",
															"    pm.expect(body.scope).to.eql('uma_protection');",
															"",
															"    pm.environment.set('rs_pat', body.access_token);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rs_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "uma_protection",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Simple Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "05a49b0c-a17f-4f44-a36a-6cd100cc3b89",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_simple', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{rs_pat}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{  \n   \"resource_id\":\"{{resource_set_one}}\",\n   \"resource_scopes\":[  \n      \"profile\"\n   ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Extended Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c89ea4f4-1d20-402b-b941-10943002748d",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_extended', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{rs_pat}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UMA Grant",
					"item": [
						{
							"name": "Prepare",
							"item": [
								{
									"name": "Bob Login - to RqP Client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8437edab-50a6-4469-8722-a4c6e8ecf58d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('scope');",
													"    pm.expect(body.scope).to.eql('openid');",
													"    pm.expect(body).to.have.property('id_token');",
													"",
													"    pm.environment.set('bob_id_token', body.id_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "bob",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RS Login - PAT bearer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95c08629-3ebf-41e6-af1d-d5f64d72ace3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('scope');",
													"    pm.expect(body.scope).to.eql('uma_protection');",
													"",
													"    pm.environment.set('rs_pat', body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rs_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "uma_protection",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Extended Request Permission Ticket",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad9ee91c-348f-4913-a9c9-b0a984a67db4",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Ticket successfully created\", function () {",
													"    var body = pm.response.json();",
													"    //Check body",
													"    pm.expect(body).to.have.property('ticket');",
													"    //Save values",
													"    pm.environment.set('permission_ticket_extended', body.ticket);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{rs_pat}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{permission_endpoint}}",
											"host": [
												"{{permission_endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invalid Case",
							"item": [
								{
									"name": "RPT Request - without ticket",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f6fa2bc-b116-4bf5-9bbc-4c8b99c0a13e",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"",
													"    pm.expect(body.error).to.eql(\"invalid_grant\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - invalid ticket",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f61cfd3d-75f9-4cd7-b4c9-e27124ad272c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"",
													"    pm.expect(body.error).to.eql(\"invalid_grant\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "notfound",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - missing claim_token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2933546e-a6a5-401f-a252-0aac2a6898b1",
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('ticket');",
													"",
													"    pm.expect(body.error).to.eql(\"need_info\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "notfound",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "missingClaimToken",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - missing claim_token_format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f66137f2-cf6b-4dc7-bf35-93adbe603588",
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('ticket');",
													"",
													"    pm.expect(body.error).to.eql(\"need_info\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "notfound",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "missingClaimTokenFormat",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - invalid claim_token_format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d24d5a4c-6dd9-41a8-9fb2-eb55cf184a61",
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('ticket');",
													"",
													"    pm.expect(body.error).to.eql(\"need_info\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "notfound",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "invalidFormat",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "missingClaimTokenFormat",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - invalid claim_token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6475ff1f-dd87-4c52-b9eb-417fb6a9b07c",
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('ticket');",
													"",
													"    pm.expect(body.error).to.eql(\"need_info\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "{{permission_ticket_simple}}",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "urn:ietf:params:oauth:token-type:id_token",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "malformedClaimToken",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - invalid_scope unknown",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "001ad5cb-c07d-43f8-954c-ff54c148f105",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"",
													"    //Test with a scope that has not been pre-registered into the application scopes settings.",
													"    pm.expect(body.error).to.eql(\"invalid_scope\");",
													"    pm.expect(body.error_description).to.eql(\"At least one of the scopes included in the request does not match client pre-registered scopes\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "{{permission_ticket_extended}}",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "{{bob_id_token}}",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "urn:ietf:params:oauth:token-type:id_token",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "profile:unknown",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - invalid_scope unbound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0396042-9349-4db5-aeab-a47168a603b6",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"",
													"    //Test with a scope that has been pre-registered into the application scopes settings, but not on the resource_set",
													"    pm.expect(body.error).to.eql(\"invalid_scope\");",
													"    pm.expect(body.error_description).to.eql(\"At least one of the scopes included in the request does not match client pre-registered scopes\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "{{permission_ticket_extended}}",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "{{bob_id_token}}",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "urn:ietf:params:oauth:token-type:id_token",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "phone:write",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RPT Request - with RPT expired",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4906b7bb-27f8-4fa7-a4c8-182af176f5a9",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Has an error\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('error');",
													"    pm.expect(body).to.have.property('error_description');",
													"",
													"    //Test with expired RPT",
													"    pm.expect(body.error).to.eql(\"invalid_grant\");",
													"    pm.expect(body.error_description).to.eql(\"Requesting Party Token (rpt) not valid\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{rqp_client_authentication}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
													"type": "text"
												},
												{
													"key": "ticket",
													"value": "{{permission_ticket_extended}}",
													"type": "text"
												},
												{
													"key": "claim_token",
													"value": "{{bob_id_token}}",
													"type": "text"
												},
												{
													"key": "claim_token_format",
													"value": "urn:ietf:params:oauth:token-type:id_token",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "phone",
													"type": "text"
												},
												{
													"key": "rpt",
													"value": "eyJraWQiOiJkZWZhdWx0LWdyYXZpdGVlLUFNLWtleSIsImFsZyI6IkhTMjU2In0.eyJzdWIiOiIwMzQ4NDFmNC00ZjAwLTQwODYtODg0MS1mNDRmMDA2MDg2ODEiLCJhdWQiOiI5ZjA5Yzc1Ni00MjhkLTQ5MTgtODljNy01NjQyOGRhOTE4NmYiLCJwZXJtaXNzaW9ucyI6W3sicmVzb3VyY2VJZCI6Ijc3ZWEwZTk2LTBiMGMtNDBlNy1hYTBlLTk2MGIwYzQwZTcxNiIsInJlc291cmNlU2NvcGVzIjpbInZpZXciLCJkb3dubG9hZCJdfSx7InJlc291cmNlSWQiOiJhMzE5MjcwOC04NDllLTQwNDgtOTkyNy0wODg0OWVlMDQ4YWEiLCJyZXNvdXJjZVNjb3BlcyI6WyJ2aWV3IiwiZG93bmxvYWQiLCJlZGl0Il19XSwiZG9tYWluIjoidW1hMl9wb3N0bWFuIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDkyL3VtYTJfcG9zdG1hbi9vaWRjIiwiZXhwIjoxNTkxMDM3NDkwLCJpYXQiOjE1OTEwMzAyOTAsImp0aSI6Im5nR2FqbHVqaVF3cTVSQlJSaWF5LVJfeFJJOVBPSVliWmplNy16Ri14YlUifQ.xINS0vIiVAQ3bKl09SdrFiJIwBCl6B0sY5k31fWXVnU",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Valid Cases",
							"item": [
								{
									"name": "Requesting Party - User",
									"item": [
										{
											"name": "Simple Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c1bd8025-3868-4f65-ba20-dd95feafb3df",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_simple', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{rs_pat}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - no additional scope",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "150f4067-500c-42bc-a7d1-de17aa126fdc",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    ",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"",
															"    //Save it, will be used to extend RPT",
															"    pm.environment.set('rqp_token', body.access_token);",
															"});",
															"",
															"pm.test(\"Has a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('refresh_token');",
															"   ",
															"    let payload = parseJwtPayload(body.refresh_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"",
															"    pm.environment.set('rqp_refresh_token', body.refresh_token);",
															"});",
															"",
															"// wait for sync process",
															"setTimeout(function(){}, 5000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														},
														{
															"key": "claim_token",
															"value": "{{bob_id_token}}",
															"type": "text"
														},
														{
															"key": "claim_token_format",
															"value": "urn:ietf:params:oauth:token-type:id_token",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Introspection - Validate RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0730696d-6c0d-4902-90c7-a93f3d90bfb0",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has permissions\", function () {",
															"    pm.response.to.be.json;",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('sub');",
															"    pm.expect(body).to.have.property('client_id');",
															"    pm.expect(body).to.have.property('permissions');",
															"",
															"    //Is user access_token",
															"    pm.expect(body.sub).to.not.eql(body.client_id);",
															"",
															"    const rs_one = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "token",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{introspectionEndpoint}}",
													"host": [
														"{{introspectionEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Refresh Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "035aa117-6c40-4ae1-b2f8-40aa81d8c905",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Has a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('refresh_token');",
															"   ",
															"    let payload = parseJwtPayload(body.refresh_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"",
															"    pm.environment.set('rqp_refresh_token', body.refresh_token);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "refresh_token",
															"type": "text"
														},
														{
															"key": "refresh_token",
															"value": "{{rqp_refresh_token}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Extended Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "85242611-987b-447a-8ea8-b1dbb9373f89",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_extended', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{rs_pat}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - additional scope",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dfa041bd-10d8-46a5-b251-6f884a343c49",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.not.have.property('upgraded');",
															"",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"",
															"",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    const rs_two = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(3);//ensure no duplicated keys",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\",\"address\"]);",
															"});",
															"",
															"pm.test(\"Has a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('refresh_token');",
															"   ",
															"    let payload = parseJwtPayload(body.refresh_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_extended}}",
															"type": "text"
														},
														{
															"key": "claim_token",
															"value": "{{bob_id_token}}",
															"type": "text"
														},
														{
															"key": "claim_token_format",
															"value": "urn:ietf:params:oauth:token-type:id_token",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone address",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Simple Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "525f1a4f-516e-45da-bfec-22f5ca885486",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_simple', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{rs_pat}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - with RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2b760fa6-1898-4d28-a996-5252cc8bc4d5",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"/* ",
															" * In this test, I do expect to have : ",
															" *  - rpt previous permission (ressource_set_one)",
															" *  - resource_set_two with scope \"email\" coming from the ticket",
															" *  - additional scope \"phone\" on matching resource_set as requested into the body.",
															"*/",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.have.property('upgraded');",
															"",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"    pm.expect(body.upgraded).to.eql(true);",
															"",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    const rs_two = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(2);//ensure no duplicated keys",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\"]);",
															"",
															"    //Save it, will be used to check introspection",
															"    pm.environment.set('extended_rpt', body.access_token);",
															"});",
															"",
															"pm.test(\"Has a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('refresh_token');",
															"   ",
															"    let payload = parseJwtPayload(body.refresh_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														},
														{
															"key": "claim_token",
															"value": "{{bob_id_token}}",
															"type": "text"
														},
														{
															"key": "claim_token_format",
															"value": "urn:ietf:params:oauth:token-type:id_token",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone",
															"type": "text"
														},
														{
															"key": "rpt",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Introspection - Validate extended RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "195c2180-a4e4-4b99-a425-c576da42b2e9",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has permissions\", function () {",
															"    pm.response.to.be.json;",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('sub');",
															"    pm.expect(body).to.have.property('client_id');",
															"    pm.expect(body).to.have.property('permissions');",
															"",
															"    //Is user access_token",
															"    pm.expect(body.sub).to.not.eql(body.client_id);",
															"",
															"    const rs_one = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"",
															"    const rs_two = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(2);",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\"]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "token",
															"value": "{{extended_rpt}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{introspectionEndpoint}}",
													"host": [
														"{{introspectionEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - Check one time permission ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e831ce0e-95f3-4b98-afc2-d6d6d72f87e2",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Has an error\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('error');",
															"    pm.expect(body).to.have.property('error_description');",
															"",
															"    pm.expect(body.error).to.eql(\"invalid_grant\");",
															"    pm.expect(body.error_description).to.eql(\"Missing or invalid permission ticket.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														},
														{
															"key": "claim_token",
															"value": "{{bob_id_token}}",
															"type": "text"
														},
														{
															"key": "claim_token_format",
															"value": "urn:ietf:params:oauth:token-type:id_token",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone",
															"type": "text"
														},
														{
															"key": "rpt",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Requesting Party - Client",
									"item": [
										{
											"name": "Simple Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6b9d8a99-8c01-4326-b417-38da4536787c",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_simple', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{rs_pat}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - no additional scope",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "64904058-6217-41f6-9dd3-0a30d8a85be0",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    ",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"",
															"    //Is not an end user bearer",
															"    pm.expect(payload.aud).to.eql(payload.sub);",
															"",
															"    //Save it, will be used to extend RPT",
															"    pm.environment.set('rqp_token', body.access_token);",
															"});",
															"",
															"pm.test(\"Has not a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.not.have.property('refresh_token');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Introspection - Validate RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f1a7bc26-bf6d-4c26-b7b6-be4e88730c42",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has permissions\", function () {",
															"    pm.response.to.be.json;",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('sub');",
															"    pm.expect(body).to.have.property('client_id');",
															"    pm.expect(body).to.have.property('permissions');",
															"",
															"    //Is client access_token",
															"    pm.expect(body.sub).to.eql(body.client_id);",
															"",
															"    const rs_one = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "token",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{introspectionEndpoint}}",
													"host": [
														"{{introspectionEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Extended Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d5f6d55d-0120-4d0b-954c-79a9ddc44b03",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_extended', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{rs_pat}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - additional scope",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ed4e2999-24f8-4938-9734-a0db49bbea54",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.not.have.property('upgraded');",
															"",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"",
															"",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    const rs_two = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(3);//ensure no duplicated keys",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\",\"address\"]);",
															"",
															"    //Is not an end user bearer",
															"    pm.expect(payload.aud).to.eql(payload.sub);",
															"});",
															"",
															"pm.test(\"Has not a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.not.have.property('refresh_token');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_extended}}",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone address",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Simple Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b393fa9f-4fc8-4332-84d8-46242d57e8f0",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_simple', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{rs_pat}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - with RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "35384af0-d6df-424c-ac63-b862fe213895",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"/* ",
															" * In this test, I do expect to have : ",
															" *  - rpt previous permission (ressource_set_one)",
															" *  - resource_set_two with scope \"email\" coming from the ticket",
															" *  - additional scope \"phone\" on matching resource_set as requested into the body.",
															"*/",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.have.property('upgraded');",
															"",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"    pm.expect(body.upgraded).to.eql(true);",
															"",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    const rs_two = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(2);//ensure no duplicated keys",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\"]);",
															"    ",
															"    //Is not an end user bearer",
															"    pm.expect(payload.aud).to.eql(payload.sub);",
															"",
															"    //Save it, will be used to check introspection",
															"    pm.environment.set('extended_rpt', body.access_token);",
															"});",
															"",
															"pm.test(\"Has not a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.not.have.property('refresh_token');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone",
															"type": "text"
														},
														{
															"key": "rpt",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Introspection - Validate extended RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9f56f466-5794-48b1-b2fe-66ad0628b3d1",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has permissions\", function () {",
															"    pm.response.to.be.json;",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('sub');",
															"    pm.expect(body).to.have.property('client_id');",
															"    pm.expect(body).to.have.property('permissions');",
															"",
															"    //Is user access_token",
															"    pm.expect(body.sub).to.eql(body.client_id);",
															"",
															"    const rs_one = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"",
															"    const rs_two = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(2);",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\"]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "token",
															"value": "{{extended_rpt}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{introspectionEndpoint}}",
													"host": [
														"{{introspectionEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request - Check one time permission ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "549261f8-8bd7-491c-8dcd-0870960ad5e3",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Has an error\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('error');",
															"    pm.expect(body).to.have.property('error_description');",
															"",
															"    pm.expect(body.error).to.eql(\"invalid_grant\");",
															"    pm.expect(body.error_description).to.eql(\"Missing or invalid permission ticket.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_simple}}",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "phone",
															"type": "text"
														},
														{
															"key": "rpt",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Duplicated resource_id Request",
									"item": [
										{
											"name": "Extended Request Permission Ticket",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "33a5ef9d-2028-4254-a41b-fe8007406cb4",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Ticket successfully created\", function () {",
															"    var body = pm.response.json();",
															"    //Check body",
															"    pm.expect(body).to.have.property('ticket');",
															"    //Save values",
															"    pm.environment.set('permission_ticket_extended', body.ticket);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{rs_pat}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"email\"\n\t\t]\n\t},\n\t{  \n\t\t\"resource_id\":\"{{resource_set_two}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"phone\"\n\t\t]\n\t}\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{permission_endpoint}}",
													"host": [
														"{{permission_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RPT Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ceffcd37-68c0-4001-8108-e750813c3e12",
														"exec": [
															"function parseJwtPayload (token) {",
															"    var base64Url = token.split('.')[1];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has an access_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('access_token');",
															"    pm.expect(body).to.have.property('token_type');",
															"    pm.expect(body).to.have.property('expires_in');",
															"    pm.expect(body).to.not.have.property('upgraded');",
															"",
															"    pm.expect(body.token_type).to.eql('bearer');",
															"",
															"",
															"    let payload = parseJwtPayload(body.access_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    const rs_two = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(2);//ensure no duplicated keys",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\"]);",
															"",
															"    //Save it, will be used to extend RPT",
															"    pm.environment.set('rqp_token', body.access_token);",
															"});",
															"",
															"pm.test(\"Has a refresh_token\", function () {",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('refresh_token');",
															"   ",
															"    let payload = parseJwtPayload(body.refresh_token);",
															"    pm.expect(payload).to.have.property('permissions');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
															"type": "text"
														},
														{
															"key": "ticket",
															"value": "{{permission_ticket_extended}}",
															"type": "text"
														},
														{
															"key": "claim_token",
															"value": "{{bob_id_token}}",
															"type": "text"
														},
														{
															"key": "claim_token_format",
															"value": "urn:ietf:params:oauth:token-type:id_token",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Introspection - Validate RPT",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "76931933-84a0-41cb-8426-0a3df36f45f3",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Has permissions\", function () {",
															"    pm.response.to.be.json;",
															"    var body = pm.response.json();",
															"    pm.expect(body).to.have.property('sub');",
															"    pm.expect(body).to.have.property('client_id');",
															"    pm.expect(body).to.have.property('permissions');",
															"",
															"    //Is user access_token",
															"    pm.expect(body.sub).to.not.eql(body.client_id);",
															"",
															"    const rs_one = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
															"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
															"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
															"",
															"    const rs_two = body.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_two\"));",
															"    pm.expect(rs_two.resourceScopes.length).to.eql(2);",
															"    pm.expect(rs_two.resourceScopes).to.have.members([\"email\",\"phone\"]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Basic {{rqp_client_authentication}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "token",
															"value": "{{rqp_token}}",
															"type": "text"
														}
													],
													"options": {
														"urlencoded": {}
													}
												},
												"url": {
													"raw": "{{introspectionEndpoint}}",
													"host": [
														"{{introspectionEndpoint}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Requesting Party - Access Policies",
									"item": [
										{
											"name": "Case - deny all",
											"item": [
												{
													"name": "Assign denied policy to resource one",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "3ed37092-927f-41b9-8521-64de95e558ee",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Has a location\", function () {",
																	"    var body = pm.response.json();",
																	"    //Save values",
																	"    pm.environment.set('policy_location', pm.response.headers.get('Location'));",
																	"    pm.environment.set('policy_id', body.id);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"name\": \"policy-name\",\n\t\"enabled\": true,\n\t\"description\": \"policy-description\",\n\t\"type\": \"groovy\",\n\t\"condition\": {\n\t\t\"onRequestScript\": \"import io.gravitee.policy.groovy.PolicyResult.State\\\\nresult.state = State.FAILURE;\"\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{resource_location_one}}/policies",
															"host": [
																"{{resource_location_one}}"
															],
															"path": [
																"policies"
															]
														}
													},
													"response": []
												},
												{
													"name": "Simple Request Permission Ticket",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "7144d720-c4ce-4dcc-a00c-2152e21f50f3",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Ticket successfully created\", function () {",
																	"    var body = pm.response.json();",
																	"    //Check body",
																	"    pm.expect(body).to.have.property('ticket');",
																	"    //Save values",
																	"    pm.environment.set('permission_ticket_simple', body.ticket);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t}\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "RPT Request - no additional scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "1121f93c-457c-4e5a-a676-a2acd0062ef8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Has an error\", function () {",
																	"    var body = pm.response.json();",
																	"    pm.expect(body).to.have.property('error');",
																	"    pm.expect(body).to.have.property('error_description');",
																	"",
																	"    pm.expect(body.error).to.eql(\"invalid_grant\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{rqp_client_authentication}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
																	"type": "text"
																},
																{
																	"key": "ticket",
																	"value": "{{permission_ticket_simple}}",
																	"type": "text"
																},
																{
																	"key": "claim_token",
																	"value": "{{bob_id_token}}",
																	"type": "text"
																},
																{
																	"key": "claim_token_format",
																	"value": "urn:ietf:params:oauth:token-type:id_token",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{tokenEndpoint}}",
															"host": [
																"{{tokenEndpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Case - grant all",
											"item": [
												{
													"name": "Assign approved policy to resource one",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "3759c0d0-8979-49e5-87ea-28d4b3f6bdd2",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"name\": \"policy-name\",\n\t\"enabled\": true,\n\t\"description\": \"policy-description\",\n\t\"type\": \"groovy\",\n\t\"condition\": {\n\t\t\"onRequestScript\": \"import io.gravitee.policy.groovy.PolicyResult.State\\\\nresult.state = State.SUCCESS;\"\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{policy_location}}",
															"host": [
																"{{policy_location}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Simple Request Permission Ticket",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "7ea6f4a4-01d1-48e0-ad3f-497e6ddca28f",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Ticket successfully created\", function () {",
																	"    var body = pm.response.json();",
																	"    //Check body",
																	"    pm.expect(body).to.have.property('ticket');",
																	"    //Save values",
																	"    pm.environment.set('permission_ticket_simple', body.ticket);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t}\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "RPT Request - no additional scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "02b86adb-e862-4a8c-8f89-ce0f3d15661e",
																"exec": [
																	"function parseJwtPayload(token) {",
																	"    var base64Url = token.split('.')[1];",
																	"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
																	"    return JSON.parse(atob(base64));",
																	"}",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Has an access_token\", function () {",
																	"    var body = pm.response.json();",
																	"    pm.expect(body).to.have.property('access_token');",
																	"    pm.expect(body).to.have.property('token_type');",
																	"    pm.expect(body.token_type).to.eql('bearer');",
																	"    pm.expect(body).to.have.property('expires_in');",
																	"",
																	"    let payload = parseJwtPayload(body.access_token);",
																	"    pm.expect(payload).to.have.property('permissions');",
																	"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
																	"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
																	"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{rqp_client_authentication}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
																	"type": "text"
																},
																{
																	"key": "ticket",
																	"value": "{{permission_ticket_simple}}",
																	"type": "text"
																},
																{
																	"key": "claim_token",
																	"value": "{{bob_id_token}}",
																	"type": "text"
																},
																{
																	"key": "claim_token_format",
																	"value": "urn:ietf:params:oauth:token-type:id_token",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{tokenEndpoint}}",
															"host": [
																"{{tokenEndpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Case - grant client",
											"item": [
												{
													"name": "Assign approved policy to resource one - wrong client",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "94e8ed79-882f-4962-85ad-ad880d0eaf53",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"name\": \"policy-name\",\n\t\"enabled\": true,\n\t\"description\": \"policy-description\",\n\t\"type\": \"groovy\",\n\t\"condition\": {\n\t\t\"onRequestScript\": \"import io.gravitee.policy.groovy.PolicyResult.State\\\\nclient = context.attributes['client']\\\\nif(client.name == 'unknown') { result.state = State.SUCCESS; } else { result.state = State.FAILURE;}\"\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{policy_location}}",
															"host": [
																"{{policy_location}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Simple Request Permission Ticket",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "be4c8547-86ce-46d1-9679-8b9adde08204",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Ticket successfully created\", function () {",
																	"    var body = pm.response.json();",
																	"    //Check body",
																	"    pm.expect(body).to.have.property('ticket');",
																	"    //Save values",
																	"    pm.environment.set('permission_ticket_simple', body.ticket);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t}\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "RPT Request - no additional scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "38a79327-905d-4c55-9912-1ea46625995a",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Has an error\", function () {",
																	"    var body = pm.response.json();",
																	"    pm.expect(body).to.have.property('error');",
																	"    pm.expect(body).to.have.property('error_description');",
																	"",
																	"    pm.expect(body.error).to.eql(\"invalid_grant\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{rqp_client_authentication}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
																	"type": "text"
																},
																{
																	"key": "ticket",
																	"value": "{{permission_ticket_simple}}",
																	"type": "text"
																},
																{
																	"key": "claim_token",
																	"value": "{{bob_id_token}}",
																	"type": "text"
																},
																{
																	"key": "claim_token_format",
																	"value": "urn:ietf:params:oauth:token-type:id_token",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{tokenEndpoint}}",
															"host": [
																"{{tokenEndpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Assign approved policy to resource one - valid client",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "cf70e667-f609-4c84-aca5-49147d7432e5",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"name\": \"policy-name\",\n\t\"enabled\": true,\n\t\"description\": \"policy-description\",\n\t\"type\": \"groovy\",\n\t\"condition\": {\n\t\t\"onRequestScript\": \"import io.gravitee.policy.groovy.PolicyResult.State\\\\nclient = context.attributes['client']\\\\nif(client.name == 'RQP-client') { result.state = State.SUCCESS; } else { result.state = State.FAILURE;}\"\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{policy_location}}",
															"host": [
																"{{policy_location}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Simple Request Permission Ticket",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "78365597-d13d-42d8-9ff3-0888d5bfd64a",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Ticket successfully created\", function () {",
																	"    var body = pm.response.json();",
																	"    //Check body",
																	"    pm.expect(body).to.have.property('ticket');",
																	"    //Save values",
																	"    pm.environment.set('permission_ticket_simple', body.ticket);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t}\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "RPT Request - no additional scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "9a6331cd-a664-4290-8650-e20421589b05",
																"exec": [
																	"function parseJwtPayload(token) {",
																	"    var base64Url = token.split('.')[1];",
																	"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
																	"    return JSON.parse(atob(base64));",
																	"}",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Has an access_token\", function () {",
																	"    var body = pm.response.json();",
																	"    pm.expect(body).to.have.property('access_token');",
																	"    pm.expect(body).to.have.property('token_type');",
																	"    pm.expect(body.token_type).to.eql('bearer');",
																	"    pm.expect(body).to.have.property('expires_in');",
																	"",
																	"    let payload = parseJwtPayload(body.access_token);",
																	"    pm.expect(payload).to.have.property('permissions');",
																	"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
																	"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
																	"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{rqp_client_authentication}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
																	"type": "text"
																},
																{
																	"key": "ticket",
																	"value": "{{permission_ticket_simple}}",
																	"type": "text"
																},
																{
																	"key": "claim_token",
																	"value": "{{bob_id_token}}",
																	"type": "text"
																},
																{
																	"key": "claim_token_format",
																	"value": "urn:ietf:params:oauth:token-type:id_token",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{tokenEndpoint}}",
															"host": [
																"{{tokenEndpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Case - grant user",
											"item": [
												{
													"name": "Assign approved policy to resource one - wrong user",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "8015e8e2-967e-4e6f-8063-d7f0d0cd7107",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"name\": \"policy-name\",\n\t\"enabled\": true,\n\t\"description\": \"policy-description\",\n\t\"type\": \"groovy\",\n\t\"condition\": {\n\t\t\"onRequestScript\": \"import io.gravitee.policy.groovy.PolicyResult.State\\\\nuser = context.attributes['user']\\\\nif(user.username == 'unknown') { result.state = State.SUCCESS; } else { result.state = State.FAILURE;}\"\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{policy_location}}",
															"host": [
																"{{policy_location}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Simple Request Permission Ticket",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6566200a-eb70-4b7a-ae03-11340dd85fb0",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Ticket successfully created\", function () {",
																	"    var body = pm.response.json();",
																	"    //Check body",
																	"    pm.expect(body).to.have.property('ticket');",
																	"    //Save values",
																	"    pm.environment.set('permission_ticket_simple', body.ticket);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t}\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "RPT Request - no additional scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6ae72874-c855-4359-83e7-5fd24b32471d",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Has an error\", function () {",
																	"    var body = pm.response.json();",
																	"    pm.expect(body).to.have.property('error');",
																	"    pm.expect(body).to.have.property('error_description');",
																	"",
																	"    pm.expect(body.error).to.eql(\"invalid_grant\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{rqp_client_authentication}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
																	"type": "text"
																},
																{
																	"key": "ticket",
																	"value": "{{permission_ticket_simple}}",
																	"type": "text"
																},
																{
																	"key": "claim_token",
																	"value": "{{bob_id_token}}",
																	"type": "text"
																},
																{
																	"key": "claim_token_format",
																	"value": "urn:ietf:params:oauth:token-type:id_token",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{tokenEndpoint}}",
															"host": [
																"{{tokenEndpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Assign approved policy to resource one - valid user",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "13fc7264-8d71-4bf1-a035-b28f8c676fbe",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"name\": \"policy-name\",\n\t\"enabled\": true,\n\t\"description\": \"policy-description\",\n\t\"type\": \"groovy\",\n\t\"condition\": {\n\t\t\"onRequestScript\": \"import io.gravitee.policy.groovy.PolicyResult.State\\\\nuser = context.attributes['user']\\\\nif(user.username == 'bob') { result.state = State.SUCCESS; } else { result.state = State.FAILURE;}\"\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{policy_location}}",
															"host": [
																"{{policy_location}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Simple Request Permission Ticket",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "57973d7a-9985-4b46-aa89-8da3cb6ca6c9",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Ticket successfully created\", function () {",
																	"    var body = pm.response.json();",
																	"    //Check body",
																	"    pm.expect(body).to.have.property('ticket');",
																	"    //Save values",
																	"    pm.environment.set('permission_ticket_simple', body.ticket);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t}\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "RPT Request - no additional scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5fd70bed-a9d3-4575-9042-89c8124e2a8d",
																"exec": [
																	"function parseJwtPayload(token) {",
																	"    var base64Url = token.split('.')[1];",
																	"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
																	"    return JSON.parse(atob(base64));",
																	"}",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Has an access_token\", function () {",
																	"    var body = pm.response.json();",
																	"    pm.expect(body).to.have.property('access_token');",
																	"    pm.expect(body).to.have.property('token_type');",
																	"    pm.expect(body.token_type).to.eql('bearer');",
																	"    pm.expect(body).to.have.property('expires_in');",
																	"",
																	"    let payload = parseJwtPayload(body.access_token);",
																	"    pm.expect(payload).to.have.property('permissions');",
																	"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
																	"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
																	"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{rqp_client_authentication}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
																	"type": "text"
																},
																{
																	"key": "ticket",
																	"value": "{{permission_ticket_simple}}",
																	"type": "text"
																},
																{
																	"key": "claim_token",
																	"value": "{{bob_id_token}}",
																	"type": "text"
																},
																{
																	"key": "claim_token_format",
																	"value": "urn:ietf:params:oauth:token-type:id_token",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{tokenEndpoint}}",
															"host": [
																"{{tokenEndpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Case - grant permission request",
											"item": [
												{
													"name": "Assign approved policy to resource one - read only access",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "1034b813-a5d8-4a20-abd2-638196684f90",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"name\": \"policy-name\",\n\t\"enabled\": true,\n\t\"description\": \"policy-description\",\n\t\"type\": \"groovy\",\n\t\"condition\": {\n\t\t\"onRequestScript\": \"import io.gravitee.policy.groovy.PolicyResult.State\\\\nuser = context.attributes['user']\\\\npermissionRequest = context.attributes['permissionRequest']\\\\nif(user.username == 'bob' && permissionRequest.resourceScopes.contains('read')) { result.state = State.SUCCESS; } else { result.state = State.FAILURE;}\"\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{policy_location}}",
															"host": [
																"{{policy_location}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Simple Request Permission Ticket",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5edac664-e444-4c03-b9e4-79c35359ec49",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Ticket successfully created\", function () {",
																	"    var body = pm.response.json();",
																	"    //Check body",
																	"    pm.expect(body).to.have.property('ticket');",
																	"    //Save values",
																	"    pm.environment.set('permission_ticket_simple', body.ticket);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t}\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "RPT Request - no additional scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "e8760969-24b9-432c-ac66-82e2917b5b85",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Has an error\", function () {",
																	"    var body = pm.response.json();",
																	"    pm.expect(body).to.have.property('error');",
																	"    pm.expect(body).to.have.property('error_description');",
																	"",
																	"    pm.expect(body.error).to.eql(\"invalid_grant\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{rqp_client_authentication}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
																	"type": "text"
																},
																{
																	"key": "ticket",
																	"value": "{{permission_ticket_simple}}",
																	"type": "text"
																},
																{
																	"key": "claim_token",
																	"value": "{{bob_id_token}}",
																	"type": "text"
																},
																{
																	"key": "claim_token_format",
																	"value": "urn:ietf:params:oauth:token-type:id_token",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{tokenEndpoint}}",
															"host": [
																"{{tokenEndpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Assign approved policy to resource one - profile only access",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "44f185bf-30ed-4a08-9624-530851f396f4",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{protection_api_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"name\": \"policy-name\",\n\t\"enabled\": true,\n\t\"description\": \"policy-description\",\n\t\"type\": \"groovy\",\n\t\"condition\": {\n\t\t\"onRequestScript\": \"import io.gravitee.policy.groovy.PolicyResult.State\\\\nuser = context.attributes['user']\\\\npermissionRequest = context.attributes['permissionRequest']\\\\nif(user.username == 'bob' && permissionRequest.resourceScopes.contains('profile')) { result.state = State.SUCCESS; } else { result.state = State.FAILURE;}\"\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{policy_location}}",
															"host": [
																"{{policy_location}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Simple Request Permission Ticket",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "fdd09bf0-b1b3-4e54-8e02-44fae4c05f96",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Ticket successfully created\", function () {",
																	"    var body = pm.response.json();",
																	"    //Check body",
																	"    pm.expect(body).to.have.property('ticket');",
																	"    //Save values",
																	"    pm.environment.set('permission_ticket_simple', body.ticket);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{rs_pat}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n\t{  \n\t\t\"resource_id\":\"{{resource_set_one}}\",\n\t\t\"resource_scopes\":[  \n\t\t\t\"profile\"\n\t\t]\n\t}\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{permission_endpoint}}",
															"host": [
																"{{permission_endpoint}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "RPT Request - no additional scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "051b9869-2345-4cf6-987a-7c6ca8d9d77d",
																"exec": [
																	"function parseJwtPayload(token) {",
																	"    var base64Url = token.split('.')[1];",
																	"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
																	"    return JSON.parse(atob(base64));",
																	"}",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Has an access_token\", function () {",
																	"    var body = pm.response.json();",
																	"    pm.expect(body).to.have.property('access_token');",
																	"    pm.expect(body).to.have.property('token_type');",
																	"    pm.expect(body.token_type).to.eql('bearer');",
																	"    pm.expect(body).to.have.property('expires_in');",
																	"",
																	"    let payload = parseJwtPayload(body.access_token);",
																	"    pm.expect(payload).to.have.property('permissions');",
																	"    const rs_one = payload.permissions.find(p => p.resourceId === pm.environment.get(\"resource_set_one\"));",
																	"    pm.expect(rs_one.resourceScopes.length).to.eql(1);",
																	"    pm.expect(rs_one.resourceScopes).to.have.members([\"profile\"]);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic {{rqp_client_authentication}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "urn:ietf:params:oauth:grant-type:uma-ticket",
																	"type": "text"
																},
																{
																	"key": "ticket",
																	"value": "{{permission_ticket_simple}}",
																	"type": "text"
																},
																{
																	"key": "claim_token",
																	"value": "{{bob_id_token}}",
																	"type": "text"
																},
																{
																	"key": "claim_token_format",
																	"value": "urn:ietf:params:oauth:token-type:id_token",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{tokenEndpoint}}",
															"host": [
																"{{tokenEndpoint}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8550f2ab-ddbe-409f-8a74-b6079aab53ae",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"organizations",
						"{{defaultOrganizationId}}",
						"environments",
						"{{defaultEnvironmentId}}",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e0c3dd6d-a15a-4ca5-b616-b8954b2c0f02",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f4aa9510-daf0-4270-9b49-930ab67dfdd6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}