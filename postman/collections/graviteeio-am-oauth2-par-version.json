{
	"info": {
		"_postman_id": "bbb1b63f-1c67-4838-9d1f-6f21640087e5",
		"name": "Gravitee.io - AM - Oauth2 - Pushed Authorization Request",
		"description": "Test Oauth2 (RFC 6749) specifications",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31343100"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{management_url}}/management/auth/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create par domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set('domain', jsonData.id);",
									"pm.environment.set('domainHrid', jsonData.hrid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"oauth2-par\", \n\t\"description\": \"test oauth2 authorization framework specifications using PAR\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch domain - allow localhost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR disabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowLocalhostRedirectUri).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowHttpSchemeRedirectUri).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowWildCardRedirectUri).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isOpenDynamicClientRegistrationEnabled).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oidc\": {\n    \"clientRegistrationSettings\": {\n      \"allowLocalhostRedirectUri\": true,\n      \"allowHttpSchemeRedirectUri\": true,\n      \"allowWildCardRedirectUri\": true,\n      \"isDynamicClientRegistrationEnabled\": false,\n      \"isOpenDynamicClientRegistrationEnabled\": false\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default identity provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"#CoMpL3X-P@SsW0Rd\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities/default-idp-{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities",
								"default-idp-{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create in-memory IDP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('idp.inmemory', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"#CoMpL3X-P@SsW0Rd\\\"},{\\\"firstname\\\":\\\"Jensen\\\",\\\"lastname\\\":\\\"Barbara\\\",\\\"username\\\":\\\"jensen.barbara\\\",\\\"email\\\":\\\"jensen.barbara@mail.com\\\",\\\"password\\\":\\\"#CoMpL3X-P@SsW0Rd\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create simple scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"key\": \"scope1\",\n  \"name\": \"scope1\",\n  \"description\": \"scope1\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/scopes",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"scopes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jks certificate rs256",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Extension Grant - create jks certificate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('certificateJks', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"javakeystore-am-certificate\",\n  \"configuration\": \"{\\\"jks\\\":\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"server.jks\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"size\\\\\\\":2237,\\\\\\\"content\\\\\\\":\\\\\\\"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\\\\\\\"}\\\",\\\"storepass\\\":\\\"letmein\\\",\\\"alias\\\":\\\"my4096key\\\",\\\"keypass\\\":\\\"changeme\\\"}\",\n  \"name\": \"my4096key\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create application 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('client2', body.id);",
									"pm.environment.set('clientId2', body.settings.oauth.clientId);",
									"pm.environment.set('clientSecret2', body.settings.oauth.clientSecret);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"my-client2\",\n  \"type\": \"WEB\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure application 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"settings\": {\n  \t\"oauth\": {\n  \t\t\"redirectUris\": [\"http://localhost:4000/\", \"http://localhost:4000/path\"],\n  \t\t\"scopeSettings\": [{\"scope\":\"scope1\"}]\n  \t}\n  },\n  \"identityProviders\": [\n    { \"identity\": \"{{idp.inmemory}}\", \"priority\" : -1 }\n  ]\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{client2}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{client2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure application 2 - custom claims access token Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"settings\": {\n  \t\"oauth\": {\n  \t\t\"tokenCustomClaims\" : [\n\t\t  \t{\n\t\t  \t\t\"tokenType\": \"ACCESS_TOKEN\",\n\t\t  \t\t\"claimName\": \"custom-claim\",\n\t\t  \t\t\"claimValue\": \"{#context.attributes['authFlow']['requestParameters']['redirect_uri']}\"\n\t\t  \t}\n\t\t  ]\n  \t}\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{client2}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{client2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body).to.have.property(\"authorization_endpoint\");",
									"    pm.expect(body).to.have.property(\"token_endpoint\");",
									"    pm.expect(body).to.have.property(\"revocation_endpoint\");",
									"    pm.expect(body).to.have.property(\"userinfo_endpoint\");",
									"    pm.expect(body).to.have.property(\"registration_endpoint\");",
									"    pm.expect(body).to.have.property(\"end_session_endpoint\");",
									"    pm.expect(body).to.have.property(\"introspection_endpoint\");",
									"",
									"    pm.environment.set('authorizationEndpoint', body.authorization_endpoint);",
									"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
									"    pm.environment.set('userinfoEndpoint', body.userinfo_endpoint);",
									"    pm.environment.set('revocationEndpoint', body.revocation_endpoint);",
									"    pm.environment.set('registrationEndpoint', body.registration_endpoint);",
									"    pm.environment.set('logoutEndpoint', body.end_session_endpoint);",
									"    pm.environment.set('introspectionEndpoint', body.introspection_endpoint);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/{{domainHrid}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domainHrid}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "OAuth2 -Pushed Authorize Request Parameters",
			"item": [
				{
					"name": "Authorization Code Grant",
					"item": [
						{
							"name": "Case - Without consent",
							"item": [
								{
									"name": "Push Parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"var body = JSON.parse(responseBody);",
													"pm.environment.set('request_uri', body.request_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret2}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{clientId2}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/",
													"type": "text"
												},
												{
													"key": "response_type",
													"value": "code",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domainHrid}}/oauth/par",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domainHrid}}",
												"oauth",
												"par"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Without consent - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=' + pm.environment.get('clientId2'));",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?client_id={{clientId2}}&request_uri={{request_uri}}",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{clientId2}}"
												},
												{
													"key": "request_uri",
													"value": "{{request_uri}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio.load(pm.response.text());",
													"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
													"    const action = responseHTML('form').attr('action');",
													"    pm.environment.set('xsrf', xsrfToken);",
													"    pm.environment.set('action', action);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{clientId2}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{action}}",
											"host": [
												"{{action}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5);",
													"    pm.environment.set('authorization_code', code);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"GetAccessToken\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    var accessToken = body['access_token'];",
													"    var claimsB64 = accessToken.substring(accessToken.indexOf('.') + 1, accessToken.lastIndexOf('.'));",
													"    var claims = JSON.parse(atob(claimsB64));",
													"    pm.expect(claims['custom-claim']).to.eq('http://localhost:4000/');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret2}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{tokenEndpoint}}?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:4000/",
											"host": [
												"{{tokenEndpoint}}"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Case - With consent",
							"item": [
								{
									"name": "Push Parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"var body = JSON.parse(responseBody);",
													"pm.environment.set('request_uri', body.request_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientSecret2}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientId2}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{clientId2}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/",
													"type": "text"
												},
												{
													"key": "response_type",
													"value": "code",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "scope1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domainHrid}}/oauth/par",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domainHrid}}",
												"oauth",
												"par"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "With consent - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=' + pm.environment.get('clientId2'));",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?client_id={{clientId2}}&request_uri={{request_uri}}",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{clientId2}}"
												},
												{
													"key": "request_uri",
													"value": "{{request_uri}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio.load(pm.response.text());",
													"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
													"    const action = responseHTML('form').attr('action');",
													"    pm.environment.set('xsrf', xsrfToken);",
													"    pm.environment.set('action', action);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{clientId2}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "#CoMpL3X-P@SsW0Rd",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{action}}",
											"host": [
												"{{action}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    ",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be redirected to consent page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    tests['Redirect to consent page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/oauth/consent');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow consent redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio.load(pm.response.text());",
													"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
													"    const action = responseHTML('form').attr('action');",
													"    pm.environment.set('xsrf', xsrfToken);",
													"    pm.environment.set('action', action);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post Consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "user_oauth_approval",
													"value": "true",
													"type": "text"
												},
												{
													"key": "scope.scope1",
													"value": "true",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{action}}",
											"host": [
												"{{action}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"organizations",
						"{{defaultOrganizationId}}",
						"environments",
						"{{defaultEnvironmentId}}",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		}
	]
}
