{
	"info": {
		"_postman_id": "0cf1e7b4-0529-49b3-98e7-ecfc256634c5",
		"name": "Gravitee.io - AM - OpenID FAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{management_url}}/management/auth/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create fapi domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"DCR disabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowLocalhostRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowHttpSchemeRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowWildCardRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isOpenDynamicClientRegistrationEnabled).to.eql(false);",
									"    ",
									"    pm.environment.set('domain', jsonData.id);",
									"    pm.environment.set('domainHrid', jsonData.hrid);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"fapi\", \n\t\"description\": \"test fapi parameters\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable DCR - non open mode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR enabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oidc\": {\n    \"clientRegistrationSettings\": {\n      \"allowLocalhostRedirectUri\": false,\n      \"allowHttpSchemeRedirectUri\": false,\n      \"allowWildCardRedirectUri\": false,\n      \"isDynamicClientRegistrationEnabled\": true,\n      \"isOpenDynamicClientRegistrationEnabled\": false\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default identity provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities/default-idp-{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities",
								"default-idp-{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create in-memory IDP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('idp.inmemory', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"domainWhitelist\" : [],\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get default certificate ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get default certificate id\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.environment.set('defaultCertificateId', body[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates/{{defaultCertificateId}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates",
								"{{defaultCertificateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jks certificate rs256",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Extension Grant - create jks certificate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('certificateJks', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"javakeystore-am-certificate\",\n  \"configuration\": \"{\\\"jks\\\":\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"server.jks\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"size\\\\\\\":2237,\\\\\\\"content\\\\\\\":\\\\\\\"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\\\\\\\"}\\\",\\\"storepass\\\":\\\"letmein\\\",\\\"alias\\\":\\\"mytestkey\\\",\\\"keypass\\\":\\\"changeme\\\"}\",\n  \"name\": \"Test\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jks certificate rs512",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Extension Grant - create jks certificate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('certificateJksRs512', jsonData.id);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"javakeystore-am-certificate\",\n  \"configuration\": \"{\\\"jks\\\":\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"server.jks\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"size\\\\\\\":2237,\\\\\\\"content\\\\\\\":\\\\\\\"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\\\\\\\"}\\\",\\\"storepass\\\":\\\"letmein\\\",\\\"alias\\\":\\\"mytestkey\\\",\\\"keypass\\\":\\\"changeme\\\"}\",\n  \"name\": \"Test\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body).to.have.property(\"authorization_endpoint\");",
									"    pm.expect(body).to.have.property(\"token_endpoint\");",
									"    pm.expect(body).to.have.property(\"revocation_endpoint\");",
									"    pm.expect(body).to.have.property(\"userinfo_endpoint\");",
									"    pm.expect(body).to.have.property(\"registration_endpoint\");",
									"    pm.expect(body).to.have.property(\"registration_renew_secret_endpoint\");",
									"",
									"    pm.environment.set('issuer', body.issuer);",
									"    pm.environment.set('rosEndpoint', body.request_object_endpoint);",
									"    pm.environment.set('authorizationEndpoint', body.authorization_endpoint);",
									"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
									"    pm.environment.set('userinfoEndpoint', body.userinfo_endpoint);",
									"    pm.environment.set('revocationEndpoint', body.revocation_endpoint);",
									"    pm.environment.set('registrationEndpoint', body.registration_endpoint);",
									"    pm.environment.set('registrationRenewSecretEndpoint', body.registration_renew_secret_endpoint);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/{{domainHrid}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domainHrid}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Create DCR client",
			"item": [
				{
					"name": "Create client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('clientDCR', body.id);",
									"pm.environment.set('clientId', body.settings.oauth.clientId);",
									"pm.environment.set('clientSecret', body.settings.oauth.clientSecret);",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 6000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"dcr-client-public-name\",\n  \"type\": \"SERVICE\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure client with DCR enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR enabled for client\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.settings.oauth.scopeSettings[0].scope).to.eql('dcr_admin');",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 6000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"settings\": {\n\t\t\"oauth\": {\n\t\t\t\"scopeSettings\": [ {\"scope\": \"dcr_admin\"}]\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{clientDCR}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{clientDCR}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has an access_token\", function () {",
									"    var body = pm.response.json();",
									"    pm.expect(body).to.have.property('access_token');",
									"    pm.expect(body.scope).to.eql('dcr_admin');",
									"    ",
									"    pm.environment.set('access_token', body.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clientSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clientId}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "dcr_admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Request Object Registration",
			"item": [
				{
					"name": "Case - Invalid requests",
					"item": [
						{
							"name": "Generate token for DCR client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body.scope).to.eql('dcr_admin');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{clientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{clientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "dcr_admin",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register new client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body.client_name).to.eql('client_rs256');",
											"",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');",
											"    ",
											"    pm.environment.set('ro_client_id', body.client_id);",
											"    pm.environment.set('ro_client_secret', body.client_secret);",
											"    ",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 6000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"client_name\":\"client_rs256\",\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"response_types\": [\"code\",\"token\",\"id_token\"],\n    \"grant_types\": [\"authorization_code\",\"implicit\",\"password\"],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"jwks\": {\n        \"keys\": [\n            {\n            \t\"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"kty\": \"RSA\",\n                \"e\": \"AQAB\",\n                \"n\": \"4-iLfs52Ta-7s3W_X4-E-f8SwigNhOqigF0Mjoce8mWTQGjS9U1kOuSJKnS9c4gf5vZhBB8iGkufMDvl5nwB0JgcihG6QUiN1NT8WPasJLjRTYQmJNCIYBac0oSZfHIUq8C4kmbFbWqXdp3uB-0l9qalD_HlckBt6lJ4VEb-ntbDpWgQnSxtRDzPZgH_kqJ3sNGnXnd5uNcG1W9v0IC-Wz1-kZ1eFM9-HqfnhGLr4yOr1sSeRQTJUaT12ixSKwn7qBJvnSSUlevIao-Zje2wnvTGVAgsEIuGulw0KWH9hLnYecyTPf3YR7v9sv8ff1qpn0LOmOWOfXYvXqteEcdh9w\"\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "With invalid JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Should be an error\", function() {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"error\");",
											"    ",
											"    pm.expect(body.error).to.eql('invalid_request_object');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{ro_client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{ro_client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "appllication/jws"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "An invalid JWT",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{rosEndpoint}}",
									"host": [
										"{{rosEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "With unsigned JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Should be an error\", function() {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"error\");",
											"    pm.expect(body).to.have.property(\"error_description\");",
											"    ",
											"    pm.expect(body.error).to.eql('invalid_request_object');",
											"    pm.expect(body.error_description).to.eql('Request object must be signed');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{ro_client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{ro_client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "appllication/jws"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "eyJhbGciOiJub25lIn0.eyJzdWIiOiJhbGljZSIsImlzcyI6Imh0dHBzOlwvXC9jMmlkLmNvbSIsImV4cCI6MTU4ODk4MDAyOCwiY2xpZW50X2lkIjoidW5rbm93bl9jbGllbnQifQ.",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{rosEndpoint}}",
									"host": [
										"{{rosEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "With invalid signature algorithm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Should be an error\", function() {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"error\");",
											"    pm.expect(body).to.have.property(\"error_description\");",
											"    ",
											"    pm.expect(body.error).to.eql('invalid_request_object');",
											"    pm.expect(body.error_description).to.eql('Invalid request object signing algorithm');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{ro_client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{ro_client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "appllication/jws",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "eyJraWQiOiJyc2Etc2lnbmF0dXJlIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJhbGljZSIsImlzcyI6Imh0dHBzOlwvXC9jMmlkLmNvbSIsImV4cCI6MTU4ODY4NTc2MX0.sx-QW8xbhMuousR5_j7wNg_HQ-2I4T38uQcvUq7RXh0JaWPEoerMMZVXi6UG_-q_kbF4n93G9hxyVCVzcGKrmyNLE5AaNjmFUe2WgYe4JEO59aUjP9QZ3jdw5O3KhEaH6emUDr05gR1ZdI9XR6R4BxzCKaiCUK16cTl_-_0Hwo4oIKO6lj-1DdpS9sVJ_AyvxrQ8JEdjjTKnZTcTx4wiB7-qYBkmWD8HpeO_621i3dxBms4FbFIp9VfbcPrI9_w8aoLd02Gq9GnQaOqekGSeIW3sX1pWOvUdjbSuWJkREhZZJSO00b48UQdLAJgb8mn-Bl9Jvt7JFy-9erXxi6fU_w",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{rosEndpoint}}",
									"host": [
										"{{rosEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "With valid signature algorithm - Bad requestObjectSigningAlg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Should be an error\", function() {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"error\");",
											"    pm.expect(body).to.have.property(\"error_description\");",
											"    ",
											"    pm.expect(body.error).to.eql('invalid_request_object');",
											"    pm.expect(body.error_description).to.eql('Invalid request object signing algorithm');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{ro_client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{ro_client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "appllication/jws",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "eyJraWQiOiJyc2Etc2lnbmF0dXJlIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJhbGljZSIsImlzcyI6Imh0dHBzOlwvXC9jMmlkLmNvbSIsInJlZGlyZWN0X3VyaSI6Imh0dHBzOlwvXC9vcC10ZXN0OjYwMDAxXC9hdXRoel9jYiIsImV4cCI6MTU4ODY4MTEzNX0.anyAlDScD_4qQjaj2mejrgG7sV_t9Dbhw9aloaCv7zNhZ0OL1BHBemvQ4zN6yXwvCd9IXOM7_uC6ayquxENnBF8bl53ukNVgzE3x52TEBap6ckXoDEaIdWWB7JukrofH_X0vXwBa2QH3tYSp4BRnXUCbvctADm-gTGv_qNDvZHOCmhSMYdN7HwVkWX5yfYDthQ-F7eS-ZbUH1jQqOAk5QI597p-wxdUq7k6IppQ3_g_x9K-bTZ2FfqkG4izHG0USl3VoyP5_gItPi7m6htKASw6y_L9l1twWAfEdI-uJbdYC4P-3p3fR92tlc_TPBLgpiLe6D4gt8CeUM5jBIsUZkw",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{rosEndpoint}}",
									"host": [
										"{{rosEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Case - Nominal",
					"item": [
						{
							"name": "Patch client -  with request_object_signing_alg RS256",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get client with response types\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.request_object_signing_alg).to.eql('RS256');",
											"});",
											"",
											"pm.test(\"One time Token\", function() {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('registration_access_token');",
											"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{registrationAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"request_object_signing_alg\": \"RS256\"\n}"
								},
								"url": {
									"raw": "{{registrationClientUri}}",
									"host": [
										"{{registrationClientUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "With valid signature algorithm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should be an error\", function() {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"iss\");",
											"    pm.expect(body).to.have.property(\"aud\");",
											"    pm.expect(body).to.have.property(\"exp\");",
											"    pm.expect(body).to.have.property(\"request_uri\");",
											"    ",
											"    pm.expect(body.iss).to.eql(pm.environment.get('issuer'));",
											"    pm.expect(body.aud).to.eql(pm.environment.get('ro_client_id'));",
											"    tests['Contains a valid uri'] = body.request_uri.startsWith('urn:ros:');",
											"    ",
											"    pm.environment.set('request_uri', body.request_uri);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{ro_client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{ro_client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "appllication/jws"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "eyJraWQiOiJyc2Etc2lnbmF0dXJlIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJhbGljZSIsImlzcyI6Imh0dHBzOlwvXC9jMmlkLmNvbSIsInJlZGlyZWN0X3VyaSI6Imh0dHBzOlwvXC9vcC10ZXN0OjYwMDAxXC9hdXRoel9jYiIsImV4cCI6MTU4ODY4MTEzNX0.anyAlDScD_4qQjaj2mejrgG7sV_t9Dbhw9aloaCv7zNhZ0OL1BHBemvQ4zN6yXwvCd9IXOM7_uC6ayquxENnBF8bl53ukNVgzE3x52TEBap6ckXoDEaIdWWB7JukrofH_X0vXwBa2QH3tYSp4BRnXUCbvctADm-gTGv_qNDvZHOCmhSMYdN7HwVkWX5yfYDthQ-F7eS-ZbUH1jQqOAk5QI597p-wxdUq7k6IppQ3_g_x9K-bTZ2FfqkG4izHG0USl3VoyP5_gItPi7m6htKASw6y_L9l1twWAfEdI-uJbdYC4P-3p3fR92tlc_TPBLgpiLe6D4gt8CeUM5jBIsUZkw",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{rosEndpoint}}",
									"host": [
										"{{rosEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authorize endpoint with existing URN Request object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"});",
											"",
											"pm.test(\"Should be a location error\", function() {",
											"    var location = postman.getResponseHeader('Location');",
											"    let domain = pm.environment.get(\"domainHrid\");",
											"    ",
											"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=' + pm.environment.get('ro_client_id'));",
											"    ",
											"    // Non overridable field",
											"    tests['Contains the state'] = location.includes('state=1234-5678-9876');",
											"    tests['Contains the nonce'] = location.includes('nonce=n-0S6_WzA2Mj');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{ro_client_id}}&redirect_uri=https://op-test:60001/authz_cb&state=1234-5678-9876&request_uri={{request_uri}}&scope=openid&nonce=n-0S6_WzA2Mj",
									"host": [
										"{{authorizationEndpoint}}"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code"
										},
										{
											"key": "client_id",
											"value": "{{ro_client_id}}"
										},
										{
											"key": "redirect_uri",
											"value": "https://op-test:60001/authz_cb"
										},
										{
											"key": "state",
											"value": "1234-5678-9876"
										},
										{
											"key": "request_uri",
											"value": "{{request_uri}}"
										},
										{
											"key": "scope",
											"value": "openid"
										},
										{
											"key": "nonce",
											"value": "n-0S6_WzA2Mj"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Authorize endpoint with invalid URN Request object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.be.header('Content-Length', '0');",
											"    pm.response.to.have.header('Location');",
											"});",
											"",
											"pm.test(\"Should be a location error\", function() {",
											"    var location = postman.getResponseHeader('Location');",
											"    let domain = pm.environment.get(\"domainHrid\");",
											"    ",
											"    tests['Redirect to redirect_uri'] = location.startsWith(pm.environment.get('gateway_url') + '/' + domain + '/oauth/error');",
											"    tests['Contains an error query-parameter'] = location.includes('error=invalid_request_object');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{ro_client_id}}&redirect_uri=https://op-test:60001/authz_cb&state=1234-5678-9876&request_uri=urn:ros:invalid_id&scope=openid&nonce=n-0S6_WzA2Mj",
									"host": [
										"{{authorizationEndpoint}}"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code"
										},
										{
											"key": "client_id",
											"value": "{{ro_client_id}}"
										},
										{
											"key": "redirect_uri",
											"value": "https://op-test:60001/authz_cb"
										},
										{
											"key": "state",
											"value": "1234-5678-9876"
										},
										{
											"key": "request_uri",
											"value": "urn:ros:invalid_id"
										},
										{
											"key": "scope",
											"value": "openid"
										},
										{
											"key": "nonce",
											"value": "n-0S6_WzA2Mj"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"organizations",
						"{{defaultOrganizationId}}",
						"environments",
						"{{defaultEnvironmentId}}",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		}
	]
}
