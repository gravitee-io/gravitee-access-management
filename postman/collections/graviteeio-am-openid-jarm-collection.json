{
	"info": {
		"_postman_id": "ef15b860-7f3b-4cf2-bbcf-65857a89e2d4",
		"name": "Gravitee.io - AM - Openid JARM",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31343100"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{management_url}}/management/auth/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jarm domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"DCR disabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowLocalhostRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowHttpSchemeRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowWildCardRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isOpenDynamicClientRegistrationEnabled).to.eql(false);",
									"    ",
									"    pm.environment.set('domain', jsonData.id);",
									"    pm.environment.set('domainHrid', jsonData.hrid);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"jarm\", \n\t\"description\": \"Test OpenID JARM specification\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable DCR - non open mode ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR enabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(true);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oidc\": {\n    \"clientRegistrationSettings\": {\n      \"allowLocalhostRedirectUri\": false,\n      \"allowHttpSchemeRedirectUri\": false,\n      \"allowWildCardRedirectUri\": false,\n      \"isDynamicClientRegistrationEnabled\": true,\n      \"isOpenDynamicClientRegistrationEnabled\": false\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default identity provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities/default-idp-{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities",
								"default-idp-{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create in-memory IDP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('idp.inmemory', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"domainWhitelist\" : [],\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get default certificate ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get default certificate id\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.environment.set('defaultCertificateId', body[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates/{{defaultCertificateId}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates",
								"{{defaultCertificateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jks certificate rs256",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Extension Grant - create jks certificate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('certificateJks', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"javakeystore-am-certificate\",\n  \"configuration\": \"{\\\"jks\\\":\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"server.jks\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"size\\\\\\\":2237,\\\\\\\"content\\\\\\\":\\\\\\\"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\\\\\\\"}\\\",\\\"storepass\\\":\\\"letmein\\\",\\\"alias\\\":\\\"mytestkey\\\",\\\"keypass\\\":\\\"changeme\\\"}\",\n  \"name\": \"Test\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jks certificate rs512",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Extension Grant - create jks certificate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('certificateJksRs512', jsonData.id);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"javakeystore-am-certificate\",\n  \"configuration\": \"{\\\"jks\\\":\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"server.jks\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"size\\\\\\\":2237,\\\\\\\"content\\\\\\\":\\\\\\\"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\\\\\\\"}\\\",\\\"storepass\\\":\\\"letmein\\\",\\\"alias\\\":\\\"my4096key\\\",\\\"keypass\\\":\\\"changeme\\\"}\",\n  \"name\": \"my4096key\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body).to.have.property(\"authorization_endpoint\");",
									"    pm.expect(body).to.have.property(\"token_endpoint\");",
									"    pm.expect(body).to.have.property(\"revocation_endpoint\");",
									"    pm.expect(body).to.have.property(\"userinfo_endpoint\");",
									"    pm.expect(body).to.have.property(\"registration_endpoint\");",
									"    pm.expect(body).to.have.property(\"registration_renew_secret_endpoint\");",
									"    pm.expect(body).to.have.property(\"authorization_signing_alg_values_supported\");",
									"    pm.expect(body).to.have.property(\"authorization_encryption_alg_values_supported\");",
									"    pm.expect(body).to.have.property(\"authorization_encryption_enc_values_supported\");",
									"    pm.expect(body).to.have.property(\"response_modes_supported\");",
									"    pm.expect(body.response_modes_supported).to.include('query.jwt')",
									"    ",
									"    pm.environment.set('authorizationEndpoint', body.authorization_endpoint);",
									"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
									"    pm.environment.set('userinfoEndpoint', body.userinfo_endpoint);",
									"    pm.environment.set('revocationEndpoint', body.revocation_endpoint);",
									"    pm.environment.set('registrationEndpoint', body.registration_endpoint);",
									"    pm.environment.set('registrationRenewSecretEndpoint', body.registration_renew_secret_endpoint);",
									"    pm.environment.set('logoutEndpoint', body.end_session_endpoint);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/{{domainHrid}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domainHrid}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create client without DCR enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('clientDCR', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientId\": \"dcr-client\",\n    \"clientSecret\": \"dcr-client-secret\",\n    \"name\": \"dcr-client-public-name\",\n    \"type\": \"WEB\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch client - enable client credentials and DCR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"settings\": { \n      \"oauth\": {\n          \"grantTypes\": [\"client_credentials\"],\n          \"responseTypes\": [],\n          \"applicationType\": \"server\",\n          \"scopeSettings\": [ {\"scope\" : \"dcr_admin\" }]\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{clientDCR}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"applications",
								"{{clientDCR}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Case - Signing authorization",
			"item": [
				{
					"name": "Prepare Client",
					"item": [
						{
							"name": "Generate token - Case signing authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body.scope).to.eql('dcr_admin');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGNyLWNsaWVudDpkY3ItY2xpZW50LXNlY3JldA=="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "dcr_admin",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register client - rs256 authorization (default)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body.client_name).to.eql('client_rs256');",
											"",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');",
											"    pm.expect(body).to.have.property('authorization_signed_response_alg');",
											"    var credentials = body.client_id + \":\" + body.client_secret;",
											"    var authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(credentials));",
											"    pm.environment.set('dcrClientAuthorization', authorization);",
											"    ",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"    ",
											"    pm.environment.set('clientIdJarm', body.client_id);",
											"    pm.environment.set('clientSecretJarm', body.client_secret);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"client_name\":\"client_rs256\",\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"identityProviders\": [\n    \t{ \"identity\": \"{{idp.inmemory}}\", \"priority\" : -1 }\n\t],\n    \"response_types\": [\"code\",\"token\",\"id_token\",\"id_token token\"],\n    \"grant_types\": [\"authorization_code\",\"implicit\"],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"token_endpoint_auth_method\": \"client_secret_basic\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Authorization Code Flow",
					"item": [
						{
							"name": "Nominal Case",
							"item": [
								{
									"name": "With state - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=' + pm.environment.get('clientIdJarm'));",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{clientIdJarm}}&redirect_uri=https://op-test:60001/authz_cb&state=1234-5678-9876&response_mode=jwt&scope=openid",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "{{clientIdJarm}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://op-test:60001/authz_cb"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "response_mode",
													"value": "jwt"
												},
												{
													"key": "scope",
													"value": "openid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio.load(pm.response.text());",
													"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
													"    const action = responseHTML('form').attr('action');",
													"    pm.environment.set('xsrf', xsrfToken);",
													"    pm.environment.set('action', action);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{clientIdJarm}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{action}}",
											"host": [
												"{{action}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    ",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be redirected to consent page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.startsWith(pm.environment.get('gateway_url') + '/' + domain + '/oauth/consent');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Redirect to confirm access page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio.load(pm.response.text());",
													"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
													"    const action = responseHTML('form').attr('action');",
													"    pm.environment.set('xsrf', xsrfToken);",
													"    pm.environment.set('action', action);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post authorize form",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "scope.openid",
													"value": "true",
													"type": "text"
												},
												{
													"key": "user_oauth_approval",
													"value": "true",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{action}}",
											"host": [
												"{{action}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('https://op-test:60001/authz_cb?');",
													"    tests['Contains a response'] = location.includes('response=');",
													"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
													"    tests['Do not contain an authorization_code'] = !location.includes('code=');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let response = location.substring(location.indexOf('response=') + 9);",
													"    ",
													"    let jwt = parseJwt(response);",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    tests['Contains a code claim'] = jwt.code !== undefined;",
													"    tests['Contains an iss claim'] = jwt.iss === origin + '/' + domain + '/oidc';",
													"    tests['Contains an aud claim'] = jwt.aud === pm.environment.get(\"clientIdJarm\");",
													"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
													"    tests['Contains an state claim'] = jwt.state === '1234-5678-9876';",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Redirect URI mismatch",
							"item": [
								{
									"name": "With response.mode = jwt",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to error page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    tests['Redirect to default error page'] = location.includes(origin + '/' + domain + '/oauth/error');",
													"    tests['Contains a response'] = location.includes('?response=');",
													"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let response = location.substring(location.indexOf('response=') + 9);",
													"    ",
													"    let jwt = parseJwt(response);",
													"    ",
													"    tests['Does not contain an authorization code claim'] = jwt.code === undefined;",
													"    tests['Contains an iss claim'] = jwt.iss === origin + '/' + domain + '/oidc';",
													"    tests['Contains an aud claim'] = jwt.aud === pm.environment.get(\"clientIdJarm\");",
													"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
													"    tests['Contains an state claim'] = jwt.state === '1234-5678-9876';",
													"    tests['Contains an error'] = jwt.error === 'redirect_uri_mismatch';",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{clientIdJarm}}&redirect_uri=https://bad-uri:60001/authz_cb&state=1234-5678-9876&response_mode=jwt",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "{{clientIdJarm}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://bad-uri:60001/authz_cb"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "response_mode",
													"value": "jwt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "With response.mode = fragment.jwt",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to error page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    tests['Redirect to default error page'] = location.includes(origin + '/' + domain + '/oauth/error');",
													"    tests['Contains a response'] = location.includes('#response=');",
													"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let response = location.substring(location.indexOf('response=') + 9);",
													"    ",
													"    let jwt = parseJwt(response);",
													"    ",
													"    tests['Does not contain an authorization code claim'] = jwt.code === undefined;",
													"    tests['Contains an iss claim'] = jwt.iss === origin + '/' + domain + '/oidc';",
													"    tests['Contains an aud claim'] = jwt.aud === pm.environment.get(\"clientIdJarm\");",
													"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
													"    tests['Contains an state claim'] = jwt.state === '1234-5678-9876';",
													"    tests['Contains an error'] = jwt.error === 'redirect_uri_mismatch';",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{clientIdJarm}}&redirect_uri=https://bad-uri:60001/authz_cb&state=1234-5678-9876&response_mode=fragment.jwt",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "{{clientIdJarm}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://bad-uri:60001/authz_cb"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "response_mode",
													"value": "fragment.jwt"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Implicit Flow",
					"item": [
						{
							"name": "Nominal Case",
							"item": [
								{
									"name": "With state - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=' + pm.environment.get('clientIdJarm'));",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token token&client_id={{clientIdJarm}}&redirect_uri=https://op-test:60001/authz_cb&state=1234-5678-9876&response_mode=jwt&nonce=n-0S6_WzA2Mj",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token token"
												},
												{
													"key": "client_id",
													"value": "{{clientIdJarm}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://op-test:60001/authz_cb"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "response_mode",
													"value": "jwt"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio.load(pm.response.text());",
													"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
													"    const action = responseHTML('form').attr('action');",
													"    pm.environment.set('xsrf', xsrfToken);",
													"    pm.environment.set('action', action);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{clientIdJarm}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{action}}",
											"host": [
												"{{action}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('https://op-test:60001/authz_cb#');",
													"    tests['Contains a response'] = location.includes('response=');",
													"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
													"    tests['Do not contain an authorization_code'] = !location.includes('code=');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let response = location.substring(location.indexOf('response=') + 9);",
													"    ",
													"    let jwt = parseJwt(response);",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    tests['Contains an access_token claim'] = jwt.access_token !== undefined;",
													"    tests['Contains an iss claim'] = jwt.iss === origin + '/' + domain + '/oidc';",
													"    tests['Contains an aud claim'] = jwt.aud === pm.environment.get(\"clientIdJarm\");",
													"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
													"    tests['Contains an state claim'] = jwt.state === '1234-5678-9876';",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Redirect URI mismatch",
							"item": [
								{
									"name": "With response.mode = jwt",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to error page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    tests['Redirect to default error page'] = location.includes(origin + '/' + domain + '/oauth/error');",
													"    tests['Contains a response'] = location.includes('#response=');",
													"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let response = location.substring(location.indexOf('response=') + 9);",
													"    ",
													"    let jwt = parseJwt(response);",
													"    ",
													"    tests['Does not contain an authorization code claim'] = jwt.code === undefined;",
													"    tests['Contains an iss claim'] = jwt.iss === origin + '/' + domain + '/oidc';",
													"    tests['Contains an aud claim'] = jwt.aud === pm.environment.get(\"clientIdJarm\");",
													"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
													"    tests['Contains an state claim'] = jwt.state === '1234-5678-9876';",
													"    tests['Contains an error'] = jwt.error === 'redirect_uri_mismatch';",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token token&client_id={{clientIdJarm}}&redirect_uri=https://bad-uri:60001/authz_cb&state=1234-5678-9876&response_mode=jwt&nonce=n-0S6_WzA2Mj",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token token"
												},
												{
													"key": "client_id",
													"value": "{{clientIdJarm}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://bad-uri:60001/authz_cb"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "response_mode",
													"value": "jwt"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Incompatible response mode",
							"item": [
								{
									"name": "With response.mode = query.jwt",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to error page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    let domain = pm.environment.get(\"domainHrid\");",
													"    ",
													"    tests['Redirect to default error page'] = location.includes(origin + '/' + domain + '/oauth/error');",
													"    tests['Contains a response'] = location.includes('?response=');",
													"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let response = location.substring(location.indexOf('response=') + 9);",
													"    ",
													"    let jwt = parseJwt(response);",
													"    ",
													"    tests['Does not contain an authorization code claim'] = jwt.code === undefined;",
													"    tests['Contains an iss claim'] = jwt.iss === origin + '/' + domain + '/oidc';",
													"    tests['Contains an aud claim'] = jwt.aud === pm.environment.get(\"clientIdJarm\");",
													"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
													"    tests['Contains an state claim'] = jwt.state === '1234-5678-9876';",
													"    tests['Contains an error'] = jwt.error === 'unsupported_response_mode';",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token token&client_id={{clientIdJarm}}&redirect_uri=https://bad-uri:60001/authz_cb&state=1234-5678-9876&response_mode=query.jwt&nonce=n-0S6_WzA2Mj",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token token"
												},
												{
													"key": "client_id",
													"value": "{{clientIdJarm}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://bad-uri:60001/authz_cb"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "response_mode",
													"value": "query.jwt"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Case - Encrypt authorization",
			"item": [
				{
					"name": "Case - RSA",
					"item": [
						{
							"name": "Prepare Client",
							"item": [
								{
									"name": "patch client - RSA-OAEP-256 - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.authorization_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.authorization_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"authorization_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n\t\t\t\t\"kty\": \"RSA\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"rsa-encryption-256\",\n\t\t\t\t\"e\": \"AQAB\",\n\t\t\t\t\"n\": \"lFAsvOm58TV5q9zyb3psQSESezZtYLZryGjq8LMnuqRt9cdPQCvMrnjcqdFWiXkD4ZXRO2Wp1iyzgprecx3dAnaD-KHlZR7vsFEmDh27DgNvEx5jKRSy5N2quI2LJw66Jb9JeMqoX6vtv_z3PRHb-zUhnIw6tBwZtuNE-AZSC6atr8ZCLXn6RPqJq_eoGgG-xaAzWPyRXDIqWPVO0RD3odjs6er7BcqVyHg54DyylrmRI4m6xERxpuNYI57bQN5_7a_3tR7hLeHJ8J1mNraMLH7H5_aAM_oSqKBEG9jHSTR7JsI3gSvsNOG-nP9jYxw7fH_c1XfRuTEJfBPEZxzD2Q\"\n\t\t\t},\n            {\n                \"kty\": \"RSA\",\n                \"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"e\": \"AQAB\",\n                \"n\": \"pRXXMvbZC4-I8nmeirMmr_wlo-lpZo2cyfXLPSduieEsfLeO38vIFdXbVTQ-OAeihFrvbxHELt2mNwCH3gbosd0P-pyYtUOaGmi7rLW9Wik8JcNCKA-v7q2JWmBeRFyRAuwf343gnxNL1mpUHfhqd4eswRiO55iwFT8a8gmxSOm8VXjg2aeUjkI3diT84rGR-wK77OcXeF2zJzjRDe0yFla0Tjb1RNTNkVQBJAQ3VQOOaNL7bXajR79ERlMKCjRFIZ0QCB7Nf6LtMwp9QWRdFrm7RXIPpN1V03E4v51gq82URjuQvEANe-VGRVSBij_GcOSLGjyZQi-yGVyPjNVl1Q\"\n            },\n            {\n                \"kty\": \"EC\",\n                \"use\": \"sig\",\n                \"crv\": \"P-256\",\n                \"kid\": \"elliptic-curve-signature\",\n                \"x\": \"R4JmPwezbzLuyGkonWIkezzplUfed5b6F5PL4j0zdf8\",\n                \"y\": \"QQRGKwRV9jHSlHjUhOQ0FqdQEddFBPCHZXpoFjvGmcY\"\n            },\n\t\t\t{  \n\t\t\t\t\"kty\":\"EC\",\n\t\t\t\t\"use\":\"enc\",\n\t\t\t\t\"crv\":\"P-521\",\n                \"kid\": \"elliptic-curve-encryption\",\n\t\t\t\t\"x\":\"AfEFyeYAr1TwmvCxvqgWPEg4Vvf50RC2OdkYfTS30dInZwX-Ebn6elp4fQ0GOdOBbYRq9b2gQ79Cd1AytQhdF6To\",\n\t\t\t\t\"y\":\"Abj0w4nSumQWtO6AV7ufQN6VpmJoKlWmz9KB6BUU0ANcj4aTJjBE9WNiGCqFpvaIdEWZWcSsZNYGKT3rJ71AfLdm\"\n\t\t\t},\n\t\t\t{  \n\t\t\t\t\"kty\":\"OKP\",\n\t\t\t\t\"use\":\"enc\",\n\t\t\t\t\"kid\":\"edwards-curve-encryption\",\n\t\t\t\t\"crv\":\"X25519\",\n\t\t\t\t\"x\":\"vBNW8f19leF79U4U6NrDDQaK_i5kL0iMKghB39AUT2I\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"128bits\",\n\t\t\t\t\"k\" : \"p94TA_PhiVUdi_yxPbviAw\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"192bits\",\n\t\t\t\t\"k\" : \"G9jUYv3b0-0wZWCGxAnIUH6gI0kjeXj4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"256bits\",\n\t\t\t\t\"k\" : \"pzx01XDfexcfxHWtk_MzjfCin5NMy3KBx2xtjrX1G-E\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"384bits\",\n\t\t\t\t\"k\" : \"MBNrGN8nwS7hlOVfqEy6qA98bzyo1BLGxr-kyN1E4UXYWQDkBg4L7AQRwpZdrKKS\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"512bits\",\n\t\t\t\t\"k\" : \"LfWisS5p-ohMbNbeWdiSapnHgA62XPu8DXzyzNZQHtQPglHf0Lb6NUM-8aQGj_YWErvODY5rQkpKeolrBKkcmg\"\n\t\t\t}\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Authorization Code Flow",
							"item": [
								{
									"name": "Nominal Case",
									"item": [
										{
											"name": "With state - Initiate the flow",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 302\", function () {",
															"    pm.response.to.have.status(302);",
															"});",
															"",
															"pm.test(\"Should be redirected\", function () {",
															"    pm.response.to.be.redirection;",
															"    pm.response.to.have.header('Location');",
															"});",
															"",
															"pm.test(\"Should be a redirection to login page\", function() {",
															"    var location = postman.getResponseHeader('Location');",
															"    let domain = pm.environment.get(\"domainHrid\");",
															"    ",
															"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=' + pm.environment.get('clientIdJarm'));",
															"    ",
															"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{clientIdJarm}}&redirect_uri=https://op-test:60001/authz_cb&state=1234-5678-9876&response_mode=jwt",
													"host": [
														"{{authorizationEndpoint}}"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{clientIdJarm}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://op-test:60001/authz_cb"
														},
														{
															"key": "state",
															"value": "1234-5678-9876"
														},
														{
															"key": "response_mode",
															"value": "jwt"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Redirect to login form",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Should be ok\", function () {",
															"    pm.response.to.be.ok;",
															"    ",
															"    // Extract the XSRF token to send it with the next request.",
															"    var responseHTML = cheerio.load(pm.response.text());",
															"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
															"    const action = responseHTML('form').attr('action');",
															"    pm.environment.set('xsrf', xsrfToken);",
															"    pm.environment.set('action', action);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{redirection}}",
													"host": [
														"{{redirection}}"
													]
												},
												"description": "The client does not have a redirect_uri define"
											},
											"response": []
										},
										{
											"name": "Post login form",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 302\", function () {",
															"    pm.response.to.have.status(302);",
															"});",
															"",
															"pm.test(\"Should be redirected\", function () {",
															"    pm.response.to.be.redirection;",
															"    pm.response.to.have.header('Location');",
															"",
															"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "X-XSRF-TOKEN",
															"value": "{{xsrf}}",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{clientIdJarm}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{action}}",
													"host": [
														"{{action}}"
													]
												},
												"description": "The client does not have a redirect_uri define"
											},
											"response": []
										},
										{
											"name": "Follow redirection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 302\", function () {",
															"    pm.response.to.have.status(302);",
															"});",
															"",
															"pm.test(\"Should be redirected\", function () {",
															"    pm.response.to.be.redirection;",
															"    pm.response.to.have.header('Location');",
															"});",
															"",
															"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
															"    var location = postman.getResponseHeader('Location');",
															"    tests['Redirect to redirect_uri'] = location.includes('https://op-test:60001/authz_cb?');",
															"    tests['Contains a response'] = location.includes('response=');",
															"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
															"    tests['Do not contain an authorization_code'] = !location.includes('code=');",
															"    ",
															"    // Here we can extract the authorization_code to got further in the process",
															"    let response = location.substring(location.indexOf('response=') + 9);",
															"    ",
															"    let header = parseJweHeader(response);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{redirection}}",
													"host": [
														"{{redirection}}"
													]
												},
												"description": "The client does not have a redirect_uri define"
											},
											"response": []
										},
										{
											"name": "Logout user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 302\", function () {",
															"    pm.response.to.have.status(302);",
															"});",
															"",
															"pm.test(\"Should be redirected\", function () {",
															"    pm.response.to.be.redirection;",
															"    pm.response.to.have.header('Location');",
															"    ",
															"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{logoutEndpoint}}",
													"host": [
														"{{logoutEndpoint}}"
													]
												},
												"description": "The client does not have a redirect_uri define"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Redirect URI mismatch",
									"item": [
										{
											"name": "With response.mode = jwt",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 302\", function () {",
															"    pm.response.to.have.status(302);",
															"});",
															"",
															"pm.test(\"Should be redirected\", function () {",
															"    pm.response.to.be.redirection;",
															"    pm.response.to.have.header('Location');",
															"});",
															"",
															"pm.test(\"Should be a redirection to login page\", function() {",
															"    var location = postman.getResponseHeader('Location');",
															"    let origin = pm.environment.get(\"gateway_url\");",
															"    let domain = pm.environment.get(\"domainHrid\");",
															"    ",
															"    tests['Redirect to default error page'] = location.includes(origin + '/' + domain + '/oauth/error');",
															"    tests['Contains a response'] = location.includes('?response=');",
															"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
															"    ",
															"    // Here we can extract the authorization_code to got further in the process",
															"    let response = location.substring(location.indexOf('response=') + 9);",
															"    ",
															"    let header = parseJweHeader(response);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{clientIdJarm}}&redirect_uri=https://bad-uri:60001/authz_cb&state=1234-5678-9876&response_mode=jwt",
													"host": [
														"{{authorizationEndpoint}}"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{clientIdJarm}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://bad-uri:60001/authz_cb"
														},
														{
															"key": "state",
															"value": "1234-5678-9876"
														},
														{
															"key": "response_mode",
															"value": "jwt"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "With response.mode = fragment.jwt",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 302\", function () {",
															"    pm.response.to.have.status(302);",
															"});",
															"",
															"pm.test(\"Should be redirected\", function () {",
															"    pm.response.to.be.redirection;",
															"    pm.response.to.have.header('Location');",
															"});",
															"",
															"pm.test(\"Should be a redirection to login page\", function() {",
															"    var location = postman.getResponseHeader('Location');",
															"    let origin = pm.environment.get(\"gateway_url\");",
															"    let domain = pm.environment.get(\"domainHrid\");",
															"    ",
															"    tests['Redirect to default error page'] = location.includes(origin + '/' + domain + '/oauth/error');",
															"    tests['Contains a response'] = location.includes('#response=');",
															"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
															"    ",
															"    // Here we can extract the authorization_code to got further in the process",
															"    let response = location.substring(location.indexOf('response=') + 9);",
															"    ",
															"    let header = parseJweHeader(response);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{clientIdJarm}}&redirect_uri=https://bad-uri:60001/authz_cb&state=1234-5678-9876&response_mode=fragment.jwt",
													"host": [
														"{{authorizationEndpoint}}"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{clientIdJarm}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://bad-uri:60001/authz_cb"
														},
														{
															"key": "state",
															"value": "1234-5678-9876"
														},
														{
															"key": "response_mode",
															"value": "fragment.jwt"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"organizations",
						"{{defaultOrganizationId}}",
						"environments",
						"{{defaultEnvironmentId}}",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		}
	]
}