{
	"info": {
		"_postman_id": "66bc895e-10c0-4986-8ef0-851e53d147c9",
		"name": "Gravitee.io - AM - Openid JARM",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "571e9b59-b9e7-452c-9469-9786ded290a6",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{management_url}}/management/auth/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jarm domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b286f0fa-cfcc-45b9-863a-1dbc87fdf835",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"DCR disabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowLocalhostRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowHttpSchemeRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowWildCardRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isOpenDynamicClientRegistrationEnabled).to.eql(false);",
									"    ",
									"    pm.environment.set('domain', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"jarm\", \n\t\"description\": \"Test OpenID JARM specification\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable DCR - non open mode ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "286df3a2-0e06-4b00-9614-3b0fd9ceecb9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR enabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(true);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oidc\": {\n    \"clientRegistrationSettings\": {\n      \"allowLocalhostRedirectUri\": false,\n      \"allowHttpSchemeRedirectUri\": false,\n      \"allowWildCardRedirectUri\": false,\n      \"isDynamicClientRegistrationEnabled\": true,\n      \"isOpenDynamicClientRegistrationEnabled\": false\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default identity provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e92f1ea-5d06-4aa3-9ddc-95b0359a8f20",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities/default-idp-{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities",
								"default-idp-{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create in-memory IDP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e92f1ea-5d06-4aa3-9ddc-95b0359a8f20",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('idp.inmemory', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"identities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get default certificate ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e92f1ea-5d06-4aa3-9ddc-95b0359a8f20",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get default certificate id\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    pm.environment.set('defaultCertificateId', body[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete default certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e92f1ea-5d06-4aa3-9ddc-95b0359a8f20",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates/{{defaultCertificateId}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates",
								"{{defaultCertificateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jks certificate rs256",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1ab79e9-b254-47f9-8af9-e6ab3e47ab58",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Extension Grant - create jks certificate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('certificateJks', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"javakeystore-am-certificate\",\n  \"configuration\": \"{\\\"jks\\\":\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"server.jks\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"size\\\\\\\":2237,\\\\\\\"content\\\\\\\":\\\\\\\"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\\\\\\\"}\\\",\\\"storepass\\\":\\\"letmein\\\",\\\"alias\\\":\\\"mytestkey\\\",\\\"keypass\\\":\\\"changeme\\\"}\",\n  \"name\": \"Test\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jks certificate rs512",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1ab79e9-b254-47f9-8af9-e6ab3e47ab58",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Extension Grant - create jks certificate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('certificateJksRs512', jsonData.id);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"javakeystore-am-certificate\",\n  \"configuration\": \"{\\\"jks\\\":\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"server.jks\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"size\\\\\\\":2237,\\\\\\\"content\\\\\\\":\\\\\\\"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\\\\\\\"}\\\",\\\"storepass\\\":\\\"letmein\\\",\\\"alias\\\":\\\"my4096key\\\",\\\"keypass\\\":\\\"changeme\\\"}\",\n  \"name\": \"my4096key\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bfe78ac1-144a-4bbd-abf9-55e160e723bf",
								"exec": [
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5332b6f5-7419-4792-a30f-cce968d3d67e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body).to.have.property(\"authorization_endpoint\");",
									"    pm.expect(body).to.have.property(\"token_endpoint\");",
									"    pm.expect(body).to.have.property(\"revocation_endpoint\");",
									"    pm.expect(body).to.have.property(\"userinfo_endpoint\");",
									"    pm.expect(body).to.have.property(\"registration_endpoint\");",
									"    pm.expect(body).to.have.property(\"registration_renew_secret_endpoint\");",
									"    pm.expect(body).to.have.property(\"authorization_signing_alg_values_supported\");",
									"    pm.expect(body).to.have.property(\"authorization_encryption_alg_values_supported\");",
									"    pm.expect(body).to.have.property(\"authorization_encryption_enc_values_supported\");",
									"    pm.expect(body).to.have.property(\"response_modes_supported\");",
									"    pm.expect(body.response_modes_supported).to.include('query.jwt')",
									"    ",
									"    pm.environment.set('authorizationEndpoint', body.authorization_endpoint);",
									"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
									"    pm.environment.set('userinfoEndpoint', body.userinfo_endpoint);",
									"    pm.environment.set('revocationEndpoint', body.revocation_endpoint);",
									"    pm.environment.set('registrationEndpoint', body.registration_endpoint);",
									"    pm.environment.set('registrationRenewSecretEndpoint', body.registration_renew_secret_endpoint);",
									"    pm.environment.set('logoutEndpoint', body.end_session_endpoint);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/{{domain}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domain}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create client without DCR enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbe2362d-ad75-4baa-8825-b74218b047c7",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('clientDCR', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": \"dcr-client\",\n  \"clientSecret\": \"dcr-client-secret\",\n  \"clientName\": \"dcr-client-public-name\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/clients",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch client - enable client credentials and DCR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c063d6b-7120-4fd1-8aea-b04f7defc4d0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 6000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"authorizedGrantTypes\": [\"client_credentials\"],\n  \"responseTypes\": [],\n  \"applicationType\": \"server\",\n  \"scopes\": [\"dcr_admin\"]\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/clients/{{clientDCR}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}",
								"clients",
								"{{clientDCR}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Case - Signing authorization",
			"item": [
				{
					"name": "Prepare Client",
					"item": [
						{
							"name": "Generate token - Case signing authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body.scope).to.eql('dcr_admin');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic ZGNyLWNsaWVudDpkY3ItY2xpZW50LXNlY3JldA=="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "dcr_admin",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register client - rs256 authorization (default)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Has default attributes\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body.client_name).to.eql('client_rs256');",
											"",
											"    pm.expect(body).to.have.property('client_id');",
											"    pm.expect(body).to.have.property('client_secret');",
											"    pm.expect(body).to.have.property('authorization_signed_response_alg');",
											"    var credentials = body.client_id + \":\" + body.client_secret;",
											"    var authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(credentials));",
											"    pm.environment.set('dcrClientAuthorization', authorization);",
											"    ",
											"    pm.environment.set('newClientForDCRTests', body.id);",
											"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
											"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
											"    ",
											"    pm.environment.set('clientIdJarm', body.client_id);",
											"    pm.environment.set('clientSecretJarm', body.client_secret);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 6000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"client_name\":\"client_rs256\",\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"identities\": [\n    \t\"{{idp.inmemory}}\"\n\t],\n    \"response_types\": [\"code\",\"token\",\"id_token\"],\n    \"grant_types\": [\"authorization_code\",\"implicit\"],\n    \"scope\": \"openid\",\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"token_endpoint_auth_method\": \"client_secret_basic\"\n}"
								},
								"url": {
									"raw": "{{registrationEndpoint}}",
									"host": [
										"{{registrationEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Authorization Code Flow",
					"item": [
						{
							"name": "Nominal Case",
							"item": [
								{
									"name": "With state - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=' + pm.environment.get('clientIdJarm'));",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{clientIdJarm}}&redirect_uri=https://op-test:60001/authz_cb&state=1234-5678-9876&response_mode=jwt",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "{{clientIdJarm}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://op-test:60001/authz_cb"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "response_mode",
													"value": "jwt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{clientIdJarm}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4fd643c0-c11e-41ee-b85f-87a7d89fdebe",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    ",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be redirected to consent page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.startsWith(pm.environment.get('gateway_url') + '/' + domain + '/oauth/consent');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Redirect to confirm access page",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b80138d-68ff-4dc5-a6b3-ff08ab98e89a",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post authorize form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd53996a-9c23-4eaf-b618-1be0ca5fca63",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "scope.openid",
													"value": "true",
													"type": "text"
												},
												{
													"key": "user_oauth_approval",
													"value": "true",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/oauth/consent",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"oauth",
												"consent"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "368681d3-a8c7-4036-980e-9f5117e71036",
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('https://op-test:60001/authz_cb?');",
													"    tests['Contains a response'] = location.includes('response=');",
													"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
													"    tests['Do not contain an authorization_code'] = !location.includes('code=');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let response = location.substring(location.indexOf('response=') + 9);",
													"    ",
													"    let jwt = parseJwt(response);",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Contains a code claim'] = jwt.code !== undefined;",
													"    tests['Contains an iss claim'] = jwt.iss === origin + '/' + domain + '/oidc';",
													"    tests['Contains an aud claim'] = jwt.aud === pm.environment.get(\"clientIdJarm\");",
													"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
													"    tests['Contains an state claim'] = jwt.state === '1234-5678-9876';",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ae919f0d-445b-4485-ab01-2cf571fa4193",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "422e1c9e-b7a0-4d79-9a28-eee3a081cfc2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Redirect URI mismatch",
							"item": [
								{
									"name": "With response.mode = jwt",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to default error page'] = location.includes(origin + '/' + domain + '/oauth/error');",
													"    tests['Contains a response'] = location.includes('?response=');",
													"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let response = location.substring(location.indexOf('response=') + 9);",
													"    ",
													"    let jwt = parseJwt(response);",
													"    ",
													"    tests['Does not contain an authorization code claim'] = jwt.code === undefined;",
													"    tests['Contains an iss claim'] = jwt.iss === origin + '/' + domain + '/oidc';",
													"    tests['Contains an aud claim'] = jwt.aud === pm.environment.get(\"clientIdJarm\");",
													"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
													"    tests['Contains an state claim'] = jwt.state === '1234-5678-9876';",
													"    tests['Contains an error'] = jwt.error === 'redirect_uri_mismatch';",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{clientIdJarm}}&redirect_uri=https://bad-uri:60001/authz_cb&state=1234-5678-9876&response_mode=jwt",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "{{clientIdJarm}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://bad-uri:60001/authz_cb"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "response_mode",
													"value": "jwt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "With response.mode = fragment.jwt",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to default error page'] = location.includes(origin + '/' + domain + '/oauth/error');",
													"    tests['Contains a response'] = location.includes('#response=');",
													"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let response = location.substring(location.indexOf('response=') + 9);",
													"    ",
													"    let jwt = parseJwt(response);",
													"    ",
													"    tests['Does not contain an authorization code claim'] = jwt.code === undefined;",
													"    tests['Contains an iss claim'] = jwt.iss === origin + '/' + domain + '/oidc';",
													"    tests['Contains an aud claim'] = jwt.aud === pm.environment.get(\"clientIdJarm\");",
													"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
													"    tests['Contains an state claim'] = jwt.state === '1234-5678-9876';",
													"    tests['Contains an error'] = jwt.error === 'redirect_uri_mismatch';",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{clientIdJarm}}&redirect_uri=https://bad-uri:60001/authz_cb&state=1234-5678-9876&response_mode=fragment.jwt",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "{{clientIdJarm}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://bad-uri:60001/authz_cb"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "response_mode",
													"value": "fragment.jwt"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ae919f0d-445b-4485-ab01-2cf571fa4193",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "422e1c9e-b7a0-4d79-9a28-eee3a081cfc2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Implicit Flow",
					"item": [
						{
							"name": "Nominal Case",
							"item": [
								{
									"name": "With state - Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=' + pm.environment.get('clientIdJarm'));",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token token&client_id={{clientIdJarm}}&redirect_uri=https://op-test:60001/authz_cb&state=1234-5678-9876&response_mode=jwt&nonce=n-0S6_WzA2Mj",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token token"
												},
												{
													"key": "client_id",
													"value": "{{clientIdJarm}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://op-test:60001/authz_cb"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "response_mode",
													"value": "jwt"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{clientIdJarm}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "368681d3-a8c7-4036-980e-9f5117e71036",
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('https://op-test:60001/authz_cb#');",
													"    tests['Contains a response'] = location.includes('response=');",
													"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
													"    tests['Do not contain an authorization_code'] = !location.includes('code=');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let response = location.substring(location.indexOf('response=') + 9);",
													"    ",
													"    let jwt = parseJwt(response);",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Contains an access_token claim'] = jwt.access_token !== undefined;",
													"    tests['Contains an iss claim'] = jwt.iss === origin + '/' + domain + '/oidc';",
													"    tests['Contains an aud claim'] = jwt.aud === pm.environment.get(\"clientIdJarm\");",
													"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
													"    tests['Contains an state claim'] = jwt.state === '1234-5678-9876';",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ae919f0d-445b-4485-ab01-2cf571fa4193",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "422e1c9e-b7a0-4d79-9a28-eee3a081cfc2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Redirect URI mismatch",
							"item": [
								{
									"name": "With response.mode = jwt",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to default error page'] = location.includes(origin + '/' + domain + '/oauth/error');",
													"    tests['Contains a response'] = location.includes('#response=');",
													"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let response = location.substring(location.indexOf('response=') + 9);",
													"    ",
													"    let jwt = parseJwt(response);",
													"    ",
													"    tests['Does not contain an authorization code claim'] = jwt.code === undefined;",
													"    tests['Contains an iss claim'] = jwt.iss === origin + '/' + domain + '/oidc';",
													"    tests['Contains an aud claim'] = jwt.aud === pm.environment.get(\"clientIdJarm\");",
													"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
													"    tests['Contains an state claim'] = jwt.state === '1234-5678-9876';",
													"    tests['Contains an error'] = jwt.error === 'redirect_uri_mismatch';",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token token&client_id={{clientIdJarm}}&redirect_uri=https://bad-uri:60001/authz_cb&state=1234-5678-9876&response_mode=jwt&nonce=n-0S6_WzA2Mj",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token token"
												},
												{
													"key": "client_id",
													"value": "{{clientIdJarm}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://bad-uri:60001/authz_cb"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "response_mode",
													"value": "jwt"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "With response.mode = query.jwt",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    let domain = pm.environment.get(\"domain\");",
													"    ",
													"    tests['Redirect to default error page'] = location.includes(origin + '/' + domain + '/oauth/error');",
													"    tests['Contains a response'] = location.includes('?response=');",
													"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let response = location.substring(location.indexOf('response=') + 9);",
													"    ",
													"    let jwt = parseJwt(response);",
													"    ",
													"    tests['Does not contain an authorization code claim'] = jwt.code === undefined;",
													"    tests['Contains an iss claim'] = jwt.iss === origin + '/' + domain + '/oidc';",
													"    tests['Contains an aud claim'] = jwt.aud === pm.environment.get(\"clientIdJarm\");",
													"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
													"    tests['Contains an state claim'] = jwt.state === '1234-5678-9876';",
													"    tests['Contains an error'] = jwt.error === 'redirect_uri_mismatch';",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token token&client_id={{clientIdJarm}}&redirect_uri=https://bad-uri:60001/authz_cb&state=1234-5678-9876&response_mode=query.jwt&nonce=n-0S6_WzA2Mj",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token token"
												},
												{
													"key": "client_id",
													"value": "{{clientIdJarm}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://bad-uri:60001/authz_cb"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "response_mode",
													"value": "query.jwt"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ae919f0d-445b-4485-ab01-2cf571fa4193",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "422e1c9e-b7a0-4d79-9a28-eee3a081cfc2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "340917cd-1f7b-4a39-ba87-ffe70987b355",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e55af275-9b72-4f13-bd23-78f9b32b8a3e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Case - Encrypt authorization",
			"item": [
				{
					"name": "Case - RSA",
					"item": [
						{
							"name": "Prepare Client",
							"item": [
								{
									"name": "patch client - RSA-OAEP-256 - default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.authorization_encrypted_response_alg).to.eql('RSA-OAEP-256');",
													"    pm.expect(body.authorization_encrypted_response_enc).to.eql('A128CBC-HS256');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"authorization_encrypted_response_alg\": \"RSA-OAEP-256\",\n   \"jwks\": {\n        \"keys\": [\n\t\t\t{  \n\t\t\t\t\"kty\": \"RSA\",\n\t\t\t\t\"use\": \"enc\",\n\t\t\t\t\"kid\": \"rsa-encryption-256\",\n\t\t\t\t\"e\": \"AQAB\",\n\t\t\t\t\"n\": \"lFAsvOm58TV5q9zyb3psQSESezZtYLZryGjq8LMnuqRt9cdPQCvMrnjcqdFWiXkD4ZXRO2Wp1iyzgprecx3dAnaD-KHlZR7vsFEmDh27DgNvEx5jKRSy5N2quI2LJw66Jb9JeMqoX6vtv_z3PRHb-zUhnIw6tBwZtuNE-AZSC6atr8ZCLXn6RPqJq_eoGgG-xaAzWPyRXDIqWPVO0RD3odjs6er7BcqVyHg54DyylrmRI4m6xERxpuNYI57bQN5_7a_3tR7hLeHJ8J1mNraMLH7H5_aAM_oSqKBEG9jHSTR7JsI3gSvsNOG-nP9jYxw7fH_c1XfRuTEJfBPEZxzD2Q\"\n\t\t\t},\n            {\n                \"kty\": \"RSA\",\n                \"use\": \"sig\",\n                \"kid\": \"rsa-signature\",\n                \"e\": \"AQAB\",\n                \"n\": \"pRXXMvbZC4-I8nmeirMmr_wlo-lpZo2cyfXLPSduieEsfLeO38vIFdXbVTQ-OAeihFrvbxHELt2mNwCH3gbosd0P-pyYtUOaGmi7rLW9Wik8JcNCKA-v7q2JWmBeRFyRAuwf343gnxNL1mpUHfhqd4eswRiO55iwFT8a8gmxSOm8VXjg2aeUjkI3diT84rGR-wK77OcXeF2zJzjRDe0yFla0Tjb1RNTNkVQBJAQ3VQOOaNL7bXajR79ERlMKCjRFIZ0QCB7Nf6LtMwp9QWRdFrm7RXIPpN1V03E4v51gq82URjuQvEANe-VGRVSBij_GcOSLGjyZQi-yGVyPjNVl1Q\"\n            },\n            {\n                \"kty\": \"EC\",\n                \"use\": \"sig\",\n                \"crv\": \"P-256\",\n                \"kid\": \"elliptic-curve-signature\",\n                \"x\": \"R4JmPwezbzLuyGkonWIkezzplUfed5b6F5PL4j0zdf8\",\n                \"y\": \"QQRGKwRV9jHSlHjUhOQ0FqdQEddFBPCHZXpoFjvGmcY\"\n            },\n\t\t\t{  \n\t\t\t\t\"kty\":\"EC\",\n\t\t\t\t\"use\":\"enc\",\n\t\t\t\t\"crv\":\"P-521\",\n                \"kid\": \"elliptic-curve-encryption\",\n\t\t\t\t\"x\":\"AfEFyeYAr1TwmvCxvqgWPEg4Vvf50RC2OdkYfTS30dInZwX-Ebn6elp4fQ0GOdOBbYRq9b2gQ79Cd1AytQhdF6To\",\n\t\t\t\t\"y\":\"Abj0w4nSumQWtO6AV7ufQN6VpmJoKlWmz9KB6BUU0ANcj4aTJjBE9WNiGCqFpvaIdEWZWcSsZNYGKT3rJ71AfLdm\"\n\t\t\t},\n\t\t\t{  \n\t\t\t\t\"kty\":\"OKP\",\n\t\t\t\t\"use\":\"enc\",\n\t\t\t\t\"kid\":\"edwards-curve-encryption\",\n\t\t\t\t\"crv\":\"X25519\",\n\t\t\t\t\"x\":\"vBNW8f19leF79U4U6NrDDQaK_i5kL0iMKghB39AUT2I\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"128bits\",\n\t\t\t\t\"k\" : \"p94TA_PhiVUdi_yxPbviAw\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"192bits\",\n\t\t\t\t\"k\" : \"G9jUYv3b0-0wZWCGxAnIUH6gI0kjeXj4\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"256bits\",\n\t\t\t\t\"k\" : \"pzx01XDfexcfxHWtk_MzjfCin5NMy3KBx2xtjrX1G-E\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"384bits\",\n\t\t\t\t\"k\" : \"MBNrGN8nwS7hlOVfqEy6qA98bzyo1BLGxr-kyN1E4UXYWQDkBg4L7AQRwpZdrKKS\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kty\": \"oct\",\n\t\t\t\t\"kid\": \"512bits\",\n\t\t\t\t\"k\" : \"LfWisS5p-ohMbNbeWdiSapnHgA62XPu8DXzyzNZQHtQPglHf0Lb6NUM-8aQGj_YWErvODY5rQkpKeolrBKkcmg\"\n\t\t\t}\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Authorization Code Flow",
							"item": [
								{
									"name": "Nominal Case",
									"item": [
										{
											"name": "With state - Initiate the flow",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
														"exec": [
															"pm.test(\"Status code is 302\", function () {",
															"    pm.response.to.have.status(302);",
															"});",
															"",
															"pm.test(\"Should be redirected\", function () {",
															"    pm.response.to.be.redirection;",
															"    pm.response.to.have.header('Location');",
															"});",
															"",
															"pm.test(\"Should be a redirection to login page\", function() {",
															"    var location = postman.getResponseHeader('Location');",
															"    let domain = pm.environment.get(\"domain\");",
															"    ",
															"    tests['Redirect to login page with client_id'] = location.includes(pm.environment.get('gateway_url') + '/' + domain + '/login') && location.includes('client_id=' + pm.environment.get('clientIdJarm'));",
															"    ",
															"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "904f0113-b2b9-4645-9511-48bb10791506",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{clientIdJarm}}&redirect_uri=https://op-test:60001/authz_cb&state=1234-5678-9876&response_mode=jwt",
													"host": [
														"{{authorizationEndpoint}}"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{clientIdJarm}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://op-test:60001/authz_cb"
														},
														{
															"key": "state",
															"value": "1234-5678-9876"
														},
														{
															"key": "response_mode",
															"value": "jwt"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Redirect to login form",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Should be ok\", function () {",
															"    pm.response.to.be.ok;",
															"    ",
															"    // Extract the XSRF token to send it with the next request.",
															"    var responseHTML = cheerio(pm.response.text());",
															"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
															"    pm.environment.set('xsrf', xsrfToken);",
															"});"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "904f0113-b2b9-4645-9511-48bb10791506",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{redirection}}",
													"host": [
														"{{redirection}}"
													]
												},
												"description": "The client does not have a redirect_uri define"
											},
											"response": []
										},
										{
											"name": "Post login form",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
														"exec": [
															"pm.test(\"Status code is 302\", function () {",
															"    pm.response.to.have.status(302);",
															"});",
															"",
															"pm.test(\"Should be redirected\", function () {",
															"    pm.response.to.be.redirection;",
															"    pm.response.to.have.header('Location');",
															"",
															"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "904f0113-b2b9-4645-9511-48bb10791506",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "X-XSRF-TOKEN",
															"value": "{{xsrf}}",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{clientIdJarm}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "user",
															"type": "text"
														},
														{
															"key": "password",
															"value": "password",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{gateway_url}}/{{domain}}/login",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"{{domain}}",
														"login"
													]
												},
												"description": "The client does not have a redirect_uri define"
											},
											"response": []
										},
										{
											"name": "Follow redirection",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "368681d3-a8c7-4036-980e-9f5117e71036",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 302\", function () {",
															"    pm.response.to.have.status(302);",
															"});",
															"",
															"pm.test(\"Should be redirected\", function () {",
															"    pm.response.to.be.redirection;",
															"    pm.response.to.have.header('Location');",
															"});",
															"",
															"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
															"    var location = postman.getResponseHeader('Location');",
															"    tests['Redirect to redirect_uri'] = location.includes('https://op-test:60001/authz_cb?');",
															"    tests['Contains a response'] = location.includes('response=');",
															"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
															"    tests['Do not contain an authorization_code'] = !location.includes('code=');",
															"    ",
															"    // Here we can extract the authorization_code to got further in the process",
															"    let response = location.substring(location.indexOf('response=') + 9);",
															"    ",
															"    let header = parseJweHeader(response);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "904f0113-b2b9-4645-9511-48bb10791506",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{redirection}}",
													"host": [
														"{{redirection}}"
													]
												},
												"description": "The client does not have a redirect_uri define"
											},
											"response": []
										},
										{
											"name": "Logout user",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
														"exec": [
															"pm.test(\"Status code is 302\", function () {",
															"    pm.response.to.have.status(302);",
															"});",
															"",
															"pm.test(\"Should be redirected\", function () {",
															"    pm.response.to.be.redirection;",
															"    pm.response.to.have.header('Location');",
															"    ",
															"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "904f0113-b2b9-4645-9511-48bb10791506",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{logoutEndpoint}}",
													"host": [
														"{{logoutEndpoint}}"
													]
												},
												"description": "The client does not have a redirect_uri define"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ae919f0d-445b-4485-ab01-2cf571fa4193",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "422e1c9e-b7a0-4d79-9a28-eee3a081cfc2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Redirect URI mismatch",
									"item": [
										{
											"name": "With response.mode = jwt",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 302\", function () {",
															"    pm.response.to.have.status(302);",
															"});",
															"",
															"pm.test(\"Should be redirected\", function () {",
															"    pm.response.to.be.redirection;",
															"    pm.response.to.have.header('Location');",
															"});",
															"",
															"pm.test(\"Should be a redirection to login page\", function() {",
															"    var location = postman.getResponseHeader('Location');",
															"    let origin = pm.environment.get(\"gateway_url\");",
															"    let domain = pm.environment.get(\"domain\");",
															"    ",
															"    tests['Redirect to default error page'] = location.includes(origin + '/' + domain + '/oauth/error');",
															"    tests['Contains a response'] = location.includes('?response=');",
															"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
															"    ",
															"    // Here we can extract the authorization_code to got further in the process",
															"    let response = location.substring(location.indexOf('response=') + 9);",
															"    ",
															"    let header = parseJweHeader(response);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "904f0113-b2b9-4645-9511-48bb10791506",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{clientIdJarm}}&redirect_uri=https://bad-uri:60001/authz_cb&state=1234-5678-9876&response_mode=jwt",
													"host": [
														"{{authorizationEndpoint}}"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{clientIdJarm}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://bad-uri:60001/authz_cb"
														},
														{
															"key": "state",
															"value": "1234-5678-9876"
														},
														{
															"key": "response_mode",
															"value": "jwt"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "With response.mode = fragment.jwt",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
														"exec": [
															"function parseJweHeader (token) {",
															"    var base64Url = token.split('.')[0];",
															"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
															"    return JSON.parse(atob(base64));",
															"}",
															"",
															"pm.test(\"Status code is 302\", function () {",
															"    pm.response.to.have.status(302);",
															"});",
															"",
															"pm.test(\"Should be redirected\", function () {",
															"    pm.response.to.be.redirection;",
															"    pm.response.to.have.header('Location');",
															"});",
															"",
															"pm.test(\"Should be a redirection to login page\", function() {",
															"    var location = postman.getResponseHeader('Location');",
															"    let origin = pm.environment.get(\"gateway_url\");",
															"    let domain = pm.environment.get(\"domain\");",
															"    ",
															"    tests['Redirect to default error page'] = location.includes(origin + '/' + domain + '/oauth/error');",
															"    tests['Contains a response'] = location.includes('#response=');",
															"    tests['Do not contain the initial state'] = !location.includes('state=1234-5678-9876');",
															"    ",
															"    // Here we can extract the authorization_code to got further in the process",
															"    let response = location.substring(location.indexOf('response=') + 9);",
															"    ",
															"    let header = parseJweHeader(response);",
															"    ",
															"    tests['Contains cty claim'] = header.cty === 'JWT';",
															"    tests['Contains alg claim'] = header.alg === 'RSA-OAEP-256';",
															"    tests['Contains enc claim'] = header.enc === 'A128CBC-HS256';",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "904f0113-b2b9-4645-9511-48bb10791506",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{authorizationEndpoint}}?response_type=code&client_id={{clientIdJarm}}&redirect_uri=https://bad-uri:60001/authz_cb&state=1234-5678-9876&response_mode=fragment.jwt",
													"host": [
														"{{authorizationEndpoint}}"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{clientIdJarm}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://bad-uri:60001/authz_cb"
														},
														{
															"key": "state",
															"value": "1234-5678-9876"
														},
														{
															"key": "response_mode",
															"value": "fragment.jwt"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ae919f0d-445b-4485-ab01-2cf571fa4193",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "422e1c9e-b7a0-4d79-9a28-eee3a081cfc2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "abfa8366-3ee2-45b0-b658-0040b79d565c",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"organizations",
						"{{defaultOrganizationId}}",
						"environments",
						"{{defaultEnvironmentId}}",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}