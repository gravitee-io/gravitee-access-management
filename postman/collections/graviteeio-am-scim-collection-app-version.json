{
	"info": {
		"_postman_id": "1e8784b9-4e71-4f44-972d-348196dfd13a",
		"name": "Gravitee.io - AM - SCIM - app version",
		"description": "Test System for Cross-domain Identity Management\nSCIM 2.0 is released as RFC7642, RFC7643 and RFC7644",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "702efad1-64e7-473e-abb4-9116327fc2d4",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{management_url}}/management/auth/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create scim domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf2325a8-e22d-4006-82dc-26bea43ec6f6",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set('domain', jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"scim-domain-app-version\", \n\t\"description\": \"test System for Cross-domain Identity Management specifications\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "776be139-dc72-4303-9bc7-08f41160430d",
								"exec": [
									"// wait for sync process",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"organizations",
								"{{defaultOrganizationId}}",
								"environments",
								"{{defaultEnvironmentId}}",
								"domains",
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "well-known/openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "057decc6-d12b-41d2-ad6a-b31f4d2c7ea3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check discovery endpoints\", function () {",
									"    pm.response.to.be.header('Content-Type', 'application/json');",
									"    var body = pm.response.json();",
									"    ",
									"    pm.expect(body).to.have.property(\"token_endpoint\");",
									"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway_url}}/{{domain}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{gateway_url}}"
							],
							"path": [
								"{{domain}}",
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "SCIM",
			"item": [
				{
					"name": "Case - non SCIM domain",
					"item": [
						{
							"name": "Fetch Service Provider Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb7dec3b-3645-4a24-8399-c18b4b8eb278",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/ServiceProviderConfig",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"ServiceProviderConfig"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Users endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebaf443d-cde2-4f94-bb57-90dd68930ae7",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Groups endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5b7265e-7e12-4f36-8605-659f3b5881cd",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configure domain",
					"item": [
						{
							"name": "Configure SCIM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a01c163-ae6a-462f-8fc2-deb2a191c218",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SCIM enabled for domain\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scim.enabled).to.eql(true);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 6000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"scim\": {\n    \"enabled\": true\n  }\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Service Provider Configuration",
					"item": [
						{
							"name": "Fetch Service Provider Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3cb60ee-c3bb-428c-89d8-fe8ca8676c63",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check SCIM configuration\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig']);",
											"    pm.expect(jsonData.patch.supported).to.eql(false);",
											"    pm.expect(jsonData.bulk.supported).to.eql(false);",
											"    pm.expect(jsonData.filter.supported).to.eql(true);",
											"    pm.expect(jsonData.changePassword.supported).to.eql(false);",
											"    pm.expect(jsonData.sort.supported).to.eql(false);",
											"    pm.expect(jsonData.etag.supported).to.eql(false);",
											"    pm.expect(jsonData.authenticationSchemes[0].type).to.eql('oauthbearertoken');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/ServiceProviderConfig",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"ServiceProviderConfig"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - invalid token",
					"item": [
						{
							"name": "Fetch Users endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d72f159-7a4c-4086-8eb8-c0af50a6ac5f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"Authorization failure. The authorization header is invalid or missing.\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Users endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab1176e6-a196-40d7-a73a-79822ee9b7e4",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Users endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2dc1b9c-4ccd-4fc3-9d27-2024d488d8bd",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"Authorization failure. The authorization header is invalid or missing.\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Users endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3084f67-2776-40eb-8abe-86289a982c2d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace Users endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aeec2068-5950-4aab-99fc-acca6ae5f04d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"Authorization failure. The authorization header is invalid or missing.\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace Users endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e745e539-7ee6-4f0d-a3b4-20e1f6c3b1e9",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Users endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f42a6710-83d9-4b8f-9005-c8d89fffe45f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"Authorization failure. The authorization header is invalid or missing.\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Users endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb9a71a1-e099-46f8-a5e4-51f041964f3b",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Users/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Users",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Groups endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdc15aa0-2039-44eb-8921-dc7db89536f9",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"Authorization failure. The authorization header is invalid or missing.\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Groups endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ffca470d-4f1d-4d0d-b09a-11f7a523a23f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace Groups endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a45da68-f916-4c44-81a3-1ce3183ae50c",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"Authorization failure. The authorization header is invalid or missing.\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace Groups endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "788b6789-2bb6-499b-9be3-a98797f0bd76",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Groups endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd2acf95-af43-47d7-9a3a-7c84bd95295a",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"Authorization failure. The authorization header is invalid or missing.\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Groups endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37a9e324-b370-4f5b-8084-708b16439fa0",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Groups endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7075a551-1b4d-491e-ae67-f1b36dfd67cd",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"Authorization failure. The authorization header is invalid or missing.\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Groups endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "829aa230-7348-4dff-8440-2037124850e8",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/{{domain}}/scim/Groups/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"{{domain}}",
										"scim",
										"Groups",
										"test-id"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configure application",
					"item": [
						{
							"name": "Create SCIM application",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd2c3ebc-b37e-45dc-bbcb-c5ab596b74c2",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var body = JSON.parse(responseBody);",
											"pm.environment.set('clientSCIM', body.id);",
											"pm.environment.set('clientId', body.settings.oauth.clientId);",
											"pm.environment.set('clientSecret', body.settings.oauth.clientSecret);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"client-scim\",\n  \"type\": \"SERVICE\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"applications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure SCIM client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d601ea2b-3cbd-4401-9522-9cb2bb4ef419",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 6000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"settings\": {\n  \t\"oauth\": {\n  \t  \"scopes\" : [\"scim\"]\n  \t}\n  }\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{clientSCIM}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"applications",
										"{{clientSCIM}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4885851-5757-4109-ae7b-e0e8ad5ff34a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13d355fd-07ba-4249-a528-0833bf32d6d9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{clientId}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{clientSecret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb71a0c9-0f86-4572-97ae-16f7a93e2465",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create user malformed json\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidSyntax\");",
													"    pm.expect(jsonData.detail).to.eql(\"Unable to parse body message\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - userName required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76e824d0-c6e0-4be3-a68c-86cbfef6046b",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create userName field required\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidValue\");",
													"    pm.expect(jsonData.detail).to.eql(\"Field [userName] is required\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"externalId\":\"bjensen\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n       \"givenName\":\"Barbara\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - userName invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd5c98dd-707a-486c-9668-cb69192dd7e8",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create userName field invalid\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidValue\");",
													"    pm.expect(jsonData.detail).to.eql(\"Username [&Invalid] is not a valid value\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"externalId\":\"bjensen\",\n     \"userName\": \"&Invalid\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n       \"givenName\":\"Barbara\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - familyName invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35fdbc31-454b-4734-b909-8ca150d5115d",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create familyName field invalid\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidValue\");",
													"    pm.expect(jsonData.detail).to.eql(\"Last name [#Invalid] is not a valid value\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"externalId\":\"bjensen\",\n     \"userName\": \"bjensen@example.com\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"#Invalid\",\n       \"givenName\":\"Barbara\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - givenName invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "173ed4b8-e7e6-44bf-8996-3fbfff285ff2",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create givenName field invalid\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidValue\");",
													"    pm.expect(jsonData.detail).to.eql(\"First name [#Invalid] is not a valid value\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"externalId\":\"bjensen\",\n     \"userName\": \"bjensen@example.com\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\": \"Jensen\",\n       \"givenName\":\"#Invalid\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - email invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bdb2d98b-6833-4a7a-ad1f-fe28f3c5b0b5",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create givenName field invalid\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidValue\");",
													"    pm.expect(jsonData.detail).to.eql(\"Value [#Invalid] is not a valid email.\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"externalId\":\"bjensen\",\n     \"userName\": \"bjensen@example.com\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\": \"Jensen\",\n       \"givenName\": \"Barbara\"\n     },\n     \"emails\": [\n\t    {\n\t      \"value\": \"#Invalid\",\n\t      \"type\": \"work\",\n\t      \"primary\": true\n\t    }\n\t  ]\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ddbea90-72f1-4e2f-bacc-aa15a1a28674",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"SCIM create user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:schemas:core:2.0:User']);",
													"    pm.environment.set('userSCIM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n  \"externalId\": \"701984\",\n  \"userName\": \"bjensen@example.com\",\n  \"name\": {\n    \"formatted\": \"Ms. Barbara J Jensen, III\",\n    \"familyName\": \"Jensen\",\n    \"givenName\": \"Barbara\",\n    \"middleName\": \"Jane\",\n    \"honorificPrefix\": \"Ms.\",\n    \"honorificSuffix\": \"III\"\n  },\n  \"displayName\": \"Babs Jensen\",\n  \"nickName\": \"Babs\",\n  \"profileUrl\": \"https://login.example.com/bjensen\",\n  \"emails\": [\n    {\n      \"value\": \"bjensen@example.com\",\n      \"type\": \"work\",\n      \"primary\": true\n    },\n    {\n      \"value\": \"babs@jensen.org\",\n      \"type\": \"home\"\n    }\n  ],\n  \"addresses\": [\n    {\n      \"type\": \"work\",\n      \"streetAddress\": \"100 Universal City Plaza\",\n      \"locality\": \"Hollywood\",\n      \"region\": \"CA\",\n      \"postalCode\": \"91608\",\n      \"country\": \"USA\",\n      \"formatted\": \"100 Universal City Plaza\\nHollywood, CA 91608 USA\",\n      \"primary\": true\n    },\n    {\n      \"type\": \"home\",\n      \"streetAddress\": \"456 Hollywood Blvd\",\n      \"locality\": \"Hollywood\",\n      \"region\": \"CA\",\n      \"postalCode\": \"91608\",\n      \"country\": \"USA\",\n      \"formatted\": \"456 Hollywood Blvd\\nHollywood, CA 91608 USA\"\n    }\n  ],\n  \"phoneNumbers\": [\n    {\n      \"value\": \"555-555-5555\",\n      \"type\": \"work\"\n    },\n    {\n      \"value\": \"555-555-4444\",\n      \"type\": \"mobile\"\n    }\n  ],\n  \"ims\": [\n    {\n      \"value\": \"someaimhandle\",\n      \"type\": \"aim\"\n    }\n  ],\n  \"photos\": [\n    {\n      \"value\":\n        \"https://photos.example.com/profilephoto/72930000000Ccne/F\",\n      \"type\": \"photo\"\n    },\n    {\n      \"value\":\n        \"https://photos.example.com/profilephoto/72930000000Ccne/T\",\n      \"type\": \"thumbnail\"\n    }\n  ],\n  \"userType\": \"Employee\",\n  \"title\": \"Tour Guide\",\n  \"preferredLanguage\": \"en-US\",\n  \"locale\": \"en-US\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"active\":true,\n  \"x509Certificates\": [\n    {\n      \"value\":\n       \"MIIDQzCCAqygAwIBAgICEAAwDQ....1UEBhMCVVMx\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - userName already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "964b2b95-6a73-4bf9-9348-abdfaa587322",
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"    pm.response.to.have.status(409);",
													"});",
													"",
													"pm.test(\"SCIM create user uniqueness\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"409\");",
													"    pm.expect(jsonData.scimType).to.eql(\"uniqueness\");",
													"    pm.expect(jsonData.detail).to.eql(\"User with username [bjensen@example.com] already exists\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"userName\":\"bjensen@example.com\",\n     \"externalId\":\"bjensen\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n       \"givenName\":\"Barbara\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Invalid request - user not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a51c35e8-c748-4a70-a914-e9bc04ab48bd",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"SCIM update user unknown user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"404\");",
													"    pm.expect(jsonData.detail).to.eql(\"User [wrong-id] can not be found.\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"userName\":\"bjensen\",\n     \"externalId\":\"bjensen\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n       \"givenName\":\"Barbara\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users/wrong-id",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85bfbf1b-b0f1-456e-b595-65289fef1671",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM update user malformed json\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidSyntax\");",
													"    pm.expect(jsonData.detail).to.eql(\"Unable to parse body message\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users/{{userSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users",
												"{{userSCIM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "584e9999-92f4-43b7-b7d5-33309a9aaa8e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM update user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:schemas:core:2.0:User']);",
													"    pm.expect(jsonData.name.familyName).to.eql('Jensen2');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"userName\":\"bjensen\",\n     \"externalId\":\"bjensen\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen2\",\n       \"givenName\":\"Barbara\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users/{{userSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users",
												"{{userSCIM}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List",
							"item": [
								{
									"name": "List users",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb757cde-314b-438d-a69e-75bbb80ec32e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// 2 users (one from SCIM and an other from inline idp)",
													"pm.test(\"SCIM list users\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:ListResponse']);",
													"    pm.expect(jsonData.totalResults).to.eql(1);",
													"    pm.expect(jsonData.startIndex).to.eql(1);",
													"    pm.expect(jsonData.itemsPerPage).to.eql(1);",
													"    pm.expect(jsonData.Resources.length).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter users - invalid filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45f020ac-5759-4308-9e58-a3f0e1fa240a",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM list users - invalid filter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"    pm.expect(jsonData.scimType).to.eql('invalidSyntax');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users?filter=invalid",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											],
											"query": [
												{
													"key": "filter",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter users - user not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e663247-dbd2-4dcf-94f0-e01868132f27",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM list users - unknown user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:ListResponse']);",
													"    pm.expect(jsonData.totalResults).to.eql(0);",
													"    pm.expect(jsonData.startIndex).to.eql(1);",
													"    pm.expect(jsonData.itemsPerPage).to.eql(0);",
													"    pm.expect(jsonData.Resources.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users?filter=userName eq \"invalid\"",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											],
											"query": [
												{
													"key": "filter",
													"value": "userName eq \"invalid\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter users - user found - simple filter - eq operand",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c86b4a12-606a-401a-af83-faa93ab8abad",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM list users - simple filter - eq\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:ListResponse']);",
													"    pm.expect(jsonData.totalResults).to.eql(1);",
													"    pm.expect(jsonData.startIndex).to.eql(1);",
													"    pm.expect(jsonData.itemsPerPage).to.eql(1);",
													"    pm.expect(jsonData.Resources.length).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users?filter=userName eq \"bjensen@example.com\"",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											],
											"query": [
												{
													"key": "filter",
													"value": "userName eq \"bjensen@example.com\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter users - user found - simple filter - regex operand",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83ae9087-dbd5-42dc-a144-40082963c43c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM list users - simple filter - regex\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:ListResponse']);",
													"    pm.expect(jsonData.totalResults).to.eql(1);",
													"    pm.expect(jsonData.startIndex).to.eql(1);",
													"    pm.expect(jsonData.itemsPerPage).to.eql(1);",
													"    pm.expect(jsonData.Resources.length).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users?filter=userName co \"bjensen\"",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											],
											"query": [
												{
													"key": "filter",
													"value": "userName co \"bjensen\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter users - user found - complex filter - or operand",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b0b750b-f6fe-49fa-8849-a515551b5663",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM list users - complex filter - or\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:ListResponse']);",
													"    pm.expect(jsonData.totalResults).to.eql(1);",
													"    pm.expect(jsonData.startIndex).to.eql(1);",
													"    pm.expect(jsonData.itemsPerPage).to.eql(1);",
													"    pm.expect(jsonData.Resources.length).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users?filter=userName eq \"invalid\" or name.givenName eq \"Barbara\"",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											],
											"query": [
												{
													"key": "filter",
													"value": "userName eq \"invalid\" or name.givenName eq \"Barbara\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter users - user found - complex filter - and operand",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb833f93-04a7-489d-b7da-af88502f61bd",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM list users - complex filter - and\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:ListResponse']);",
													"    pm.expect(jsonData.totalResults).to.eql(1);",
													"    pm.expect(jsonData.startIndex).to.eql(1);",
													"    pm.expect(jsonData.itemsPerPage).to.eql(1);",
													"    pm.expect(jsonData.Resources.length).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users?filter=name.givenName eq \"Barbara\" and active eq false and meta.created ge \"2020-10-14T20:18:43.048Z\"",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											],
											"query": [
												{
													"key": "filter",
													"value": "name.givenName eq \"Barbara\" and active eq false and meta.created ge \"2020-10-14T20:18:43.048Z\""
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Invalid request - user not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f4c7cd9-63a8-46fc-a4bf-f1f79948633c",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"SCIM delete user unknown user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"404\");",
													"    pm.expect(jsonData.detail).to.eql(\"User [wrong-id] can not be found.\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users/wrong-id",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0d71d89-a4c4-447d-874c-02979fcc0f15",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users/{{userSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users",
												"{{userSCIM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "List users",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "515ee4d5-3944-40e4-9a8b-48b6b078d9d2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM list users after delete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:ListResponse']);",
													"    pm.expect(jsonData.totalResults).to.eql(0);",
													"    pm.expect(jsonData.startIndex).to.eql(1);",
													"    pm.expect(jsonData.itemsPerPage).to.eql(0);",
													"    pm.expect(jsonData.Resources.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Groups",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65916c19-8421-4070-af52-c02073685453",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create group malformed json\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidSyntax\");",
													"    pm.expect(jsonData.detail).to.eql(\"Unable to parse body message\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - displayName required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26f5545a-26b6-4649-9376-cfbdbc148d5f",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM group displayName field required\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidValue\");",
													"    pm.expect(jsonData.detail).to.eql(\"Field [displayName] is required\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"]\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c5703df-9041-4669-b438-a8d76aa7ad0d",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"SCIM create user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:schemas:core:2.0:Group']);",
													"    pm.environment.set('groupSCIM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n   \"displayName\": \"Tour Guides\"\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - displayName already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "baa23664-e630-4bbf-90a4-f682c899b464",
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"    pm.response.to.have.status(409);",
													"});",
													"",
													"pm.test(\"SCIM create group uniqueness\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"409\");",
													"    pm.expect(jsonData.scimType).to.eql(\"uniqueness\");",
													"    pm.expect(jsonData.detail).to.eql(\"Group with display name [Tour Guides] already exists\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n   \"displayName\": \"Tour Guides\"\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Invalid request - group not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c2c6942-2917-46f6-93fe-d11d24b48228",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"SCIM update user unknown user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"404\");",
													"    pm.expect(jsonData.detail).to.eql(\"Group [wrong-id] can not be found.\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n   \"displayName\": \"Tour Guides 2\"\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups/wrong-id",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e80c87d3-9448-4540-83a3-00f096bd57c2",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM update user malformed json\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidSyntax\");",
													"    pm.expect(jsonData.detail).to.eql(\"Unable to parse body message\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups/{{groupSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups",
												"{{groupSCIM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4dc79ae1-e9e4-422e-ad46-2a3d60223a8d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM update user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:schemas:core:2.0:Group']);",
													"    pm.expect(jsonData.displayName).to.eql('Tour Guides 2');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n   \"displayName\": \"Tour Guides 2\"\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups/{{groupSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups",
												"{{groupSCIM}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List",
							"item": [
								{
									"name": "List groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d54ab43-fa08-4011-9161-52e377ff08e8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM list groups\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:ListResponse']);",
													"    pm.expect(jsonData.totalResults).to.eql(1);",
													"    pm.expect(jsonData.startIndex).to.eql(1);",
													"    pm.expect(jsonData.itemsPerPage).to.eql(1);",
													"    pm.expect(jsonData.Resources.length).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Invalid request - group not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9122a083-8a10-4c65-b2c8-4881c76c91f1",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"SCIM delete group unknown group\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"404\");",
													"    pm.expect(jsonData.detail).to.eql(\"Group [wrong-id] can not be found.\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups/wrong-id",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b53a1699-fe5f-4380-be29-796d298165e9",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups/{{groupSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups",
												"{{groupSCIM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "List groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d38066c-1e79-4572-87f1-46556823ce7a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM list groups after delete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:ListResponse']);",
													"    pm.expect(jsonData.totalResults).to.eql(0);",
													"    pm.expect(jsonData.startIndex).to.eql(1);",
													"    pm.expect(jsonData.itemsPerPage).to.eql(0);",
													"    pm.expect(jsonData.Resources.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/{{domain}}/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"{{domain}}",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete domain",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d797ca1f-8117-4437-818a-469adec6b0a8",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
					"host": [
						"{{management_url}}"
					],
					"path": [
						"management",
						"organizations",
						"{{defaultOrganizationId}}",
						"environments",
						"{{defaultEnvironmentId}}",
						"domains",
						"{{domain}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}