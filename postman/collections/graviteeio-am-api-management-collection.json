{
	"info": {
		"_postman_id": "247e759d-baeb-4ee1-b7d1-7af1047e8c35",
		"name": "Gravitee.io - AM - API Management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31343100"
	},
	"item": [
		{
			"name": "Prepare",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{management_url}}/management/auth/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"auth",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Prepare",
					"item": [
						{
							"name": "Get admin configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set('currentIdp', jsonData.identities[0]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/settings",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set('newIdp', jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var username = pm.variables.replaceIn('{{$randomUserName}}') ;",
											"",
											"pm.environment.set(\"username\", username)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"external\":false,\n\t\"type\":\"inline-am-idp\",\n    \"domainWhitelist\" : [],\n\t\"configuration\":\"{\\\"users\\\":[{\\\"firstname\\\":\\\"test\\\",\\\"lastname\\\":\\\"test\\\",\\\"username\\\":\\\"{{username}}\\\",\\\"email\\\":\\\"test@test.com\\\",\\\"password\\\":\\\"test\\\"}]}\",\n\t\"name\":\"Inline Users 2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/identities",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"identities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update admin configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// wait for sync process",
											"setTimeout(function(){}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"identities\":[\"{{currentIdp}}\",\"{{newIdp}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/settings",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"settings"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Initiate Login Flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"});",
											"",
                                            "pm.test(\"Should be a redirection to login page\", function() {",
                                            "    var location = pm.response.headers.get('Location');",
                                            "    pm.expect(location.includes('/management/auth/login')).to.be.true;",
                                            "    pm.environment.set('redirection', pm.response.headers.get('Location'));",
                                            "});",
                                            "",
                                            "pm.test(\"Should have redirect cookie set\", function() {",
                                            "    var redirectUrl = decodeURIComponent(pm.cookies.get('Redirect-Graviteeio-AM'));",
                                            "    pm.expect(redirectUrl).to.equal(pm.request.url.toString());",
                                            "    pm.environment.set('cookieRedirectUrl', redirectUrl);",
                                            "});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{management_url}}/management/auth/authorize?redirect_uri=http://nowhere.com",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"auth",
										"authorize"
									],
									"query": [
										{
											"key": "redirect_uri",
											"value": "http://nowhere.com"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Redirect to login form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should be ok\", function () {",
											"    pm.response.to.be.ok;",
											"    ",
											"    // Extract the XSRF token to send it with the next request.",
                                            "    var cheerio = require('cheerio');",
											"    var responseHTML = cheerio(pm.response.text());",
											"    var xsrfToken = responseHTML.find('[name=\"_csrf\"]').val();",
											"    pm.environment.set('xsrf', xsrfToken);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{redirection}}",
									"host": [
										"{{redirection}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Post login form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected to authorize\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"",
											"    var location = pm.response.headers.get('Location');",
											"    pm.environment.set('redirection', location);",
                                            "    pm.expect(location).to.equal(pm.environment.get('cookieRedirectUrl'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "_csrf",
											"value": "{{xsrf}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "test",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{management_url}}/management/auth/login",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"auth",
										"login"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Redirect to authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"});",
											"",
                                            "pm.test(\"Should be a redirection to login page\", function () {",
                                            "    var location = pm.response.headers.get('Location');",
                                            "    pm.expect(location.includes('http://nowhere.com')).to.be.true;",
                                            "});",
                                            "",
                                            "pm.test(\"Should not have redirect cookie anymore\", function() {",
                                            "    var redirectCookie = decodeURIComponent(pm.cookies.get('Redirect-Graviteeio-AM'));",
                                            "    pm.expect(redirectCookie).to.be.equal(\"undefined\")",
                                            "    pm.environment.unset('cookieRedirectUrl');",
                                            "});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{redirection}}",
									"host": [
										"{{redirection}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"});",
											"",
                                            "pm.test(\"Should be a redirection to target url\", function () {",
                                            "    var location = pm.response.headers.get('Location');",
                                            "    pm.expect(location).to.equal('http://nowhere.com');",
                                            "});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{management_url}}/management/auth/logout?target_url=http://nowhere.com",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"auth",
										"logout"
									],
									"query": [
										{
											"key": "target_url",
											"value": "http://nowhere.com"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Token",
					"item": [
						{
							"name": "Generate user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "test",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW5hZG1pbg==",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{management_url}}/management/auth/token",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"auth",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cleanup",
					"item": [
						{
							"name": "Reset admin configuration",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"identities\":[\"{{currentIdp}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/settings",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete new identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/identities/{{newIdp}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"identities",
										"{{newIdp}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Login Social Provider",
			"item": [
				{
					"name": "Prepare",
					"item": [
						{
							"name": "Create social domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set('domain', jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"social\", \n\t\"description\": \"test management login with social provider\", \n\t\"dataPlaneId\": \"default\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Accept unsecured redirect_uris",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"oidc\":\n    {\"clientRegistrationSettings\":\n        {\n            \"allowLocalhostRedirectUri\":true,\n            \"allowHttpSchemeRedirectUri\":true,\n            \"allowWildCardRedirectUri\":true,\n            \"isDynamicClientRegistrationEnabled\":false,\n            \"isOpenDynamicClientRegistrationEnabled\":false,\n            \"isAllowedScopesEnabled\":false,\n            \"isClientTemplateEnabled\":false\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create social in-memory IDP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var body = JSON.parse(responseBody);",
											"pm.environment.set('idp.inmemory', body.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var username = pm.variables.replaceIn('{{$randomUserName}}') ;",
											"",
											"pm.environment.set(\"username\", username)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"domainWhitelist\" : [],\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"{{username}}\\\",\\\"password\\\":\\\"test\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/identities",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"identities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create social application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var body = JSON.parse(responseBody);",
											"pm.environment.set('app', body.id);",
											"pm.environment.set('clientId', body.settings.oauth.clientId);",
											"pm.environment.set('clientSecret', body.settings.oauth.clientSecret);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"my-client\",\n  \"type\": \"WEB\",\n  \"clientId\": \"my-client\",\n  \"clientSecret\": \"my-client-secret\",\n  \"redirectUris\": [\"https://nowhere.com\"]\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"applications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure social application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"identityProviders\": [\n    { \"identity\": \"{{idp.inmemory}}\", \"priority\" : -1 }\n  ],\n  \"settings\": {\n  \t\"oauth\": {\n  \t\t\"redirectUris\": [\"https://nowhere.com\", \"http://localhost:8093/management/auth/login/callback*\"],\n\t\t\"grantTypes\": [\n\t\t    \"authorization_code\",\n\t\t    \"client_credentials\",\n\t\t    \"password\",\n\t\t    \"refresh_token\"\n\t\t  ],\n\t\t\"tokenEndpointAuthMethod\": \"client_secret_post\",\n        \"scopeSettings\": [{\"scope\": \"openid\", \"defaultScope\" : true}]\n   \n\t},\n    \"advanced\": {\n        \"skipConsent\": true\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/applications/{{app}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"applications",
										"{{app}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start social domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// wait for sync process",
											"setTimeout(function(){}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"enabled\": true\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set('currentIdp', jsonData.identities[0]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/settings",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set('newIdp', jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"external\": true,\n\t\"type\": \"oauth2-generic-am-idp\",\n    \"domainWhitelist\" : [],\n\t\"configuration\": \"{\\\"clientId\\\":\\\"my-client\\\",\\\"clientSecret\\\":\\\"my-client-secret\\\",\\\"wellKnownUri\\\":\\\"{{gateway_url}}/social/oidc/.well-known/openid-configuration\\\",\\\"responseType\\\":\\\"code\\\",\\\"encodeRedirectUri\\\":false,\\\"useIdTokenForUserInfo\\\":false,\\\"signature\\\":\\\"RSA_RS256\\\",\\\"publicKeyResolver\\\":\\\"GIVEN_KEY\\\",\\\"connectTimeout\\\":10000,\\\"maxPoolSize\\\":200}\",\n\t\"name\": \"Social\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/identities",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"identities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update admin configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// wait for sync process",
											"setTimeout(function(){}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"identities\":[\"{{currentIdp}}\",\"{{newIdp}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/settings",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"settings"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Initiate Login Flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"});",
											"",
                                            "pm.test(\"Should be a redirection to login page\", function() {",
                                            "    var location = pm.response.headers.get('Location');",
                                            "    pm.expect(location).to.include('/management/auth/login');",
                                            "    pm.environment.set('redirection', location);",
                                            "});",
                                            "",
                                            "pm.test(\"Should have redirect cookie set\", function() {",
                                            "    var redirectUrl = decodeURIComponent(pm.cookies.get('Redirect-Graviteeio-AM'));",
                                            "    pm.expect(redirectUrl).to.equal(pm.request.url.toString());",
                                            "    pm.environment.set('cookieRedirectUrl', redirectUrl);",
                                            "});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{management_url}}/management/auth/authorize?redirect_uri=https://nowhere.com",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"auth",
										"authorize"
									],
									"query": [
										{
											"key": "redirect_uri",
											"value": "https://nowhere.com"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Redirect to login form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should be ok\", function () {",
											"    pm.response.to.be.ok;",
											"    ",
											"    // Extract the XSRF token to send it with the next request.",
                                            "    var cheerio = require('cheerio');",
											"    var responseHTML = cheerio(pm.response.text());",
											"    var xsrfToken = responseHTML.find('[name=\"_csrf\"]').val();",
											"    pm.environment.set('xsrf', xsrfToken);",
											"    var socialUrl = responseHTML.find('[class=\"mdl-social-button\"] > a');",
											"    pm.environment.set('socialUrl', socialUrl.attr('href'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{redirection}}",
									"host": [
										"{{redirection}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Choose social provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"    pm.environment.set('redirection', pm.response.headers.get('Location'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{socialUrl}}",
									"host": [
										"{{socialUrl}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Redirect to social domain login form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should be ok\", function () {",
											"    pm.response.to.be.ok;",
											"    ",
											"    // Extract the XSRF token to send it with the next request.",
                                            "    var cheerio = require('cheerio');",
									        "    var responseHTML = cheerio.load(pm.response.text());",
											"    var xsrfToken = responseHTML('[name=\"X-XSRF-TOKEN\"]').val();",
											"    const action = responseHTML('form').attr('action');",
											"    pm.environment.set('xsrf', xsrfToken);",
											"    pm.environment.set('action', action);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{redirection}}",
									"host": [
										"{{redirection}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Post login form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected to complete profile page\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"",
											"    var location = pm.response.headers.get('Location');",
											"    pm.environment.set('redirection', location);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "X-XSRF-TOKEN",
											"value": "{{xsrf}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "test",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "my-client",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{action}}",
									"host": [
										"{{action}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Redirect to social domain authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected to /login/callback\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"    var location = pm.response.headers.get('Location');",
											"    pm.environment.set('redirection', location);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{redirection}}",
									"host": [
										"{{redirection}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Redirect to login callback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected to /login/callback\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"    var location = pm.response.headers.get('Location');",
											"    pm.environment.set('redirection', location);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{redirection}}",
									"host": [
										"{{redirection}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Redirect to authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"});",
											"",
                                            "pm.test(\"Should be a redirection to login page\", function() {",
                                            "    var location = pm.response.headers.get('Location');",
                                            "    pm.expect(location).to.include('https://nowhere.com');",
                                            "});",
                                            "",
                                            "pm.test(\"Should not have redirect cookie anymore\", function() {",
                                            "    var redirectCookie = decodeURIComponent(pm.cookies.get('Redirect-Graviteeio-AM'));",
                                            "    pm.expect(redirectCookie).to.equal('undefined');",
                                            "    pm.environment.unset('cookieRedirectUrl');",
                                            "});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{redirection}}",
									"host": [
										"{{redirection}}"
									]
								},
								"description": "The client does not have a redirect_uri define"
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"});",
											"",
                                            "pm.test(\"Should be a redirection to target url\", function() {",
                                            "    var location = pm.response.headers.get('Location');",
                                            "    pm.expect(location).to.equal('http://nowhere.com');",
                                            "});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{management_url}}/management/auth/logout?target_url=http://nowhere.com",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"auth",
										"logout"
									],
									"query": [
										{
											"key": "target_url",
											"value": "http://nowhere.com"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout social domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {",
											"    pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Should be redirected\", function () {",
											"    pm.response.to.be.redirection;",
											"    pm.response.to.have.header('Location');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway_url}}/social/logout",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"social",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Cleanup",
					"item": [
						{
							"name": "Delete social domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset admin configuration",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"identities\":[\"{{currentIdp}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/settings",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete new identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/identities/{{newIdp}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"identities",
										"{{newIdp}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Alert",
			"item": [
				{
					"name": "Prepare",
					"item": [
						{
							"name": "Create alert domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set('domain', jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"alert\", \n\t\"description\": \"test alerting on domain\", \n\t\"dataPlaneId\": \"default\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Alert",
					"item": [
						{
							"name": "Enable domain alerts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should alert be enabled\", function () {",
											"   var domain = pm.response.json();",
											"   pm.expect(domain.alertEnabled).to.be.true",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"alertEnabled\": true\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List domain alert notifiers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should alert notifiers empty\", function () {",
											"   var alertNotifiers = pm.response.json();",
											"   pm.expect(alertNotifiers).to.be.empty",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/alerts/notifiers",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"alerts",
										"notifiers"
									]
								}
							},
							"response": []
						},
						{
							"name": "List plugin notifiers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should have 3 plugin notifiers\", function () {",
											"   var notifiers = pm.response.json();",
											"   pm.expect(notifiers.length).to.be.eq(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{management_url}}/management/platform/plugins/notifiers?expand=icon",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"platform",
										"plugins",
										"notifiers"
									],
									"query": [
										{
											"key": "expand",
											"value": "icon"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create domain webhook alert notifiers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set('alertNotifier', jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"webhook-notifier\",\n    \"configuration\": \"{\\\"method\\\":\\\"POST\\\",\\\"url\\\":\\\"https://webhook.site/1e5ff66f-c40e-4594-8977-f63c0f84af67\\\",\\\"headers\\\":[{\\\"name\\\":\\\"Content-Type\\\",\\\"value\\\":\\\"text/plain\\\"}],\\\"body\\\":\\\"An alert '${alert.name}' has been fired.\\\\\\\\n\\\\\\\\nDate: ${notification.timestamp?number?number_to_datetime}\\\\\\\\nDomain: ${domain.name} (${domain.id})\\\\\\\\nApplication: ${application.name} (${application.id})\\\\\\\\nUser: ${notification.properties['user']}\\\\\\\\nAlert: ${alert.description}\\\\\\\\nTechnical message: ${notification.message}\\\",\\\"useSystemProxy\\\":false}\",\n    \"name\": \"Webhook\",\n    \"enabled\": true\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/alerts/notifiers",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"alerts",
										"notifiers"
									]
								}
							},
							"response": []
						},
						{
							"name": "List domain alert notifiers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should alert notifiers empty\", function () {",
											"   var alertNotifiers = pm.response.json();",
											"   pm.expect(alertNotifiers).to.not.empty",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/alerts/notifiers",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"alerts",
										"notifiers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable too many login failures alert",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"type\": \"too_many_login_failures\",\n        \"enabled\": true,\n        \"alertNotifiers\": [\n            \"{{alertNotifier}}\"\n        ]\n    }\n]"
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}/alerts/triggers",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}",
										"alerts",
										"triggers"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cleanup",
					"item": [
						{
							"name": "Delete alert domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{management_url}}/management/organizations/{{defaultOrganizationId}}/environments/{{defaultEnvironmentId}}/domains/{{domain}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"organizations",
										"{{defaultOrganizationId}}",
										"environments",
										"{{defaultEnvironmentId}}",
										"domains",
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	]
}
