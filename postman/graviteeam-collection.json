{
	"info": {
		"_postman_id": "4388b7d9-1598-4ebc-910d-337c701d5cce",
		"name": "Gravitee.io AM",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prepare domain",
			"item": [
				{
					"name": "Generate admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "571e9b59-b9e7-452c-9469-9786ded290a6",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var token = JSON.parse(responseBody);",
									"pm.environment.set('token', token.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW5hZG1pbg=="
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "adminadmin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{management_url}}/admin/token",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"admin",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create security domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b286f0fa-cfcc-45b9-863a-1dbc87fdf835",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"DCR disabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowLocalhostRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowHttpSchemeRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowWildCardRedirectUri).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isOpenDynamicClientRegistrationEnabled).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"test\", \n\t\"description\": \"test domain\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch domain for DCR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d80e686-0750-477e-b1fe-e379e1442cbb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DCR disabled for domain\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowLocalhostRedirectUri).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowHttpSchemeRedirectUri).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.allowWildCardRedirectUri).to.eql(true);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(false);",
									"    pm.expect(jsonData.oidc.clientRegistrationSettings.isOpenDynamicClientRegistrationEnabled).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oidc\": {\n    \"clientRegistrationSettings\": {\n      \"allowLocalhostRedirectUri\": true,\n      \"allowHttpSchemeRedirectUri\": true,\n      \"allowWildCardRedirectUri\": true,\n      \"isDynamicClientRegistrationEnabled\": false,\n      \"isOpenDynamicClientRegistrationEnabled\": false\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/test",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbe2362d-ad75-4baa-8825-b74218b047c7",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('client1', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": \"my-client\",\n  \"clientSecret\": \"my-client-secret\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/test/clients",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"test",
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create client 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4274f031-8ca2-4302-ba4a-ce11b54dba1c",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('client2', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": \"my-client2\",\n  \"clientSecret\": \"my-client-secret2\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/test/clients",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"test",
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create simple scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9d1a08f-42e1-48a8-a551-aeda99bc04e1",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"key\": \"scope1\",\n  \"name\": \"scope1\",\n  \"description\": \"scope1\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/test/scopes",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"test",
								"scopes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create in-memory IDP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e92f1ea-5d06-4aa3-9ddc-95b0359a8f20",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"pm.environment.set('idp.inmemory', body.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external\": false,\n  \"type\": \"inline-am-idp\",\n  \"configuration\": \"{\\\"users\\\":[{\\\"firstname\\\":\\\"my-user\\\",\\\"lastname\\\":\\\"my-user-lastname\\\",\\\"username\\\":\\\"user\\\",\\\"password\\\":\\\"password\\\"}]}\",\n  \"name\": \"inmemory\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/test/identities",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"test",
								"identities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c37cba72-91c2-4850-80cd-6fd3908e406e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"redirectUris\": [],\n  \"authorizedGrantTypes\": [\n    \"authorization_code\",\n    \"client_credentials\",\n    \"implicit\",\n    \"password\",\n    \"refresh_token\"\n  ],\n  \"scopes\": [\"scope1\", \"openid\"],\n  \"accessTokenValiditySeconds\": 7200,\n  \"refreshTokenValiditySeconds\": 14400,\n  \"idTokenValiditySeconds\": 14400,\n  \"idTokenCustomClaims\": {},\n  \"enabled\": true,\n  \"identities\": [\n    \"{{idp.inmemory}}\"\n  ],\n  \"enhanceScopesWithUserPermissions\": false\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/test/clients/{{client1}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"test",
								"clients",
								"{{client1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Configure client 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "576263ed-f6e5-44e3-8519-998efca70a67",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"redirectUris\": [\"http://localhost:4000/\"],\n  \"authorizedGrantTypes\": [\n    \"authorization_code\",\n    \"client_credentials\",\n    \"implicit\",\n    \"password\"\n  ],\n  \"scopes\": [\"scope1\"],\n  \"accessTokenValiditySeconds\": 7200,\n  \"refreshTokenValiditySeconds\": 14400,\n  \"idTokenValiditySeconds\": 14400,\n  \"idTokenCustomClaims\": {},\n  \"enabled\": true,\n  \"identities\": [\n    \"{{idp.inmemory}}\"\n  ],\n  \"enhanceScopesWithUserPermissions\": false\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/test/clients/{{client2}}",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"test",
								"clients",
								"{{client2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jks certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1ab79e9-b254-47f9-8af9-e6ab3e47ab58",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Extension Grant - create jks certificate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('certificateJks', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"javakeystore-am-certificate\",\n  \"configuration\": \"{\\\"jks\\\":\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"server.jks\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"size\\\\\\\":2237,\\\\\\\"content\\\\\\\":\\\\\\\"/u3+7QAAAAIAAAABAAAAAQAJbXl0ZXN0a2V5AAABYkPPuJkAAAUCMIIE/jAOBgorBgEEASoCEQEBBQAEggTqr5aJvYjZG/WQ8gGjoB2IzOwULJfXRbSwn0H9SP6vXE7TkFdVC6e7jOsPwwUVKwiTRCrNLL3G9OYyBvQEJv1NdPGYpqrD+4bzr5oVKQbwuXAs455phdjZ5jFlGjjowHBU7loxm5TJDncBfYoffptiStRSjzuuEWRPaRnUtL1PMidp4XdSOxzknBQ86zLz266y6pksmrSyCGxXiZwvnzq2TRvZOAT5haYA1wJOZwXAE4xk00C9Zr5NBIgyAZ0fsuZfquLhxpEgDg8XFsXAL7O4U9ocETktH4j5JnYWng6A90Ke2l4CUKjPvXTMYQr2ll26BjpE/TGyXRMNqqSzZ6tujn9wji1stGUS840AFye/HfZyQlkZBV/CyyDx/OkP0D9U5xO5jCnurGrMrbskIqcLchyb9xobr/RbnrpwMnK2XteCX9WRog064uYY8r722c81jFM6pL9Ue/Jm6h5fkHKZdJPJtMqdZf9fgb8VbxranRQDd3EIxx0yIXBddv6lqWMISXJCAni3MpBwiUAgzDdVVQYJlzu8t1x8cEpIrqD0sNQhGKmmDWwAE2mKJrYLaqaICKG9YaWy65ZPUOdQMUFzYOxpjNAvbDE/ZUs2jU1AbBpCk0HpgoBYckx0bIAN0buwaPUMwBgCzOjaQ6EQkNiORJoBdxqgI2GsN4j3TzUFSUIRZlFRxbn/f1Oo9SSznIfSzMRDEfoZYdLzwm01yBl5VwmCY5azrPGtAl+hmgBOdYM4O+svGTam+E4Iw2abX9T+B1im8ip4fEtn98Pgr//d+1cbYC2kcPMadfjMbp3d62z4DH9ABqTnEHBbfo1GgOpzpMRaKfrKvPap3PniP0YYqwDRJ4zn7OfYmrxVy8MENqGLveIksyvRj1K8Y3uexxZQ6CMAWbUuONJHHfBoTYsK+LdYxl7fCSuxqx9z0V3x5R3PCXchxNqR9f2tU1uDBqlXDESko0g9X0Qi1pLMk8A7wE5g8mChFhhrakrRMauwH0JkyLw+vcVpLqsyxsAcIm5bX3IWivPrbLZRW3lSLofdXj0XEuP2vnxdC82UPI3VQqqAI1UzL9sUl/cqhNGNztyRYAEv3FWttW2YTA1dlgq4DjPIRFAS4HyzgHeg8Jcgg/kRHbaLT4j2JVdqFG22CL+bayA6KqWeHos2bAA3ydw34y3QtJ0cqcH3iUZ0R0z++rG6iwDKPMkNW4osWP51UcFLXY/uNGSoverCQGJsD+wKvyi9KGDCsdjacgZJJtAsyOCxQssIPeB3GWt0rJi86SUqg0praNBXHKcbx5wSvp9i6uuaZhPzcvECPW/kgzPRaZLfneEZI+UPy31/jP8EUfQ9JT2hQ7w69jgVDE0WFhmNt8I/VrCMxFwCqYvA4m8xLmplZhCy+HUbLJMcwAx0yzbvH63kwcOASJC5JrnK0/P7UOc2NdAgXO/WrCZssRresxRNKaZvJTJtTrhElJKP9yD1zjiS4L5/PpGIW5md/qKX91zz0k5AzCqHdhBaRx7K7QVeWVEN8u4ZySbj9vCTLs1jTPcX7YpsPJBRGvqA4j9AYcBLzmhQa1huLVZTANE6j+vkgPvgPq4ToyTMKvUJwLbmIobX0ZyQKPGhe3LVorfM4uaSxq8+jMV4+0uddFNpLm9eJG+ZLbeVlu0157q45lxuQrO1VOvVLdqsrwAAAAEABVguNTA5AAADcTCCA20wggJVoAMCAQICBBCfcKYwDQYJKoZIhvcNAQELBQAwZzELMAkGA1UEBhMCVVMxDjAMBgNVBAgTBVN0YXRlMQ0wCwYDVQQHEwRDaXR5MRUwEwYDVQQKEwxPcmdhbml6YXRpb24xDTALBgNVBAsTBFVuaXQxEzARBgNVBAMTCldlYiBTZXJ2ZXIwHhcNMTgwMzIwMTQyODI5WhcNMTgwNjE4MTQyODI5WjBnMQswCQYDVQQGEwJVUzEOMAwGA1UECBMFU3RhdGUxDTALBgNVBAcTBENpdHkxFTATBgNVBAoTDE9yZ2FuaXphdGlvbjENMAsGA1UECxMEVW5pdDETMBEGA1UEAxMKV2ViIFNlcnZlcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKu+JWbf4oP3xTz33EgXnD0jgL/clO/9lV25GFwygaR8F7qzPaknaR/psyO1acRv3UfrcYdZ2/nnh7PcchjEFmxh11pT3di2KquxsIJBzcYyYUHXbRaBRZ+Oqy884xzPc/IXLfLD5csCI0PQ+XaW/wrp6Mm9/CZNGHLUMjk9Aa9FbPnsh2gLGNkTwf4uvv11z94WFy7oWSzFra26C/zq3I7fywD2/UvYIJCOypAvxOcwdsNXxqEYroBu/jcoyMdXq2AWE6EdzVrZhpgK0QjTIoofa3QreGsdHBR+Cq7hDnGpakGQQVfTlhbzKCtaK9d8PAaOpwzKIcRiVG8NytE/QmECAwEAAaMhMB8wHQYDVR0OBBYEFJTE/I9yfWZ8smIobMkV2dtfpdFhMA0GCSqGSIb3DQEBCwUAA4IBAQCqZhd8O5GUUw1uX6jQKLjqjfzt7dPKMhNSUKPLrBktiJa+ZM/M+mGnEH6/TYcwzazAfeV+JgbY1KpMq1UVOW6KdDga2yXj43mVz7yzVB3KPIdMGSI4pqZxptQ7LEGVtSDsgqpQPi3qpsWUMLMW6heOHKc66Bdf9RE0S1ds+yMg9dNQBkTEXJKR6S+koyDcGnrZgwwVJ5T5+5ZUiGxe2wdGs7DUQCdDVwRZwkWzdIXPnK98PwFh7ivYI6+tnV+AHZg02IDAZ49rwNtQsExeQepNh2IPwCe+7TlfZ8TeiwcxL2ngqKA9LFP2do8YDz9XZbfl9AfS3GXeZsq3ihR3nffqT6271mTSYWrugh9IagHGV2PT6mo=\\\\\\\"}\\\",\\\"storepass\\\":\\\"letmein\\\",\\\"alias\\\":\\\"mytestkey\\\",\\\"keypass\\\":\\\"changeme\\\"}\",\n  \"name\": \"Test\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/test/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"test",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create jks certificate RS512",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1ab79e9-b254-47f9-8af9-e6ab3e47ab58",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Extension Grant - create jks certificate\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('certificateJksRs512', jsonData.id);",
									"});",
									"",
									"// wait for sync process",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"javakeystore-am-certificate\",\n  \"configuration\": \"{\\\"jks\\\":\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"server.jks\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"size\\\\\\\":2237,\\\\\\\"content\\\\\\\":\\\\\\\"/u3+7QAAAAIAAAABAAAAAQAJbXk0MDk2a2V5AAABaiMQHZ4AAAmFMIIJgTAOBgorBgEEASoCEQEBBQAEgglteC1CPhvSxMwR+diDjn+U3KUGveBpVwabrWiBGJi+eEGx+ijDJMq6DKiiedoOHIX2fEqoQU3EjGHEps/xbBYN482Qb2tgsWFN1uWn5LP4jhfuKGdsVAQj6KYzZWGZfNgJE8mfMP/yXONSlPRKanO/EI746C1paDGuAZHgSrsiFeTdlDN2od+6g+zwwjoPsWvVYZo8zWhA0gUwAysY+HjYFJulrjexq3EpOPE3s08Hnq+BN5qz/qNQCElbdeWNJ/Oh9xMLGEOSWDX+6TuO1wf53XH3lRlLEmMOoxw5WeW3pWQ3c0J36E6RjNhp9U54TenS7Aub6Rujud9/f5Veo6aDk7HOkmiMRr9fX5OXboFp5GDI1KOMHNOUO96mKzvYQOdbaIPrvaG4s8mZcv6pbwSceCiEGg8M2Sp+u03aIhjVZExgOkW8BzPI+bXtEKDBI/X9ce0wu74k1R3vIlrpkv3xGZQ5eKPzA9bpo1NJdZdOiTjhsjJFqi+OaPr4n79cMAtNChwRRdq4jj99hcBY4yzF1afLL8a1SguxctNgv8NsWNdzwee08PltRlKv8fLtnNikZGWmEvSjTYXLMCx77NSPpAf5jI0tldvmNsylLtzL9kR+irXE4lct6e7WPw8paGLxkLxKaLwEyAm4geod3IfIUVOV4Hmzij5FpeXk22gDikwDD4qp8/PEhvB0vgjz9sNEMEcQlKrG+SwyqcIp5KhHWmFSLofMmCAzTKWmexcadI57UfCRcoq61ZEGIoBfXAcFMKL7LgM4zHZS+RhOloNzniu1unq7mBAK+cPxZULOC+q0TVmWYzhUzf/ngS1A+VuOzDAGwa5SIdkWYbOKOgUUL/pt5hmGzsN6ck3Z4xftQlmAM/q3sRPJQciICurccyXJIqSMvWaJYxMZT9GwgPk6j1mi9DO34NM5KKjEszAQsObqVbQeW215AwzmlKq4BjKaZIMu0uW8yB53AdiEhoCDZReVxxoQWeFijdhgcgfSxhEPyZkMoCAhs8caArmrBAMl1GBVGLKnhRpcPFwTg7NjLsKSHKVTsok6ntvZ4Z1t70izr+qLiSI8gjcgCka3ujXrDLd7FJnkKaiDjyg2KU6ygmCl84Hj6fGDHew7abqjd9U70Lw+4v4cQZkO7mGrgolBi7PQ0OFeiUvwIzS5v6OwMLROfUrxAI376L6X3jeN41ncfWrjIVbPrUqQNRLTXrbdQKUZ3wUMqmqYjiIn82Idf8B+sX8PLduj/d7W+utbH0VElulmKaTS+7yV1AebeCiKcJwEQJsMw16UEdlVkYRd0JPd+tgthHETHzyao3HKEQfJIHwXVZ2UI96/U4YEj/07vU3yuweAdxvrRGQ+nZhNKSKLL5M6C1EAmPegsOd4thd+/htsi/9sZGz236iCeKIkpf8afL+y2AoTQAEFGtyA5l95//uj3GwjB3+A6Z1yc3C6O7K98/QNW0cbEG9TaXhS1ra24t10QECiv93cykXRpngtvpR+o/lhQ2d1vbZEaEjjUM92IXD2juEZqFOfrSKsYt6fWe6pew88MtcwthAS5i6DON25hS/rrwbRhUAgtOWt5ulu9r6R5bT8lz7J2FogxkK/UAFSDm7axd6gJ3G5P5Vv3GP6l72HRfeKK9QfDUe/ASwjbSHB5F+JmbJTGxo5tELur3+fWI3SUpTShn24nCpISsfS+N9N+QlwXHPAUlGca7EAMlDWuCWPpseZI1NAVDKTQpGxy/trl/Ff6r8WlJPrX5p1WRYss5KUU/1bWAnflGh6OTBR+hSNGgfi1xy27/BGiomMpD0rmBvHHQ5s3vejYLcBxUxYqgXfdljDk2ZHUjJJn8b26q61PVGI8AXPHGSvay4xVObTBQMhLthAWb6g0YCwAmWCBbbZdco6muPU7n5wu4dSSetmNh0ppL/36ZDvoasVwyCnQPiZdx5a4j5WUfskfNK6/OcnN1mAX0cylUXnlF/xTlsTt8RoGyyYXBT7yRK8KZnl5iyft/yRS9MOdroPpSy8tQrGxD0OqHFco+LOoZC4Ksd2JG75EOQ0Ieg5btqf9CTo+/kCLzO8DVHvAkVDKY21D2gEoCrq++4zXtPZeKEi8PFhHMHndIkCIDojQ3Qy5ozl9HVNaCb+w911MS8B+7CBBLSove7roWk9Os9WfO+kfMKjN3zyKSh43jp3CANJN6I44rS8WwS4O8OaaVevMZkjxt+APpXh6sOSp8IJYBiTqJRfHFkp7iVBx3xMCu68Xe2kGkUg3DSMTnObokzHlRcG1lsXpgm+WPpjbdHcpi6CU6d0QmByQ3XYdc3lECsBckZyMwoEH5qDWM0VWxoZwXiN1Uqbc25PTtSa2zX8uvC0ttt+H+dVuSTvATrWv/HetEyz5w7MzaOywppqR1CfBmek0cPqiUKkwL09SoX6gsW0rdT7f889cadNGFf5F8udjsgwKHeXhwiPXfe7PBZiBSixwZgFR38CxmMkN96pTHrx1rBKRAQRj+EGQ9YUuGf0fII4kRSiHvNp/KOKEZEOaD1iIln37S+ziGtOojkaFWFe4RJW8AxrONJNV5Pwd3s65mTlYrGukh2NSQ9e1tQMOW0KRgAEIMFfm7EjjmYFqObqfOFBvzDS8dMLSyYgdfx5aJlXEpxC3S1l9xVcSDuFiD7l/ogifrBeBLzLte/9Oc2HU0aA/zqOHVqUxOcNmSlYZdQOybV2uapLEb0Dr7WeoRCw1xYlbWAFkpVUUhLKM4YahSzCCRT/e86kYHWYd3/68hkU1W3z48tqPPnX2T0Eh05lPLhPzQrudp+ixpNEiMSz85pgvwb1pHx+qipm8+1wTVEi1cf8tKC9BTfJFzEl4FJbqjJfC+ksi/l7hPEqTmG88FkHeLdMBMvUvVwhtMFVLY70bthkGaDSl8vLerzv+AIso3htgz64B0x57880wcLRAz9GacJAbij28bcY2LKl3cOJ3e1dbfdXxOZC5D+bDSffW1njTWAdsnM5XIRovaBflHzNdQjMKz8Jc3hlEgUINSpbhDpzppqNW7NbQGNytvokI8LQf1GK1pAN7F16vXAFKxj+wh6eAY2R5Q8FBR2q2lQxOWuB/zO0tkEyBLaw8QyO11NC5jgHes8YVPTVP41raY/67m/J4fTgh4ZFfHi4qyq5fMGvKxRpXIq81QAb2G/W89PFcB/+ZE9L7koUAdW7RJB9i9WQzKgN72cSBAxMQlPaGVYZwgAAAAEABVguNTA5AAAFcTCCBW0wggNVoAMCAQICBDaavsowDQYJKoZIhvcNAQENBQAwZzELMAkGA1UEBhMCVVMxDjAMBgNVBAgTBVN0YXRlMQ0wCwYDVQQHEwRDaXR5MRUwEwYDVQQKEwxPcmdhbml6YXRpb24xDTALBgNVBAsTBFVuaXQxEzARBgNVBAMTCldlYiBTZXJ2ZXIwHhcNMTkwNDE1MjIxMzM5WhcNMTkwNzE0MjIxMzM5WjBnMQswCQYDVQQGEwJVUzEOMAwGA1UECBMFU3RhdGUxDTALBgNVBAcTBENpdHkxFTATBgNVBAoTDE9yZ2FuaXphdGlvbjENMAsGA1UECxMEVW5pdDETMBEGA1UEAxMKV2ViIFNlcnZlcjCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAJqJZpu675DKgGwcLka8dcio/QXOASncaiGTBxAxId/06DKCzUcOQUePt9PARIPtp+nbNxcfg7UdG28/pOpqD6Rj8LJizIXdC6Wpo++npXaJVttqIjxE7XW+rMc1G8WfxOpTzfKrASlOGh468b5sp7SW0wKeqPRmSfE8Lb9f7phxqGa2dtU+fzeriAqSIeFSrb/3P7o/0n5cUhTvirornrg/bHgMLBSEpQHWOZetJnUkZlCXV4faj1KpTPLrSU0umFdQKeEJFLDdMME1VkZcuC233Ny2hYA8AKIwhhGqzORyXrO9wScZTwPZ7p+03WLTsBtmxyk4nSkP4YHe5XX/voInDT6xZmlA8EE6u5rnayBUUO34GeWSmds1D7YzAUlQioUN7KRYQ3kzDE/+IKH63W22g6ootipMT4GDJXlEulSkv0E17vicAhaoZ/1j9XjKwdpc+tLL4tueDU+S/z9wz9uWkSMFDuG+EpLUoCM8YucIVDx7NJ/0dKECYyssUN7VHwP9iwruj0MkRYfLZXyM+CYQqDLQ/84DZviHyY2GmYoxtrkJxYvTqEB3OFzqoX5YTQKTIIawfltoWjbGDZa4xTgUBPM3O7ZWVJNfUVhCVYihsCTxlGd9ou84A+bVPv3FSboTt3QgZk/e3DjVmqB1HiB4TcW7eAVQ+nC3gaDqFJaNAgMBAAGjITAfMB0GA1UdDgQWBBTrAv63XW6wbcw3BxwFMyLuOadOezANBgkqhkiG9w0BAQ0FAAOCAgEAg+Yn44iaiFX55TLbZOT6cKVWtNd2NimPCjYGhEO/WMX316RM6p7sUfY731o0kxN2rUmrXUoPjgcLq+bw9Q53tN0b3aX8Yam1pewLwiPuoq38bOhl9/EpclWp5IqRyQjj/PxuGpoTmtBPuoMLGgpqlcS9gjxHdL06zXarZwHAXWn9Dy5ziHIX8YOXXXjCRcC72HxekcLWL/kjP5+bOmZydT1+TcNuTyQOX4XeqyNTXxvKwh632WyQVhmg8SBlOqJeJ0/BTv3YgUsl2U2zAcwVfTH91myAZIXRhr8KNYktLDRUb7k77UR5tWVRPyhLXOW8FYx8FaSY6GnmH5k4QMY1qRMjyJTjWc+Md+glnCkeZdEzPYFuW6ucuq4CVxt0AtvBgxc29eoenBYqpK43l8V3CpQ3rUrHj5XCjQpV/KbsA2BxTUnLCtCficq0eIFFyntNuRgLcTape5g7rJ6Z8rudwesfz8vnD9ej/iM3ZpvXjd9HW7BU3RzIqUfNb830ZNQTQ6hPIPtwzT3FXN1HijcPMjCPsreSIZ+KcpOxhL3na7m+qOr9Nv97SBJCUOs0H8JxMkrgBnD7rtD1eUQnuk8DoYbBc0fw+J/0dKk5EqI6kk0ThnJmCKVRLON1ftehOMEAJMZ9cb0uBDHSYILZgRKJoY9rLZaYTGvOvjSdf4qls+1Fx6JtUglbweIFy9Cv720G4PDtsQ==\\\\\\\"}\\\",\\\"storepass\\\":\\\"letmein\\\",\\\"alias\\\":\\\"my4096key\\\",\\\"keypass\\\":\\\"changeme\\\"}\",\n  \"name\": \"my4096key\"\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/test/certificates",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"test",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start domain",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{management_url}}/management/domains/test",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"test"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "OAuth2",
			"item": [
				{
					"name": "Invalid requests",
					"item": [
						{
							"name": "Invalid grant type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fea5d7da-43c2-409e-ac3b-67e023992580",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Unsupported grant type\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('unsupported_grant_type');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c0bff29e-27a2-437d-a8c3-2461f3c4dcc4",
										"exec": [
											"setTimeout(function() {}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "unknown",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{gateway_url}}/test/oauth/token",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"oauth",
										"token"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b13f5ada-dc5e-4422-ae43-f0df9bab0d16",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f2476ea7-d22b-4362-a6f7-58e0fd00eb76",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Resource Owner Password Credentials Grant",
					"item": [
						{
							"name": "Invalid client - base64 error",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "729f4461-8f99-479b-b5e8-dde7b0729f9c",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic invalid"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "adminadmin",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{gateway_url}}/test/oauth/token",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "729f4461-8f99-479b-b5e8-dde7b0729f9c",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktdW5rbm93bi1jbGllbnQ6bXktdW5rbm93bi1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "adminadmin",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{gateway_url}}/test/oauth/token",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "No scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5fcc2b9-b385-4ed6-b682-d40d9dbc86f0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Does not contain scope\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    // There is a default scope asscoiated to the client 1",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('scope1');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{gateway_url}}/test/oauth/token",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ae3c79d-d2e7-49ab-bd20-70629648df50",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid scope\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_scope');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "unknown",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{gateway_url}}/test/oauth/token",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ae3c79d-d2e7-49ab-bd20-70629648df50",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid scope\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_scope');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{gateway_url}}/test/oauth/token",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5623cbb-a622-43d0-98fd-61d5dbf071c5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_grant');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "adminadmin",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{gateway_url}}/test/oauth/token",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - client 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "660c6db8-4bea-464f-aa77-26dbf6af12d8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    pm.expect(body).to.have.property('refresh_token');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('scope1');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "scope1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{gateway_url}}/test/oauth/token",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token - client 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1732e63-b592-4acc-890f-8c0ac4a11d11",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token without refresh token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('scope1');",
											"    pm.expect(body).to.not.have.property('refresh_token');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "user",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "scope1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{gateway_url}}/test/oauth/token",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"oauth",
										"token"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28965688-e97f-4f48-bd56-4ab9ae087e41",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2fe77f0a-df6e-43a9-b5ee-da258b5601ab",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Client Credentials Grant",
					"item": [
						{
							"name": "Case - renew client secret",
							"item": [
								{
									"name": "Create client 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbe2362d-ad75-4baa-8825-b74218b047c7",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var body = JSON.parse(responseBody);",
													"pm.environment.set('client3', body.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"clientId\": \"my-client-3\",\n  \"clientSecret\": \"my-client-secret-3\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/clients",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"clients"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure client 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58987251-6ffb-479d-80af-40373ea5a0cb",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}} ",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"authorizedGrantTypes\": [\n    \"client_credentials\"\n  ]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/clients/{{client3}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"clients",
												"{{client3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token without refresh token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.not.have.property('refresh_token');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50LTM6bXktY2xpZW50LXNlY3JldC0z"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Renew client 3 secret",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58987251-6ffb-479d-80af-40373ea5a0cb",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var body = JSON.parse(responseBody);",
													"pm.environment.set('client3Secret', body.clientSecret);",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}} "
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/clients/{{client3}}/secret/_renew",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"clients",
												"{{client3}}",
												"secret",
												"_renew"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - wrong secret",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50LTM6bXktY2xpZW50LXNlY3JldC0z"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - new secret",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client-3",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client3Secret}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete client 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58987251-6ffb-479d-80af-40373ea5a0cb",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}} "
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/clients/{{client3}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"clients",
												"{{client3}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Invalid client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33ac65ef-e48b-49cc-9ad2-cf710e46e202",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic dW5rbm93bi1jbGllbnQ6dW5rbm93bi1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{gateway_url}}/test/oauth/token",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "No scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58437f34-b445-496b-a92e-3a85d5cf678b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Does not contain scope\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    ",
											"    // There is a default scope asscoiated to the client 1",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('scope1');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{gateway_url}}/test/oauth/token",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9d398f2-b014-4b0a-9c2d-e116fc99298d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid grant\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_scope');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{gateway_url}}/test/oauth/token",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Has an access_token without refresh token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('token_type');",
											"    pm.expect(body.token_type).to.eql('bearer');",
											"    pm.expect(body).to.have.property('expires_in');",
											"    pm.expect(body).to.not.have.property('refresh_token');",
											"    pm.expect(body).to.have.property('scope');",
											"    pm.expect(body.scope).to.eql('scope1');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "scope1",
											"type": "text"
										},
										{
											"key": "example_parameter",
											"value": "example_value",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{gateway_url}}/test/oauth/token",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"oauth",
										"token"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8c470a9d-5b5e-4932-9770-07b1e4945739",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "289c0559-e0dd-494d-8429-e2953f59bca7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Authorization Code Grant",
					"item": [
						{
							"name": "Case - Unknown scope",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&scope=unknown-scope",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "scope",
													"value": "unknown-scope"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b4fc0c4-ddb4-4d9b-bf30-b60900ff28b1",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    ",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Contains an error query-parameter'] = location.includes('error=invalid_scope');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=Invalid+scope%2528s%2529%253A+unknown-scope');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/logout",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"logout"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d23008a2-0b79-4ba6-80ea-7c5597deba1b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "047067b7-ac34-4887-beee-0666abcfe9e4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - With consent",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4fd643c0-c11e-41ee-b85f-87a7d89fdebe",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    ",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be redirected to confirm_access page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to confirm_access page'] = location === pm.environment.get('gateway_url') + '/test/oauth/confirm_access';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Redirect to confirm access page",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b80138d-68ff-4dc5-a6b3-ff08ab98e89a",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post authorize form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd53996a-9c23-4eaf-b618-1be0ca5fca63",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "scope.scope1",
													"value": "true",
													"type": "text"
												},
												{
													"key": "user_oauth_approval",
													"value": "true",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ed51b26-0e51-4c2e-87c1-8dd8433435f2",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/logout",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"logout"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - With consent - scope expiry",
							"item": [
								{
									"name": "Create scope with expiry",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d80e686-0750-477e-b1fe-e379e1442cbb",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"key\": \"test\",\n  \"name\": \"Test\",\n  \"description\": \"Scope test description\",\n  \"expiresIn\": 2\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/scopes",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update client 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56990876-e3f6-40c0-ac60-fe74a386fac2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scopes\": [\"scope1\", \"openid\", \"test\"],\n\t\"scopeApprovals\": {\n\t\t\"openid\": 2\n\t}\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/clients/{{client2}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"clients",
												"{{client2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4fd643c0-c11e-41ee-b85f-87a7d89fdebe",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    ",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be redirected to confirm_access page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to confirm_access page'] = location === pm.environment.get('gateway_url') + '/test/oauth/confirm_access';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Redirect to confirm access page",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b80138d-68ff-4dc5-a6b3-ff08ab98e89a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    ",
													"    var scope1 = responseHTML.find('[name=\"scope.scope1\"]').val();",
													"    var openid = responseHTML.find('[name=\"scope.openid\"]').val();",
													"    var test = responseHTML.find('[name=\"scope.test\"]').val();",
													"    tests[\"Scope 1 is already approved\"] = scope1 === undefined;",
													"    pm.expect(openid).not.equal(null);",
													"    pm.expect(test).not.equal(null);",
													"    ",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post authorize form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd53996a-9c23-4eaf-b618-1be0ca5fca63",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "scope.openid",
													"value": "true",
													"type": "text"
												},
												{
													"key": "scope.test",
													"value": "true",
													"type": "text"
												},
												{
													"key": "user_oauth_approval",
													"value": "true",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ed51b26-0e51-4c2e-87c1-8dd8433435f2",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    ",
													"    // wait for until scope approvals expire",
													"    setTimeout(function(){}, 5000);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Initiate the flow (bis)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be redirected to confirm_access page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to confirm_access page'] = location === pm.environment.get('gateway_url') + '/test/oauth/confirm_access';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to confirm access page (bis)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b80138d-68ff-4dc5-a6b3-ff08ab98e89a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    ",
													"    var scope1 = responseHTML.find('[name=\"scope.scope1\"]').val();",
													"    var openid = responseHTML.find('[name=\"scope.openid\"]').val();",
													"    var test = responseHTML.find('[name=\"scope.test\"]').val();",
													"    tests[\"Scope 1 is already approved\"] = scope1 === undefined;",
													"    pm.expect(openid).not.equal(null);",
													"    pm.expect(test).not.equal(null);",
													"    ",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/logout",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"logout"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Reset client 2 scope options",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56990876-e3f6-40c0-ac60-fe74a386fac2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scopes\": [\"scope1\"],\n\t\"scopeApprovals\": {}\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/clients/{{client2}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"clients",
												"{{client2}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Get token - Invalid Client",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "301dfea6-ef8e-44eb-a27f-2ec1a0525f19",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5);",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token - Bad client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0815aa7f-7f23-4913-8cb3-677d7885bbfc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_grant');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:4000/",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/logout",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"logout"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Get token - Invalid Redirect URI",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "301dfea6-ef8e-44eb-a27f-2ec1a0525f19",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5);",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token - Bad redirect URI",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6f0ac59-347e-4f03-a8ac-535054264f92",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_grant');",
													"    pm.expect(body.error_description).to.eql('Redirect URI mismatch.');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:5000/",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:5000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/logout",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"logout"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - With state parameter",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "368681d3-a8c7-4036-980e-9f5117e71036",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5, location.indexOf('state='));",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f30046a-732c-4620-8ca3-94cc2e244a83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('scope');",
													"    pm.expect(body.scope).to.eql('scope1');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:4000/",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/logout",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"logout"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - With state parameter - Multiple clients",
							"item": [
								{
									"name": "Initiate the flow - Client 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form - Client 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form - Client 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection - Client 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "368681d3-a8c7-4036-980e-9f5117e71036",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5, location.indexOf('state='));",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Initiate the flow - Client 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/oauth/confirm_access';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client&redirect_uri=http://localhost:4000/&state=9876-5678-1234",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "9876-5678-1234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to confirm access page - Client 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b80138d-68ff-4dc5-a6b3-ff08ab98e89a",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post authorize form - Client 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd53996a-9c23-4eaf-b618-1be0ca5fca63",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "scope.scope1",
													"value": "true",
													"type": "text"
												},
												{
													"key": "scope.openid",
													"value": "true",
													"type": "text"
												},
												{
													"key": "user_oauth_approval",
													"value": "true",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection - Client 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "368681d3-a8c7-4036-980e-9f5117e71036",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=9876-5678-1234');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5, location.indexOf('state='));",
													"    pm.environment.set('authorization_code', code);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/logout",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"logout"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - PKCE S256 - Missing Code Verifier",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876&code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM&code_challenge_method=S256",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "code_challenge",
													"value": "E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM"
												},
												{
													"key": "code_challenge_method",
													"value": "S256"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5d05a5e-6399-4566-b813-dd20651cfea3",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5);",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7863d736-4a32-4baa-b04a-e94bc3b0275e",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_grant');",
													"    pm.expect(body.error_description).to.eql('Missing parameter: code_verifier');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:4000/",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/logout",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"logout"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - PKCE PLAIN - Missing Code Verifier",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876&code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM&code_challenge_method=plain",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "code_challenge",
													"value": "E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM"
												},
												{
													"key": "code_challenge_method",
													"value": "plain"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5d05a5e-6399-4566-b813-dd20651cfea3",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5);",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7863d736-4a32-4baa-b04a-e94bc3b0275e",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_grant');",
													"    pm.expect(body.error_description).to.eql('Missing parameter: code_verifier');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:4000/",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/logout",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"logout"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - PKCE S256 - Invalid Code Verifier",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876&code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM&code_challenge_method=S256",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "code_challenge",
													"value": "E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM"
												},
												{
													"key": "code_challenge_method",
													"value": "S256"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5d05a5e-6399-4566-b813-dd20651cfea3",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5);",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd9b79ed-977b-4ffb-a68d-723577d52daa",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_grant');",
													"    pm.expect(body.error_description).to.eql('Invalid parameter: code_verifier');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:4000/&code_verifier=qsdqsdqsdqsqsd",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "code_verifier",
													"value": "qsdqsdqsdqsqsd"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/logout",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"logout"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - PKCE PLAIN - Invalid Code Verifier",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876&code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM&code_challenge_method=plain",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "code_challenge",
													"value": "E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM"
												},
												{
													"key": "code_challenge_method",
													"value": "plain"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5d05a5e-6399-4566-b813-dd20651cfea3",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5);",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd9b79ed-977b-4ffb-a68d-723577d52daa",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_grant');",
													"    pm.expect(body.error_description).to.eql('Invalid parameter: code_verifier');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:4000/&code_verifier=qsdqsdqsdqsqsd",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "code_verifier",
													"value": "qsdqsdqsdqsqsd"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/logout",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"logout"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - PKCE S256 - Valid Code Verifier",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876&code_challenge=qjrzSW9gMiUgpUvqgEPE4_-8swvyCtfOVvg55o5S_es&code_challenge_method=S256",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "code_challenge",
													"value": "qjrzSW9gMiUgpUvqgEPE4_-8swvyCtfOVvg55o5S_es"
												},
												{
													"key": "code_challenge_method",
													"value": "S256"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5d05a5e-6399-4566-b813-dd20651cfea3",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5);",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46ce7617-cb5c-4644-bd37-2c51a36aad9a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('scope');",
													"    pm.expect(body.scope).to.eql('scope1');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:4000/&code_verifier=M25iVXpKU3puUjFaYWg3T1NDTDQtcW1ROUY5YXlwalNoc0hhakxifmZHag",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "code_verifier",
													"value": "M25iVXpKU3puUjFaYWg3T1NDTDQtcW1ROUY5YXlwalNoc0hhakxifmZHag"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/logout",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"logout"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - PKCE PLAIN - Valid Code Verifier",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876&code_challenge=qjrzSW9gMiUgpUvqgEPE4_-8swvyCtfOVvg55o5S_es&code_challenge_method=plain",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												},
												{
													"key": "code_challenge",
													"value": "qjrzSW9gMiUgpUvqgEPE4_-8swvyCtfOVvg55o5S_es"
												},
												{
													"key": "code_challenge_method",
													"value": "plain"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5d05a5e-6399-4566-b813-dd20651cfea3",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/?');",
													"    tests['Contains an authorization_code'] = location.includes('code=');",
													"    tests['Contains the initial state'] = location.includes('state=1234-5678-9876');",
													"    ",
													"    // Here we can extract the authorization_code to got further in the process",
													"    let code = location.substring(location.indexOf('code=') + 5);",
													"    pm.environment.set('authorization_code', code);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46ce7617-cb5c-4644-bd37-2c51a36aad9a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('scope');",
													"    pm.expect(body.scope).to.eql('scope1');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token?grant_type=authorization_code&code={{authorization_code}}&redirect_uri=http://localhost:4000/&code_verifier=qjrzSW9gMiUgpUvqgEPE4_-8swvyCtfOVvg55o5S_es",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "code_verifier",
													"value": "qjrzSW9gMiUgpUvqgEPE4_-8swvyCtfOVvg55o5S_es"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/logout",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"logout"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Authorize - Invalid requests",
							"item": [
								{
									"name": "Unsupported response type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df4a8203-27e4-489e-8471-14c5374f9e1d",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to error page'] = location.includes(pm.environment.get('gateway_url') + '/test/oauth/error');",
													"    tests['Contains an error query-parameter'] = location.includes('error=unsupported_response_type');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=Unsupported+response+type%253A+unknown_response_type');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dW5rbm93bi1jbGllbnQ6dW5rbm93bi1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=unknown_response_type",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "unknown_response_type"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Duplicated query parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c72b41b-2d10-4744-9f62-98cb98295497",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    //TODO: A valider avec Titouan",
													"    //pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to error page'] = location.includes(pm.environment.get('gateway_url') + '/test/oauth/error');",
													"    tests['Contains an error query-parameter'] = location.includes('error=invalid_request');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=Parameter+%255Bresponse_type%255D+is+included+more+than+once');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dW5rbm93bi1jbGllbnQ6dW5rbm93bi1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=unknown_response_type&response_type=unknown_response_type",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "unknown_response_type"
												},
												{
													"key": "response_type",
													"value": "unknown_response_type"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing client_id parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb9b8b17-9cc0-43b8-b069-ec44d8777966",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to error page'] = location.includes(pm.environment.get('gateway_url') + '/test/oauth/error');",
													"    tests['Contains an error query-parameter'] = location.includes('?error=invalid_request');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=Missing+parameter%253A+client_id');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid client_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "525bd7c8-7876-4f4b-a964-d5b4d1f02267",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to error page'] = location.includes(pm.environment.get('gateway_url') + '/test/oauth/error');",
													"    tests['Contains an error query-parameter'] = location.includes('error=invalid_request');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=No+client+found+for+client_id+unknownclient');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=unknownclient",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "unknownclient"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "No redirect_uri",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bca0e0b-31f3-460b-9284-4f0e23cdb473",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to error page'] = location.includes(pm.environment.get('gateway_url') + '/test/oauth/error');",
													"    tests['Contains an error query-parameter'] = location.includes('?error=invalid_request');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=A+redirect_uri+must+be+supplied');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Send an unknown redirect_uri and no redirect_uri defined",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8661e58-9946-496c-81c5-4507aea90825",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be redirected to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client';",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client&redirect_uri=http://localhost:4000",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000"
												}
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Send a redirect_uri not configured in the client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ac8c6d5-9172-44f1-8e03-9e8d92b4b4ea",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Contains an error query-parameter'] = location.includes('error=redirect_uri_mismatch');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client2&redirect_uri=http://my_bad_host:4000",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://my_bad_host:4000"
												}
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Error with state parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e79a06db-a1fd-43a9-b626-033871e7e215",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Contains an error query-parameter'] = location.includes('error=redirect_uri_mismatch');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application');",
													"    tests['Contains the initial state parameter'] = location.includes('state=xxx-yyy-zzz');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=code&client_id=my-client2&redirect_uri=http://my_bad_host:4000&state=xxx-yyy-zzz",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://my_bad_host:4000"
												},
												{
													"key": "state",
													"value": "xxx-yyy-zzz"
												}
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "037d2f41-4a0e-4b7d-a845-8f9d623cbca7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3f87388c-473e-4bd8-b996-9b70e9770d58",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Token - Invalid requests",
							"item": [
								{
									"name": "Get token - No code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e43949b1-836f-4c00-892b-4317989094ee",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_request');",
													"    pm.expect(body.error_description).to.eql('Missing parameter: code');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token?grant_type=authorization_code&redirect_uri=http://localhost:5000/",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:5000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get token - No client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2dc71ea0-c5d6-4fb5-8451-77eab0484dfd",
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Invalid grant\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client');",
													"    pm.expect(body.error_description).to.eql('Invalid client: missing or unsupported authentication method');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token?grant_type=authorization_code&redirect_uri=http://localhost:5000/",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "authorization_code"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:5000/"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c5bc46df-8570-4235-bbb7-aae1d33d104b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "544d70d6-9afd-4701-b505-23131d1dbb7d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "38da91d9-bffa-441a-8708-8ab3a34d8ba6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "545934d2-5317-48ba-a08b-3c154b10ec67",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Implicit Grant",
					"item": [
						{
							"name": "Authorize - Invalid requests",
							"item": [
								{
									"name": "Missing client_id parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00ecb82b-4a9a-4152-a6a2-a7d924131fad",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to error page'] = location.includes(pm.environment.get('gateway_url') + '/test/oauth/error');",
													"    tests['Contains an error query-parameter'] = location.includes('?error=invalid_request');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=Missing+parameter%253A+client_id');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=token",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "token"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Unknown scope",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=token&client_id=my-client2&redirect_uri=http://localhost:4000/&scope=unknown-scope",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "token"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "scope",
													"value": "unknown-scope"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b4fc0c4-ddb4-4d9b-bf30-b60900ff28b1",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    ",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Contains an error query-parameter'] = location.includes('#error=invalid_scope');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=Invalid+scope%2528s%2529%253A+unknown-scope');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/logout",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"logout"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d23008a2-0b79-4ba6-80ea-7c5597deba1b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "047067b7-ac34-4887-beee-0666abcfe9e4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Get Access Token",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=token&client_id=my-client2&redirect_uri=http://localhost:4000/",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "token"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73f280ec-f0ac-46ec-9424-0cdecd34f1c8",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/#');",
													"    ",
													"    tests['Contains an access_token param'] = location.includes('access_token=');",
													"    tests['Contains a token_type param'] = location.includes('token_type=bearer');",
													"    tests['Contains an expires_in param'] = location.includes('expires_in=');",
													"    tests['Contains a scope param'] = location.includes('scope=scope1');",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/logout",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"logout"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - With state parameter",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=token&client_id=my-client2&redirect_uri=http://localhost:4000/&state=1234-5678-9876",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "token"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "state",
													"value": "1234-5678-9876"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b8b2b1e-3ba7-4a57-82d3-522b5af28679",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/#');",
													"    ",
													"    tests['Contains an access_token param'] = location.includes('access_token=');",
													"    tests['Contains a token_type param'] = location.includes('token_type=bearer');",
													"    tests['Contains an expires_in param'] = location.includes('expires_in=');",
													"    tests['Contains a scope param'] = location.includes('scope=scope1');",
													"    tests['Contains a state param'] = location.includes('state=1234-5678-9876');",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/logout",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"logout"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - revoke consent",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=token&client_id=my-client2&redirect_uri=http://localhost:4000/",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "token"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73f280ec-f0ac-46ec-9424-0cdecd34f1c8",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with implicit response\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/#');",
													"    ",
													"    tests['Contains an access_token param'] = location.includes('access_token=');",
													"    tests['Contains a token_type param'] = location.includes('token_type=bearer');",
													"    tests['Contains an expires_in param'] = location.includes('expires_in=');",
													"    tests['Contains a scope param'] = location.includes('scope=scope1');",
													"    ",
													"    // get user id",
													"    const paramsString = location.split('#')[1];",
													"    const eachParamArray = paramsString.split('&');",
													"    ",
													"    let params = {};",
													"    eachParamArray.forEach((param) => {",
													"        const key = param.split('=')[0];",
													"        const value = param.split('=')[1];",
													"        Object.assign(params, {[key]: value});",
													"    });",
													"    ",
													"    let jwt = jwt_decode(params['access_token']);",
													"    pm.environment.set('consentUserId', jwt.sub);",
													"    pm.environment.set('consentAccessToken', params['access_token']);",
													"});",
													"",
													"function jwt_decode(jwt) {",
													"    var parts = jwt.split('.'); // header, payload, signature",
													"    return JSON.parse(atob(parts[1]));",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Revoke user consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7af1ea20-73eb-4d45-90d1-24e5d137eae9",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{consentAccessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/users/{{consentUserId}}/consents",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"users",
												"{{consentUserId}}",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initiate the flow (after consent revocation)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    ",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be redirected to confirm_access page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to confirm_access page'] = location === pm.environment.get('gateway_url') + '/test/oauth/confirm_access';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize?response_type=token&client_id=my-client2&redirect_uri=http://localhost:4000/",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "token"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to confirm access page",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b80138d-68ff-4dc5-a6b3-ff08ab98e89a",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post authorize form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd53996a-9c23-4eaf-b618-1be0ca5fca63",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "scope.scope1",
													"value": "true",
													"type": "text"
												},
												{
													"key": "user_oauth_approval",
													"value": "true",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/authorize",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"authorize"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ed51b26-0e51-4c2e-87c1-8dd8433435f2",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with implicit response\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/#');",
													"    ",
													"    tests['Contains an access_token param'] = location.includes('access_token=');",
													"    tests['Contains a token_type param'] = location.includes('token_type=bearer');",
													"    tests['Contains an expires_in param'] = location.includes('expires_in=');",
													"    tests['Contains a scope param'] = location.includes('scope=scope1');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/logout",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"logout"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Introspection - RFC7662",
					"item": [
						{
							"name": "Invalid requests",
							"item": [
								{
									"name": "Introspect Token - No token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "660c6db8-4bea-464f-aa77-26dbf6af12d8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is not active\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('active');",
													"    pm.expect(body.active).to.eql(false);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/introspect",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"introspect"
											]
										}
									},
									"response": []
								},
								{
									"name": "Introspect Token - Invalid authentication",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "660c6db8-4bea-464f-aa77-26dbf6af12d8",
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Invalid client\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client');",
													"    pm.expect(body.error_description).to.eql('Invalid client: unable to parse authentication method');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic invalid-auth"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/introspect",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"introspect"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Nominal case 1",
							"item": [
								{
									"name": "Generate token - client 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "660c6db8-4bea-464f-aa77-26dbf6af12d8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('refresh_token');",
													"    pm.expect(body).to.have.property('scope');",
													"    pm.expect(body.scope).to.eql('scope1');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "scope1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Introspect Token - client 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "660c6db8-4bea-464f-aa77-26dbf6af12d8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is token active\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('active');",
													"    pm.expect(body.active).to.eql(true);",
													"    pm.expect(body.scope).to.eql(\"scope1\");",
													"    pm.expect(body.client_id).to.eql(\"my-client\");",
													"    pm.expect(body.username).to.eql(\"user\");",
													"    pm.expect(body.token_type).to.eql(\"bearer\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/introspect",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"introspect"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Nominal case 2",
							"item": [
								{
									"name": "Generate token - client 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1732e63-b592-4acc-890f-8c0ac4a11d11",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token without refresh token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('scope');",
													"    pm.expect(body.scope).to.eql('scope1');",
													"    pm.expect(body).to.not.have.property('refresh_token');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "scope1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Introspect Token - client 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "660c6db8-4bea-464f-aa77-26dbf6af12d8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is token active\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('active');",
													"    pm.expect(body.active).to.eql(true);",
													"    pm.expect(body.scope).to.eql(\"scope1\");",
													"    pm.expect(body.client_id).to.eql(\"my-client2\");",
													"    pm.expect(body.username).to.eql(\"user\");",
													"    pm.expect(body.token_type).to.eql(\"bearer\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/introspect",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"introspect"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "04215e01-6ba0-4736-adc0-5f29a7e2d929",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8af421ac-af2e-4e00-8854-8f6ff760bddc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Revocation - RFC7009",
					"item": [
						{
							"name": "Invalid requests",
							"item": [
								{
									"name": "Revoke Token - Unknown token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "my-unknown-token",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/revoke",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke Token - No client authentication",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Invalid client\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client');",
													"    pm.expect(body.error_description).to.eql('Invalid client: missing or unsupported authentication method');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "my-unknown-token",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/revoke",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke Token - Invalid client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Invalid client\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client');",
													"    pm.expect(body.error_description).to.eql('Client authentication failed due to unknown or invalid client');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktdW5rbm93bi1jbGllbnQ6bXktdW5rbm93bi1zZWNyZXQ=",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "my-unknown-token",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/revoke",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Nominal case",
							"item": [
								{
									"name": "Generate token - client 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "660c6db8-4bea-464f-aa77-26dbf6af12d8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('refresh_token');",
													"    pm.expect(body).to.have.property('scope');",
													"    pm.expect(body.scope).to.eql('scope1');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "scope1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke Token - client 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/revoke",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Bad client",
							"item": [
								{
									"name": "Generate token - client 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "660c6db8-4bea-464f-aa77-26dbf6af12d8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('refresh_token');",
													"    pm.expect(body).to.have.property('scope');",
													"    pm.expect(body.scope).to.eql('scope1');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "scope1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/token",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke Token - client 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid client\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_grant');",
													"    pm.expect(body.error_description).to.eql('Cannot revoke tokens issued to other clients.');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/oauth/revoke",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e7b5512e-b54f-406f-920a-57ea78278504",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "313619f1-1c08-4d33-a3da-7b6b7dc92bb3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "OIDC",
			"item": [
				{
					"name": "Discovery",
					"item": [
						{
							"name": "well-known/openid-configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5332b6f5-7419-4792-a30f-cce968d3d67e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check discovery endpoints\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    ",
											"    pm.expect(body).to.have.property(\"authorization_endpoint\");",
											"    pm.expect(body).to.have.property(\"token_endpoint\");",
											"    pm.expect(body).to.have.property(\"userinfo_endpoint\");",
											"    pm.expect(body).to.have.property(\"jwks_uri\");",
											"    pm.expect(body).to.have.property(\"end_session_endpoint\");",
											"    pm.expect(body).to.have.property(\"revocation_endpoint\");",
											"    pm.expect(body).to.have.property(\"introspection_endpoint\");",
											"    pm.expect(body).to.have.property(\"registration_endpoint\");",
											"    ",
											"    pm.environment.set('authorizationEndpoint', body.authorization_endpoint);",
											"    pm.environment.set('tokenEndpoint', body.token_endpoint);",
											"    pm.environment.set('userinfoEndpoint', body.userinfo_endpoint);",
											"    pm.environment.set('jwksUriEndpoint', body.jwks_uri);",
											"    pm.environment.set('logoutEndpoint', body.end_session_endpoint);",
											"    pm.environment.set('revocationEndpoint', body.revocation_endpoint);",
											"    pm.environment.set('introspectionEndpoint', body.introspection_endpoint);",
											"    pm.environment.set('registrationEndpoint', body.registration_endpoint);",
											"});",
											"",
											"pm.test(\"Check discovery properties\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"issuer\");",
											"",
											"    pm.expect(body).to.have.property(\"scopes_supported\");",
											"    pm.expect(body).to.have.property(\"response_types_supported\");",
											"    pm.expect(body).to.have.property(\"subject_types_supported\");",
											"    pm.expect(body).to.have.property(\"id_token_signing_alg_values_supported\");",
											"    pm.expect(body).to.have.property(\"token_endpoint_auth_methods_supported\");",
											"    pm.expect(body).to.have.property(\"claim_types_supported\");",
											"    pm.expect(body).to.have.property(\"claims_supported\");",
											"    pm.expect(body).to.have.property(\"code_challenge_methods_supported\");",
											"    pm.expect(body).to.have.property(\"claims_parameter_supported\");",
											"    pm.expect(body).to.have.property(\"request_parameter_supported\");",
											"    pm.expect(body).to.have.property(\"request_uri_parameter_supported\");",
											"    pm.expect(body).to.have.property(\"require_request_uri_registration\");",
											"    ",
											"    pm.expect(body.code_challenge_methods_supported).to.eql([ 'plain','S256' ]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/oidc/.well-known/openid-configuration",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"oidc",
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "jwks",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3428f0d-2f6c-4202-8b16-dfec99b0971a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check keys\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('keys');",
											"    ",
											"    //Key are not always returned in the same order",
											"    tests['Contains two RS key'] = body.keys[0].kty === 'RSA' && body.keys[1].kty === 'RSA';",
											"    tests['Contains RSA512'] = body.keys[0].alg === 'RS512' || body.keys[1].alg === 'RS512';",
											"    tests['Contains RSA256'] = body.keys[0].alg === 'RS256' || body.keys[1].alg === 'RS256';",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{jwksUriEndpoint}}",
									"host": [
										"{{jwksUriEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DCR",
					"item": [
						{
							"name": "Case - non DCR domain",
							"item": [
								{
									"name": "Non DCR domain",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f14af8bd-e84e-480e-b4dc-2c110d1f3761",
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Non DCR domain\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('registration_forbidden');",
													"    pm.expect(body.error_description).to.eql('Not allowed to access to this resource.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{registrationEndpoint}}",
											"host": [
												"{{registrationEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Configure domain",
							"item": [
								{
									"name": "Configure DCR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "286df3a2-0e06-4b00-9614-3b0fd9ceecb9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"DCR enabled for domain\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.oidc.clientRegistrationSettings.isDynamicClientRegistrationEnabled).to.eql(true);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"oidc\": {\n    \"clientRegistrationSettings\": {\n      \"allowLocalhostRedirectUri\": false,\n      \"allowHttpSchemeRedirectUri\": false,\n      \"allowWildCardRedirectUri\": false,\n      \"isDynamicClientRegistrationEnabled\": true,\n      \"isOpenDynamicClientRegistrationEnabled\": false\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - non DCR Token",
							"item": [
								{
									"name": "Create client without DCR enabled",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbe2362d-ad75-4baa-8825-b74218b047c7",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var body = JSON.parse(responseBody);",
													"pm.environment.set('clientDCR', body.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"clientId\": \"dcr-client\",\n  \"clientSecret\": \"dcr-client-secret\",\n  \"clientName\": \"dcr-client-public-name\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/clients",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"clients"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch client without DCR enabled",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c063d6b-7120-4fd1-8aea-b04f7defc4d0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"authorizedGrantTypes\": [\"client_credentials\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/clients/{{clientDCR}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"clients",
												"{{clientDCR}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic ZGNyLWNsaWVudDpkY3ItY2xpZW50LXNlY3JldA=="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Non DCR client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Non DCR client\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('registration_forbidden');",
													"    pm.expect(body.error_description).to.eql('Not allowed to access to this resource.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
										},
										"url": {
											"raw": "{{registrationEndpoint}}",
											"host": [
												"{{registrationEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Configure client",
							"item": [
								{
									"name": "Configure client with DCR enabled",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "576263ed-f6e5-44e3-8519-998efca70a67",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"DCR enabled for client\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scopes).to.eql(['dcr_admin']);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scopes\": [\"dcr_admin\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/clients/{{clientDCR}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"clients",
												"{{clientDCR}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body.scope).to.eql('dcr_admin');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic ZGNyLWNsaWVudDpkY3ItY2xpZW50LXNlY3JldA=="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "dcr_admin",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Invalid creation requests",
							"item": [
								{
									"name": "Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14381377-d0fe-4741-9c07-a53a31803ddd",
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Invalid bearer\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_token');",
													"    pm.expect(body.error_description).to.eql('The access token is invalid');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer wrong-token",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
										},
										"url": {
											"raw": "{{registrationEndpoint}}",
											"host": [
												"{{registrationEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid redirect uri",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Redirect uris are missing\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
													"    pm.expect(body.error_description).to.eql('Missing or invalid redirect_uris.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
										},
										"url": {
											"raw": "{{registrationEndpoint}}",
											"host": [
												"{{registrationEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid redirect uri - localhost",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Redirect uris localhost forbidden\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
													"    pm.expect(body.error_description).to.eql('localhost is forbidden');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"redirect_uris\": [\n    \"https://localhost/callback\",\n    \"https://localhost/callback2\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
										},
										"url": {
											"raw": "{{registrationEndpoint}}",
											"host": [
												"{{registrationEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid redirect uri - wildcard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Redirect uris wildcard forbidden\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
													"    pm.expect(body.error_description).to.eql('Wildcard are forbidden');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/*/callback\",\n    \"https://client.example.org/*/callback2\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
										},
										"url": {
											"raw": "{{registrationEndpoint}}",
											"host": [
												"{{registrationEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid redirect uri - http scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Redirect uris http scheme forbidden\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
													"    pm.expect(body.error_description).to.eql('Unsecured http scheme is forbidden');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"redirect_uris\": [\n    \"http://client.example.org/callback\",\n    \"http://client.example.org/callback2\"],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
										},
										"url": {
											"raw": "{{registrationEndpoint}}",
											"host": [
												"{{registrationEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid response type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid response type\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client_metadata');",
													"    pm.expect(body.error_description).to.eql('Invalid response type.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"response_types\": [\n\t\"unknown\"\n   ],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
										},
										"url": {
											"raw": "{{registrationEndpoint}}",
											"host": [
												"{{registrationEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid grant type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant type\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client_metadata');",
													"    pm.expect(body.error_description).to.eql('Missing or invalid grant type.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"grant_types\": [\n\t\"unknown\"\n   ],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
										},
										"url": {
											"raw": "{{registrationEndpoint}}",
											"host": [
												"{{registrationEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid subject type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant type\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client_metadata');",
													"    pm.expect(body.error_description).to.eql('Unsupported subject type');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"application_type\": \"web\",\n   \"redirect_uris\":\n     [\"https://client.example.org/callback\",\n      \"https://client.example.org/callback2\"],\n   \"logo_uri\": \"https://client.example.org/logo.png\",\n   \"subject_type\": \"pairwise\",\n   \"token_endpoint_auth_method\": \"client_secret_basic\",\n   \"userinfo_encrypted_response_alg\": \"RSA1_5\",\n   \"userinfo_encrypted_response_enc\": \"A128CBC-HS256\",\n   \"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n   \"request_uris\":\n     [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
										},
										"url": {
											"raw": "{{gateway_url}}/test/oidc/register",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oidc",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid userinfo signing algorithm",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant type\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client_metadata');",
													"    pm.expect(body.error_description).to.eql('Unsupported userinfo signing algorithm');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"application_type\": \"web\",\n\t\"redirect_uris\": [\n\t\t\"https://client.example.org/callback\",\n\t\t\"https://client.example.org/callback2\"\n\t],\n\t\"logo_uri\": \"https://client.example.org/logo.png\",\n\t\"token_endpoint_auth_method\": \"client_secret_basic\",\n\t\"userinfo_signed_response_alg\":\"unknown\",\n\t\"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n\t\"request_uris\": [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
										},
										"url": {
											"raw": "{{gateway_url}}/test/oidc/register",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oidc",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid id_token signing algorithm",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant type\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client_metadata');",
													"    pm.expect(body.error_description).to.eql('Unsupported id_token signing algorithm');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"application_type\": \"web\",\n\t\"redirect_uris\": [\n\t\t\"https://client.example.org/callback\",\n\t\t\"https://client.example.org/callback2\"\n\t],\n\t\"logo_uri\": \"https://client.example.org/logo.png\",\n\t\"token_endpoint_auth_method\": \"client_secret_basic\",\n\t\"id_token_signed_response_alg\":\"unknown\",\n\t\"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n\t\"request_uris\": [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
										},
										"url": {
											"raw": "{{gateway_url}}/test/oidc/register",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"oidc",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request uri",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid request uri\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client_metadata');",
													"    pm.expect(body.error_description).to.eql('request_uris: malformed_url is not valid.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"request_uris\": [\n\t\"malformed_url\"\n   ],\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"jwks_uri\": \"https://client.example.org/my_public_keys.jwks\"\n}"
										},
										"url": {
											"raw": "{{registrationEndpoint}}",
											"host": [
												"{{registrationEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid scope",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c557fd6b-d770-4568-8db7-ccb3267b0256",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid scope\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client_metadata');",
													"    pm.expect(body.error_description).to.eql('scope unkown-domain-scope is not valid.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"scope\": \"unkown-domain-scope\",\n  \"client_name\": \"My Example Client\",\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"logo_uri\": \"https://client.example.org/logo.png\"\n}"
										},
										"url": {
											"raw": "{{registrationEndpoint}}",
											"host": [
												"{{registrationEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6344fd45-5776-4bab-a90c-033893e6debb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "03904ca6-6d82-43ab-8190-f3210787a262",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Invalid update requests",
							"item": [
								{
									"name": "Register client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Has default attributes\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('response_types');",
													"    pm.expect(body).to.have.property('grant_types');",
													"    pm.expect(body).to.have.property('scope');",
													"    pm.expect(body).to.have.property('client_name');",
													"    pm.expect(body).to.have.property('client_id');",
													"    pm.expect(body).to.have.property('client_secret');",
													"    pm.expect(body.response_types).to.eql(['code']);",
													"    pm.expect(body.grant_types).to.eql(['authorization_code']);",
													"    pm.expect(body.scope).to.eql('openid');",
													"    pm.expect(body.client_name).to.eql('Unknown Client');",
													"    ",
													"    pm.environment.set('newClientForDCRTests', body.id);",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"application_type\": \"web\",\n   \"redirect_uris\":\n     [\"https://client.example.org/callback\",\n      \"https://client.example.org/callback2\"],\n   \"logo_uri\": \"https://client.example.org/logo.png\",\n   \"token_endpoint_auth_method\": \"client_secret_basic\",\n   \"userinfo_encrypted_response_alg\": \"RSA1_5\",\n   \"userinfo_encrypted_response_enc\": \"A128CBC-HS256\",\n   \"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n   \"request_uris\":\n     [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
										},
										"url": {
											"raw": "{{registrationEndpoint}}",
											"host": [
												"{{registrationEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Invalid bearer\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_token');",
													"    pm.expect(body.error_description).to.eql('The access token is invalid');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer wrongToken"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"client_name\": \"Should have not been updated\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid redirect uri",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Redirect uris are missing\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
													"    pm.expect(body.error_description).to.eql('Missing or invalid redirect_uris.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"client_name\": \"Should have not been updated\"\n}\n"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid redirect uri - localhost",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Redirect uris localhost forbidden\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_redirect_uri');",
													"    pm.expect(body.error_description).to.eql('localhost is forbidden');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \"redirect_uris\": [\n    \"https://localhost/callback\",\n    \"https://localhost/callback2\"\n   ],\n   \"client_name\": \"Should have not been updated\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid response type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid response type\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client_metadata');",
													"    pm.expect(body.error_description).to.eql('Invalid response type.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"response_types\": [\n\t\"unknown\"\n   ],\n   \"client_name\": \"Should have not been updated\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid grant type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant type\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client_metadata');",
													"    pm.expect(body.error_description).to.eql('Missing or invalid grant type.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"grant_types\": [\n\t\"unknown\"\n   ],\n   \"client_name\": \"Should have not been updated\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid subject  type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid grant type\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client_metadata');",
													"    pm.expect(body.error_description).to.eql('Unsupported subject type');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n   \"subject_type\": \"pairwise\",\n   \"client_name\": \"Should have not been updated\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid userinfo signing algorithm",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid response type\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client_metadata');",
													"    pm.expect(body.error_description).to.eql('Unsupported userinfo signing algorithm');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n   \"userinfo_signed_response_alg\":\"unknown\",\n   \"client_name\": \"Should have not been updated\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid userinfo id_token algorithm",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid response type\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client_metadata');",
													"    pm.expect(body.error_description).to.eql('Unsupported id_token signing algorithm');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n   \"id_token_signed_response_alg\":\"unknown\",\n   \"client_name\": \"Should have not been updated\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid scope",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Invalid scope\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_client_metadata');",
													"    pm.expect(body.error_description).to.eql('scope unkown-domain-scope is not valid.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"redirect_uris\": [\n    \"https://client.example.org/callback\",\n    \"https://client.example.org/callback2\"],\n  \"scope\": \"unkown-domain-scope\",\n  \"client_name\": \"Should have not been updated\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete client - with registration token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Nominal Case",
							"item": [
								{
									"name": "Register client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Has default attributes\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('response_types');",
													"    pm.expect(body).to.have.property('grant_types');",
													"    pm.expect(body).to.have.property('scope');",
													"    pm.expect(body).to.have.property('client_name');",
													"    pm.expect(body).to.have.property('client_id');",
													"    pm.expect(body).to.have.property('client_secret');",
													"    pm.expect(body.response_types).to.eql(['code']);",
													"    pm.expect(body.grant_types).to.eql(['authorization_code']);",
													"    pm.expect(body.scope).to.eql('openid');",
													"    pm.expect(body.client_name).to.eql('Unknown Client');",
													"    ",
													"    pm.environment.set('newClientForDCRTests', body.id);",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"application_type\": \"web\",\n   \"redirect_uris\":\n     [\"https://client.example.org/callback\",\n      \"https://client.example.org/callback2\"],\n   \"logo_uri\": \"https://client.example.org/logo.png\",\n   \"subject_type\": \"public\",\n   \"token_endpoint_auth_method\": \"client_secret_basic\",\n   \"userinfo_encrypted_response_alg\": \"RSA1_5\",\n   \"userinfo_encrypted_response_enc\": \"A128CBC-HS256\",\n   \"contacts\": [\"ve7jtb@example.org\", \"mary@example.org\"],\n   \"request_uris\":\n     [\"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"]\n  }"
										},
										"url": {
											"raw": "{{registrationEndpoint}}",
											"host": [
												"{{registrationEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Patch client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"responseTypes\");",
													"    pm.expect(body).to.have.property(\"authorizedGrantTypes\");",
													"    pm.expect(body.responseTypes).to.eql(['token', 'code']);",
													"    pm.expect(body.authorizedGrantTypes).to.eql([ 'implicit', 'authorization_code' ]);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"responseTypes\": [\"token\", \"code\"],\n   \"clientName\": \"Client was created via DCR\"\n  }"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/clients/{{newClientForDCRTests}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"clients",
												"{{newClientForDCRTests}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get client - with registration token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"redirect_uris\");",
													"    pm.expect(body).to.have.property(\"grant_types\");",
													"    pm.expect(body.response_types).to.eql([ 'token','code' ]);",
													"    pm.expect(body.grant_types).to.eql([ 'implicit','authorization_code' ]);",
													"    pm.expect(body.client_name).to.eql('Client was created via DCR');",
													"    ",
													"    //The Authorization Server need not include the registration_access_token or registration_client_uri value in this response unless they have been updated.",
													"    pm.expect(body).to.not.have.property('registration_access_token');",
													"    pm.expect(body).to.not.have.property('registration_client_uri');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch client - with registration token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.client_name).to.eql('Client patched via DCR');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"client_name\": \"Client patched via DCR\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update client - with registration token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.client_name).to.eql('Client name updated via DCR');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"redirect_uris\": [\n        \"https://client.example.org/callback\",\n        \"https://client.example.org/callback2\"\n    ],\n    \"response_types\": [\n        \"code\"\n    ],\n    \"grant_types\": [\n        \"authorization_code\"\n    ],\n    \"application_type\": \"web\",\n    \"contacts\": [\n        \"marie@example.org\",\n        \"jeanne@example.org\"\n    ],\n\t\"client_name\": \"Client name updated via DCR\",\n    \"logo_uri\": \"https://client.example.org/logo.png\",\n    \"subject_type\": \"public\",\n    \"userinfo_encrypted_response_alg\": \"RSA1_5\",\n    \"userinfo_encrypted_response_enc\": \"A128CBC-HS256\",\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"require_auth_time\": false,\n    \"request_uris\": [\n        \"https://client.example.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA\"\n    ],\n    \"scope\": \"openid\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete client - with registration token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ID Token",
					"item": [
						{
							"name": "Case - No openid scope",
							"item": [
								{
									"name": "Generate token - client 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"    ",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.not.have.property('refresh_token');",
													"    pm.expect(body).to.not.have.property('id_token');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Nominal Case",
							"item": [
								{
									"name": "Get Token - Simple request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"    ",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('refresh_token');",
													"    pm.expect(body).to.have.property('id_token');",
													"    ",
													"    let jwt = parseJwt(body.id_token);",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    ",
													"    tests['Contains an iss claim'] = jwt.iss === origin + '/test/oidc';",
													"    tests['Contains a sub claim'] = jwt.sub !== undefined;",
													"    tests['Contains an aud claim'] = jwt.aud === 'my-client';",
													"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
													"    tests['Contains an iat claim'] = jwt.iat !== undefined;",
													"    tests['Does not contain an auth_time claim'] = jwt.auth_time === undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{revocationEndpoint}}",
											"host": [
												"{{revocationEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - With max_age",
							"item": [
								{
									"name": "Get Token - Define max_age",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"    ",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('refresh_token');",
													"    pm.expect(body).to.have.property('id_token');",
													"    ",
													"    let jwt = parseJwt(body.id_token);",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    ",
													"    tests['Contains an iss claim'] = jwt.iss === origin + '/test/oidc';",
													"    tests['Contains a sub claim'] = jwt.sub !== undefined;",
													"    tests['Contains an aud claim'] = jwt.aud === 'my-client';",
													"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
													"    tests['Contains an iat claim'] = jwt.iat !== undefined;",
													"    tests['Contains an auth_time claim'] = jwt.auth_time !== undefined;",
													"    tests['Valid max_age'] = (jwt.exp - jwt.iat) > 10000;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												},
												{
													"key": "max_age",
													"value": "10000",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{revocationEndpoint}}",
											"host": [
												"{{revocationEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Nonce",
							"item": [
								{
									"name": "Get token - Define nonce",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"    ",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('refresh_token');",
													"    pm.expect(body).to.have.property('id_token');",
													"    ",
													"    let jwt = parseJwt(body.id_token);",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    ",
													"    tests['Contains an iss claim'] = jwt.iss === origin + '/test/oidc';",
													"    tests['Contains a sub claim'] = jwt.sub !== undefined;",
													"    tests['Contains an aud claim'] = jwt.aud === 'my-client';",
													"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
													"    tests['Contains an iat claim'] = jwt.iat !== undefined;",
													"    tests['Does not contain an auth_time claim'] = jwt.auth_time === undefined;",
													"    tests['Contains a nonce claim'] = jwt.nonce === 'n-0S6_WzA2Mj';",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{revocationEndpoint}}",
											"host": [
												"{{revocationEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "080f2ad3-903c-4bf6-9779-a270c7c96520",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0564bcf0-b0ce-4586-9f2a-8bb18e240bdb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Nonce - Multiple get token requests",
							"item": [
								{
									"name": "Get token - Define nonce 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    ",
													"    pm.environment.set('nonce1.access_token', body.access_token);",
													"    ",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('refresh_token');",
													"    pm.expect(body).to.have.property('id_token');",
													"    ",
													"    let jwt = parseJwt(body.id_token);",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    ",
													"    tests['Contains an iss claim'] = jwt.iss === origin + '/test/oidc';",
													"    tests['Contains a sub claim'] = jwt.sub !== undefined;",
													"    tests['Contains an aud claim'] = jwt.aud === 'my-client';",
													"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
													"    tests['Contains an iat claim'] = jwt.iat !== undefined;",
													"    tests['Does not contain an auth_time claim'] = jwt.auth_time === undefined;",
													"    tests['Contains a nonce claim'] = jwt.nonce === 'nonce1';",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												},
												{
													"key": "nonce",
													"value": "nonce1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get token - Define nonce 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    ",
													"    pm.environment.set('nonce2.access_token', body.access_token);",
													"    ",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('refresh_token');",
													"    pm.expect(body).to.have.property('id_token');",
													"    ",
													"    let jwt = parseJwt(body.id_token);",
													"    let origin = pm.environment.get(\"gateway_url\");",
													"    ",
													"    tests['Contains an iss claim'] = jwt.iss === origin + '/test/oidc';",
													"    tests['Contains a sub claim'] = jwt.sub !== undefined;",
													"    tests['Contains an aud claim'] = jwt.aud === 'my-client';",
													"    tests['Contains an exp claim'] = jwt.exp !== undefined;",
													"    tests['Contains an iat claim'] = jwt.iat !== undefined;",
													"    tests['Does not contain an auth_time claim'] = jwt.auth_time === undefined;",
													"    tests['Contains a nonce claim'] = jwt.nonce === 'nonce2';",
													"    ",
													"    // Access token is not the same as the previous request with nonce 1",
													"    tests['Not the same access_token'] = ",
													"        pm.environment.get('nonce1.access_token') !== pm.environment.get('nonce2.access_token');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												},
												{
													"key": "nonce",
													"value": "nonce2",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke Token 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{nonce1.access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{revocationEndpoint}}",
											"host": [
												"{{revocationEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke Token 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{nonce2.access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{revocationEndpoint}}",
											"host": [
												"{{revocationEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "080f2ad3-903c-4bf6-9779-a270c7c96520",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0564bcf0-b0ce-4586-9f2a-8bb18e240bdb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - DCR signed",
							"item": [
								{
									"name": "Generate token - client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body.scope).to.eql('dcr_admin');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic ZGNyLWNsaWVudDpkY3ItY2xpZW50LXNlY3JldA=="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "dcr_admin",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register client - rs256 signed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Has default attributes\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body.client_name).to.eql('client_rs512');",
													"",
													"    pm.expect(body).to.have.property('client_id');",
													"    pm.expect(body).to.have.property('client_secret');    ",
													"    var credentials = body.client_id + \":\" + body.client_secret;",
													"    var authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(credentials));",
													"    pm.environment.set('dcrClientAuthorization', authorization);",
													"    ",
													"    pm.environment.set('newClientForDCRTests', body.id);",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"client_name\":\"client_rs512\",\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"grant_types\": [\"authorization_code\",\"implicit\",\"password\"],\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"response_types\": [\"code\",\"token\",\"id_token\"],\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"id_token_signed_response_alg\": \"RS256\"\n}"
										},
										"url": {
											"raw": "{{registrationEndpoint}}",
											"host": [
												"{{registrationEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Switch Identity Provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83307446-f677-4710-9cef-229202efb513",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identities\": [\"{{idp.inmemory}}\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/clients/{{newClientForDCRTests}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"clients",
												"{{newClientForDCRTests}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwtHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJwtHeader(body.id_token);",
													"    tests['Contains kid claim'] = header.kid === 'mytestkey';",
													"    tests['Contains alg claim'] = header.alg === 'RS256';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch client - require RS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.id_token_signed_response_alg).to.eql('RS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id_token_signed_response_alg\": \"RS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwtHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an id_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('id_token');",
													"    let header = parseJwtHeader(body.id_token);",
													"    tests['Contains kid claim'] = header.kid === 'my4096key';",
													"    tests['Contains alg claim'] = header.alg === 'RS512';",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete client - with registration token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0423361c-d0d5-48f9-abd0-06e55bd03676",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2b1b1be0-ce24-4755-8973-37bdfd1d747e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UserInfo",
					"item": [
						{
							"name": "Invalid requests",
							"item": [
								{
									"name": "No authorization header",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"No access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_request');",
													"    pm.expect(body.error_description).to.eql('An access token is required');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Basic authorization header ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"No bearer authorization header\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_request');",
													"    pm.expect(body.error_description).to.eql('The access token must be sent using the Authorization header with as value \\\"Bearer xxxx\\\"');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic a basic-header-value",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid access_token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Invalid bearer\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_token');",
													"    pm.expect(body.error_description).to.eql('The access token is invalid');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer a bearer-header-value"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Nominal case",
							"item": [
								{
									"name": "Generate token - client 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"    ",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.have.property('refresh_token');",
													"    pm.expect(body).to.have.property('id_token');",
													"    ",
													"    let jwt = parseJwt(body.id_token);",
													"    ",
													"    tests['Contains an aud claim'] = jwt.aud === 'my-client';",
													"    tests['Contains a sub claim'] = jwt.sub !== undefined;",
													"    pm.environment.set('id_token.sub', jwt.sub);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserInfo",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    ",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('sub');",
													"",
													"    tests['Contains a sub claim'] = pm.environment.get('id_token.sub') === body.sub;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post UserInfo",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('sub');",
													"",
													"    tests['Contains a sub claim'] = pm.environment.get('id_token.sub') === body.sub;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50Om15LWNsaWVudC1zZWNyZXQ="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{revocationEndpoint}}",
											"host": [
												"{{revocationEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - No openid scope",
							"item": [
								{
									"name": "Generate token - client 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwt (token) {",
													"            var base64Url = token.split('.')[1];",
													"            var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"            return JSON.parse(atob(base64));",
													"        }",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"    ",
													"    pm.expect(body).to.have.property('token_type');",
													"    pm.expect(body.token_type).to.eql('bearer');",
													"    pm.expect(body).to.have.property('expires_in');",
													"    pm.expect(body).to.not.have.property('refresh_token');",
													"    pm.expect(body).to.not.have.property('id_token');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic bXktY2xpZW50MjpteS1jbGllbnQtc2VjcmV0Mg=="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get UserInfo",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Invalid scope\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_token');",
													"    pm.expect(body.error_description).to.eql('Invalid access token scopes. The access token should have at least \\'openid\\' scope');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post UserInfo",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Invalid scope\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.error).to.eql('invalid_token');",
													"    pm.expect(body.error_description).to.eql('Invalid access token scopes. The access token should have at least \\'openid\\' scope');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "57f18948-1eb5-4c75-b698-231c2e4898bc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d9e3326-465f-42f2-a613-bcb4ce7f47b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - signed",
							"item": [
								{
									"name": "Generate token - client",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.expect(body.scope).to.eql('dcr_admin');",
													"    ",
													"    pm.environment.set('access_token', body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic ZGNyLWNsaWVudDpkY3ItY2xpZW50LXNlY3JldA=="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "dcr_admin",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Register client - rs384 signed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Has default attributes\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body.client_name).to.eql('client_rs512');",
													"",
													"    pm.expect(body).to.have.property('client_id');",
													"    pm.expect(body).to.have.property('client_secret');    ",
													"    var credentials = body.client_id + \":\" + body.client_secret;",
													"    var authorization = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(credentials));",
													"    pm.environment.set('dcrClientAuthorization', authorization);",
													"    ",
													"    pm.environment.set('newClientForDCRTests', body.id);",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"client_name\":\"client_rs512\",\n    \"application_type\": \"web\",\n    \"contacts\": [\"roland@example.com\"],\n    \"grant_types\": [\"authorization_code\",\"implicit\",\"password\"],\n    \"post_logout_redirect_uris\": [\"https://op-test:60001/logout\"],\n    \"redirect_uris\": [\"https://op-test:60001/authz_cb\"],\n    \"response_types\": [\"code\",\"token\"],\n    \"token_endpoint_auth_method\": \"client_secret_basic\",\n    \"userinfo_signed_response_alg\": \"RS384\"\n}"
										},
										"url": {
											"raw": "{{registrationEndpoint}}",
											"host": [
												"{{registrationEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Switch Identity Provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83307446-f677-4710-9cef-229202efb513",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// wait for sync process",
													"setTimeout(function(){}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identities\": [\"{{idp.inmemory}}\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/clients/{{newClientForDCRTests}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"clients",
												"{{newClientForDCRTests}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate token - user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('access_token');",
													"    pm.environment.set('access_token', body.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{dcrClientAuthorization}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Signed UserInfo default alg",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwtHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"function parseJwtpayload (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJwtHeader(body);",
													"    pm.expect(header).to.have.property('kid');",
													"    pm.expect(header).to.have.property('alg');",
													"    let payload = parseJwtpayload(body);",
													"    pm.expect(payload).to.have.property('iss');",
													"    pm.expect(payload).to.have.property('sub');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Signed UserInfo default alg",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwtHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"function parseJwtpayload (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJwtHeader(body);",
													"    pm.expect(header).to.have.property('kid');",
													"    pm.expect(header).to.have.property('alg');",
													"    let payload = parseJwtpayload(body);",
													"    pm.expect(payload).to.have.property('iss');",
													"    pm.expect(payload).to.have.property('sub');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch client - require RS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get client with response types\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/json');",
													"    var body = pm.response.json();",
													"    pm.expect(body.userinfo_signed_response_alg).to.eql('RS512');",
													"});",
													"",
													"pm.test(\"One time Token\", function() {",
													"    var body = pm.response.json();",
													"    pm.expect(body).to.have.property('registration_access_token');",
													"    pm.expect(body.registration_access_token).to.not.eql(pm.environment.get('registrationAccessToken'));",
													"    pm.environment.set('registrationAccessToken', body.registration_access_token);",
													"    pm.environment.set('registrationClientUri', body.registration_client_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"userinfo_signed_response_alg\": \"RS512\"\n}"
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Signed UserInfo RS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwtHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"function parseJwtpayload (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJwtHeader(body);",
													"    tests['Contains kid claim'] = header.kid === 'my4096key';",
													"    tests['Contains alg claim'] = header.alg === 'RS512';",
													"    let payload = parseJwtpayload(body);",
													"    pm.expect(payload).to.have.property('iss');",
													"    pm.expect(payload).to.have.property('sub');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Signed UserInfo RS512",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "355997a0-4d2d-4585-9428-f2ef4e33495d",
												"exec": [
													"function parseJwtHeader (token) {",
													"    var base64Url = token.split('.')[0];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"function parseJwtpayload (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has an access_token\", function () {",
													"    pm.response.to.be.header('Content-Type', 'application/jwt');",
													"    ",
													"    var body = pm.response.text();",
													"    let header = parseJwtHeader(body);",
													"    tests['Contains kid claim'] = header.kid === 'my4096key';",
													"    tests['Contains alg claim'] = header.alg === 'RS512';",
													"    let payload = parseJwtpayload(body);",
													"    pm.expect(payload).to.have.property('iss');",
													"    pm.expect(payload).to.have.property('sub');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "deebc9a4-25be-40c4-8f5e-9e074d58cce7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{userinfoEndpoint}}",
											"host": [
												"{{userinfoEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete client - with registration token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d83b2401-3844-4147-bbb3-abe08b43a342",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{registrationAccessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{registrationClientUri}}",
											"host": [
												"{{registrationClientUri}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Implicit Flow",
					"item": [
						{
							"name": "Authorize - Invalid requests",
							"item": [
								{
									"name": "Missing client_id parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00ecb82b-4a9a-4152-a6a2-a7d924131fad",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to error page'] = location.includes(pm.environment.get('gateway_url') + '/test/oauth/error');",
													"    tests['Contains an error query-parameter'] = location.includes('?error=invalid_request');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=Missing+parameter%253A+client_id');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token token",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token token"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing nonce parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to error page'] = location.includes(pm.environment.get('gateway_url') + '/test/oauth/error');",
													"    tests['Contains an error query-parameter'] = location.includes('?error=invalid_request');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=Missing+parameter%253A+nonce+is+required+for+Implicit+and+Hybrid+Flow');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token token&client_id=my-client2&redirect_uri=http://localhost:4000/",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token token"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing redirect_uri parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to error page'] = location.includes(pm.environment.get('gateway_url') + '/test/oauth/error');",
													"    tests['Contains an error query-parameter'] = location.includes('?error=invalid_request');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=A+redirect_uri+must+be+supplied');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token token&client_id=my-client&nonce=n-0S6_WzA2Mj",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token token"
												},
												{
													"key": "client_id",
													"value": "my-client"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "845bdd2d-61fe-4a29-9e96-db997d438645",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bbe06124-9940-4ae9-baec-96d5bf3f9c4a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Get id_token token",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token token&client_id=my-client2&redirect_uri=http://localhost:4000/&nonce=n-0S6_WzA2Mj",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token token"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73f280ec-f0ac-46ec-9424-0cdecd34f1c8",
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/#');",
													"    ",
													"    tests['Contains an access_token param'] = location.includes('#access_token=');",
													"    tests['Contains a token_type param'] = location.includes('token_type=bearer');",
													"    tests['Contains an expires_in param'] = location.includes('expires_in=');",
													"    tests['Contains a scope param'] = location.includes('scope=scope1');",
													"    tests['Contains an id_token param'] = location.includes('id_token=');",
													"    ",
													"    let id_token = location.substring(location.indexOf('id_token=')+9);",
													"    let jwt = parseJwt(id_token);",
													"    console.log(jwt);",
													"    tests['Contains a valid nonce claim'] = jwt.nonce === 'n-0S6_WzA2Mj';",
													"    ",
													"    // TODO: find a way to check the value: https://openid.net/specs/openid-connect-core-1_0.html#ImplicitIDToken",
													"    tests['Contains an at_hash claim'] = jwt.at_hash !== undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Get id_token",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token&client_id=my-client2&redirect_uri=http://localhost:4000/&nonce=n-0S6_WzA2Mj",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73f280ec-f0ac-46ec-9424-0cdecd34f1c8",
												"exec": [
													"function parseJwt (token) {",
													"    var base64Url = token.split('.')[1];",
													"    var base64 = base64Url.replace('-', '+').replace('_', '/');",
													"    return JSON.parse(atob(base64));",
													"}",
													"",
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/#');",
													"    ",
													"    tests['Does not contain an access_token param'] = !location.includes('access_token=');",
													"    tests['Does not contain a token_type param'] = !location.includes('token_type=bearer');",
													"    tests['Does not contain an expires_in param'] = !location.includes('expires_in=');",
													"    tests['Does not contain a scope param'] = !location.includes('scope=scope1');",
													"    tests['Contains an id_token param'] = location.includes('#id_token=');",
													"    ",
													"    let id_token = location.substring(location.indexOf('id_token=')+9);",
													"    let jwt = parseJwt(id_token);",
													"    ",
													"    tests['Contains a valid nonce claim'] = jwt.nonce === 'n-0S6_WzA2Mj';",
													"    tests['Does not contain an at_hash claim'] = jwt.at_hash === undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Get id_token - With state",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token&client_id=my-client2&redirect_uri=http://localhost:4000/&nonce=n-0S6_WzA2Mj&state=af0ifjsldkj",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj"
												},
												{
													"key": "state",
													"value": "af0ifjsldkj"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73f280ec-f0ac-46ec-9424-0cdecd34f1c8",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/#');",
													"    ",
													"    tests['Does not contain an access_token param'] = !location.includes('access_token=');",
													"    tests['Does not contain a token_type param'] = !location.includes('token_type=bearer');",
													"    tests['Does not contain an expires_in param'] = !location.includes('expires_in=');",
													"    tests['Does not contain a scope param'] = !location.includes('scope=scope1');",
													"    tests['Contains an id_token param'] = location.includes('#id_token=');",
													"    tests['Contains a state param'] = location.includes('state=af0ifjsldkj');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Case - Get id_token token - With state",
							"item": [
								{
									"name": "Initiate the flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to login page\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to login page with client_id'] = location === pm.environment.get('gateway_url') + '/test/login?client_id=my-client2';",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=id_token token&client_id=my-client2&redirect_uri=http://localhost:4000/&nonce=n-0S6_WzA2Mj&state=af0ifjsldkj",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "id_token token"
												},
												{
													"key": "client_id",
													"value": "my-client2"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:4000/"
												},
												{
													"key": "nonce",
													"value": "n-0S6_WzA2Mj"
												},
												{
													"key": "state",
													"value": "af0ifjsldkj"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Redirect to login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67df9bf8-89a2-4c95-9728-097aad6d2be4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be ok\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    // Extract the XSRF token to send it with the next request.",
													"    var responseHTML = cheerio(pm.response.text());",
													"    var xsrfToken = responseHTML.find('[name=\"X-XSRF-TOKEN\"]').val();",
													"    pm.environment.set('xsrf', xsrfToken);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Post login form",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afec9f2-a5ba-4647-9a78-6d74cb9c157c",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/test/login",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"login"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Follow redirection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73f280ec-f0ac-46ec-9424-0cdecd34f1c8",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"});",
													"",
													"pm.test(\"Should be a redirection to redirect_uri with authorization_code\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to redirect_uri'] = location.includes('http://localhost:4000/#');",
													"    ",
													"    tests['Contains an access_token param'] = location.includes('#access_token=');",
													"    tests['Contains a token_type param'] = location.includes('token_type=bearer');",
													"    tests['Contains an expires_in param'] = location.includes('expires_in=');",
													"    tests['Contains a scope param'] = location.includes('scope=scope1');",
													"    tests['Contains a state param'] = location.includes('state=af0ifjsldkj');",
													"    tests['Contains an id_token param'] = location.includes('id_token=');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{redirection}}",
											"host": [
												"{{redirection}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								},
								{
									"name": "Logout user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b6fb1-32ac-46d5-8e2d-f97961029a05",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.have.header('Location');",
													"    ",
													"    pm.environment.set('redirection', postman.getResponseHeader(\"Location\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "X-XSRF-TOKEN",
													"value": "{{xsrf}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "my-client2",
													"type": "text"
												},
												{
													"key": "username",
													"value": "user",
													"type": "text"
												},
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{logoutEndpoint}}",
											"host": [
												"{{logoutEndpoint}}"
											]
										},
										"description": "The client does not have a redirect_uri define"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9143c0-cc02-4402-bb68-90bb92bb3b19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffcf002d-109b-407f-aab7-a1a5492ed4b1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Authorization Code Flow",
					"item": [
						{
							"name": "Authorize - Invalid requests",
							"item": [
								{
									"name": "Missing client_id parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00ecb82b-4a9a-4152-a6a2-a7d924131fad",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Contains an error query-parameter'] = location.includes('?error=invalid_request');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=Missing+parameter%253A+client_id');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing redirect_uri parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb56a849-b090-4e80-9c8c-eca9f4d72e85",
												"exec": [
													"pm.test(\"Status code is 302\", function () {",
													"    pm.response.to.have.status(302);",
													"});",
													"",
													"pm.test(\"Should be redirected\", function () {",
													"    pm.response.to.be.redirection;",
													"    pm.response.to.be.header('Content-Length', '0');",
													"    pm.response.to.have.header('Location');",
													"    pm.response.to.not.have.header('Set-Cookie');",
													"});",
													"",
													"pm.test(\"Should be a location error\", function() {",
													"    var location = postman.getResponseHeader('Location');",
													"    tests['Redirect to error page'] = location.includes(pm.environment.get('gateway_url') + '/test/oauth/error');",
													"    tests['Contains an error query-parameter'] = location.includes('?error=invalid_request');",
													"    tests['Contains an error description query-parameter'] = location.includes('error_description=A+redirect_uri+must+be+supplied');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "904f0113-b2b9-4645-9511-48bb10791506",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{authorizationEndpoint}}?response_type=code&client_id=my-client",
											"host": [
												"{{authorizationEndpoint}}"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "my-client"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "845bdd2d-61fe-4a29-9e96-db997d438645",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bbe06124-9940-4ae9-baec-96d5bf3f9c4a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "SCIM",
			"item": [
				{
					"name": "Case - non SCIM domain",
					"item": [
						{
							"name": "Fetch Service Provider Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/ServiceProviderConfig",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"ServiceProviderConfig"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Users endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Users",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Groups endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Groups",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Groups"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Configure domain",
					"item": [
						{
							"name": "Configure SCIM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "286df3a2-0e06-4b00-9614-3b0fd9ceecb9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"SCIM enabled for domain\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scim.enabled).to.eql(true);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"scim\": {\n    \"enabled\": true\n  }\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/test",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"test"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Service Provider Configuration",
					"item": [
						{
							"name": "Fetch Service Provider Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check SCIM configuration\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig']);",
											"    pm.expect(jsonData.patch.supported).to.eql(false);",
											"    pm.expect(jsonData.bulk.supported).to.eql(false);",
											"    pm.expect(jsonData.filter.supported).to.eql(false);",
											"    pm.expect(jsonData.changePassword.supported).to.eql(false);",
											"    pm.expect(jsonData.sort.supported).to.eql(false);",
											"    pm.expect(jsonData.etag.supported).to.eql(false);",
											"    pm.expect(jsonData.authenticationSchemes[0].type).to.eql('oauthbearertoken');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/ServiceProviderConfig",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"ServiceProviderConfig"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Case - invalid token",
					"item": [
						{
							"name": "Fetch Users endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"An access token is required\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Users",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Users endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Users",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Users endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"An access token is required\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Users",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Users endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Users",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace Users endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"An access token is required\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Users/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Users",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace Users endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Users/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Users",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Users endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"An access token is required\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Users/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Users",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Users endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Users/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Users",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Groups endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"An access token is required\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Groups",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Groups endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Groups",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace Groups endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"An access token is required\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Groups/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Groups",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace Groups endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Groups/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Groups",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Groups endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"An access token is required\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Groups",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Groups endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Groups",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Groups endpoint - no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"An access token is required\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Groups/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Groups",
										"test-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Groups endpoint - invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824e7241-8698-4f0e-a856-ce3dcc28a98f",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"SCIM is secured with a bearer token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"401\");",
											"    pm.expect(jsonData.detail).to.eql(\"The access token is invalid\");",
											"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer wrong-token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{gateway_url}}/test/scim/Groups/test-id",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"test",
										"scim",
										"Groups",
										"test-id"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Configure client",
					"item": [
						{
							"name": "Create SCIM client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fbe2362d-ad75-4baa-8825-b74218b047c7",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var body = JSON.parse(responseBody);",
											"pm.environment.set('clientSCIM', body.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": \"client-scim\",\n  \"clientSecret\": \"client-scim-secret\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/test/clients",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"test",
										"clients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure SCIM client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c37cba72-91c2-4850-80cd-6fd3908e406e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"authorizedGrantTypes\": [\"client_credentials\"],\n  \"scopes\" : [\"scim\"]\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/test/clients/{{clientSCIM}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"test",
										"clients",
										"{{clientSCIM}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has an access_token\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    ",
											"    pm.environment.set('access_token', body.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic Y2xpZW50LXNjaW06Y2xpZW50LXNjaW0tc2VjcmV0"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create user malformed json\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidSyntax\");",
													"    pm.expect(jsonData.detail).to.eql(\"Unable to parse body message\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - userName required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create userName field required\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidValue\");",
													"    pm.expect(jsonData.detail).to.eql(\"Field [userName] is required\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"externalId\":\"bjensen\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n       \"givenName\":\"Barbara\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"SCIM create user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:schemas:core:2.0:User']);",
													"    pm.environment.set('userSCIM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n  \"externalId\": \"701984\",\n  \"userName\": \"bjensen@example.com\",\n  \"name\": {\n    \"formatted\": \"Ms. Barbara J Jensen, III\",\n    \"familyName\": \"Jensen\",\n    \"givenName\": \"Barbara\",\n    \"middleName\": \"Jane\",\n    \"honorificPrefix\": \"Ms.\",\n    \"honorificSuffix\": \"III\"\n  },\n  \"displayName\": \"Babs Jensen\",\n  \"nickName\": \"Babs\",\n  \"profileUrl\": \"https://login.example.com/bjensen\",\n  \"emails\": [\n    {\n      \"value\": \"bjensen@example.com\",\n      \"type\": \"work\",\n      \"primary\": true\n    },\n    {\n      \"value\": \"babs@jensen.org\",\n      \"type\": \"home\"\n    }\n  ],\n  \"addresses\": [\n    {\n      \"type\": \"work\",\n      \"streetAddress\": \"100 Universal City Plaza\",\n      \"locality\": \"Hollywood\",\n      \"region\": \"CA\",\n      \"postalCode\": \"91608\",\n      \"country\": \"USA\",\n      \"formatted\": \"100 Universal City Plaza\\nHollywood, CA 91608 USA\",\n      \"primary\": true\n    },\n    {\n      \"type\": \"home\",\n      \"streetAddress\": \"456 Hollywood Blvd\",\n      \"locality\": \"Hollywood\",\n      \"region\": \"CA\",\n      \"postalCode\": \"91608\",\n      \"country\": \"USA\",\n      \"formatted\": \"456 Hollywood Blvd\\nHollywood, CA 91608 USA\"\n    }\n  ],\n  \"phoneNumbers\": [\n    {\n      \"value\": \"555-555-5555\",\n      \"type\": \"work\"\n    },\n    {\n      \"value\": \"555-555-4444\",\n      \"type\": \"mobile\"\n    }\n  ],\n  \"ims\": [\n    {\n      \"value\": \"someaimhandle\",\n      \"type\": \"aim\"\n    }\n  ],\n  \"photos\": [\n    {\n      \"value\":\n        \"https://photos.example.com/profilephoto/72930000000Ccne/F\",\n      \"type\": \"photo\"\n    },\n    {\n      \"value\":\n        \"https://photos.example.com/profilephoto/72930000000Ccne/T\",\n      \"type\": \"thumbnail\"\n    }\n  ],\n  \"userType\": \"Employee\",\n  \"title\": \"Tour Guide\",\n  \"preferredLanguage\": \"en-US\",\n  \"locale\": \"en-US\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"active\":true,\n  \"x509Certificates\": [\n    {\n      \"value\":\n       \"MIIDQzCCAqygAwIBAgICEAAwDQ....1UEBhMCVVMx\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - userName already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create user uniqueness\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"uniqueness\");",
													"    pm.expect(jsonData.detail).to.eql(\"User with username [bjensen@example.com] already exists\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"userName\":\"bjensen@example.com\",\n     \"externalId\":\"bjensen\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n       \"givenName\":\"Barbara\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Invalid request - user not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"SCIM update user unknown user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"404\");",
													"    pm.expect(jsonData.detail).to.eql(\"User [wrong-id] can not be found.\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"userName\":\"bjensen\",\n     \"externalId\":\"bjensen\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n       \"givenName\":\"Barbara\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Users/wrong-id",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Users",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM update user malformed json\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidSyntax\");",
													"    pm.expect(jsonData.detail).to.eql(\"Unable to parse body message\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Users/{{userSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Users",
												"{{userSCIM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM update user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:schemas:core:2.0:User']);",
													"    pm.expect(jsonData.name.familyName).to.eql('Jensen2');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n     \"userName\":\"bjensen\",\n     \"externalId\":\"bjensen\",\n     \"name\":{\n       \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen2\",\n       \"givenName\":\"Barbara\"\n     }\n   }"
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Users/{{userSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Users",
												"{{userSCIM}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "List",
							"item": [
								{
									"name": "List users",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ace28d5f-a975-4430-ba47-29184cf01460",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// 2 users (one from SCIM and an other from inline idp)",
													"pm.test(\"SCIM list users\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:ListResponse']);",
													"    pm.expect(jsonData.totalResults).to.eql(2);",
													"    pm.expect(jsonData.startIndex).to.eql(1);",
													"    pm.expect(jsonData.itemsPerPage).to.eql(2);",
													"    pm.expect(jsonData.Resources.length).to.eql(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Invalid request - user not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"SCIM delete user unknown user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"404\");",
													"    pm.expect(jsonData.detail).to.eql(\"User [wrong-id] can not be found.\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Users/wrong-id",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Users",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Users/{{userSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Users",
												"{{userSCIM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "List users",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ace28d5f-a975-4430-ba47-29184cf01460",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM list users after delete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:ListResponse']);",
													"    pm.expect(jsonData.totalResults).to.eql(1);",
													"    pm.expect(jsonData.startIndex).to.eql(1);",
													"    pm.expect(jsonData.itemsPerPage).to.eql(1);",
													"    pm.expect(jsonData.Resources.length).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Users",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Users"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Groups",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create group malformed json\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidSyntax\");",
													"    pm.expect(jsonData.detail).to.eql(\"Unable to parse body message\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - displayName required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM group displayName field required\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidValue\");",
													"    pm.expect(jsonData.detail).to.eql(\"Field [displayName] is required\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"]\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"SCIM create user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:schemas:core:2.0:Group']);",
													"    pm.environment.set('groupSCIM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n   \"displayName\": \"Tour Guides\"\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - displayName already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM create group uniqueness\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"uniqueness\");",
													"    pm.expect(jsonData.detail).to.eql(\"Group with display name [Tour Guides] already exists\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n   \"displayName\": \"Tour Guides\"\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Invalid request - group not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"SCIM update user unknown user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"404\");",
													"    pm.expect(jsonData.detail).to.eql(\"Group [wrong-id] can not be found.\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n   \"displayName\": \"Tour Guides 2\"\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Groups/wrong-id",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Groups",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"SCIM update user malformed json\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"    pm.expect(jsonData.scimType).to.eql(\"invalidSyntax\");",
													"    pm.expect(jsonData.detail).to.eql(\"Unable to parse body message\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Groups/{{groupSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Groups",
												"{{groupSCIM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM update user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:schemas:core:2.0:Group']);",
													"    pm.expect(jsonData.displayName).to.eql('Tour Guides 2');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n   \"displayName\": \"Tour Guides 2\"\n}"
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Groups/{{groupSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Groups",
												"{{groupSCIM}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "List",
							"item": [
								{
									"name": "List groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ace28d5f-a975-4430-ba47-29184cf01460",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM list groups\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:ListResponse']);",
													"    pm.expect(jsonData.totalResults).to.eql(1);",
													"    pm.expect(jsonData.startIndex).to.eql(1);",
													"    pm.expect(jsonData.itemsPerPage).to.eql(1);",
													"    pm.expect(jsonData.Resources.length).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Invalid request - group not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"SCIM delete group unknown group\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"404\");",
													"    pm.expect(jsonData.detail).to.eql(\"Group [wrong-id] can not be found.\");",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:Error']);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Groups/wrong-id",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Groups",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Groups/{{groupSCIM}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Groups",
												"{{groupSCIM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "List groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ace28d5f-a975-4430-ba47-29184cf01460",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"SCIM list groups after delete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schemas).to.eql(['urn:ietf:params:scim:api:messages:2.0:ListResponse']);",
													"    pm.expect(jsonData.totalResults).to.eql(0);",
													"    pm.expect(jsonData.startIndex).to.eql(1);",
													"    pm.expect(jsonData.itemsPerPage).to.eql(0);",
													"    pm.expect(jsonData.Resources.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/test/scim/Groups",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"test",
												"scim",
												"Groups"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"wrong\" : \n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - username required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - username field required\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[username: ne peut pas être nul]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@mail.com\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - email required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - email field required\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[email: ne peut pas être nul]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - password required if no pre-registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - password field required if no pre-registration\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Field [password] is required\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barbara@mail.com\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - email malformed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - email malformed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[jensen.barba: must be a well-formed email address]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barba\",\n\t\"password\": \"password\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"UM - create user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.internal).to.eql(true);",
													"    pm.expect(jsonData.enabled).to.eql(true);",
													"    pm.expect(jsonData.preRegistration).to.eql(false);",
													"    pm.expect(jsonData.registrationCompleted).to.eql(true);",
													"    pm.expect(jsonData.source).to.eql('default-idp-test')",
													"    pm.environment.set('userUM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"password\": \"password\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - username already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create user - uniqueness\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"A user [jensen.barbara] already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"password\": \"password\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Invalid request - user not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"UM - update user - unknown user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"User [wrong-id] can not be found.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@mail.com\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/users/wrong-id",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"users",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/users/{{userUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"users",
												"{{userUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - update user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.additionalInformation.profile).to.eql('https://my.profile.com');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"additionalInformation\": {\n\t\t\"profile\":\"https://my.profile.com\"\n\t}\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/users/{{userUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"users",
												"{{userUM}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "List",
							"item": [
								{
									"name": "List users",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ace28d5f-a975-4430-ba47-29184cf01460",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - list users\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currentPage).to.eql(0);",
													"    pm.expect(jsonData.totalCount).to.eql(2);",
													"    pm.expect(jsonData.data.length).to.eql(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/users",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Groups",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"wrong\" : \n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - name required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create group - name field required\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"[name: ne peut pas être nul]\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"UM - create group\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.expect(jsonData.name).to.eql('My Group');",
													"    pm.environment.set('groupUM', jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My Group\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - name already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"UM - create group - uniqueness\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"A group [My Group] already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My Group\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"groups"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Invalid request - group not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"UM - update group - unknown user\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Group [wrong-id] can not be found.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My Group\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/groups/wrong-id",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"groups",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid request - malformed json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/groups/{{userUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"groups",
												"{{userUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - update group\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.name).to.eql('My Group 2');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My Group 2\"\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/groups/{{groupUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"groups",
												"{{groupUM}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Members",
							"item": [
								{
									"name": "Update group - member not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - update group - member not found\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.members).to.eql([]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My Group 2\",\n\t\"members\": [\"wrong-member-id\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/groups/{{groupUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"groups",
												"{{groupUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update group - member exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - update group - member found\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.members).to.eql([environment[\"userUM\"]]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My Group 2\",\n\t\"members\": [\"{{userUM}}\"]\n}"
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/groups/{{groupUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"groups",
												"{{groupUM}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "List",
							"item": [
								{
									"name": "List groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ace28d5f-a975-4430-ba47-29184cf01460",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - list groups\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currentPage).to.eql(0);",
													"    pm.expect(jsonData.totalCount).to.eql(1);",
													"    pm.expect(jsonData.data.length).to.eql(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"groups"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Invalid request - group not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"UM - delete group - unknown group\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Group [wrong-id] can not be found.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/groups/wrong-id",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"groups",
												"wrong-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/groups/{{groupUM}}",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"groups",
												"{{groupUM}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "List groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ace28d5f-a975-4430-ba47-29184cf01460",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"UM - list groups - after delete\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currentPage).to.eql(0);",
													"    pm.expect(jsonData.totalCount).to.eql(0);",
													"    pm.expect(jsonData.data.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{management_url}}/management/domains/test/groups",
											"host": [
												"{{management_url}}"
											],
											"path": [
												"management",
												"domains",
												"test",
												"groups"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "35f0648e-0920-4673-98f8-09fd3bf1dd72",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "25349ed5-4030-41bc-a22b-2093961b43f4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Configure client",
					"item": [
						{
							"name": "Create User Management client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1195033-78b1-481b-acc9-845df5ddae80",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var body = JSON.parse(responseBody);",
											"pm.environment.set('clientUM', body.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": \"client-um\",\n  \"clientSecret\": \"client-um-secret\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/test/clients",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"test",
										"clients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure User Management client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c37cba72-91c2-4850-80cd-6fd3908e406e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"authorizedGrantTypes\": [\"password\"],\n  \"scopes\" : [\"openid\"],\n  \"identities\" : [\"default-idp-test\"]\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/test/clients/{{clientUM}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"test",
										"clients",
										"{{clientUM}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Authenticate User",
					"item": [
						{
							"name": "Authenticate - wrong user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"UM - authenticate - wrong user\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('invalid_grant');",
											"    pm.expect(jsonData.error_description).to.eql('Invalid or unknown user');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic Y2xpZW50LXVtOmNsaWVudC11bS1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "username",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate - wrong credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"UM - authenticate - wrong credentials\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('invalid_grant');",
											"    pm.expect(jsonData.error_description).to.eql('The credentials you entered are invalid');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic Y2xpZW50LXVtOmNsaWVudC11bS1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "jensen.barbara",
											"type": "text"
										},
										{
											"key": "password",
											"value": "wrong-password",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate - success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"UM - authenticate - success\", function () {",
											"     var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic Y2xpZW50LXVtOmNsaWVudC11bS1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "jensen.barbara",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user - disable user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"UM - update user\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.enabled).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"additionalInformation\": {\n\t\t\"profile\":\"https://my.profile.com\"\n\t},\n\t\"enabled\": false\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/test/users/{{userUM}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"test",
										"users",
										"{{userUM}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate - user disabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"UM - authenticate - user disabled\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('invalid_grant');",
											"    pm.expect(jsonData.error_description).to.eql('Account is disabled for user jensen.barbara');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic Y2xpZW50LXVtOmNsaWVudC11bS1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "jensen.barbara",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user - enable user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"UM - update user\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.enabled).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"additionalInformation\": {\n\t\t\"profile\":\"https://my.profile.com\"\n\t},\n\t\"enabled\": true\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/test/users/{{userUM}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"test",
										"users",
										"{{userUM}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user - reset password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"myNewPassword\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/test/users/{{userUM}}/resetPassword",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"test",
										"users",
										"{{userUM}}",
										"resetPassword"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate - success after reset password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"UM - authenticate - success after reset password\", function () {",
											"     var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic Y2xpZW50LXVtOmNsaWVudC11bS1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "jensen.barbara",
											"type": "text"
										},
										{
											"key": "password",
											"value": "myNewPassword",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid request - user not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"UM - delete user - unknown user\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"User [wrong-id] can not be found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{management_url}}/management/domains/test/users/wrong-id",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"test",
										"users",
										"wrong-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56ffba4f-b70a-452d-a063-8c3865594fd4",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{management_url}}/management/domains/test/users/{{userUM}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"test",
										"users",
										"{{userUM}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate - user not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462b93ec-a015-41b8-a1bf-8d5446fc31aa",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"UM - authenticate - wrong user\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('invalid_grant');",
											"    pm.expect(jsonData.error_description).to.eql('Invalid or unknown user');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904f0113-b2b9-4645-9511-48bb10791506",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic Y2xpZW50LXVtOmNsaWVudC11bS1zZWNyZXQ="
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "username",
											"type": "text"
										},
										{
											"key": "password",
											"value": "password",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Extension grant",
			"item": [
				{
					"name": "JWT Bearer",
					"item": [
						{
							"name": "Configure User Management client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c37cba72-91c2-4850-80cd-6fd3908e406e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"certificate\": \"{{certificateJks}}\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/test/clients/{{clientUM}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"test",
										"clients",
										"{{clientUM}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create extension grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1ab79e9-b254-47f9-8af9-e6ab3e47ab58",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Extension Grant - create jwt bearer\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.environment.set('jwtBearerExtensionGrant', jsonData.id);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"jwtbearer-am-extension-grant\",\n  \"configuration\": \"{\\\"publicKey\\\":\\\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDI6xahwspOwhzSHrga3SFif04FITcAhyygXoeS+GwUSx6HaMCMkULTQVMgQoU/7VAUf32uoiVgLDo1FI6vWvBGbp1Zbf7MRVpqK98PvhTK4PN5py2OAmpd3i3z5SgGZCP1oxJE/uF+mMUkvtQOJ+RL32pU8oaAwzPuBLKX/jA5OZPouq6Y5e7abrgValYyGCI8aZK5SfukZTMq14mDc84Y2t4IvwS/GqSUiRsTp7r6aj5F+lwD0vyUBo3eH5v5J1R+t7F8T/B2Jl+oJQTPLFxBwcN/2AGC5aqrn7BDoGUG2NZtb6WTolZsBUYjgL7MdYEQHMz/N4WoPCXCEbUQU5rZ test@test.com\\\",\\\"claimsMapper\\\":[{\\\"assertion_claim\\\":\\\"email\\\",\\\"token_claim\\\":\\\"email\\\"}]}\",\n  \"name\": \"JWT BEARER\",\n  \"userExists\": true,\n  \"identityProvider\": \"default-idp-test\",\n  \"grantType\": \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/test/extensionGrants",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"test",
										"extensionGrants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create jwt bearer client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c545400c-100e-44e5-a7b9-f4d4c11e516f",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var body = JSON.parse(responseBody);",
											"pm.environment.set('clientJwtBearer', body.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": \"client-jwt-bearer\",\n  \"clientSecret\": \"client-jwt-bearer-secret\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/test/clients",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"test",
										"clients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure jwt bearer client",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c37cba72-91c2-4850-80cd-6fd3908e406e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"authorizedGrantTypes\": [\"urn:ietf:params:oauth:grant-type:jwt-bearer\"],\n  \"scopes\": [\"openid\"]\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/test/clients/{{clientJwtBearer}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"test",
										"clients",
										"{{clientJwtBearer}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac86c3c9-c0a7-4616-b7cf-6847a7f48801",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"UM - create user\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData.internal).to.eql(true);",
											"    pm.expect(jsonData.enabled).to.eql(true);",
											"    pm.expect(jsonData.preRegistration).to.eql(false);",
											"    pm.expect(jsonData.registrationCompleted).to.eql(true);",
											"    pm.expect(jsonData.source).to.eql('default-idp-test')",
											"    pm.environment.set('userUM', jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"firstName\": \"Jensen\",\n\t\"lastName\": \"Barbara\",\n\t\"username\": \"jensen.barbara\",\n\t\"email\": \"jensen.barbara@mail.com\",\n\t\"password\": \"password\"\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/test/users",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"test",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "JWT Bearer extension grant - Unknow User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4cec8d7-bd2c-44cc-8423-ae8cc21cc068",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Unknown user\", function () {",
											"    pm.response.to.be.header('Content-Type', 'application/json');",
											"    var body = pm.response.json();",
											"    pm.expect(body.error).to.eql('invalid_grant');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f8395e2f-4a01-4837-baf6-0230541542ac",
										"exec": [
											"pm.environment.set('assertionToken', 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhbm9ueW1vdXMtdXNlciIsIm5hbWUiOiJKb2huIERvZSIsImFkbWluIjp0cnVlLCJpYXQiOjE1MTYyMzkwMjJ9.ALneslMoGJc4l0EEaH4JDHkZeG6nneBe1tD0IOyo9xXC6zs8HPd6RVr3lYgMsQxRVg8V1pZMvfxCHqqopHoirCgoklpnsM7Kcjve8c4KROrWMk5nbcjG5rozsO1hhJWWEtSCZeZ14GpDewM41StUSliOb9c-j5khSxJ-AD-F1zpOM1O7HwxzflOUvO_7BbYSOv1K768EBljXTIeVojniLa0griDMIzlX4YxF-OR1qoANtA6Bpj5jlGi722LsSKKJ-bldy2pURf-Z8-vk5RYcGvcTBjXp2ulMU_S8X0QKzMJ0wjLFofoZ-kY12WgoOejAF1cVTUGZ8KHSA1b8GRKCcQ');",
											"",
											"// Private key",
											"/*",
											"-----BEGIN PRIVATE KEY-----",
											"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDI6xahwspOwhzS",
											"Hrga3SFif04FITcAhyygXoeS+GwUSx6HaMCMkULTQVMgQoU/7VAUf32uoiVgLDo1",
											"FI6vWvBGbp1Zbf7MRVpqK98PvhTK4PN5py2OAmpd3i3z5SgGZCP1oxJE/uF+mMUk",
											"vtQOJ+RL32pU8oaAwzPuBLKX/jA5OZPouq6Y5e7abrgValYyGCI8aZK5SfukZTMq",
											"14mDc84Y2t4IvwS/GqSUiRsTp7r6aj5F+lwD0vyUBo3eH5v5J1R+t7F8T/B2Jl+o",
											"JQTPLFxBwcN/2AGC5aqrn7BDoGUG2NZtb6WTolZsBUYjgL7MdYEQHMz/N4WoPCXC",
											"EbUQU5rZAgMBAAECggEBAL+ZOEbgPA7pG5TgyI6Nq8WDQ0KvDwWI4my4WK82CdM8",
											"Y4ubwGsMJ17QH9ZWuT1iMIirn44GgH/7DTMLPJpKrXFtEM50j5P62yL+XURk7u0d",
											"ofG0FEQlV4vWUZoRQJ7/pi8b6FM1gJI6W14UQKKTNimIj50cflmSTRZBEpLRSul1",
											"pTlsPypRgtj9clUgPBt1iKehoJmUu9S9nYAJFJo9wn97QKd6erkkqhJfEmXPWoXQ",
											"X5O2BJTTappN7SxLoP2Dhdss4zbvwZJD10Q5dDj3KH4vWjR4W3LuoH64ug74H2lh",
											"oFTT/xrWDCFFfWpjfkAXWzCh83DNI7z3c54sQXU2YGUCgYEA+qCRwmvwyf4+8wW0",
											"0AdsuQ0TDwZEf8LayPUchiILGKGCX5I9Qtfwm2XCsfOVtbX6FiEGPVIYT5i3S4le",
											"GMl7uO35/LsYPWX6MVGLeMnAQxkorxVM6iqZQu8fF1pcvxfVgvxpmPEko+veLTBq",
											"XPJ7HLiTkuuq+5P0YYZxW5iJ25MCgYEAzTm4BVHhzRKM1Hb+Cs2C4OhqTV7fNAkv",
											"melZt70jRGCd7ZXslNFUc3uju7JnaJVBqdNThOUevnk8n6EV0sMvP+483vNNSMqW",
											"u7KgR36DMNVMYHqr/f8YY9TLxHvSQoI53jPQFQ2X+GzrJZUtq6u1hX4UpySIlZbP",
											"GCMIh5GWK2MCgYABowLQrjvIVey7UZI4uZOwMbGqK3RPEUq0fUVOavJ/mq5rSV01",
											"Dov3t9ZpqxmTMjkL4/NSezLFck3gJGmE5+vy7Trwt5gU7pGPuOScSVUEGyn02sLB",
											"1L1jfoRJdsGcTd+LF3LpGMoQd/3fda18Jek/6sSr9PYM5o52BJbA7mIYGQKBgCo3",
											"131wrMztJf+HQxeh02zFIykrfStNQHefI4/C3wBwB80abILo1UC0jKhOOSuwmMOA",
											"78uE/uAcPLZyAvVKpeu27NrInnt9Aak3Q/WxNvfSyVWHpt4nnjLbUdfnyQdZluH5",
											"MrNCCqNWdMFUgQKx3jPKDiGcSGTNk2jZvCV3c7cVAoGBALoOfXLssZW7Kp5CcY/q",
											"60JP8QHm889KykmBvda5MZySENt42i5Bp6a8rNTR6TmJkKGiY780I16+JDhPoQHd",
											"+pJeVNzWPoTAdg5ftvMoYr95wOqsraUtd+4wQcpjMKC4+FxAuSChhqfBrOktoigf",
											"TaAE0xuL1DO9Fqp1nNZY0q1m",
											"-----END PRIVATE KEY-----",
											"*/",
											"",
											"// Public key",
											"/*",
											"-----BEGIN PUBLIC KEY-----",
											"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyOsWocLKTsIc0h64Gt0h",
											"Yn9OBSE3AIcsoF6HkvhsFEseh2jAjJFC00FTIEKFP+1QFH99rqIlYCw6NRSOr1rw",
											"Rm6dWW3+zEVaaivfD74UyuDzeactjgJqXd4t8+UoBmQj9aMSRP7hfpjFJL7UDifk",
											"S99qVPKGgMMz7gSyl/4wOTmT6LqumOXu2m64FWpWMhgiPGmSuUn7pGUzKteJg3PO",
											"GNreCL8EvxqklIkbE6e6+mo+RfpcA9L8lAaN3h+b+SdUfrexfE/wdiZfqCUEzyxc",
											"QcHDf9gBguWqq5+wQ6BlBtjWbW+lk6JWbAVGI4C+zHWBEBzM/zeFqDwlwhG1EFOa",
											"2QIDAQAB",
											"-----END PUBLIC KEY-----",
											"*/",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic Y2xpZW50LWp3dC1iZWFyZXI6Y2xpZW50LWp3dC1iZWFyZXItc2VjcmV0",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "assertion",
											"value": "{{assertionToken}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "JWT Bearer extension grant - Valid User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4cec8d7-bd2c-44cc-8423-ae8cc21cc068",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Extension grant - jwt bearer grant - success\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.not.have.property('refresh_token');",
											"    var claims = jwt_decode(body.id_token);",
											"    pm.expect(claims).to.have.property('email');",
											"});",
											"",
											"function jwt_decode(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[1]));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f8395e2f-4a01-4837-baf6-0230541542ac",
										"exec": [
											"pm.environment.set('assertionToken', 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqZW5zZW4uYmFyYmFyYSIsIm5hbWUiOiJKb2huIERvZSIsImFkbWluIjp0cnVlLCJtYWlsIjoiamVuc2VuLmJhcmJhcmFAbWFpbC5jb20iLCJpYXQiOjE1MTYyMzkwMjJ9.oUvmrRITBVrrWBRQAIKSkDbpwwombEbDp24PXrx9s111o3M2dTQ7bcrIkXWhgiWGdoIYVhZEaYV3bTXmv2fHH80DLAOstq-ibkiKmPkoPWn7ea1VpLixcVCft_YSO_mtf4YMxdY-WFFB896z0Y_5M5S2iMvx4HKj7OCxKZqF1jkxeNCSMqI1KbMketk7SZxFlycgTXJBx5ysQ-z9VfGck3Vnf_pGV_RYPMgOMp0zqvPBPIbtOj1viFQ3lSNBss98OInnsecsaCQcFJGshVG-MNLGWDwljsz5-Rozckveg9g5orWTS86jjEqrNTQmA0alvLEnXnmJVaGJyTrW_2Qwng');",
											"",
											"// Private key",
											"/*",
											"-----BEGIN PRIVATE KEY-----",
											"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDI6xahwspOwhzS",
											"Hrga3SFif04FITcAhyygXoeS+GwUSx6HaMCMkULTQVMgQoU/7VAUf32uoiVgLDo1",
											"FI6vWvBGbp1Zbf7MRVpqK98PvhTK4PN5py2OAmpd3i3z5SgGZCP1oxJE/uF+mMUk",
											"vtQOJ+RL32pU8oaAwzPuBLKX/jA5OZPouq6Y5e7abrgValYyGCI8aZK5SfukZTMq",
											"14mDc84Y2t4IvwS/GqSUiRsTp7r6aj5F+lwD0vyUBo3eH5v5J1R+t7F8T/B2Jl+o",
											"JQTPLFxBwcN/2AGC5aqrn7BDoGUG2NZtb6WTolZsBUYjgL7MdYEQHMz/N4WoPCXC",
											"EbUQU5rZAgMBAAECggEBAL+ZOEbgPA7pG5TgyI6Nq8WDQ0KvDwWI4my4WK82CdM8",
											"Y4ubwGsMJ17QH9ZWuT1iMIirn44GgH/7DTMLPJpKrXFtEM50j5P62yL+XURk7u0d",
											"ofG0FEQlV4vWUZoRQJ7/pi8b6FM1gJI6W14UQKKTNimIj50cflmSTRZBEpLRSul1",
											"pTlsPypRgtj9clUgPBt1iKehoJmUu9S9nYAJFJo9wn97QKd6erkkqhJfEmXPWoXQ",
											"X5O2BJTTappN7SxLoP2Dhdss4zbvwZJD10Q5dDj3KH4vWjR4W3LuoH64ug74H2lh",
											"oFTT/xrWDCFFfWpjfkAXWzCh83DNI7z3c54sQXU2YGUCgYEA+qCRwmvwyf4+8wW0",
											"0AdsuQ0TDwZEf8LayPUchiILGKGCX5I9Qtfwm2XCsfOVtbX6FiEGPVIYT5i3S4le",
											"GMl7uO35/LsYPWX6MVGLeMnAQxkorxVM6iqZQu8fF1pcvxfVgvxpmPEko+veLTBq",
											"XPJ7HLiTkuuq+5P0YYZxW5iJ25MCgYEAzTm4BVHhzRKM1Hb+Cs2C4OhqTV7fNAkv",
											"melZt70jRGCd7ZXslNFUc3uju7JnaJVBqdNThOUevnk8n6EV0sMvP+483vNNSMqW",
											"u7KgR36DMNVMYHqr/f8YY9TLxHvSQoI53jPQFQ2X+GzrJZUtq6u1hX4UpySIlZbP",
											"GCMIh5GWK2MCgYABowLQrjvIVey7UZI4uZOwMbGqK3RPEUq0fUVOavJ/mq5rSV01",
											"Dov3t9ZpqxmTMjkL4/NSezLFck3gJGmE5+vy7Trwt5gU7pGPuOScSVUEGyn02sLB",
											"1L1jfoRJdsGcTd+LF3LpGMoQd/3fda18Jek/6sSr9PYM5o52BJbA7mIYGQKBgCo3",
											"131wrMztJf+HQxeh02zFIykrfStNQHefI4/C3wBwB80abILo1UC0jKhOOSuwmMOA",
											"78uE/uAcPLZyAvVKpeu27NrInnt9Aak3Q/WxNvfSyVWHpt4nnjLbUdfnyQdZluH5",
											"MrNCCqNWdMFUgQKx3jPKDiGcSGTNk2jZvCV3c7cVAoGBALoOfXLssZW7Kp5CcY/q",
											"60JP8QHm889KykmBvda5MZySENt42i5Bp6a8rNTR6TmJkKGiY780I16+JDhPoQHd",
											"+pJeVNzWPoTAdg5ftvMoYr95wOqsraUtd+4wQcpjMKC4+FxAuSChhqfBrOktoigf",
											"TaAE0xuL1DO9Fqp1nNZY0q1m",
											"-----END PRIVATE KEY-----",
											"*/",
											"",
											"// Public key",
											"/*",
											"-----BEGIN PUBLIC KEY-----",
											"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyOsWocLKTsIc0h64Gt0h",
											"Yn9OBSE3AIcsoF6HkvhsFEseh2jAjJFC00FTIEKFP+1QFH99rqIlYCw6NRSOr1rw",
											"Rm6dWW3+zEVaaivfD74UyuDzeactjgJqXd4t8+UoBmQj9aMSRP7hfpjFJL7UDifk",
											"S99qVPKGgMMz7gSyl/4wOTmT6LqumOXu2m64FWpWMhgiPGmSuUn7pGUzKteJg3PO",
											"GNreCL8EvxqklIkbE6e6+mo+RfpcA9L8lAaN3h+b+SdUfrexfE/wdiZfqCUEzyxc",
											"QcHDf9gBguWqq5+wQ6BlBtjWbW+lk6JWbAVGI4C+zHWBEBzM/zeFqDwlwhG1EFOa",
											"2QIDAQAB",
											"-----END PUBLIC KEY-----",
											"*/",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Basic Y2xpZW50LWp3dC1iZWFyZXI6Y2xpZW50LWp3dC1iZWFyZXItc2VjcmV0"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "assertion",
											"value": "{{assertionToken}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure jwt bearer client - Add Refresh Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c37cba72-91c2-4850-80cd-6fd3908e406e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"authorizedGrantTypes\": [\"refresh_token\", \"urn:ietf:params:oauth:grant-type:jwt-bearer\"],\n  \"scopes\": [\"openid\"]\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/test/clients/{{clientJwtBearer}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"test",
										"clients",
										"{{clientJwtBearer}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "JWT Bearer extension grant - Valid User - With Refresh Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4cec8d7-bd2c-44cc-8423-ae8cc21cc068",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Extension grant - jwt bearer grant - success\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.have.property('refresh_token');",
											"    var claims = jwt_decode(body.id_token);",
											"    pm.expect(claims).to.have.property('email');",
											"});",
											"",
											"function jwt_decode(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[1]));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f8395e2f-4a01-4837-baf6-0230541542ac",
										"exec": [
											"pm.environment.set('assertionToken', 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqZW5zZW4uYmFyYmFyYSIsIm5hbWUiOiJKb2huIERvZSIsImFkbWluIjp0cnVlLCJtYWlsIjoiamVuc2VuLmJhcmJhcmFAbWFpbC5jb20iLCJpYXQiOjE1MTYyMzkwMjJ9.oUvmrRITBVrrWBRQAIKSkDbpwwombEbDp24PXrx9s111o3M2dTQ7bcrIkXWhgiWGdoIYVhZEaYV3bTXmv2fHH80DLAOstq-ibkiKmPkoPWn7ea1VpLixcVCft_YSO_mtf4YMxdY-WFFB896z0Y_5M5S2iMvx4HKj7OCxKZqF1jkxeNCSMqI1KbMketk7SZxFlycgTXJBx5ysQ-z9VfGck3Vnf_pGV_RYPMgOMp0zqvPBPIbtOj1viFQ3lSNBss98OInnsecsaCQcFJGshVG-MNLGWDwljsz5-Rozckveg9g5orWTS86jjEqrNTQmA0alvLEnXnmJVaGJyTrW_2Qwng');",
											"",
											"// Private key",
											"/*",
											"-----BEGIN PRIVATE KEY-----",
											"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDI6xahwspOwhzS",
											"Hrga3SFif04FITcAhyygXoeS+GwUSx6HaMCMkULTQVMgQoU/7VAUf32uoiVgLDo1",
											"FI6vWvBGbp1Zbf7MRVpqK98PvhTK4PN5py2OAmpd3i3z5SgGZCP1oxJE/uF+mMUk",
											"vtQOJ+RL32pU8oaAwzPuBLKX/jA5OZPouq6Y5e7abrgValYyGCI8aZK5SfukZTMq",
											"14mDc84Y2t4IvwS/GqSUiRsTp7r6aj5F+lwD0vyUBo3eH5v5J1R+t7F8T/B2Jl+o",
											"JQTPLFxBwcN/2AGC5aqrn7BDoGUG2NZtb6WTolZsBUYjgL7MdYEQHMz/N4WoPCXC",
											"EbUQU5rZAgMBAAECggEBAL+ZOEbgPA7pG5TgyI6Nq8WDQ0KvDwWI4my4WK82CdM8",
											"Y4ubwGsMJ17QH9ZWuT1iMIirn44GgH/7DTMLPJpKrXFtEM50j5P62yL+XURk7u0d",
											"ofG0FEQlV4vWUZoRQJ7/pi8b6FM1gJI6W14UQKKTNimIj50cflmSTRZBEpLRSul1",
											"pTlsPypRgtj9clUgPBt1iKehoJmUu9S9nYAJFJo9wn97QKd6erkkqhJfEmXPWoXQ",
											"X5O2BJTTappN7SxLoP2Dhdss4zbvwZJD10Q5dDj3KH4vWjR4W3LuoH64ug74H2lh",
											"oFTT/xrWDCFFfWpjfkAXWzCh83DNI7z3c54sQXU2YGUCgYEA+qCRwmvwyf4+8wW0",
											"0AdsuQ0TDwZEf8LayPUchiILGKGCX5I9Qtfwm2XCsfOVtbX6FiEGPVIYT5i3S4le",
											"GMl7uO35/LsYPWX6MVGLeMnAQxkorxVM6iqZQu8fF1pcvxfVgvxpmPEko+veLTBq",
											"XPJ7HLiTkuuq+5P0YYZxW5iJ25MCgYEAzTm4BVHhzRKM1Hb+Cs2C4OhqTV7fNAkv",
											"melZt70jRGCd7ZXslNFUc3uju7JnaJVBqdNThOUevnk8n6EV0sMvP+483vNNSMqW",
											"u7KgR36DMNVMYHqr/f8YY9TLxHvSQoI53jPQFQ2X+GzrJZUtq6u1hX4UpySIlZbP",
											"GCMIh5GWK2MCgYABowLQrjvIVey7UZI4uZOwMbGqK3RPEUq0fUVOavJ/mq5rSV01",
											"Dov3t9ZpqxmTMjkL4/NSezLFck3gJGmE5+vy7Trwt5gU7pGPuOScSVUEGyn02sLB",
											"1L1jfoRJdsGcTd+LF3LpGMoQd/3fda18Jek/6sSr9PYM5o52BJbA7mIYGQKBgCo3",
											"131wrMztJf+HQxeh02zFIykrfStNQHefI4/C3wBwB80abILo1UC0jKhOOSuwmMOA",
											"78uE/uAcPLZyAvVKpeu27NrInnt9Aak3Q/WxNvfSyVWHpt4nnjLbUdfnyQdZluH5",
											"MrNCCqNWdMFUgQKx3jPKDiGcSGTNk2jZvCV3c7cVAoGBALoOfXLssZW7Kp5CcY/q",
											"60JP8QHm889KykmBvda5MZySENt42i5Bp6a8rNTR6TmJkKGiY780I16+JDhPoQHd",
											"+pJeVNzWPoTAdg5ftvMoYr95wOqsraUtd+4wQcpjMKC4+FxAuSChhqfBrOktoigf",
											"TaAE0xuL1DO9Fqp1nNZY0q1m",
											"-----END PRIVATE KEY-----",
											"*/",
											"",
											"// Public key",
											"/*",
											"-----BEGIN PUBLIC KEY-----",
											"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyOsWocLKTsIc0h64Gt0h",
											"Yn9OBSE3AIcsoF6HkvhsFEseh2jAjJFC00FTIEKFP+1QFH99rqIlYCw6NRSOr1rw",
											"Rm6dWW3+zEVaaivfD74UyuDzeactjgJqXd4t8+UoBmQj9aMSRP7hfpjFJL7UDifk",
											"S99qVPKGgMMz7gSyl/4wOTmT6LqumOXu2m64FWpWMhgiPGmSuUn7pGUzKteJg3PO",
											"GNreCL8EvxqklIkbE6e6+mo+RfpcA9L8lAaN3h+b+SdUfrexfE/wdiZfqCUEzyxc",
											"QcHDf9gBguWqq5+wQ6BlBtjWbW+lk6JWbAVGI4C+zHWBEBzM/zeFqDwlwhG1EFOa",
											"2QIDAQAB",
											"-----END PUBLIC KEY-----",
											"*/",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Basic Y2xpZW50LWp3dC1iZWFyZXI6Y2xpZW50LWp3dC1iZWFyZXItc2VjcmV0"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "assertion",
											"value": "{{assertionToken}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update extension grant - Uncheck userExists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1ab79e9-b254-47f9-8af9-e6ab3e47ab58",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Extension Grant - update jwt bearer\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.environment.set('jwtBearerExtensionGrant', jsonData.id);",
											"});",
											"",
											"// wait for sync process",
											"setTimeout(function(){}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"JWT BEARER\",\n  \"configuration\": \"{\\\"publicKey\\\":\\\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDI6xahwspOwhzSHrga3SFif04FITcAhyygXoeS+GwUSx6HaMCMkULTQVMgQoU/7VAUf32uoiVgLDo1FI6vWvBGbp1Zbf7MRVpqK98PvhTK4PN5py2OAmpd3i3z5SgGZCP1oxJE/uF+mMUkvtQOJ+RL32pU8oaAwzPuBLKX/jA5OZPouq6Y5e7abrgValYyGCI8aZK5SfukZTMq14mDc84Y2t4IvwS/GqSUiRsTp7r6aj5F+lwD0vyUBo3eH5v5J1R+t7F8T/B2Jl+oJQTPLFxBwcN/2AGC5aqrn7BDoGUG2NZtb6WTolZsBUYjgL7MdYEQHMz/N4WoPCXCEbUQU5rZ test@test.com\\\",\\\"claimsMapper\\\":[{\\\"assertion_claim\\\":\\\"email\\\",\\\"token_claim\\\":\\\"email\\\"}]}\",\n  \"grantType\": \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n  \"identityProvider\": \"default-idp-test\",\n  \"createUser\": false,\n  \"userExists\": false\n}"
								},
								"url": {
									"raw": "{{management_url}}/management/domains/test/extensionGrants/{{jwtBearerExtensionGrant}}",
									"host": [
										"{{management_url}}"
									],
									"path": [
										"management",
										"domains",
										"test",
										"extensionGrants",
										"{{jwtBearerExtensionGrant}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "JWT Bearer extension grant - Unknow User is valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4cec8d7-bd2c-44cc-8423-ae8cc21cc068",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Extension grant - jwt bearer grant - success\", function () {",
											"    var body = pm.response.json();",
											"    pm.expect(body).to.have.property('access_token');",
											"    pm.expect(body).to.not.have.property('refresh_token');",
											"    var claims = jwt_decode(body.id_token);",
											"    pm.expect(claims).to.have.property('email');",
											"});",
											"",
											"function jwt_decode(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[1]));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f8395e2f-4a01-4837-baf6-0230541542ac",
										"exec": [
											"pm.environment.set('assertionToken', 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhbm9ueW1vdXMtdXNlciIsIm5hbWUiOiJKb2huIERvZSIsImFkbWluIjp0cnVlLCJpYXQiOjE1MTYyMzkwMjIsImVtYWlsIjoiam9obi5kb2VAZ21haWwuY29tIn0.dDmLFEfCDtxHUF771Q8AWQs4AoImZSZKlnlEp91iT2K0d7glZHMasE8HsfU7ozL-T9SATSQi_xvsc3Uitabna95v_nbOmu9fLeodmzYkPgXoD4Fxk8wPtHqTETHNN_kDbCxBXX0iqGhB-Et-9QJ2rGUDmMCXcj-K1PwsuBYYch0G3Zc60HM8hM3mm51pH8j1vKUr1pBSrAudPANhhQof_sOwohRiiubJIT4qDpjKxp6IvqmVusAU4SDeAPaoQDdr3KH2Hd29TWviB8OGw8pj3SLxKkaMKG0u94HBPcOaC-v0p-afq7N0jgoS2KfO9CtpmEMiItfLKWqkEFggWJtL4w');",
											"",
											"// Private key",
											"/*",
											"-----BEGIN PRIVATE KEY-----",
											"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDI6xahwspOwhzS",
											"Hrga3SFif04FITcAhyygXoeS+GwUSx6HaMCMkULTQVMgQoU/7VAUf32uoiVgLDo1",
											"FI6vWvBGbp1Zbf7MRVpqK98PvhTK4PN5py2OAmpd3i3z5SgGZCP1oxJE/uF+mMUk",
											"vtQOJ+RL32pU8oaAwzPuBLKX/jA5OZPouq6Y5e7abrgValYyGCI8aZK5SfukZTMq",
											"14mDc84Y2t4IvwS/GqSUiRsTp7r6aj5F+lwD0vyUBo3eH5v5J1R+t7F8T/B2Jl+o",
											"JQTPLFxBwcN/2AGC5aqrn7BDoGUG2NZtb6WTolZsBUYjgL7MdYEQHMz/N4WoPCXC",
											"EbUQU5rZAgMBAAECggEBAL+ZOEbgPA7pG5TgyI6Nq8WDQ0KvDwWI4my4WK82CdM8",
											"Y4ubwGsMJ17QH9ZWuT1iMIirn44GgH/7DTMLPJpKrXFtEM50j5P62yL+XURk7u0d",
											"ofG0FEQlV4vWUZoRQJ7/pi8b6FM1gJI6W14UQKKTNimIj50cflmSTRZBEpLRSul1",
											"pTlsPypRgtj9clUgPBt1iKehoJmUu9S9nYAJFJo9wn97QKd6erkkqhJfEmXPWoXQ",
											"X5O2BJTTappN7SxLoP2Dhdss4zbvwZJD10Q5dDj3KH4vWjR4W3LuoH64ug74H2lh",
											"oFTT/xrWDCFFfWpjfkAXWzCh83DNI7z3c54sQXU2YGUCgYEA+qCRwmvwyf4+8wW0",
											"0AdsuQ0TDwZEf8LayPUchiILGKGCX5I9Qtfwm2XCsfOVtbX6FiEGPVIYT5i3S4le",
											"GMl7uO35/LsYPWX6MVGLeMnAQxkorxVM6iqZQu8fF1pcvxfVgvxpmPEko+veLTBq",
											"XPJ7HLiTkuuq+5P0YYZxW5iJ25MCgYEAzTm4BVHhzRKM1Hb+Cs2C4OhqTV7fNAkv",
											"melZt70jRGCd7ZXslNFUc3uju7JnaJVBqdNThOUevnk8n6EV0sMvP+483vNNSMqW",
											"u7KgR36DMNVMYHqr/f8YY9TLxHvSQoI53jPQFQ2X+GzrJZUtq6u1hX4UpySIlZbP",
											"GCMIh5GWK2MCgYABowLQrjvIVey7UZI4uZOwMbGqK3RPEUq0fUVOavJ/mq5rSV01",
											"Dov3t9ZpqxmTMjkL4/NSezLFck3gJGmE5+vy7Trwt5gU7pGPuOScSVUEGyn02sLB",
											"1L1jfoRJdsGcTd+LF3LpGMoQd/3fda18Jek/6sSr9PYM5o52BJbA7mIYGQKBgCo3",
											"131wrMztJf+HQxeh02zFIykrfStNQHefI4/C3wBwB80abILo1UC0jKhOOSuwmMOA",
											"78uE/uAcPLZyAvVKpeu27NrInnt9Aak3Q/WxNvfSyVWHpt4nnjLbUdfnyQdZluH5",
											"MrNCCqNWdMFUgQKx3jPKDiGcSGTNk2jZvCV3c7cVAoGBALoOfXLssZW7Kp5CcY/q",
											"60JP8QHm889KykmBvda5MZySENt42i5Bp6a8rNTR6TmJkKGiY780I16+JDhPoQHd",
											"+pJeVNzWPoTAdg5ftvMoYr95wOqsraUtd+4wQcpjMKC4+FxAuSChhqfBrOktoigf",
											"TaAE0xuL1DO9Fqp1nNZY0q1m",
											"-----END PRIVATE KEY-----",
											"*/",
											"",
											"// Public key",
											"/*",
											"-----BEGIN PUBLIC KEY-----",
											"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyOsWocLKTsIc0h64Gt0h",
											"Yn9OBSE3AIcsoF6HkvhsFEseh2jAjJFC00FTIEKFP+1QFH99rqIlYCw6NRSOr1rw",
											"Rm6dWW3+zEVaaivfD74UyuDzeactjgJqXd4t8+UoBmQj9aMSRP7hfpjFJL7UDifk",
											"S99qVPKGgMMz7gSyl/4wOTmT6LqumOXu2m64FWpWMhgiPGmSuUn7pGUzKteJg3PO",
											"GNreCL8EvxqklIkbE6e6+mo+RfpcA9L8lAaN3h+b+SdUfrexfE/wdiZfqCUEzyxc",
											"QcHDf9gBguWqq5+wQ6BlBtjWbW+lk6JWbAVGI4C+zHWBEBzM/zeFqDwlwhG1EFOa",
											"2QIDAQAB",
											"-----END PUBLIC KEY-----",
											"*/",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Basic Y2xpZW50LWp3dC1iZWFyZXI6Y2xpZW50LWp3dC1iZWFyZXItc2VjcmV0"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "assertion",
											"value": "{{assertionToken}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Release domain",
			"item": [
				{
					"name": "Delete domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abfa8366-3ee2-45b0-b658-0040b79d565c",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{management_url}}/management/domains/test",
							"host": [
								"{{management_url}}"
							],
							"path": [
								"management",
								"domains",
								"test"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
