version: 2.1

orbs:
  slack: circleci/slack@4.10.1
  keeper: gravitee-io/keeper@0.6.2
  gh: circleci/github-cli@2.2.0
  aws-s3: circleci/aws-s3@3.0
  helm: circleci/helm@2.0.1
  snyk: snyk/snyk@1.7.0

executors:
  ubuntu:
    parameters:
      class:
        description: The resource class. Default is medium.
        type: enum
        enum: ["medium", "large", "xlarge", "2xlarge"]
        default: "medium"
      version:
        description: the version of the machine. Default is 2204
        type: string
        default: "2204"
      tag:
        description: the tag of the machine. Default is current
        type: string
        default: "current"
      with_docker_layer_caching:
        description: should we use Docker Layer Caching mechanism. Default is false
        type: boolean
        default: false
    machine:
      image: 'ubuntu-<< parameters.version >>:<< parameters.tag >>'
      docker_layer_caching: << parameters.with_docker_layer_caching >>
    resource_class: '<< parameters.class >>'
  openjdk:
    parameters:
      class:
        description: The resource class. Default is medium.
        type: enum
        enum: ["small", "medium", "medium+", "large", "xlarge"]
        default: "medium"
      version:
        description: the version of the JDK. Default is 17.0
        type: string
        default: "17.0"
      with_node:
        description: should we use the "node" version of the image
        type: boolean
        default: false
    docker:
      - image: cimg/openjdk:<< parameters.version >><<# parameters.with_node >>-node<</ parameters.with_node >>
    resource_class: << parameters.class >>
  node-lts:
    parameters:
      class:
        description: The resource class
        type: enum
        enum: [ "small", "medium", "large", "xlarge" ]
        default: "medium"
    docker:
      - image: cimg/node:18.16
    resource_class: << parameters.class >>

parameters:
  gio_action:
    type: enum
    enum: [ release, publish_maven_central, publish_rpms, publish_docker_images, pull_requests, release_notes_am, release_helm , publish-images-azure-registry, release-version, release-alpha-version ]
    default: pull_requests
  gio_product:
    type: enum
    enum: [ am_v3, none ]
    default: none
  dry_run:
    type: boolean
    default: true
    description: "Run in dry run mode?"
  rc_requested:
    type: boolean
    default: false
    description: "Do we have to release a RC"
  graviteeio_version:
    type: string
    default: "cicd"
    description: "Release version number to use to publish the Docker nightly images ?"
  run-container-test:
    type: boolean
    default: false
  tag_latest:
    type: boolean
    default: false
    description: "Is this latest version of the Product ?"
  tag_latest_support:
    type: boolean
    default: true
    description: "Is this a latest support version of the Product ? (if so minor version tagging docker images). True by default."

commands:
  create_docker_context:
    steps:
      - run:
          name: "Create docker context for buildx"
          command: |
            docker context create tls-env
            docker buildx create tls-env --use
  publish_bundle:
    parameters:
      dry_run:
        type: boolean
    steps:
      - keeper/env-export:
          secret-url: keeper://Mqmplmfu17bDR5XRLmO1mQ/field/password
          var-name: AWS_ACCESS_KEY_ID
      - keeper/env-export:
          secret-url: keeper://3-pU56sIqcyWWw7HxhxjaQ/field/password
          var-name: AWS_SECRET_ACCESS_KEY
      - when:
          condition: << parameters.dry_run>>
          steps:
            - aws-s3/sync:
                arguments: |
                  --endpoint-url https://cellar-c2.services.clever-cloud.com \
                  --acl public-read
                from: ~/release/
                to: "s3://gravitee-dry-releases-downloads/"
      - when:
          condition:
            not: << pipeline.parameters.dry_run>>
          steps:
            - aws-s3/sync:
                arguments: |
                  --endpoint-url https://cellar-c2.services.clever-cloud.com \
                  --acl public-read
                from: ~/release/
                to: "s3://gravitee-releases-downloads/"
  restore-maven-job-cache:
    description: Restore Maven cache for a dedicated job
    parameters:
      jobName:
        description: The job name
        type: string
        default: ""
    steps:
      - restore_cache:
          keys:
            - gravitee-access-management-v1-<< parameters.jobName >>-{{ .Branch }}-{{ checksum "pom.xml" }}
            - gravitee-access-management-v1-<< parameters.jobName >>-{{ .Branch }}-
            - gravitee-access-management-v1-<< parameters.jobName >>-
  save-maven-job-cache:
    description: Restore Maven cache for a dedicated job
    parameters:
      jobName:
        description: The job name
        type: string
        default: ""
    steps:
      - run:
          name: "Exclude all AM artefacts from cache."
          command: rm -rf ~/.m2/repository/io/gravitee/am
      - save_cache:
          paths:
            - ~/.m2
          key: gravitee-access-management-v1-<< parameters.jobName >>-{{ .Branch }}-{{ checksum "pom.xml" }}
          when: always
  notify-on-failure:
    steps:
      - keeper/env-export:
          secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
          var-name: SLACK_ACCESS_TOKEN
      - slack/notify:
          channel: C0336B2E96K
          event: fail
          mentions: "@am_team"
          template: basic_fail_1
  notify-on-success:
    steps:
      - keeper/env-export:
          secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
          var-name: SLACK_ACCESS_TOKEN
      - slack/notify:
          channel: C0336B2E96K
          event: pass
          template: basic_success_1

  mvn_git_commit_id:
    steps:
      - run:
          name: "Used by maven maven package"
          command: |
            echo "export BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
            echo "export BUILD_NUMBER=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
            export GIT_COMMIT_ID=$(git rev-parse --short HEAD)
            echo "export GIT_COMMIT=${GIT_COMMIT_ID}" >> $BASH_ENV
            exit 0
  prepare-gpg:
    description: Prepare GPG command
    steps:
      - keeper/install
      - run:
          command: |
            ksm secret notation keeper://riW92t8X4tk4ZmQc8-FZ4Q/custom_field/armor_format_pub_key > pub.key
            gpg --import pub.key
            
            ksm secret notation keeper://riW92t8X4tk4ZmQc8-FZ4Q/custom_field/armor_format_private_key > private.key
            gpg --import --batch private.key
  package_bundle:
    description: Package Bundle for Gravtiee AM Community Edition
    parameters:
      dry_run:
        type: boolean
        default: true
        description: "Run in dry run mode?"
    steps:
      - restore-maven-job-cache:
          jobName: package_bundle
      - run:
          environment:
            DRY_RUN: << parameters.dry_run >>
          name: "Gravitee AM Community Edition Package Bundle"
          command: |
            export MVN_PRJ_VERSION=$(mvn -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec -q | tee -a /tmp/maven.logs; echo "$?" > /tmp/maven.exit.code)
            export RELEASE_VERSION_NUMBER=$(echo "${MVN_PRJ_VERSION}" | awk -F '-SNAPSHOT' '{print $1}')

            mkdir -p ~/release/graviteeio-am/components/gravitee-am-management-api/
            cp -R ~/project/gravitee-am-management-api/gravitee-am-management-api-standalone/gravitee-am-management-api-standalone-distribution/gravitee-am-management-api-standalone-distribution-zip/target/gravitee-am-management-api-standalone-${RELEASE_VERSION_NUMBER}.zip ~/release/graviteeio-am/components/gravitee-am-management-api/
            cd ~/release/graviteeio-am/components/gravitee-am-management-api/
            md5sum gravitee-am-management-api-standalone-${RELEASE_VERSION_NUMBER}.zip > gravitee-am-management-api-standalone-${RELEASE_VERSION_NUMBER}.zip.md5
            sha512sum gravitee-am-management-api-standalone-${RELEASE_VERSION_NUMBER}.zip > gravitee-am-management-api-standalone-${RELEASE_VERSION_NUMBER}.zip.sha512sum
            sha1sum gravitee-am-management-api-standalone-${RELEASE_VERSION_NUMBER}.zip > gravitee-am-management-api-standalone-${RELEASE_VERSION_NUMBER}.zip.sha1
            mkdir -p ~/release/graviteeio-am/distributions/graviteeio-am-full-${RELEASE_VERSION_NUMBER}/graviteeio-am-management-api-${RELEASE_VERSION_NUMBER}/
            cp -R ~/project/gravitee-am-management-api/gravitee-am-management-api-standalone/gravitee-am-management-api-standalone-distribution/target/distribution/* ~/release/graviteeio-am/distributions/graviteeio-am-full-${RELEASE_VERSION_NUMBER}/graviteeio-am-management-api-${RELEASE_VERSION_NUMBER}/

            mkdir -p ~/release/graviteeio-am/components/gravitee-am-gateway/
            cp -R ~/project/gravitee-am-gateway/gravitee-am-gateway-standalone/gravitee-am-gateway-standalone-distribution/gravitee-am-gateway-standalone-distribution-zip/target/gravitee-am-gateway-standalone-${RELEASE_VERSION_NUMBER}.zip ~/release/graviteeio-am/components/gravitee-am-gateway/
            cd ~/release/graviteeio-am/components/gravitee-am-gateway/
            md5sum gravitee-am-gateway-standalone-${RELEASE_VERSION_NUMBER}.zip > gravitee-am-gateway-standalone-${RELEASE_VERSION_NUMBER}.zip.md5
            sha512sum gravitee-am-gateway-standalone-${RELEASE_VERSION_NUMBER}.zip > gravitee-am-gateway-standalone-${RELEASE_VERSION_NUMBER}.zip.sha512sum
            sha1sum gravitee-am-gateway-standalone-${RELEASE_VERSION_NUMBER}.zip > gravitee-am-gateway-standalone-${RELEASE_VERSION_NUMBER}.zip.sha1
            mkdir -p ~/release/graviteeio-am/distributions/graviteeio-am-full-${RELEASE_VERSION_NUMBER}/graviteeio-am-gateway-${RELEASE_VERSION_NUMBER}/
            cp -R ~/project/gravitee-am-gateway/gravitee-am-gateway-standalone/gravitee-am-gateway-standalone-distribution/target/distribution/* ~/release/graviteeio-am/distributions/graviteeio-am-full-${RELEASE_VERSION_NUMBER}/graviteeio-am-gateway-${RELEASE_VERSION_NUMBER}/

            mkdir -p ~/release/graviteeio-am/components/gravitee-am-webui/
            cp -R ~/project/gravitee-am-ui/target/gravitee-am-webui-${RELEASE_VERSION_NUMBER}.zip ~/release/graviteeio-am/components/gravitee-am-webui/
            cd ~/release/graviteeio-am/components/gravitee-am-webui/
            md5sum gravitee-am-webui-${RELEASE_VERSION_NUMBER}.zip > gravitee-am-webui-${RELEASE_VERSION_NUMBER}.zip.md5
            sha512sum gravitee-am-webui-${RELEASE_VERSION_NUMBER}.zip > gravitee-am-webui-${RELEASE_VERSION_NUMBER}.zip.sha512sum
            sha1sum gravitee-am-webui-${RELEASE_VERSION_NUMBER}.zip > gravitee-am-webui-${RELEASE_VERSION_NUMBER}.zip.sha1
            mkdir -p ~/release/graviteeio-am/distributions/graviteeio-am-full-${RELEASE_VERSION_NUMBER}/graviteeio-am-management-ui-${RELEASE_VERSION_NUMBER}/
            cp -R ~/project/gravitee-am-ui/dist/* ~/release/graviteeio-am/distributions/graviteeio-am-full-${RELEASE_VERSION_NUMBER}/graviteeio-am-management-ui-${RELEASE_VERSION_NUMBER}/
            
            cd ~/release/graviteeio-am/distributions/
            zip -rm graviteeio-am-full-${RELEASE_VERSION_NUMBER}.zip graviteeio-am-full-${RELEASE_VERSION_NUMBER}
            md5sum graviteeio-am-full-${RELEASE_VERSION_NUMBER}.zip > graviteeio-am-full-${RELEASE_VERSION_NUMBER}.zip.md5
            sha512sum graviteeio-am-full-${RELEASE_VERSION_NUMBER}.zip > graviteeio-am-full-${RELEASE_VERSION_NUMBER}.zip.sha512sum
            sha1sum graviteeio-am-full-${RELEASE_VERSION_NUMBER}.zip > graviteeio-am-full-${RELEASE_VERSION_NUMBER}.zip.sha1
      - save-maven-job-cache:
          jobName: package_bundle
      - publish_bundle:
          dry_run: << parameters.dry_run>>
  git_config:
    description: This command runs the git config in your pipeline, for the bot user configured in your secret manager. It requires [bash]
    steps:
      - keeper/env-export:
          secret-url: keeper://IZd-yvsMopfQEa_0j1SDvg/field/login
          var-name: GIT_USER_NAME
      - keeper/env-export:
          secret-url: keeper://IZd-yvsMopfQEa_0j1SDvg/custom_field/email
          var-name: GIT_USER_EMAIL
      - keeper/env-export:
          secret-url: keeper://TIlcGPFq4rN5GvgnZb9hng/field/password
          var-name: GITHUB_TOKEN
      - add_ssh_keys:
          fingerprints:
            - "ac:88:23:8f:c6:0f:7d:f0:fc:df:73:20:34:56:02:6c"
      - run:
          name: Git Config
          command: |
            git config --global user.name "${GIT_USER_NAME}"
            git config --global user.email "${GIT_USER_EMAIL}"
  publish_rpms:
    description: Runs the commands to build n publish RPM Packages for Gravitee.io AM
    parameters:
      graviteeio_version:
        type: string
        default: ""
        description: "The Gravitee.io release version number of Gravitee.io AM, for which to build and publish all zip bundles"
    steps:
      - keeper/env-export:
          secret-url: keeper://8CG6HxY5gYsl-85eJKuIoA/field/password
          var-name: GIO_PACKAGECLOUD_TOKEN
      - run:
          environment:
            GRAVITEEIO_VERSION: << parameters.graviteeio_version >>
          name: "Gravitee AM : Build and Publish RPMs"
          command: |
            export MAJOR_VERSION_NUMBER=$(echo ${GRAVITEEIO_VERSION} | awk -F '.' '{print $1}')
            export GIT_GRAVITEE_PACKAGES_REPO=$(mktemp -d -t "git_gravitee_packages_repo-XXXXXXXXXX")
            
            git clone git@github.com:gravitee-io/packages.git ${GIT_GRAVITEE_PACKAGES_REPO}
            
            cd ${GIT_GRAVITEE_PACKAGES_REPO}/am/${MAJOR_VERSION_NUMBER}.x
            ./build.sh -v << parameters.graviteeio_version >>
            
            docker run --rm -v "${GIT_GRAVITEE_PACKAGES_REPO}/am/${MAJOR_VERSION_NUMBER}.x:/packages" -e PACKAGECLOUD_TOKEN=${GIO_PACKAGECLOUD_TOKEN} digitalocean/packagecloud push --yes --skip-errors --verbose graviteeio/rpms/el/7 /packages/*.rpm
  add-docker-image-in-snyk:
    parameters:
      docker-image-name:
        type: string
      version:
        type: string
    steps:
      - run:
          name: Add << parameters.docker-image-name >> << parameters.version >> to Snyk
          command: |
            curl --fail \
                 --include \
                 --request POST \
                 --header "Content-Type: application/json; charset=utf-8" \
                 --header "Authorization: token ${SNYK_API_TOKEN}" \
                 --data-binary "{
              \"target\": {
                \"name\": \"<< parameters.docker-image-name >>:<< parameters.version >>\"
              }
            }" \
            "https://api.snyk.io/api/v1/org/6a75be52-cf2f-40d4-8673-1d9c426f3bdb/integrations/${SNYK_INTEGRATION_ID}/import"

  cmd-helm-tests:
    description: execute the unit tests of the helm chart
    parameters:
      folder:
        type: string
        default: ""
        description: The name of the folder where tests to execute are.
      files:
        type: string
        default: ""
        description: The test suites files.
      output-file:
        type: string
        default: ""
        description: The name of the test result file.
    steps:
      - run:
          name: execute the units tests in << parameters.folder >>.
          command: helm unittest -3 -f '<< parameters.files >>' << parameters.folder >> -t JUnit -o << parameters.output-file >>

  cmd-helm-lint:
    description: Lint the helm charts available in the folder
    parameters:
      folder:
        type: string
        default: ""
        description: The name of the folder to check.
    steps:
      - run:
          name: Lint the helm charts available in << parameters.folder >>
          command: helm lint << parameters.folder >>

jobs:
  setup:
    docker:
      - image: 'cimg/base:stable'
    resource_class: small
    steps:
      - keeper/env-export:
          secret-url: keeper://7CgijuGiFDSLynRJt1Dm9w/custom_field/xml
          var-name: MAVEN_SETTINGS
      - run:
          command: echo $MAVEN_SETTINGS > .gravitee.settings.xml
      - persist_to_workspace:
          root: .
          paths:
            - .gravitee.settings.xml
  build:
    docker:
      - image: cimg/openjdk:17.0.1
    resource_class: large
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - restore-maven-job-cache:
          jobName: build_branch
      - run:
          name: Maven Package
          command: |
            mvn -s /tmp/.gravitee.settings.xml install
            cp ./gravitee-am-gateway/gravitee-am-gateway-standalone/gravitee-am-gateway-standalone-distribution/gravitee-am-gateway-standalone-distribution-zip/target/*.zip ~/
            cp ./gravitee-am-management-api/gravitee-am-management-api-standalone/gravitee-am-management-api-standalone-distribution/gravitee-am-management-api-standalone-distribution-zip/target/*.zip ~/
            cp ./gravitee-am-ui/target/*.zip ~/
      - save-maven-job-cache:
          jobName: build_branch
      - persist_to_workspace:
          root: ~/
          paths:
            - ./gravitee-am-gateway-standalone-*.zip
            - ./gravitee-am-management-api-standalone-*.zip
            - ./gravitee-am-webui-*.zip
  run_jest_tests_mongo:
    parameters:
      mongo_version:
        type: string
    machine:
      image: ubuntu-2204:2024.04.4
      docker_layer_caching: true
    resource_class: large
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: install test module dependencies
          command: npm --prefix gravitee-am-test i
      - run:
          name: Start Mongo
          command: |
            docker pull mongo:<< parameters.mongo_version >>
            docker run -d --name mongo_tmp --rm -p 27017:27017 mongo:<< parameters.mongo_version >>
      - run:
          name: Start FakeSMTP
          command: |
            docker pull gessnerfl/fake-smtp-server:1.10.4
            docker run -d --rm -p 5080:5080 -p 5025:5025 gessnerfl/fake-smtp-server:1.10.4
      - run:
          name: Wait services bootstrap
          command: |
            # Wait for Mongo & FakeSMTP to be up and running
            timeout 30s bash -c 'until nc -vz localhost 27017; do sleep 2; done'
            timeout 30s bash -c 'until nc -vz localhost 5025; do sleep 2; done'
      - run:
          name: Run Jest tests
          command: |

            # Prepare AM
            unzip /tmp/workspace/gravitee-am-gateway-standalone-*.zip
            unzip /tmp/workspace/gravitee-am-management-api-standalone-*.zip
            export AM_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
            curl --retry 4 --retry-delay 10 --retry-all-errors https://download.gravitee.io/plugins/services/gravitee-service-geoip-1.2.0.zip -o gravitee-am-gateway-standalone-${AM_VERSION}/plugins/gravitee-service-geoip-1.2.0.zip
            
            cp /tmp/workspace/gravitee-am-resource-mfa-mock-*.zip gravitee-am-management-api-standalone-${AM_VERSION}/plugins/
            cp /tmp/workspace/gravitee-am-resource-mfa-mock-*.zip gravitee-am-gateway-standalone-${AM_VERSION}/plugins/
            
            # EXPORT env var to start AM using SMTP Server
            export GRAVITEE_EMAIL_ENABLED=true
            export GRAVITEE_EMAIL_HOST=localhost
            export GRAVITEE_EMAIL_PORT=5025
            
            # Export env var for MFA rate limit
            export GRAVITEE_MFA_RATE_ENABLED=true
            export GRAVITEE_MFA_RATE_LIMIT=2
            export GRAVITEE_MFA_RATE_TIMEPERIOD=1
            export GRAVITEE_MFA_RATE_TIMEUNIT=Minutes
            
            # Reduce the sync frequency to avoid flaky test due to synchronization delay
            export gravitee_services_sync_cron="* * * * * *"
            
            # Start AM Management
            gravitee-am-management-api-standalone-${AM_VERSION}/bin/gravitee &
            # Start AM Gateway
            gravitee-am-gateway-standalone-${AM_VERSION}/bin/gravitee &
            # build & start CIBA Delegated Service
            mvn -P cicd -f gravitee-am-ciba-delegated-service/pom.xml package
            java -jar gravitee-am-ciba-delegated-service/target/gravitee-am-ciba-delegated-service-${AM_VERSION}.jar &
            # Wait for AM to be up and running
            timeout 120s bash -c 'until nc -vz localhost 8093; do sleep 2; done'
            timeout 120s bash -c 'until nc -vz localhost 8092; do sleep 2; done'
            # Run Jest tests
            npm --prefix gravitee-am-test run ci
      - keeper/env-export:
          secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
          var-name: SLACK_ACCESS_TOKEN
      - slack/notify:
          branch_pattern: ".+"
          event: fail
          mentions: "@am_team"
          template: basic_fail_1
  run_jest_tests_psql:
    parameters:
      psql_version:
        type: string
    machine:
      image: ubuntu-2204:2024.04.4
      docker_layer_caching: true
    resource_class: large
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: install test module dependencies
          command: npm --prefix gravitee-am-test i
      - run:
          name: Start PostgreSQL
          command: |
            docker pull postgres:<< parameters.psql_version >>
            docker run -d --name postgresql_tmp --rm -p 5432:5432 -e POSTGRES_PASSWORD=T0pS3cr3t postgres:<< parameters.psql_version >>
      - run:
          name: Start FakeSMTP
          command: |
            docker pull gessnerfl/fake-smtp-server:1.10.4
            docker run -d --rm -p 5080:5080 -p 5025:5025 gessnerfl/fake-smtp-server:1.10.4
      - run:
          name: Wait services bootstrap
          command: |
            # Wait for PSQL & FakeSMTP to be up and running
            timeout 30s bash -c 'until nc -vz localhost 5432; do sleep 2; done'
            timeout 30s bash -c 'until nc -vz localhost 5025; do sleep 2; done'
      - run:
          name: Run Jest tests
          command: |
            # Prepare AM
            unzip /tmp/workspace/gravitee-am-gateway-standalone-*.zip
            unzip /tmp/workspace/gravitee-am-management-api-standalone-*.zip
            export AM_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
            curl --retry 4 --retry-delay 10 --retry-all-errors https://download.gravitee.io/plugins/services/gravitee-service-geoip-1.2.0.zip -o gravitee-am-gateway-standalone-${AM_VERSION}/plugins/gravitee-service-geoip-1.2.0.zip
            
            cp /tmp/workspace/gravitee-am-resource-mfa-mock-*.zip gravitee-am-management-api-standalone-${AM_VERSION}/plugins/
            cp /tmp/workspace/gravitee-am-resource-mfa-mock-*.zip gravitee-am-gateway-standalone-${AM_VERSION}/plugins/
            
            # copy r2dbc & jdbc drivers
            curl --retry 4 --retry-delay 10 --retry-all-errors https://jdbc.postgresql.org/download/postgresql-42.3.3.jar -o postgresql-42.3.3.jar
            curl --retry 4 --retry-delay 10 --retry-all-errors https://repo1.maven.org/maven2/io/r2dbc/r2dbc-postgresql/0.8.9.RELEASE/r2dbc-postgresql-0.8.9.RELEASE.jar -o r2dbc-postgresql-0.8.9.RELEASE.jar

            mkdir -p gravitee-am-gateway-standalone-${AM_VERSION}/plugins/ext/reporter-am-jdbc gravitee-am-gateway-standalone-${AM_VERSION}/plugins/ext/repository-am-jdbc
            mkdir -p gravitee-am-management-api-standalone-${AM_VERSION}/plugins/ext/reporter-am-jdbc gravitee-am-management-api-standalone-${AM_VERSION}/plugins/ext/repository-am-jdbc

            cp postgresql-42.3.3.jar gravitee-am-management-api-standalone-${AM_VERSION}/plugins/ext/repository-am-jdbc/
            cp r2dbc-postgresql-0.8.9.RELEASE.jar gravitee-am-management-api-standalone-${AM_VERSION}/plugins/ext/repository-am-jdbc/
            cp r2dbc-postgresql-0.8.9.RELEASE.jar gravitee-am-management-api-standalone-${AM_VERSION}/plugins/ext/reporter-am-jdbc/

            cp postgresql-42.3.3.jar gravitee-am-gateway-standalone-${AM_VERSION}/plugins/ext/repository-am-jdbc/
            cp r2dbc-postgresql-0.8.9.RELEASE.jar gravitee-am-gateway-standalone-${AM_VERSION}/plugins/ext/repository-am-jdbc/
            cp r2dbc-postgresql-0.8.9.RELEASE.jar gravitee-am-gateway-standalone-${AM_VERSION}/plugins/ext/reporter-am-jdbc/
            
            # EXPORT env var to start AM using SMTP Server
            export GRAVITEE_EMAIL_ENABLED=true
            export GRAVITEE_EMAIL_HOST=localhost
            export GRAVITEE_EMAIL_PORT=5025
            
            # Export env var for MFA rate limit
            export GRAVITEE_MFA_RATE_ENABLED=true
            export GRAVITEE_MFA_RATE_LIMIT=2
            export GRAVITEE_MFA_RATE_TIMEPERIOD=1
            export GRAVITEE_MFA_RATE_TIMEUNIT=Minutes
            
            # EXPORT env var to start AM using PSQL
            export GRAVITEE_MANAGEMENT_TYPE=jdbc
            export GRAVITEE_MANAGEMENT_JDBC_DRIVER=postgresql
            export GRAVITEE_MANAGEMENT_JDBC_HOST=localhost
            export GRAVITEE_MANAGEMENT_JDBC_PORT=5432
            export GRAVITEE_MANAGEMENT_JDBC_DATABASE=postgres
            export GRAVITEE_MANAGEMENT_JDBC_USERNAME=postgres
            export GRAVITEE_MANAGEMENT_JDBC_PASSWORD=T0pS3cr3t
            export GRAVITEE_OAUTH2_TYPE=jdbc
            export GRAVITEE_OAUTH2_JDBC_DRIVER=postgresql
            export GRAVITEE_OAUTH2_JDBC_HOST=localhost
            export GRAVITEE_OAUTH2_JDBC_PORT=5432
            export GRAVITEE_OAUTH2_JDBC_DATABASE=postgres
            export GRAVITEE_OAUTH2_JDBC_USERNAME=postgres
            export GRAVITEE_OAUTH2_JDBC_PASSWORD=T0pS3cr3t
            
            # Reduce the sync frequency to avoid flaky test due to synchronization delay
            export gravitee_services_sync_cron="* * * * * *"
            
            # Start AM Management
            gravitee-am-management-api-standalone-${AM_VERSION}/bin/gravitee &
            # Start AM Gateway
            gravitee-am-gateway-standalone-${AM_VERSION}/bin/gravitee &
            # build & start CIBA Delegated Service
            mvn -P cicd -f gravitee-am-ciba-delegated-service/pom.xml package
            java -jar gravitee-am-ciba-delegated-service/target/gravitee-am-ciba-delegated-service-${AM_VERSION}.jar &
            # Wait for AM to be up and running
            timeout 120s bash -c 'until nc -vz localhost 8093; do sleep 2; done'
            timeout 120s bash -c 'until nc -vz localhost 8092; do sleep 2; done'
            # Run Jest tests
            npm --prefix gravitee-am-test run ci
      - keeper/env-export:
          secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
          var-name: SLACK_ACCESS_TOKEN
      - slack/notify:
          branch_pattern: ".+"
          event: fail
          mentions: "@am_team"
          template: basic_fail_1
  run_postman_tests_mongo:
    parameters:
      mongo_version:
        type: string
    docker:
      - image: cimg/openjdk:17.0.5-node
      - image: mongo:<< parameters.mongo_version >>
    resource_class: large
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Install Newman
          command: sudo npm i -g newman
      - run:
          name: Wait for Mongo to be up and running
          command: timeout 15s bash -c 'until nc -vz localhost 27017; do sleep 2; done'
      - run:
          name: Run API, GW and Postman tests
          command: |
            # Prepare AM
            unzip /tmp/workspace/gravitee-am-gateway-standalone-*.zip
            unzip /tmp/workspace/gravitee-am-management-api-standalone-*.zip
            export AM_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
            curl --retry 4 --retry-delay 10 --retry-all-errors https://download.gravitee.io/plugins/services/gravitee-service-geoip-1.2.0.zip -o gravitee-am-gateway-standalone-${AM_VERSION}/plugins/gravitee-service-geoip-1.2.0.zip
            
            cp /tmp/workspace/gravitee-am-resource-mfa-mock-*.zip gravitee-am-management-api-standalone-${AM_VERSION}/plugins/
            cp /tmp/workspace/gravitee-am-resource-mfa-mock-*.zip gravitee-am-gateway-standalone-${AM_VERSION}/plugins/

            # Reduce the sync frequency to avoid flaky test due to synchronization delay
            export gravitee_services_sync_cron="* * * * * *"
            
            # Start AM Management
            gravitee-am-management-api-standalone-${AM_VERSION}/bin/gravitee &
            # Start AM Gateway
            gravitee-am-gateway-standalone-${AM_VERSION}/bin/gravitee &
            # build & start CIBA Delegated Service
            mvn -P cicd -f gravitee-am-ciba-delegated-service/pom.xml package
            java -jar gravitee-am-ciba-delegated-service/target/gravitee-am-ciba-delegated-service-${AM_VERSION}.jar &
            # Wait for AM to be up and running
            timeout 120s bash -c 'until nc -vz localhost 8093; do sleep 2; done'
            timeout 120s bash -c 'until nc -vz localhost 8092; do sleep 2; done'
            # Run Postman tests
            make postman
      - keeper/env-export:
          secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
          var-name: SLACK_ACCESS_TOKEN
      - slack/notify:
          branch_pattern: ".+"
          event: fail
          mentions: "@am_team"
          template: basic_fail_1
  run_postman_tests_psql:
    parameters:
      psql_version:
        type: string
    docker:
      - image: cimg/openjdk:17.0.5-node
      - image: postgres:<< parameters.psql_version >>
        environment:
          POSTGRES_PASSWORD: T0pS3cr3t
    resource_class: large
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Install Newman
          command: sudo npm i -g newman
      - run:
          name: Wait for PSQL to be up and running
          command: timeout 15s bash -c 'until nc -vz localhost 5432; do sleep 2; done'
      - run:
          name: Run API, GW and Postman tests
          command: |
            # Prepare AM
            unzip /tmp/workspace/gravitee-am-gateway-standalone-*.zip
            unzip /tmp/workspace/gravitee-am-management-api-standalone-*.zip
            export AM_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
            curl --retry 4 --retry-delay 10 --retry-all-errors https://download.gravitee.io/plugins/services/gravitee-service-geoip-1.2.0.zip -o gravitee-am-gateway-standalone-${AM_VERSION}/plugins/gravitee-service-geoip-1.2.0.zip
            
            cp /tmp/workspace/gravitee-am-resource-mfa-mock-*.zip gravitee-am-management-api-standalone-${AM_VERSION}/plugins/
            cp /tmp/workspace/gravitee-am-resource-mfa-mock-*.zip gravitee-am-gateway-standalone-${AM_VERSION}/plugins/
            
            # copy r2dbc & jdbc drivers
            curl --retry 4 --retry-delay 10 --retry-all-errors https://jdbc.postgresql.org/download/postgresql-42.3.3.jar -o postgresql-42.3.3.jar
            curl --retry 4 --retry-delay 10 --retry-all-errors https://repo1.maven.org/maven2/io/r2dbc/r2dbc-postgresql/0.8.9.RELEASE/r2dbc-postgresql-0.8.9.RELEASE.jar -o r2dbc-postgresql-0.8.9.RELEASE.jar

            mkdir -p gravitee-am-gateway-standalone-${AM_VERSION}/plugins/ext/reporter-am-jdbc gravitee-am-gateway-standalone-${AM_VERSION}/plugins/ext/repository-am-jdbc
            mkdir -p gravitee-am-management-api-standalone-${AM_VERSION}/plugins/ext/reporter-am-jdbc gravitee-am-management-api-standalone-${AM_VERSION}/plugins/ext/repository-am-jdbc

            cp postgresql-42.3.3.jar gravitee-am-management-api-standalone-${AM_VERSION}/plugins/ext/repository-am-jdbc/
            cp r2dbc-postgresql-0.8.9.RELEASE.jar gravitee-am-management-api-standalone-${AM_VERSION}/plugins/ext/repository-am-jdbc/
            cp r2dbc-postgresql-0.8.9.RELEASE.jar gravitee-am-management-api-standalone-${AM_VERSION}/plugins/ext/reporter-am-jdbc/

            cp postgresql-42.3.3.jar gravitee-am-gateway-standalone-${AM_VERSION}/plugins/ext/repository-am-jdbc/
            cp r2dbc-postgresql-0.8.9.RELEASE.jar gravitee-am-gateway-standalone-${AM_VERSION}/plugins/ext/repository-am-jdbc/
            cp r2dbc-postgresql-0.8.9.RELEASE.jar gravitee-am-gateway-standalone-${AM_VERSION}/plugins/ext/reporter-am-jdbc/
            # EXPORT env vart to start AM using PSQL
            export GRAVITEE_MANAGEMENT_TYPE=jdbc
            export GRAVITEE_MANAGEMENT_JDBC_DRIVER=postgresql
            export GRAVITEE_MANAGEMENT_JDBC_HOST=localhost
            export GRAVITEE_MANAGEMENT_JDBC_PORT=5432
            export GRAVITEE_MANAGEMENT_JDBC_DATABASE=postgres
            export GRAVITEE_MANAGEMENT_JDBC_USERNAME=postgres
            export GRAVITEE_MANAGEMENT_JDBC_PASSWORD=T0pS3cr3t
            export GRAVITEE_OAUTH2_TYPE=jdbc
            export GRAVITEE_OAUTH2_JDBC_DRIVER=postgresql
            export GRAVITEE_OAUTH2_JDBC_HOST=localhost
            export GRAVITEE_OAUTH2_JDBC_PORT=5432
            export GRAVITEE_OAUTH2_JDBC_DATABASE=postgres
            export GRAVITEE_OAUTH2_JDBC_USERNAME=postgres
            export GRAVITEE_OAUTH2_JDBC_PASSWORD=T0pS3cr3t
            
            # Reduce the sync frequency to avoid flaky test due to synchronization delay
            export gravitee_services_sync_cron="* * * * * *"
            
            # Start AM Management
            gravitee-am-management-api-standalone-${AM_VERSION}/bin/gravitee &
            # Start AM Gateway
            gravitee-am-gateway-standalone-${AM_VERSION}/bin/gravitee &
            # build & start CIBA Delegated Service
            mvn -P cicd -f gravitee-am-ciba-delegated-service/pom.xml package
            java -jar gravitee-am-ciba-delegated-service/target/gravitee-am-ciba-delegated-service-${AM_VERSION}.jar &
            # Wait for AM to be up and running
            timeout 120s bash -c 'until nc -vz localhost 8093; do sleep 2; done'
            timeout 120s bash -c 'until nc -vz localhost 8092; do sleep 2; done'
            # Run Postman tests
            make postman
      - keeper/env-export:
          secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
          var-name: SLACK_ACCESS_TOKEN
      - slack/notify:
          branch_pattern: ".+"
          event: fail
          mentions: "@am_team"
          template: basic_fail_1
  run_testcontainer_tests:
    executor:
      name: ubuntu
      class: "xlarge"
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - restore-maven-job-cache:
          jobName: run_testcontainer_tests
      - run:
          name: Build
          command: |
            mvn install -pl \!gravitee-am-ui -Pcicd -DskipTests -Dmaven.javadoc.skip=true -s /tmp/.gravitee.settings.xml
      - save-maven-job-cache:
          jobName: run_testcontainer_tests
  publish-images-azure-registry:
    docker:
      - image: cimg/openjdk:17.0.1
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - setup_remote_docker
      - keeper/env-export:
          secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/login
          var-name: AZURE_DOCKER_REGISTRY_USERNAME
      - keeper/env-export:
          secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/password
          var-name: AZURE_DOCKER_REGISTRY_PASSWORD
      - run:
          name: Compute Tag for Docker images
          command: |
            # Compute tag with branch name, commmit SHA and timestamp. Then slugify it to be sure it can be handled by Docker
            export TAG=$(echo "${CIRCLE_BRANCH:0:15}-${CIRCLE_SHA1:0:7}-$(date +%s)" | sed -E 's/[~^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr A-Z a-z)
            echo "export TAG=$TAG" >> $BASH_ENV
            echo $TAG > /tmp/docker-tag.txt

            # create a latest tag for the given branch to avoid flooding SNYK project
            export TAG_LATEST=$(echo "${CIRCLE_BRANCH}-latest")
            echo "export TAG_LATEST=$TAG_LATEST" >> $BASH_ENV
      - create_docker_context
      - run:
          name: Build Management API Docker Image to Azure Registry
          when: always
          command: |
            export AM_VERSION=$(mvn -s /tmp/.gravitee.settings.xml -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
            export IMAGE_TAG=graviteeio.azurecr.io/am-management-api:${TAG}
            export IMAGE_TAG_LATEST=graviteeio.azurecr.io/am-management-api:${TAG_LATEST}
            
            echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login --username $AZURE_DOCKER_REGISTRY_USERNAME --password-stdin graviteeio.azurecr.io
            docker buildx build --push --platform=linux/arm64,linux/amd64 -f docker/management-api/Dockerfile-dev --build-arg GRAVITEEAM_VERSION=${AM_VERSION} -t ${IMAGE_TAG} -t ${IMAGE_TAG_LATEST} /tmp
      - when:
          condition:
            matches: { pattern: "^(\\d+\\.\\d+\\.x)|master$", value: << pipeline.git.branch >> }
          steps:
            - keeper/env-export:
                secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_am_org_api_token
                var-name: SNYK_API_TOKEN
            - keeper/env-export:
                secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_am_acr_integration_id
                var-name: SNYK_INTEGRATION_ID
            - add-docker-image-in-snyk:
                docker-image-name: am-management-api
                version: ${TAG_LATEST}
      - run:
          name: Build Gateway Docker Image to Azure Registry
          when: always
          command: |
            export AM_VERSION=$(mvn -s /tmp/.gravitee.settings.xml -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
            export IMAGE_TAG=graviteeio.azurecr.io/am-gateway:${TAG}
            export IMAGE_TAG_LATEST=graviteeio.azurecr.io/am-gateway:${TAG_LATEST}
            
            echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login --username $AZURE_DOCKER_REGISTRY_USERNAME --password-stdin graviteeio.azurecr.io
            docker buildx build --push --platform=linux/arm64,linux/amd64 -f docker/gateway/Dockerfile-dev --build-arg GRAVITEEAM_VERSION=${AM_VERSION} -t ${IMAGE_TAG} -t ${IMAGE_TAG_LATEST} /tmp
      - when:
          condition:
            matches: { pattern: "^(\\d+\\.\\d+\\.x)|master$", value: << pipeline.git.branch >> }
          steps:
            - keeper/env-export:
                secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_am_org_api_token
                var-name: SNYK_API_TOKEN
            - keeper/env-export:
                secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_am_acr_integration_id
                var-name: SNYK_INTEGRATION_ID
            - add-docker-image-in-snyk:
                docker-image-name: am-gateway
                version: ${TAG_LATEST}
      - run:
          name: Build Web UI Docker Image to Azure Registry
          when: always
          command: |
            cp -fr docker/management-ui/config /tmp/
            export AM_VERSION=$(mvn -s /tmp/.gravitee.settings.xml -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
            export IMAGE_TAG=graviteeio.azurecr.io/am-management-ui:${TAG}
            export IMAGE_TAG_LATEST=graviteeio.azurecr.io/am-management-ui:${TAG_LATEST}
            
            echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login --username $AZURE_DOCKER_REGISTRY_USERNAME --password-stdin graviteeio.azurecr.io
            docker buildx build --push --platform=linux/arm64,linux/amd64 -f docker/management-ui/Dockerfile-dev --build-arg GRAVITEEAM_VERSION=${AM_VERSION} -t ${IMAGE_TAG} -t ${IMAGE_TAG_LATEST} /tmp
      - when:
          condition:
            matches: { pattern: "^(\\d+\\.\\d+\\.x)|master$", value: << pipeline.git.branch >> }
          steps:
            - keeper/env-export:
                secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_am_org_api_token
                var-name: SNYK_API_TOKEN
            - keeper/env-export:
                secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_am_acr_integration_id
                var-name: SNYK_INTEGRATION_ID
            - add-docker-image-in-snyk:
                docker-image-name: am-management-ui
                version: ${TAG_LATEST}
      - persist_to_workspace:
          root: /tmp
          paths:
            - ./docker-tag.txt

  deploy-on-aks:
    docker:
      - image: mcr.microsoft.com/azure-cli:2.42.0
    resource_class: small
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Install Helm
          command: |
            curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
            helm version
      - run:
          name: Install Kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
            kubectl version --client=true
      - add_ssh_keys:
          fingerprints:
            - "ac:88:23:8f:c6:0f:7d:f0:fc:df:73:20:34:56:02:6c"
      - run:
          name: Setup Git config and clone cloud-am repo
          command: |
            # For details see https://circleci.com/docs/2.0/gh-bb-integration/#establishing-the-authenticity-of-an-ssh-host
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            # Add SSH Key
            export LOCAL_SSH_PRVIKEY="${HOME}/.ssh/id_rsa_ac88238fc60f7df0fcdf73203456026c"
            ssh-add -D
            ssh-add "${LOCAL_SSH_PRVIKEY}"
            git clone --branch devs-preprod git@github.com:gravitee-io/cloud-am.git
      - run:
          name: Helm upgrade and 🚀 Mongo and JDBC instances
          command: |
            export TAG=$(cat /tmp/docker-tag.txt)
            
            az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
            az aks get-credentials --admin --resource-group Devs-Preprod-Hosted --name gravitee-devs-preprod-aks-cluster
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
            helm upgrade --repo https://helm.gravitee.io \
                        --install am-master \
                        -n am-master-dev \
                        -f ./cloud-am/devs-preprod/values.yaml am \
                        --set "api.image.repository=graviteeio.azurecr.io/am-management-api" \
                        --set "api.image.tag=${TAG}" \
                        --set "gateway.image.repository=graviteeio.azurecr.io/am-gateway" \
                        --set "gateway.image.tag=${TAG}" \
                        --set "ui.image.repository=graviteeio.azurecr.io/am-management-ui" \
                        --set "ui.image.tag=${TAG}"
            helm upgrade --repo https://helm.gravitee.io \
                        --install am-psql \
                        -n am-master-postgres-dev \
                        -f ./cloud-am/devs-preprod/values-psql.yaml am \
                        --set "api.image.repository=graviteeio.azurecr.io/am-management-api" \
                        --set "api.image.tag=${TAG}" \
                        --set "gateway.image.repository=graviteeio.azurecr.io/am-gateway" \
                        --set "gateway.image.tag=${TAG}" \
                        --set "ui.image.repository=graviteeio.azurecr.io/am-management-ui" \
                        --set "ui.image.tag=${TAG}"
            else
            # create namespace if not exist (dry-run will generate YAML manifest and apply will create or update the ns using the manifest)
            kubectl create namespace am-${CIRCLE_BRANCH//./-}-dev --dry-run=client -o yaml | kubectl apply -f -
            # replace verison Pattern into generic maint configuration
            sed -i 's#__BRANCH_NAME_SANITIZED__#'${CIRCLE_BRANCH//./-}'#g' ./cloud-am/devs-preprod/values-maint-3.21.x.yaml
            helm upgrade --repo https://helm.gravitee.io \
                                    --install am-${CIRCLE_BRANCH//./-} \
                                    -n am-${CIRCLE_BRANCH//./-}-dev \
                                    -f ./cloud-am/devs-preprod/values-maint-3.21.x.yaml am \
                                    --set "api.image.repository=graviteeio.azurecr.io/am-management-api" \
                                    --set "api.image.tag=${TAG}" \
                                    --set "gateway.image.repository=graviteeio.azurecr.io/am-gateway" \
                                    --set "gateway.image.tag=${TAG}" \
                                    --set "ui.image.repository=graviteeio.azurecr.io/am-management-ui" \
                                    --set "ui.image.tag=${TAG}"
            fi
  purge-azure-registry:
    docker:
      - image: mcr.microsoft.com/azure-cli:latest
    resource_class: small
    steps:
      - run:
          name: 🗑 Let's purge all AM images older than 1d
          command: |
            az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
            az acr run --cmd "acr purge --filter 'am-gateway:master-.*' --untagged --ago 1d --keep 3" --registry graviteeio /dev/null
            az acr run --cmd "acr purge --filter 'am-management-api:master-.*' --untagged --ago 1d --keep 3" --registry graviteeio /dev/null
            az acr run --cmd "acr purge --filter 'am-management-ui:master-.*' --untagged --ago 1d --keep 3" --registry graviteeio /dev/null
            # use an iteration from 5 to 20 to avoid updating the ci config at each version
            for minor in `seq 5 20`
            do
              PURGE_GW="acr purge --filter 'am-gateway:3-${minor}-x-.*' --untagged --ago 1d --keep 3"
              az acr run --cmd "$PURGE_GW" --registry graviteeio /dev/null
              PURGE_API="acr purge --filter 'am-management-api:3-${minor}-x-.*' --untagged --ago 1d --keep 3"
              az acr run --cmd "$PURGE_API" --registry graviteeio /dev/null
              PURGE_UI="acr purge --filter 'am-management-ui:3-${minor}-x-.*' --untagged --ago 1d --keep 3"
              az acr run --cmd "$PURGE_UI" --registry graviteeio /dev/null
            done
  coverage_build:
    docker:
      - image: cimg/openjdk:17.0.1
    resource_class: large
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - restore-maven-job-cache:
          jobName: coverage_build
      - run:
          name: Maven Package
          command: |
            export AM_VERSION=$(mvn -U -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
            echo $AM_VERSION > am.version
            echo $AM_VERSION
            mvn -s /tmp/.gravitee.settings.xml verify -pl \!gravitee-am-ui
      - persist_to_workspace:
          root: .
          paths:
            - ./*
      - save-maven-job-cache:
          jobName: coverage_build
  frontend_version_build:
    docker:
      - image: cimg/openjdk:17.0.1
    resource_class: small
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - restore_cache:
          keys:
            - gio-gravitee-pull-requests-dependencies-{{ .Branch }}-{{ checksum "pom.xml" }}
            - gio-gravitee-pull-requests-dependencies
      - run:
          name: Maven Package
          command: |
            export AM_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
            echo $AM_VERSION > gravitee-am-ui/am.version
      - persist_to_workspace:
          root: .
          paths:
            - ./*
  run_sonarcloud_analysis:
    description: A job that run Sonarcloud analysis
    parameters:
      working_directory:
        description: "Directory where the Sonarcloud analysis will be run"
        default: "."
        type: string
    docker:
      - image: sonarsource/sonar-scanner-cli:5
    resource_class: xlarge
    steps:
      #      - run:
      #          name: Add SSH tool
      #          command: apk add --no-cache openssh
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - gravitee-access-management-v1-sonarcloud-analysis-{{ .Branch }}-{{ checksum "pom.xml" }}
            - gravitee-access-management-v1-sonarcloud-analysis-{{ .Branch }}-
            - gravitee-access-management-v1-sonarcloud-analysis-
      - keeper/env-export:
          secret-url: keeper://9x9YgyU6DWzux4DPoHAzDQ/field/password
          var-name: SONAR_TOKEN
      - run:
          name: Run Sonarcloud Analysis
          working_directory: << parameters.working_directory >>
          command: |
            export AM_VERSION=$(cat ./am.version)
            sonar-scanner -Dsonar.projectVersion=${AM_VERSION}
      - save_cache:
          paths:
            - /opt/sonar-scanner/.sonar/cache
          key: gravitee-access-management-v1-sonarcloud-analysis-{{ .Branch }}-{{ checksum "pom.xml" }}
          when: always
  pull_requests_ce:
    executor:
      name: openjdk
      class: large
      # flapdoodle.embed.mongo doesn't work with 11.0.17
      version: "11.0.16"
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - restore-maven-job-cache:
          jobName: pull_requests
      - mvn_git_commit_id
      - run:
          name: "Maven Package and deploy to Artifactory [gravitee-snapshots] repository"
          command: |
            mvn -s /tmp/.gravitee.settings.xml -P gio-artifactory-snapshot clean deploy
      - save-maven-job-cache:
          jobName: pull_requests
      - run:
          name: "Maven Package and deploy to Nexus Snapshots"
          command: |
            mvn -s /tmp/.gravitee.settings.xml deploy -DskipTests
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - run:
          name: copying zip files
          command: |
            cp ./gravitee-am-gateway/gravitee-am-gateway-standalone/gravitee-am-gateway-standalone-distribution/gravitee-am-gateway-standalone-distribution-zip/target/*.zip ~/
            cp ./gravitee-am-management-api/gravitee-am-management-api-standalone/gravitee-am-management-api-standalone-distribution/gravitee-am-management-api-standalone-distribution-zip/target/*.zip ~/
            cp ./gravitee-am-ui/target/*.zip ~/
            cp ./gravitee-am-resource/gravitee-am-resource-mfa-mock/target/*.zip ~/
      - persist_to_workspace:
          root: ~/
          paths:
            - ./gravitee-am-gateway-standalone-*.zip
            - ./gravitee-am-management-api-standalone-*.zip
            - ./gravitee-am-webui-*.zip
            - ./gravitee-am-resource-mfa-mock-*.zip

  release:
    parameters:
      dry_run:
        type: boolean
        default: true
        description: "Run in dry run mode?"
      rc_requested:
        type: boolean
        default: false
        description: "Do we have to release a RC"
    executor:
      name: openjdk
      class: xlarge
      version: "11.0.16"
    environment:
      DRY_RUN: << parameters.dry_run >>
      RC_REQUESTED: << parameters.rc_requested >>
    steps:
      - checkout
      - restore-maven-job-cache:
          jobName: releaseV2
      - attach_workspace:
          at: /tmp
      - prepare-gpg
      - run:
          name: Maven Prepare Release
          command: |
            # 1./  Update maven dependencies versions from properties
            mvn -s /tmp/.gravitee.settings.xml -B -U versions:update-properties -Dmaven.version.rules.serverId=artifactory-gravitee-releases -Dincludes=io.gravitee.*:* -DallowMajorUpdates=false -DallowMinorUpdates=false -DallowIncrementalUpdates=false -DgenerateBackupPoms=false
            # 2./ Now  calculate the maven project verison with the maven exec plugin
            export MVN_PRJ_VERSION=$(mvn -s /tmp/.gravitee.settings.xml -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec -q | tee -a /tmp/maven.logs; echo "$?" > /tmp/maven.exit.code)
            
            export MVN_PRJ_VERSION=$(echo "${MVN_PRJ_VERSION}" | awk -F '-SNAPSHOT' '{print $1}')
            echo "${MVN_PRJ_VERSION}" > /tmp/gio.maven.project.release.version
            
            export MVN_PRJ_VERSION_MAJOR=$(cat /tmp/gio.maven.project.release.version | awk -F '.' '{print $1}')
            export MVN_PRJ_VERSION_MINOR=$(cat /tmp/gio.maven.project.release.version | awk -F '.' '{print $2}')
            export MVN_PRJ_VERSION_PATCH=$(cat /tmp/gio.maven.project.release.version | awk -F '.' '{print $3}' | awk -F '-' '{print $1}')
            export MVN_PRJ_VERSION_QUALIFIER=$(cat /tmp/gio.maven.project.release.version | awk -F '-' '{print $2}' | awk -F 'alpha.' '{print $2}')
            
            if [ "${RC_REQUESTED}" == "true" ]; then
              if [ "${MVN_PRJ_VERSION_QUALIFIER}x" == "x" ]; then
                export MVN_PRJ_VERSION_QUALIFIER="1"
              fi;
            
              export MVN_PRJ_VERSION="${MVN_PRJ_VERSION_MAJOR}.${MVN_PRJ_VERSION_MINOR}.${MVN_PRJ_VERSION_PATCH}-alpha.${MVN_PRJ_VERSION_QUALIFIER}"
              echo "${MVN_PRJ_VERSION}" > /tmp/gio.maven.project.release.version
            else
            
              export MVN_PRJ_VERSION="${MVN_PRJ_VERSION_MAJOR}.${MVN_PRJ_VERSION_MINOR}.${MVN_PRJ_VERSION_PATCH}"
              echo "${MVN_PRJ_VERSION}" > /tmp/gio.maven.project.release.version
            fi;

            # 2./ and then we can run the [mvn -s /tmp/.gravitee.settings.xml -B versions:set -DnewVersion=1.3.1 -DgenerateBackupPoms=false]
            mvn -s /tmp/.gravitee.settings.xml -B versions:set -DnewVersion=${MVN_PRJ_VERSION} -DgenerateBackupPoms=false

      - mvn_git_commit_id
      - when:
          condition:
            not: << parameters.dry_run>>
          steps:
            - run:
                name: "Maven Test, Package, and Deploy to Gravitee's private Artifactory"
                command: |
                  mvn -s /tmp/.gravitee.settings.xml -B -U -P gio-artifactory-release,gio-release clean deploy
      - when:
          condition: << parameters.dry_run>>
          steps:
            - run:
                name: "Maven Test, Package and install"
                command: |
                  mvn -s /tmp/.gravitee.settings.xml -B -U -P gio-artifactory-release,gio-release clean install
      - save-maven-job-cache:
          jobName: releaseV2

      # ---
      # Package Bundle Must succeed, before nexus staging is done : Package bundle is idempotnent and non immutable, whereas NExus staging and Git release are immutable
      - package_bundle:
          dry_run: << parameters.dry_run >>
      - git_config
      - run:
          name: Git release
          command: |

            export MVN_PRJ_VERSION=$(cat /tmp/gio.maven.project.release.version)
            export MVN_PRJ_VERSION_MAJOR=$(cat /tmp/gio.maven.project.release.version | awk -F '.' '{print $1}')
            export MVN_PRJ_VERSION_MINOR=$(cat /tmp/gio.maven.project.release.version | awk -F '.' '{print $2}')
            export MVN_PRJ_VERSION_PATCH=$(cat /tmp/gio.maven.project.release.version | awk -F '.' '{print $3}' | awk -F '-' '{print $1}')
            export MVN_PRJ_VERSION_QUALIFIER=$(cat /tmp/gio.maven.project.release.version | awk -F '-' '{print $2}' | awk -F 'alpha.' '{print $2}')

            export CURRENT_GIT_BRANCH=$(git status | grep 'On branch' | awk '{print $3}')

            git add --update
            git commit -m "${MVN_PRJ_VERSION}"
            git tag ${MVN_PRJ_VERSION}

            export MAINTENANCE_GIT_BRANCH="${MVN_PRJ_VERSION_MAJOR}.${MVN_PRJ_VERSION_MINOR}.x"
            
            if [ "${RC_REQUESTED}" == "true" ]; then
              export NEXT_QUALIFIER=$((${MVN_PRJ_VERSION_QUALIFIER}+1))
              export NEXT_PATCH_SNAPSHOT_VERSION="${MVN_PRJ_VERSION_MAJOR}.${MVN_PRJ_VERSION_MINOR}.${MVN_PRJ_VERSION_PATCH}-alpha.${NEXT_QUALIFIER}-SNAPSHOT"
            else
              export NEXT_PATCH_VERSION=$((${MVN_PRJ_VERSION_PATCH}+1))
              export NEXT_PATCH_SNAPSHOT_VERSION="${MVN_PRJ_VERSION_MAJOR}.${MVN_PRJ_VERSION_MINOR}.${NEXT_PATCH_VERSION}-SNAPSHOT"
            fi;
            
            export GIT_BRANCH_FILTER=$(git branch -a | grep "${MAINTENANCE_GIT_BRANCH}")

            if [ "x${GIT_BRANCH_FILTER}" == "x" ]; then
              echo "# ---- git Maintenance branch [${MAINTENANCE_GIT_BRANCH}] does not exist, creating it"
              git checkout -b ${MAINTENANCE_GIT_BRANCH}
              mvn -s /tmp/.gravitee.settings.xml -B versions:set -DnewVersion=${NEXT_PATCH_SNAPSHOT_VERSION} -DgenerateBackupPoms=false
              git add --update
              git commit -m 'chore: prepare next version'

              if [ "${DRY_RUN}" == "false" ]; then
                # --->>> NO IT IS NOT A DRY RUN
                echo "# --->>> NO IT IS NOT A DRY RUN : GIT PUSH"
                git push -u origin ${MAINTENANCE_GIT_BRANCH}
                git push --tags origin ${MAINTENANCE_GIT_BRANCH}
              else
                # --->>> IT IS A DRY RUN
                echo "# --->>> THIS IS A DRY RUN : SKIPPPING GIT PUSH"
              fi;

              git checkout ${CURRENT_GIT_BRANCH}
            else
              echo "git Maintenance branch [${MAINTENANCE_GIT_BRANCH}] does exist, no need to create it, also CURRENT_GIT_BRANCH=[${CURRENT_GIT_BRANCH}] and MAINTENANCE_GIT_BRANCH=[${MAINTENANCE_GIT_BRANCH}] are supposed to be equal."
            fi;
            
            export NEXT_MINOR_VERSION=$((${MVN_PRJ_VERSION_MINOR}+1))
            export NEXT_QUALIFIER_VERSION=$((${MVN_PRJ_VERSION_QUALIFIER}+1))
            export NEXT_PATCH_VERSION=$((${MVN_PRJ_VERSION_PATCH}+1))
            
            export NEXT_SNAPSHOT_VERSION="${MVN_PRJ_VERSION_MAJOR}.${NEXT_MINOR_VERSION}.${MVN_PRJ_VERSION_PATCH}-SNAPSHOT"
            export NEXT_SNAPSHOT_MAINT_VERSION="${MVN_PRJ_VERSION_MAJOR}.${MVN_PRJ_VERSION_MINOR}.${NEXT_PATCH_VERSION}-SNAPSHOT"
            export NEXT_SNAPSHOT_RC_VERSION="${MVN_PRJ_VERSION_MAJOR}.${MVN_PRJ_VERSION_MINOR}.${MVN_PRJ_VERSION_PATCH}-alpha.${NEXT_QUALIFIER_VERSION}-SNAPSHOT"
            
            if [ "${RC_REQUESTED}" == "true" -a "${MVN_PRJ_VERSION_PATCH}" == "0" -a "${MVN_PRJ_VERSION_QUALIFIER}" == "1" ]; then
            
              echo "# ---- [${MVN_PRJ_VERSION}] is not a maintenance release, so we increment MINOR VERSION from [${MVN_PRJ_VERSION_MINOR}] to [${NEXT_MINOR_VERSION}], and prepared next version will be [${NEXT_SNAPSHOT_VERSION}] "
              mvn -s /tmp/.gravitee.settings.xml -B versions:set -DnewVersion=${NEXT_SNAPSHOT_VERSION} -DgenerateBackupPoms=false
            
            elif [ "${RC_REQUESTED}" == "true" -a "${MVN_PRJ_VERSION_QUALIFIER}x" != "x" ]; then
            
              echo "# ---- [${MVN_PRJ_VERSION}] is a RC maintenance release, so we increment QUALIFIER VERSION from [${MVN_PRJ_VERSION_QUALIFIER}] to [${NEXT_QUALIFIER_VERSION}], and prepared next version will be [${NEXT_PATCH_SNAPSHOT_VERSION}] "
              echo "resetting version in [pom.xml] to [${NEXT_SNAPSHOT_RC_VERSION}]"
              mvn -s /tmp/.gravitee.settings.xml -B versions:set -DnewVersion=${NEXT_SNAPSHOT_RC_VERSION} -DgenerateBackupPoms=false
            
            else
            
              if [ "${MVN_PRJ_VERSION_QUALIFIER}x" != "x" ]; then
                echo "# ---- [${MVN_PRJ_VERSION}] is a GA release, so we do not increment MINOR VERSION to bump next maintenance release [${NEXT_SNAPSHOT_MAINT_VERSION}] "
                mvn -s /tmp/.gravitee.settings.xml -B versions:set -DnewVersion=${NEXT_SNAPSHOT_MAINT_VERSION} -DgenerateBackupPoms=false
              elif [ "${MVN_PRJ_VERSION_PATCH}" == "0" && "${MAINTENANCE_GIT_BRANCH}" != "${CURRENT_GIT_BRANCH}" ]; then
                echo "# ---- [${MVN_PRJ_VERSION}] is not a maintenance release, so we increment MINOR VERSION from [${MVN_PRJ_VERSION_MINOR}] to [${NEXT_MINOR_VERSION}], and prepared next version will be [${NEXT_SNAPSHOT_VERSION}] "
                mvn -s /tmp/.gravitee.settings.xml -B versions:set -DnewVersion=${NEXT_SNAPSHOT_VERSION} -DgenerateBackupPoms=false
              else
                echo "# ---- [${MVN_PRJ_VERSION}] is a maintenance release, so we increment PATCH VERSION from [${MVN_PRJ_VERSION_PATCH}] to [${NEXT_PATCH_VERSION}], and prepared next version will be [${NEXT_PATCH_SNAPSHOT_VERSION}] "
                echo "resetting version in [pom.xml] to [${NEXT_PATCH_SNAPSHOT_VERSION}]"
                mvn -s /tmp/.gravitee.settings.xml -B versions:set -DnewVersion=${NEXT_PATCH_SNAPSHOT_VERSION} -DgenerateBackupPoms=false
              fi;
            fi;
            
            git add --update
            git commit -m 'chore: prepare next version [skip ci]'

            if [ "${DRY_RUN}" == "false" ]; then
              echo "# --->>> NO IT IS NOT A DRY RUN"
              git push -u origin ${CURRENT_GIT_BRANCH}
              git push --tags origin ${CURRENT_GIT_BRANCH}
            else
              echo "# --->>> THIS IS A DRY RUN"
            fi;

      - notify-on-failure
      - notify-on-success
      - keeper/env-export:
          secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
          var-name: SLACK_ACCESS_TOKEN
      - when:
          condition:
            not: << pipeline.parameters.dry_run>>
          steps:
            - slack/notify:
                channel: C02NGT20S4W
                event: pass
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "🎆 AM - << pipeline.parameters.graviteeio_version >> released!"
                        }
                      }
                    ]
                  }

  publish_maven_packages_to_maven_central:
    description: Publish maven artifacts to maven central (Sonatype Nexus)
    parameters:
      dry_run:
        type: boolean
        default: true
        description: "Running in dry run mode means no docker push (Defaults to true)"
      graviteeio_version:
        type: string
        default: ''
        description: "Gravitee.io Release version number (semver) ?"
    executor:
      name: openjdk
      class: xlarge
      version: "11.0.16"
    environment:
      DRY_RUN: << parameters.dry_run >>
      GRAVITEEIO_VERSION: << parameters.graviteeio_version >>
    steps:
      - checkout
      - restore-maven-job-cache:
          jobName: releaseV2
      - attach_workspace:
          at: /tmp
      - prepare-gpg
      - run:
          name: Maven Test, Package, and Deploy to Nexus Staging
          command: |
            git checkout "${GRAVITEEIO_VERSION}"
            
            if [ "${DRY_RUN}" == "false" ]; then
              echo "# --->>> NO IT IS NOT A DRY RUN => deploy"
              mvn -s /tmp/.gravitee.settings.xml -B -U -P gravitee-release deploy -DskipTests=true
            else
              echo "# --->>> THIS IS A DRY RUN => install only"
              mvn -s /tmp/.gravitee.settings.xml -B -U -P gravitee-release install -DskipTests=true
            fi;
      - notify-on-failure
      - notify-on-success

  build_n_push_am_ce_job:
    description: This Orb Job performs the docker build and publish for the am_ce dockerfile
    parameters:
      gio_product:
        type: enum
        enum: [am_v3, none]
        default: am_v3
      dry_run:
        type: boolean
        default: true
        description: "Running in dry run mode means no docker push (Defaults to true)"
      tag_latest:
        type: boolean
        default: false
        description: "Is this latest version of the Product ?"
      tag_latest_support:
        type: boolean
        default: true
        description: "Is this a latest support version of the Product ? (if so minor version tagging docker images). True by default."
      graviteeio_version:
        type: string
        default: ''
        description: "Gravitee.io Release version number (semver) ?"
    executor:
      name: ubuntu
      class: large
      with_docker_layer_caching: true
    environment:
      DRY_RUN: << parameters.dry_run >>
      TAG_LATEST: << parameters.tag_latest >>
      TAG_LATEST_SUPPORT: << parameters.tag_latest_support >>
      GRAVITEEIO_VERSION: << parameters.graviteeio_version >>
      GIO_PRODUCT: << parameters.gio_product >>
    steps:
      - checkout
      - git_config
      - keeper/env-export:
          secret-url: keeper://cooU9UoXIk8Kj0hsP2rkBw/field/login
          var-name: DOCKERHUB_BOT_USER_NAME
      - keeper/env-export:
          secret-url: keeper://cooU9UoXIk8Kj0hsP2rkBw/field/password
          var-name: DOCKERHUB_BOT_USER_TOKEN
      - create_docker_context
      - run:
          name: "Build Docker Images: Gravitee AM Community Edition"
          command: |
            export RELEASE_VERSION=$GRAVITEEIO_VERSION
            export RELEASE_VERSION_MAJOR=$(echo "$GRAVITEEIO_VERSION" | awk -F '.' '{print $1}')
            export RELEASE_VERSION_MINOR=$(echo "$GRAVITEEIO_VERSION" | awk -F '.' '{print $2}')
            export RELEASE_VERSION_PATCH=$(echo "$GRAVITEEIO_VERSION" | awk -F '.' '{print $3}')
            
            git checkout "${GRAVITEEIO_VERSION}"
            
            tag_gateway="-t graviteeio/am-gateway:${RELEASE_VERSION} -t graviteeio/am-gateway:${RELEASE_VERSION}-ee"
            tag_management_api="-t graviteeio/am-management-api:${RELEASE_VERSION} -t graviteeio/am-management-api:${RELEASE_VERSION}-ee"
            tag_management_ui="-t graviteeio/am-management-ui:${RELEASE_VERSION} -t graviteeio/am-management-ui:${RELEASE_VERSION}-ee"
            
            if [ "$TAG_LATEST_SUPPORT" == "true" ]; then
              echo "Gravitee Containers :  Docker tags, Releasing Docker images as latest support"
            
              tag_gateway="${tag_gateway} -t graviteeio/am-gateway:${RELEASE_VERSION_MAJOR}.${RELEASE_VERSION_MINOR} -t graviteeio/am-gateway:${RELEASE_VERSION_MAJOR}.${RELEASE_VERSION_MINOR}-ee" 
              tag_management_api="${tag_management_api} -t graviteeio/am-management-api:${RELEASE_VERSION_MAJOR}.${RELEASE_VERSION_MINOR} -t graviteeio/am-management-api:${RELEASE_VERSION_MAJOR}.${RELEASE_VERSION_MINOR}-ee" 
              tag_management_ui="${tag_management_ui} -t graviteeio/am-management-ui:${RELEASE_VERSION_MAJOR}.${RELEASE_VERSION_MINOR} -t graviteeio/am-management-ui:${RELEASE_VERSION_MAJOR}.${RELEASE_VERSION_MINOR}-ee" 
            
            fi;
            
            if [ "${TAG_LATEST}" == "true" ]; then
              echo "Gravitee Containers :  Docker tags, Releasing Docker images as latest"
            
              tag_gateway="${tag_gateway} -t graviteeio/am-gateway:${RELEASE_VERSION_MAJOR} -t graviteeio/am-gateway:${RELEASE_VERSION_MAJOR}-ee -t graviteeio/am-gateway:latest" 
              tag_management_api="${tag_management_api} -t graviteeio/am-management-api:${RELEASE_VERSION_MAJOR} -t graviteeio/am-management-api:${RELEASE_VERSION_MAJOR}-ee -t graviteeio/am-management-api:latest" 
              tag_management_ui="${tag_management_ui} -t graviteeio/am-management-ui:${RELEASE_VERSION_MAJOR} -t graviteeio/am-management-ui:${RELEASE_VERSION_MAJOR}-ee -t graviteeio/am-management-ui:latest"
            
            fi;
            
            docker login --username="${DOCKERHUB_BOT_USER_NAME}" -p="${DOCKERHUB_BOT_USER_TOKEN}"
            
            if [ "${DRY_RUN}" == "true" ]; then
              echo "# --->>> THIS IS A DRY RUN : Build images without push"
            
              docker buildx build --platform=linux/arm64,linux/amd64 -f docker/gateway/Dockerfile --build-arg GRAVITEEAM_VERSION=${RELEASE_VERSION} ${tag_gateway} docker/gateway/
              docker buildx build --platform=linux/arm64,linux/amd64 -f docker/management-api/Dockerfile --build-arg GRAVITEEAM_VERSION=${RELEASE_VERSION} ${tag_management_api} docker/management-api/
              docker buildx build --platform=linux/arm64,linux/amd64 -f docker/management-ui/Dockerfile --build-arg GRAVITEEAM_VERSION=${RELEASE_VERSION} ${tag_management_ui} docker/management-ui/
            
            else
            
              docker buildx build --push --platform=linux/arm64,linux/amd64 -f docker/gateway/Dockerfile --build-arg GRAVITEEAM_VERSION=${RELEASE_VERSION} ${tag_gateway} docker/gateway/
              docker buildx build --push --platform=linux/arm64,linux/amd64 -f docker/management-api/Dockerfile --build-arg GRAVITEEAM_VERSION=${RELEASE_VERSION} ${tag_management_api} docker/management-api/
              docker buildx build --push --platform=linux/arm64,linux/amd64 -f docker/management-ui/Dockerfile --build-arg GRAVITEEAM_VERSION=${RELEASE_VERSION} ${tag_management_ui} docker/management-ui/
            
            fi;
  publish_am_rpms:
    description: Runs the commands to build n publish RPM Packages for Gravitee.io AM
    executor: ubuntu
    parameters:
      dry_run:
        type: boolean
        default: true
        description: "Run in dry run mode?"
      rc_requested:
        type: boolean
        default: false
        description: "Do we have to release a RC"
      graviteeio_version:
        type: string
        default: ""
        description: "The Gravitee.io release version number of Gravitee.io APIM, for which to build and publish all zip bundles"
    steps:
      - checkout
      - publish_rpms:
          graviteeio_version: << parameters.graviteeio_version >>

  release_notes_am:
    executor:
      name: node-lts
      class: medium
    environment:
      VERSION: << pipeline.parameters.graviteeio_version >>
      DRY_RUN: << pipeline.parameters.dry_run >>
    steps:
      - checkout
      - keeper/env-export:
          secret-url: keeper://IZd-yvsMopfQEa_0j1SDvg/field/login
          var-name: GIT_USER_NAME
      - keeper/env-export:
          secret-url: keeper://IZd-yvsMopfQEa_0j1SDvg/custom_field/email
          var-name: GIT_USER_EMAIL
      - keeper/env-export:
          secret-url: keeper://TIlcGPFq4rN5GvgnZb9hng/field/password
          var-name: GITHUB_TOKEN
      - keeper/env-export:
          secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
          var-name: SLACK_ACCESS_TOKEN
      - keeper/env-export:
          secret-url: keeper://hfnQD5TEfxzwRXUKhJhM-A/field/password
          var-name: JIRA_TOKEN
      - add_ssh_keys:
          fingerprints:
            - "ac:88:23:8f:c6:0f:7d:f0:fc:df:73:20:34:56:02:6c"
      - run:
          name: Git config
          command: |
            git config --global user.name "${GIT_USER_NAME}"
            git config --global user.email "${GIT_USER_EMAIL}"
      - gh/setup
      - run:
          name: Install dependencies
          command: npm ci
          working_directory: "./release"
      - run:
          name: "Open a PR to create release notes into docs repository"
          working_directory: "./release"
          command: |
            if [[ ${DRY_RUN} == "true" ]]; then
              npm run zx -- ci-steps/doc-new-release-notes.mjs --version=${VERSION} --dry-run
            else
              npm run zx -- ci-steps/doc-new-release-notes.mjs --version=${VERSION}
            fi
      - when:
          condition:
            not: << pipeline.parameters.dry_run >>
          steps:
            - run:
                name: Get RELEASE_NOTES_PR_URL
                command: |
                  echo "export RELEASE_NOTES_PR_URL=$(cat /tmp/releaseNotesPrUrl.txt)" >> $BASH_ENV
            - slack/notify:
                channel: C02NGT20S4W
                event: pass
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": ":memo: Changelog for AM << pipeline.parameters.graviteeio_version >> has been generated and can be reviewed <${RELEASE_NOTES_PR_URL}|here>"
                        }
                      }
                    ]
                  }

  add-docker-images-in-snyk:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - keeper/env-export:
          secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_am_org_api_token
          var-name: SNYK_API_TOKEN
      - keeper/env-export:
          secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_am_dockerhub_integration_id
          var-name: SNYK_INTEGRATION_ID
      - add-docker-image-in-snyk:
          docker-image-name: graviteeio/am-gateway
          version: << pipeline.parameters.graviteeio_version >>
      - add-docker-image-in-snyk:
          docker-image-name: graviteeio/am-management-api
          version: << pipeline.parameters.graviteeio_version >>
      - add-docker-image-in-snyk:
          docker-image-name: graviteeio/am-management-ui
          version: << pipeline.parameters.graviteeio_version >>

  job-snyk-am-charts:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - checkout
      - keeper/env-export:
          secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_am_org_api_token
          var-name: SNYK_TOKEN
      - helm/install-helm-client
      - snyk/install
      - run:
          name: "build the Charts output and scan"
          working_directory: "./helm"
          command: |
            helm dependency update
            helm template . --output-dir ./output
            snyk iac test ./output --report --target-reference="${CIRCLE_BRANCH}" --project-tags=version=${CIRCLE_BRANCH} --severity-threshold=high

  job-test-am-charts:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - checkout
      - helm/install-helm-client:
          version: v3.7.1
      - run:
          name: install helm-unittest plugin
          command: helm plugin install https://github.com/quintush/helm-unittest --version 0.2.11
      - cmd-helm-lint:
          folder: helm/
      - cmd-helm-tests:
          folder: helm/
          files: tests/**/*.yaml
          output-file: am-result.xml
      - store_test_results:
          path: am-result.xml

  job-release_helm:
    executor:
      name: node-lts
      class: medium
    environment:
      VERSION: << pipeline.parameters.graviteeio_version >>
    steps:
      - checkout
      - git_config
      - helm/install-helm-client
      - run:
          name: Update Chart and App versions
          command: |
            sed -i helm/Chart.yaml \
              -e "0,/^version:.*/s/^version:.*/version: ${VERSION}/" \
              -e "0,/^appVersion:.*/s/^appVersion:.*/appVersion: ${VERSION}/"
      - run:
          name: "build the Charts"
          working_directory: "./helm"
          command: |
            helm dependency update
            helm package -d charts .
      - run:
          name: Install dependencies
          command: npm install
          working_directory: "./release"
      - when:
          condition:
            not: << pipeline.parameters.dry_run>>
          steps:
            - run:
                name: "Publish helm chart release into helm-charts repository"
                working_directory: "./release"
                command: npm run zx -- ci-steps/release-helm.mjs --version=${VERSION}
      - when:
          condition: << pipeline.parameters.dry_run>>
          steps:
            - keeper/env-export:
                secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/login
                var-name: ACR_USER_NAME
            - keeper/env-export:
                secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/password
                var-name: ACR_PASSWORD
            - run:
                name: "Publish helm chart release in azure repository DRY-RUN mode"
                working_directory: "./helm"
                command: |
                  helm registry login graviteeio.azurecr.io --username $ACR_USER_NAME --password $ACR_PASSWORD
                  helm push charts/am-${VERSION}.tgz oci://graviteeio.azurecr.io/helm/

workflows:
  version: 2.1
  # Workflow triggered by CircleCI API HTTP call or "Trigger Pipeline" button in the CircleCI website
  release-version:
    when:
      and:
        - equal: [ release-version, << pipeline.parameters.gio_action >> ]
    jobs:
      - setup:
          name: setup
          context: cicd-orchestrator
      - release:
          name: release_dist <<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
          context: cicd-orchestrator
          dry_run: << pipeline.parameters.dry_run >>
          rc_requested: << pipeline.parameters.rc_requested >>
          requires:
            - setup
      - build_n_push_am_ce_job:
          name: publish docker images
          context: cicd-orchestrator
          graviteeio_version: << pipeline.parameters.graviteeio_version >>
          dry_run: << pipeline.parameters.dry_run >>
          tag_latest: << pipeline.parameters.tag_latest >>
          tag_latest_support: << pipeline.parameters.tag_latest_support >>
          requires:
            - release_dist <<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
      - add-docker-images-in-snyk:
          name: add docker images to Snyk
          context: cicd-orchestrator
          requires:
            - publish docker images
      - publish_am_rpms:
          name: publish RPM packages
          context: cicd-orchestrator
          graviteeio_version: << pipeline.parameters.graviteeio_version >>
          requires:
            - release_dist <<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
      - job-test-am-charts:
          name: helm tests
          requires:
            - release_dist <<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
      - job-release_helm:
          name: publish helm charts
          context: cicd-orchestrator
          requires:
            - helm tests
      - release_notes_am:
          name: release notes
          context: cicd-orchestrator
          requires:
            - release_dist <<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
      - publish_maven_packages_to_maven_central:
          name: publish maven packages
          context: cicd-orchestrator
          dry_run: << pipeline.parameters.dry_run >>
          graviteeio_version: << pipeline.parameters.graviteeio_version >>
          requires:
            - release_dist <<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>

  release-alpha-version:
    when:
      and:
        - equal: [ release-alpha-version, << pipeline.parameters.gio_action >> ]
    jobs:
      - setup:
          name: setup
          context: cicd-orchestrator
      - release:
          name: release_dist <<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
          context: cicd-orchestrator
          dry_run: << pipeline.parameters.dry_run >>
          rc_requested: << pipeline.parameters.rc_requested >>
          requires:
            - setup
      - build_n_push_am_ce_job:
          name: publish docker images
          context: cicd-orchestrator
          graviteeio_version: << pipeline.parameters.graviteeio_version >>
          dry_run: << pipeline.parameters.dry_run >>
          tag_latest: false
          tag_latest_support: false
          requires:
            - release_dist <<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
      - add-docker-images-in-snyk:
          name: add docker images to Snyk
          context: cicd-orchestrator
          requires:
            - publish docker images
      - job-test-am-charts:
          name: helm tests
          requires:
            - release_dist <<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
      - job-release_helm:
          name: publish helm charts
          context: cicd-orchestrator
          requires:
            - helm tests
      - publish_maven_packages_to_maven_central:
          name: publish maven packages
          context: cicd-orchestrator
          dry_run: << pipeline.parameters.dry_run >>
          graviteeio_version: << pipeline.parameters.graviteeio_version >>
          requires:
            - release_dist <<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>

  # -- typically this workflow is executed on pull requests events for Community Edition Gravitee Repositories
  pull_requests:
    when:
      and:
        - equal: [ pull_requests, << pipeline.parameters.gio_action >> ]
    jobs:
      - setup:
          context: cicd-orchestrator
      - pull_requests_ce:
          name: process_pull_request
          requires:
            - setup
          filters:
            branches:
              ignore:
                - master
                - /^[0-999].[0-999].x/
      - job-test-am-charts:
          name: Test Helm chart
          requires:
            - setup
      - job-snyk-am-charts:
          name: scan snyk Helm chart
          context: cicd-orchestrator
          requires:
            - Test Helm chart
          filters:
            branches:
              only:
                - master
                - /^\d+\.\d+\.x$/
      - run_postman_tests_mongo:
          context: cicd-orchestrator
          requires:
            - process_pull_request
          matrix:
            parameters:
              mongo_version: ["4.4", "6.0"]
      - run_postman_tests_psql:
          context: cicd-orchestrator
          requires:
            - process_pull_request
          matrix:
            parameters:
              psql_version: ["11.18-bullseye", "15.1"]
      - run_jest_tests_mongo:
          context: cicd-orchestrator
          requires:
            - process_pull_request
          matrix:
            parameters:
              mongo_version: ["4.4", "6.0"]
      - run_jest_tests_psql:
          context: cicd-orchestrator
          requires:
            - process_pull_request
          matrix:
            parameters:
              psql_version: ["11.18-bullseye", "15.1"]

  testcontainer_tests:
    when: << pipeline.parameters.run-container-test >>
    jobs:
      - setup:
          context:
            - cicd-orchestrator
          filters:
            branches:
              ignore:
                - master
                - /^(\d|[1-9]\d*)\.(\d|[1-9]\d*)\.x$/
      - run_testcontainer_tests:
          context: cicd-orchestrator
          requires:
            - setup
          filters:
            branches:
              ignore:
                - master
                - /^(\d|[1-9]\d*)\.(\d|[1-9]\d*)\.x$/

  build_branch:
    when:
      and:
        - equal: [ pull_requests, << pipeline.parameters.gio_action >> ]
    jobs:
      - setup:
          context:
            - cicd-orchestrator
          filters:
            branches:
              only:
                - master
                - /^(\d|[1-9]\d*)\.(\d|[1-9]\d*)\.x$/
      - build:
          requires:
            - setup
          filters:
            branches:
              only:
                - master
                - /^(\d|[1-9]\d*)\.(\d|[1-9]\d*)\.x$/

      - publish-images-azure-registry:
          context: cicd-orchestrator
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - /^(\d|[1-9]\d*)\.(\d|[1-9]\d*)\.x$/

      - deploy-on-aks:
          context: cicd-orchestrator
          pre-steps:
            - keeper/env-export:
                secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/login
                var-name: AZURE_APPLICATION_ID
            - keeper/env-export:
                secret-url: keeper://UryantA7MvZe8fkWwcUt8g/custom_field/tenant
                var-name: AZURE_TENANT
            - keeper/env-export:
                secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/password
                var-name: AZURE_APPLICATION_SECRET
          requires:
            - publish-images-azure-registry
          filters:
            branches:
              only:
                - master
                - /^(\d|[1-9]\d*)\.(\d|[1-9]\d*)\.x$/

  release:
    when:
      and:
        - equal: [ release, << pipeline.parameters.gio_action >> ]
    jobs:
      - setup:
          context: cicd-orchestrator
      - release:
          context: cicd-orchestrator
          name: release_dist <<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
          requires:
            - setup
          dry_run: << pipeline.parameters.dry_run >>
          rc_requested: << pipeline.parameters.rc_requested >>

  publish_maven_central:
    when:
      equal: [ publish_maven_central, << pipeline.parameters.gio_action >> ]
    jobs:
      - setup:
          context: cicd-orchestrator
      - publish_maven_packages_to_maven_central:
          context: cicd-orchestrator
          name: publish maven packages to nexus
          requires:
            - setup
          dry_run: << pipeline.parameters.dry_run >>
          graviteeio_version: << pipeline.parameters.graviteeio_version >>

  publish_rpms:
    when:
      equal: [ publish_rpms, << pipeline.parameters.gio_action >> ]
    jobs:
      - publish_am_rpms:
          context: cicd-orchestrator
          graviteeio_version: << pipeline.parameters.graviteeio_version >>

  publish_docker_images:
    when:
      equal: [ publish_docker_images, << pipeline.parameters.gio_action >> ]
    jobs:
      - build_n_push_am_ce_job:
          context: cicd-orchestrator
          graviteeio_version: << pipeline.parameters.graviteeio_version >>
          dry_run: << pipeline.parameters.dry_run >>
          tag_latest: << pipeline.parameters.tag_latest >>
          tag_latest_support: << pipeline.parameters.tag_latest_support >>
      - add-docker-images-in-snyk:
          context: cicd-orchestrator
          requires:
            - build_n_push_am_ce_job

  daily-purge-azure-registry:
    triggers:
      - schedule:
          cron: "0 1 * * 1"
          filters:
            branches:
              only:
                - master
    jobs:
      - purge-azure-registry:
          context: cicd-orchestrator
          pre-steps:
            - keeper/env-export:
                secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/login
                var-name: AZURE_APPLICATION_ID
            - keeper/env-export:
                secret-url: keeper://UryantA7MvZe8fkWwcUt8g/custom_field/tenant
                var-name: AZURE_TENANT
            - keeper/env-export:
                secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/password
                var-name: AZURE_APPLICATION_SECRET

  sonarcloud_analysis_back:
    when:
      and:
        - equal: [ pull_requests, << pipeline.parameters.gio_action >> ]
    jobs:
      - setup:
          context:
            - cicd-orchestrator
      - coverage_build:
          requires:
            - setup
      - run_sonarcloud_analysis:
          context:
            - cicd-orchestrator
          requires:
            - coverage_build

  sonarcloud_analysis_front:
    when:
      and:
        - equal: [ pull_requests, << pipeline.parameters.gio_action >> ]
    jobs:
      - setup:
          context:
            - cicd-orchestrator
      - frontend_version_build:
          requires:
            - setup
      - run_sonarcloud_analysis:
          name: Sonar - << matrix.working_directory >>
          matrix:
            parameters:
              working_directory:
                - "gravitee-am-ui"
          context:
            - cicd-orchestrator
          requires:
            - frontend_version_build

  release_notes_am:
    when:
      equal: [ release_notes_am, << pipeline.parameters.gio_action >> ]
    jobs:
      - release_notes_am:
          context: cicd-orchestrator

  release_helm:
    when:
      equal: [ release_helm, << pipeline.parameters.gio_action >> ]
    jobs:
      - job-test-am-charts:
          name: AM - Lint & Test
      - job-release_helm:
          context: cicd-orchestrator
          requires:
            - AM - Lint & Test

  publish-images-azure-registry:
    when:
      equal: [ publish-images-azure-registry, << pipeline.parameters.gio_action >> ]
    jobs:
      - setup:
          context:
            - cicd-orchestrator
      - build:
          requires:
            - setup
      - publish-images-azure-registry:
          context: cicd-orchestrator
          requires:
            - build
